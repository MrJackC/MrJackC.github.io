import{_ as a,c as n,a as i,o as l}from"./app-mWs04Xnh.js";const B={};function p(r,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="scala总结终结篇" tabindex="-1"><a class="header-anchor" href="#scala总结终结篇"><span>Scala总结终结篇</span></a></h1><hr><h2 id="接scala总结下篇" tabindex="-1"><a class="header-anchor" href="#接scala总结下篇"><span>接Scala总结下篇</span></a></h2><h2 id="八、集合" tabindex="-1"><a class="header-anchor" href="#八、集合"><span>八、集合</span></a></h2><h3 id="_8-13-自定义排序-sortwith" tabindex="-1"><a class="header-anchor" href="#_8-13-自定义排序-sortwith"><span>8.13 自定义排序 SortWith</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --自定义排序：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.方法：sortWith(形参)，返回值为经过自定义排序以后的集合；</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.形参：是一个函数，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           函数形参为：集合中的两个元素，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               参数1：第一个元素left；</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               参数2：第二个元素right；</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           函数返回值为：boolean类型，true和false</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.排序规则：       </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         a、如果</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;left &gt; right&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,则是左边的数据比右边的大，则是</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;降序&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         b、如果</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;left &lt; right&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,则是左边的数据比右边的小，则是</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;升序&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.函数返回值：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       	a、当满足你的排序要求时，你就返回true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      	b、当不满足你的排序要求时，你就返回false</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.比较方式：在scala中，默认是指两两进行比较</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.默认排序规则：sortWith()默认是升序</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//根据每个元组的第二个元素的值进行比较，此时为降序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.sortWith((left, right) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      left._2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> right._2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((c,10), (a,5), (a,1))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	 /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      如下代码的逻辑为：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      先比较元组中的第一个元素，按照字典的顺序进行降序排序；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      如果第一个元素相等，则按照第二个元素的升序排序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.sortWith((left, right) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (left._1 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> right._1) {</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (left._1 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> right._1) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        left._2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> right._2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        false</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result1)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((c,10), (a,1), (a,5))</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-14-集合的一些运算" tabindex="-1"><a class="header-anchor" href="#_8-14-集合的一些运算"><span>8.14 集合的一些运算</span></a></h3><h4 id="_8-14-1-并集-union" tabindex="-1"><a class="header-anchor" href="#_8-14-1-并集-union"><span>8.14.1 并集 union</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 并集，合集:求两个集合中所有的元素，可能会有重复的元素,不适用于Map和Set集合</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：</span><span style="color:#C678DD;--shiki-dark:#C678DD;">union</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list1.union(list2)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((a,1), (b,2), (b,2), (c,3))</span></span></code></pre></div><h4 id="_8-14-2-交集-intersect" tabindex="-1"><a class="header-anchor" href="#_8-14-2-交集-intersect"><span>8.14.2 交集 intersect</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 交集：集合1和集合2的共同数据</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：intersect()</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list1.intersect(list2)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((b,2))</span></span></code></pre></div><h4 id="_8-14-3-差集-diff" tabindex="-1"><a class="header-anchor" href="#_8-14-3-差集-diff"><span>8.14.3 差集 diff</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 差集：集合1去除和集合2相同数据之后的数据集</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：diff()</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list1.diff(list2)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((a,1))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list2.diff(list1)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List((c,3))</span></span></code></pre></div><h4 id="_8-14-4-拉链-zip" tabindex="-1"><a class="header-anchor" href="#_8-14-4-拉链-zip"><span>8.14.4 拉链 zip</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 关联，拉链：将集合1和集合2的数据按照索引相同的数据关联在一起</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：zip(),返回一个map集合</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 注意：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            a、返回值的集合的数据取决于个数少的集合</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            b、也可以自己关联自己</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list1.zip(list2)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List(((a,1),(b,2)), ((b,2),(c,3)))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list1.zip(list1)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List(((a,1),(a,1)), ((b,2),(b,2)))</span></span></code></pre></div><h4 id="_8-14-5-数据关联索引" tabindex="-1"><a class="header-anchor" href="#_8-14-5-数据关联索引"><span>8.14.5 数据关联索引</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 数据和数据的索引进行关联,返回一个map集合</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：zipWithIndex</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   println(list1.zipWithIndex)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List(((a,1),0), ((b,2),1))</span></span></code></pre></div><h4 id="_8-14-6-滑动-sliding" tabindex="-1"><a class="header-anchor" href="#_8-14-6-滑动-sliding"><span>8.14.6 滑动 sliding</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 滑动：将数据的一部分作为整体来使用。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                数据指定的范围进行滑动，可以将这个范围理解为滑动的窗口</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：sliding(形参)，返回一个迭代器，迭代器中的元素是一个一个的集合</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 形参：有两个参数：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            	参数1：</span><span style="color:#C678DD;--shiki-dark:#C678DD;">size</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：窗口数据的长度</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           		参数2：step：窗口滑动的步长，幅度 ，可选参数，默认步长为1</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> slidlist</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> iterator</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Iterator</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> slidlist.sliding(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    iterator.foreach(println)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(1, 2, 3)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(2, 3, 5)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(3, 5, 6)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(5, 6, 4)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(6, 4, 1)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> iterator1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Iterator</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> slidlist.sliding(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    iterator1.foreach(println)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(1, 2, 3)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(5, 6, 4)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //    List(1)</span></span></code></pre></div><h3 id="_8-15-reduce" tabindex="-1"><a class="header-anchor" href="#_8-15-reduce"><span>8.15 reduce</span></a></h3><h4 id="_8-15-1-reduce" tabindex="-1"><a class="header-anchor" href="#_8-15-1-reduce"><span>8.15.1 reduce</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    集合的自定义计算：简化，规约</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：reduce(op:(A1,A1)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">A1)，递归形参中的函数，返回一个计算结果</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 形参：是一个函数，函数的形参有两个参数，为集合中的两个元素，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              要求这两个元素的数据类型一致，返回值和形参的数据类型保持一致.</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 注意：当集合中的数据类型不一致，进行reduce计算时，会报类型匹配错误：</span><span style="color:#C678DD;--shiki-dark:#C678DD;">type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mismatch</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> 	val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.reduce(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (((1 + 2) + 3) + 4) =10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.reduce(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result1) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (((1 - 2) - 3) - 4) = -8</span></span></code></pre></div><h4 id="_8-15-2-reduceleft" tabindex="-1"><a class="header-anchor" href="#_8-15-2-reduceleft"><span>8.15.2 reduceLeft</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 说明：reduce()方法的底层就是调用了reduceLeft()方法</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：reduceLeft(op:(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">B</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">B</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)，同样是通过递归调用参数的函数体进行计算，然后返回一个计算结果</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 形参：是一个函数，函数有两个参数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数1：</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">B类型</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，集合中从左边开始的第一个元素的数据类型，与第二个参数类型是相关的，集合第一个元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数2：集合中数据类型,集合中的一个一个的元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                返回结果：函数的返回值类型与参数1的数据类型保持一致</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 说明：何为参数1的数据类型与参数2的数据类型相关？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              a、就是参数1和参数2在函数体中经过一系列计算以后，返回值的类型需要和参数1一致。</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> l</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list1.reduceLeft(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(l) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ((((5 - 10) - 0) - 2) - 3) = -10</span></span></code></pre></div><h4 id="_8-15-3-reduceright" tabindex="-1"><a class="header-anchor" href="#_8-15-3-reduceright"><span>8.15.3 reduceRight</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：reduceRight(op:(B,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">B)：同样是通过递归调用参数的函数体进行计算，然后返回一个计算结果</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 形参：是一个函数，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数1：B类型，集合中从右边开始的第一个元素的数据类型，与第二个参数类型是相关的。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数2：集合中数据类型,集合中的一个一个的元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                返回结果：函数的返回值类型与参数1的数据类型保持一致</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 说明：底层转化为：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">reversed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">reduceLeft</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[B]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((x, y) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> op(y, x))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               转化过程：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                   假如：集合：(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)，反转以后：</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">                   =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)，反转参数1和参数2，本应该是5,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，反转以后，就变成4，</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                   第一轮：</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">                   =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 参数1: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                      参数2: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                   第二轮：</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">                   =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 参数1：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                      参数2：第一轮计算结果</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                   第三轮：</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">                   =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 参数1: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                      参数2：第二轮计算结果</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list1.reduceRight(_</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">_)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result3) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (5 - (10 - (0 - (2 - 3)))) = -4</span></span></code></pre></div><h4 id="_8-15-4-总结reduce、reduceleft、reduceright" tabindex="-1"><a class="header-anchor" href="#_8-15-4-总结reduce、reduceleft、reduceright"><span>8.15.4 总结reduce、reduceLeft、reduceRight</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;总结&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：(reduce、reduceLeft),reduceRight计算方式: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot; 加括号&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     a、left： 从左边加括号</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     b、right：从右边加括号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    举例：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    val list </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> List(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">reduceLeft</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_ - _ )</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">reduceRight</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_ - _ )</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    计算过程：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    left : ((((</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> - </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ) - </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ) - </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ) - </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> )   </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">15</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    right: (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> - (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - ( </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - ( </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))))  </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">形参（均是一个函数，函数的形参如下）</th><th style="text-align:center;">关系</th></tr></thead><tbody><tr><td style="text-align:center;">reduce (op:(A1,A1)=&gt;A1 )</td><td style="text-align:left;">参数1、参数2、返回值类型三者保持一致，参数2为集合的数据类型</td><td style="text-align:center;">底层调用了reduceLeft()</td></tr><tr><td style="text-align:center;">reduceLeft (op:(B,Int)=&gt;B)</td><td style="text-align:left;">参数1与参数2的数据类型相关，返回值类型与参数1类型保持一致，参数2为集合的数据类型</td><td style="text-align:center;">与reduce()方唯一不同的函数形参的数据类型和返回值类型</td></tr><tr><td style="text-align:center;">reduceRight（op:(B,Int)=&gt;B）</td><td style="text-align:left;">参数1与参数2的数据类型相关，返回值类型与参数1类型保持一致，参数2为集合的数据类型</td><td style="text-align:center;">reversed.reduceLeft [B] ((x, y) =&gt; op(y, x)) ，在reduceLeft()的基础上，先将集合数据反转，然后将函数参数的顺序进行调换</td></tr></tbody></table><blockquote><p>关注方法的参数的数据类型。</p></blockquote><p>![image-20200531210601255](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200531210601.png)</p><p>![image-20200531211218085](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200531211218.png)</p><h3 id="_8-16-折叠-fold" tabindex="-1"><a class="header-anchor" href="#_8-16-折叠-fold"><span>8.16 折叠 fold</span></a></h3><ul><li>fold</li></ul><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 折叠：将集合之外的数据和集合内部的数据进行聚合操作，聚合数据的方式是两两操作</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 方法：fold(z:A1)(op:(A1：A1) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">A1),返回值类型与第一个参数列表的数据类型保持一致。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数列表：两个参数列表，体现了函数的柯里化</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数列表1：z:A1 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> zero:A1，表示数据处理的初始值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数列表2：op:(A1：A1) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">A1,表示聚合函数的逻辑，与reduce()方法一样</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                参数列表中的三个参数类型需保持一致</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              a、fold进行数据处理时，集合外的数据与集合内部的数据类型一般保持一致，也可以不一致。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              b、在spark和scala源码中的z/zero均是表示初始值。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              c、从源码的角度讲，fold方法的底层其实就是foldLeft</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list.fold(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _))</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//等价于(((((2 - 1) - 2) - 3) - 4)  - 5) = -13</span></span></code></pre></div><ul><li>foldLeft、foldRight</li></ul><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 折叠和reduce()方法一样，也是有foldLeft()和foldRight()方法，底层实现逻辑也是完全一样。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 注意：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          a、第一个形参列表的数据作为第一个数据进行运算。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          b、foldLeft((z:B)(op:(B,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">B)),形参列表1的数据类型需要和形参列表2中的函数第一个参数数据类型保持一致。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          c、fold,foldLeft,foldRight方法的返回值类型为初始值的类型</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     println(list.foldRight(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 计算过程:(1 - (2 - (3 - (4 - (5 - 10))))) = -7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        println(list.foldLeft(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)(_ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //  计算过程:(((((10 - 1) - 2) - 3) - 4) - 5) = -5</span></span></code></pre></div><ul><li>应用，合并集合</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // TODO Scala - 集合 - 合并集合</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Map( a-&gt;1, b-&gt;2, c-&gt;3 )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Map( a-&gt;4, d-&gt;5, c-&gt;6 )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // =&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Map( a-&gt;5, b-&gt;2, d-&gt;5, c-&gt;9 )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;d&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //t 为集合map1中一个一个元素，map为每一次计算的结果，第一次递归时，是将map2集合赋值为map</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map1.foldLeft(map2)((map, t) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> t._1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> v</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> t._2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map.getOrElse(k, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      map.put(k, v </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> num)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      map</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-17-scan" tabindex="-1"><a class="header-anchor" href="#_8-17-scan"><span>8.17 scan</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  scan和fold的方法逻辑是一样的，唯一区别就是fold返回最后的计算结果，scan会把每一次递归的计算结果都会保留下来</span></span></code></pre></div><h3 id="_8-18-队列" tabindex="-1"><a class="header-anchor" href="#_8-18-队列"><span>8.18 队列</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：普通队列</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Dueue：双端队列，kafka就是双端队列，保证数据发送到kafka的topic中是有序的</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. BlockQueue:阻塞式队列</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建队列</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 添加数据</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    queue.enqueue(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取队列中的数据,按照队列中的数据顺序进行获取数据</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> str1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> queue.dequeue()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> str2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> queue.dequeue()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(str1)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//scala</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(str2) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//java</span></span></code></pre></div><h3 id="_8-19-并行" tabindex="-1"><a class="header-anchor" href="#_8-19-并行"><span>8.19 并行</span></a></h3><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    list.par.foreach((i) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      println(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.currentThread().getName)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //scala-execution-context-global-14</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //scala-execution-context-global-13</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //scala-execution-context-global-12</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //scala-execution-context-global-15</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //scala-execution-context-global-16</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    list.foreach((i) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      println(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.currentThread().getName)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //main</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //main</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //main</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //main</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //main</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-20-集合练习" tabindex="-1"><a class="header-anchor" href="#_8-20-集合练习"><span>8.20 集合练习</span></a></h3><p>需求：</p><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">对每个省份里不同商品的点击率排行</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dataList</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;帽子&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;帽子&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;帽子&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;电脑&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;鞋&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;电脑&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河南&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;电脑&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;衣服&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;河北&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;帽子&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    )</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)]] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> dataList.map(t </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (t._2, t._3)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//去除用户名信息，结构转化，使用map，(&quot;河北，鞋子&quot;)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .groupBy(_._1)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//按照省份进行分组，(&quot;河北&quot;，(&quot;河北，鞋子&quot;))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .map(t </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          t._2.map(_._2) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将(&quot;河北，鞋子&quot;) -&gt; (&quot;鞋子&quot;)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            .groupBy(pro </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> pro)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            .map(tuple </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              (tuple._1, tuple._2.length)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            .toList</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            .sortBy(_._2)(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Ordering</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.reverse)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        (t._1, list)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、模式匹配" tabindex="-1"><a class="header-anchor" href="#九、模式匹配"><span>九、模式匹配</span></a></h2><h3 id="_9-1-模式匹配介绍" tabindex="-1"><a class="header-anchor" href="#_9-1-模式匹配介绍"><span>9.1 模式匹配介绍</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- scala中模式匹配与java中switch的区别</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 模式匹配和java中的switch..</span><span style="color:#C678DD;--shiki-dark:#C678DD;">case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> .. default的格式很类似，但是也有很多是不一样的。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. java:switch具有穿透现象，就是不加break语句，逻辑一旦满足条件，则下面的所有分支都会执行</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. scala：没有switch语法，采用了模式匹配的方式代替了switch方法，但是功能比switch更强大</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                  因为可以按照规则对数据或对象进行匹配。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- scala中的模式匹配用法说明：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 每个分支后面的代码逻辑不需要使用break</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 使用下滑线表示任意值，类似java中switch的default分支</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 模式匹配的顺序，自上而下的匹配顺序，一旦匹配成功，就会执行匹配成功后面的逻辑代码，执行完成以后，就会跳出match方法</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果全部匹配完成以后，都没有匹配成功，则会报异常</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 默认分支放在分支结构中的顺序不同，执行会有差异，放在默认分支后面的所有匹配都是无法被执行的，所以默认分支</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        	（</span><span style="color:#C678DD;--shiki-dark:#C678DD;">case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _）一般是放在所有分支的后面，模仿switch中的default</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    age </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;4&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span></code></pre></div><h3 id="_9-2-模式匹配的应用" tabindex="-1"><a class="header-anchor" href="#_9-2-模式匹配的应用"><span>9.2 模式匹配的应用</span></a></h3><h4 id="_9-2-1-匹配常量" tabindex="-1"><a class="header-anchor" href="#_9-2-1-匹配常量"><span>9.2.1 匹配常量</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;scala&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    name </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;java&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;hadoop&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;hadoop&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;scala&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;other&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span></code></pre></div><h4 id="_9-2-2-匹配类型" tabindex="-1"><a class="header-anchor" href="#_9-2-2-匹配类型"><span>9.2.2 匹配类型</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[数据类型]，中括号中的数据类型不是泛型，而是数组的数据类型，编译器编译时：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">               val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">            =&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] array </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[](</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 类型匹配:不匹配泛型,只要类型一致，则匹配成功</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 关于默认分支：如果我们使用到默认分支的参数，那么可以使用一个变量，并在匹配逻辑代码中应用</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                       如果我们不使用，那么我们就可以使用下划线进行代替</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 下划线还可以表示泛型中的任意类型，如List[_]</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将传递的值赋值给了case后面的变量，如i,s,m,...</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> describe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">x</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      x </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> i</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;String hello&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[_] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;List&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;Array[Int]&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> scala </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;something else &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> scala</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Byte</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;s&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describe(b))     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//&quot;something else &quot; + 10</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describe(array)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//something else [Ljava.lang.String;@11531931</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describe(list))  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//&quot;List&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-3-匹配数组" tabindex="-1"><a class="header-anchor" href="#_9-2-3-匹配数组"><span>9.2.3 匹配数组</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> array1 </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, _) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1,_&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, _) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;0,_&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;_,0&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;_,1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(x, y) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(x </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> y)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(_</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;_*&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(result) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//4</span></span></code></pre></div><h4 id="_9-2-4-匹配元组" tabindex="-1"><a class="header-anchor" href="#_9-2-4-匹配元组"><span>9.2.4 匹配元组</span></a></h4><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list8</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (tuple </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list8) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      tuple </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, _) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;0....&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, _) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1....&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, _) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2....&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (x, y) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(x </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> y)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 0....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   2....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   2....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   5</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-5-匹配列表" tabindex="-1"><a class="header-anchor" href="#_9-2-5-匹配列表"><span>9.2.5 匹配列表</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list4</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list5</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list6</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list7</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> describeList</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[_]) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      list </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> first :: second :: rest </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(first </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot; - &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> second </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot; - &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> rest)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describeList(list4))</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1 - 2 - List(3,4) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describeList(list5))</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1 - 2 - List(3)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describeList(list6))</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1 - 2 - List()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(describeList(list7))</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//不行，报错</span></span></code></pre></div><h4 id="_9-2-6-匹配对象" tabindex="-1"><a class="header-anchor" href="#_9-2-6-匹配对象"><span>9.2.6 匹配对象</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 进行匹配对象时，会自动调用unapply()方法，这里的匹配对象，</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;是匹配对象的属性是否相等&quot;</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. unapply()方法，使用对象自动获取属性值</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala2_MatchObject</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> emp</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;no&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Emp</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name, age)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> unapply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Option</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Option</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((emp.name, emp.age))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-样例类-重要" tabindex="-1"><a class="header-anchor" href="#_9-3-样例类-重要"><span>9.3 样例类(重要)</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 概念：使用关键字</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;case声明的类&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，称为样例类</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 作用：专门用于匹配对象</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">      3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 说明:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              a、样例类在编译时，会自动生成伴生对象以及apply方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              b、样例类中参数默认是使用val声明的，所以参数其实就是类的属性</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              c、如果想要是属性可以进行修改，那么需要显示的使用var修饰参数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              d、样例类自动生成的方法有：toString()/equals()/hashcode()/</span><span style="color:#C678DD;--shiki-dark:#C678DD;">copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()/</span><span style="color:#C678DD;--shiki-dark:#C678DD;">apply</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()/unapply()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              e、样例类还实现了serilizable接口</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              f、在实际开发中，一般使用样例类，便于开发</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala3_CaseObject</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建样例类的对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> emp</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //进行模式匹配</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp </span><span style="color:#C678DD;--shiki-dark:#C678DD;">match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">21</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> other </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> println( other) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Emp1(scala,20)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//声明样例类</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">case</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Emp1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,age :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-4-模式匹配的应用" tabindex="-1"><a class="header-anchor" href="#_9-4-模式匹配的应用"><span>9.4 模式匹配的应用</span></a></h3><h4 id="_9-4-1-应用1" tabindex="-1"><a class="header-anchor" href="#_9-4-1-应用1"><span>9.4.1 应用1</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//应用1：将如下集合元组的第二元素乘于3</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法1：使用map()进行结构转化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newList</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.map(tuple </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      (tuple._1, tuple._2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newList)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    方法2：map + 模式匹配的方法,集合的元素进行case模式匹配，这里属于元组匹配</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          map方法的小括号变成{},case后面的()，不是形参，而是一个元组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newList1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.map { </span><span style="color:#C678DD;--shiki-dark:#C678DD;">case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (word, count) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (word, count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newList1)</span></span></code></pre></div><h4 id="_9-4-2-应用2" tabindex="-1"><a class="header-anchor" href="#_9-4-2-应用2"><span>9.4.2 应用2</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //应用2：取map中v的第二个元素</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;aa&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;bb&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法1：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newMap1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: immutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Iterable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map.map(t </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      t._2._2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newMap1)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法2：使用map + 模式匹配</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newMap2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: immutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Iterable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map.map {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (k1, (k2, count)) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        count</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newMap2)</span></span></code></pre></div><h4 id="_9-4-3-应用3" tabindex="-1"><a class="header-anchor" href="#_9-4-3-应用3"><span>9.4.3 应用3</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//应用3：变量声明，元组匹配,使用变量直接赋值的方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id, name, age) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(name)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//scala</span></span></code></pre></div><h4 id="_9-4-4-应用4" tabindex="-1"><a class="header-anchor" href="#_9-4-4-应用4"><span>9.4.4 应用4</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//应用4 ： 循环匹配</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    map.foreach {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (k1, (k2, count)) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        println(count)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;================&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h4 id="_9-4-5-应用5" tabindex="-1"><a class="header-anchor" href="#_9-4-5-应用5"><span>9.4.5 应用5</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//应用5 ： 过滤数据</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> array</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //打印奇数的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法1：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    array.foreach(num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> !=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        print(num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//方式2见偏函数</span></span></code></pre></div><h3 id="_9-5-偏函数" tabindex="-1"><a class="header-anchor" href="#_9-5-偏函数"><span>9.5 偏函数</span></a></h3><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 偏函数：使用模式匹配进行数据的处理</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              以偏概全：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              偏：部分</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              全：整体</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 作用：对一部分满足条件的数据进行处理</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">             map函数不支持偏函数，支持全函数</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 自定义偏函数语法：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">         val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> pef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PartialFunction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(数据类型1，数据类型2) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          函数体，使用模式匹配，来处理满足条件的数据</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         形参：数据类型1：调用函数的对象的元素类型</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              数据类型2：经过函数体处理以后的结果类型</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 调用支持偏函数的函数，collect：采集，支持偏函数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 偏函数在一般情况下可以使用模式匹配进行代替</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;4&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方式一：采用声明偏函数方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> pef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PartialFunction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> m </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newList</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.collect(pef)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(list)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newList) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List(2, 4, 3, 12, 4, 10, 20)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //方式二：使用模式匹配来代替偏函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newList2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> list.collect {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //不是Int类型的数据则被过滤掉，此时有未匹配上的数据，也不会报错</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> m </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(newList2) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//List(2, 4, 12, 10, 20)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十-、异常" tabindex="-1"><a class="header-anchor" href="#十-、异常"><span>十 、异常</span></a></h2><h2 id="十-一、隐式转换" tabindex="-1"><a class="header-anchor" href="#十-一、隐式转换"><span>十 一、隐式转换</span></a></h2><h3 id="_11-1-简介" tabindex="-1"><a class="header-anchor" href="#_11-1-简介"><span>11.1 简介</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 两个类型能转换需存在的关系：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      a、父子类</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b、接口或实现类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. java中基本类型的数值之间存在精度的转换和截取，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       scala中没有精度的概念，编译时会自动由编译器调用java的逻辑来进行数值操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 假如不存在关系呢？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       引出隐式转换的概念。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          a、如果两个类型之间不存在关系，无法进行类型的转换，但是编译器在编译时，尝试找到对应的转换关系将类型进行转换，让程序              编译通过，这个自动转换的过程，称之为隐式转换。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          b、这个过程由编译器完成，也称之为二次编译。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 拆解分析：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          a、编译器可以按照指定的规则进行查找，让错误的逻辑通过转换后，编译运行通过，这个功能称之为隐式转换。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          b、这里的隐式转换就是让编译器查找转换的规则，类型的转换 A </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果想要编译器可以找到转换规则，那么需要使用特殊的关键词来实现：implicit</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 隐式转换的作用：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          a、程序因为意外的情况，导致正确的逻辑出现错误，如版本的升级</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          b、功能的拓展。</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//声明隐式函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Byte</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      i.toByte</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }    </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将Int类型的b赋值为Byte类型的C</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Byte</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  println(c)</span></span></code></pre></div><h3 id="_11-2-应用" tabindex="-1"><a class="header-anchor" href="#_11-2-应用"><span>11.2 应用</span></a></h3><h4 id="_11-2-1-简单应用1" tabindex="-1"><a class="header-anchor" href="#_11-2-1-简单应用1"><span>11.2.1 简单应用1</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果在当前的范围内，有多个相同的转换规则怎么办？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        转换无法成功，因为编译器无法识别用哪个转换规则</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 什么时候会调用隐式转换的规则呢？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        二次编译时，第一次编译出现出错时，会选择隐式转换</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 转换的过程：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        编译出错 -</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 编译器查找转换规则 -</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 二次编译</span></span></code></pre></div><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>//需求：在原来的基础上，增加update()方法，如何实现呢？</span></span></code></pre></div><ul><li>方式1:使用混入特质的方式</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala2_implicit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方式1：使用混入特质的方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> emp</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> emp2() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">with</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> methodext</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp.insert</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp.update()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">trait</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> methodext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;update...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> emp2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert....&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式2：使用隐式转换</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala2_implicit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> emp</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> emp2()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp.insert</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    emp.update() </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方式2：使用隐式转换,只是一种转换规则，类型的转换</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> transform</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">emp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: emp2): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Partent</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Partent</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Partent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;update ...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> emp2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert....&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-2-2-隐式函数" tabindex="-1"><a class="header-anchor" href="#_11-2-2-隐式函数"><span>11.2.2 隐式函数</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">	  1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 函数的参数预先知道可能会发生变化，为了遵循ocp的开发原则，可以给函数增加关键字implicit修饰一下</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//声明隐式函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Byte</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      i.toByte</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }    </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将Int类型的b赋值为Byte类型的C</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> c</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Byte</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  println(c)</span></span></code></pre></div><h4 id="_11-2-3-隐式变量" tabindex="-1"><a class="header-anchor" href="#_11-2-3-隐式变量"><span>11.2.3 隐式变量</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果使用因素参数进行处理时，那么在调用函数时</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. implicit修饰函数的参数时，这个参数所在的参数列表只能有一个参数</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果使用了()小括号，那么隐式变量无法使用</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> info2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)( </span><span style="color:#C678DD;--shiki-dark:#C678DD;">implicit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> password:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;000000&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;name:&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;, password: &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> password)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> info1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(name:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)( password:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;000000&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;name:&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;, password: &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> password)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="color:#E06C75;--shiki-dark:#E06C75;">  password</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;88888&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//即使我们给了默认值，但是形参的小括号()不能省</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    info1(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lianzhipeng&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//name:lianzhipeng, password: 000000</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//没有使用小括号，隐式变量有效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    info2(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lianzhipeng&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)    </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//name:lianzhipeng, password: 88888</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//加了小括号，隐式变量无效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    info2(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;lianzhipeng&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//name:lianzhipeng, password: 000000</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> func1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">implicit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  d :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Double</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      d.toInt</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> d</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Double</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 10.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(func1(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(func1) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//10</span></span></code></pre></div><h4 id="_11-2-4-隐式类" tabindex="-1"><a class="header-anchor" href="#_11-2-4-隐式类"><span>11.2.4 隐式类</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 隐式类</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      a、scala </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 版本增加了此功能</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b、构造参数必须存在且只有一个参数，用于类型转换</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      c、参数类型（User） </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 当前类型(UserExt)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      d、隐式类必须被定义在“类”或“伴生对象”或“包对象”里，即隐式类不能放置在顶级（</span><span style="color:#C678DD;--shiki-dark:#C678DD;">top</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-</span><span style="color:#C678DD;--shiki-dark:#C678DD;">level</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">）对象中</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala_implicitClass</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> user</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  User4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    user.update()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//隐式类，注意构造函数的参数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">implicit</span><span style="color:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User4Ext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(use :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;update ... &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert ... &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3-隐式机制" tabindex="-1"><a class="header-anchor" href="#_11-3-隐式机制"><span>11.3 隐式机制</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     所谓的隐式机制，就是一旦出现编译错误时，编译器会从哪些地方查找对应的隐式转换规则</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 当前代码的作用域中找到即可</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 当前代码上级作用域</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 当前类所在的包对象</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 当前类的父类或特质</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --总结： 如果想要隐式转换，那么直接导入</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala5_implicit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> com.atguigu.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Scala_chapter01</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.scala_chapter10.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Scala_implicitClass</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">._</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> user</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    user.update</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> insert</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;insert ... &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十二、泛型" tabindex="-1"><a class="header-anchor" href="#十二、泛型"><span>十二、泛型</span></a></h2><p>12.1</p><h2 id="十三、正则表达式" tabindex="-1"><a class="header-anchor" href="#十三、正则表达式"><span>十三、正则表达式</span></a></h2>`,128)]))}const e=a(B,[["render",p],["__file","Scala总结终结篇.html.vue"]]),k=JSON.parse('{"path":"/posts/BigData/07_Scala%E6%80%BB%E7%BB%93/Scala%E6%80%BB%E7%BB%93%E7%BB%88%E7%BB%93%E7%AF%87.html","title":"Scala总结终结篇","lang":"zh-CN","frontmatter":{"description":"Scala总结终结篇 接Scala总结下篇 八、集合 8.13 自定义排序 SortWith 8.14 集合的一些运算 8.14.1 并集 union 8.14.2 交集 intersect 8.14.3 差集 diff 8.14.4 拉链 zip 8.14.5 数据关联索引 8.14.6 滑动 sliding 8.15 reduce 8.15.1 r...","head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/BigData/07_Scala%E6%80%BB%E7%BB%93/Scala%E6%80%BB%E7%BB%93%E7%BB%88%E7%BB%93%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Scala总结终结篇"}],["meta",{"property":"og:description","content":"Scala总结终结篇 接Scala总结下篇 八、集合 8.13 自定义排序 SortWith 8.14 集合的一些运算 8.14.1 并集 union 8.14.2 交集 intersect 8.14.3 差集 diff 8.14.4 拉链 zip 8.14.5 数据关联索引 8.14.6 滑动 sliding 8.15 reduce 8.15.1 r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200531210601.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scala总结终结篇\\",\\"image\\":[\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200531210601.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200531211218.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"接Scala总结下篇","slug":"接scala总结下篇","link":"#接scala总结下篇","children":[]},{"level":2,"title":"八、集合","slug":"八、集合","link":"#八、集合","children":[{"level":3,"title":"8.13 自定义排序 SortWith","slug":"_8-13-自定义排序-sortwith","link":"#_8-13-自定义排序-sortwith","children":[]},{"level":3,"title":"8.14 集合的一些运算","slug":"_8-14-集合的一些运算","link":"#_8-14-集合的一些运算","children":[]},{"level":3,"title":"8.15 reduce","slug":"_8-15-reduce","link":"#_8-15-reduce","children":[]},{"level":3,"title":"8.16 折叠 fold","slug":"_8-16-折叠-fold","link":"#_8-16-折叠-fold","children":[]},{"level":3,"title":"8.17 scan","slug":"_8-17-scan","link":"#_8-17-scan","children":[]},{"level":3,"title":"8.18 队列","slug":"_8-18-队列","link":"#_8-18-队列","children":[]},{"level":3,"title":"8.19 并行","slug":"_8-19-并行","link":"#_8-19-并行","children":[]},{"level":3,"title":"8.20 集合练习","slug":"_8-20-集合练习","link":"#_8-20-集合练习","children":[]}]},{"level":2,"title":"九、模式匹配","slug":"九、模式匹配","link":"#九、模式匹配","children":[{"level":3,"title":"9.1 模式匹配介绍","slug":"_9-1-模式匹配介绍","link":"#_9-1-模式匹配介绍","children":[]},{"level":3,"title":"9.2 模式匹配的应用","slug":"_9-2-模式匹配的应用","link":"#_9-2-模式匹配的应用","children":[]},{"level":3,"title":"9.3 样例类(重要)","slug":"_9-3-样例类-重要","link":"#_9-3-样例类-重要","children":[]},{"level":3,"title":"9.4 模式匹配的应用","slug":"_9-4-模式匹配的应用","link":"#_9-4-模式匹配的应用","children":[]},{"level":3,"title":"9.5 偏函数","slug":"_9-5-偏函数","link":"#_9-5-偏函数","children":[]}]},{"level":2,"title":"十 、异常","slug":"十-、异常","link":"#十-、异常","children":[]},{"level":2,"title":"十  一、隐式转换","slug":"十-一、隐式转换","link":"#十-一、隐式转换","children":[{"level":3,"title":"11.1 简介","slug":"_11-1-简介","link":"#_11-1-简介","children":[]},{"level":3,"title":"11.2 应用","slug":"_11-2-应用","link":"#_11-2-应用","children":[]},{"level":3,"title":"11.3 隐式机制","slug":"_11-3-隐式机制","link":"#_11-3-隐式机制","children":[]}]},{"level":2,"title":"十二、泛型","slug":"十二、泛型","link":"#十二、泛型","children":[]},{"level":2,"title":"十三、正则表达式","slug":"十三、正则表达式","link":"#十三、正则表达式","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":19.21,"words":5763},"filePathRelative":"posts/BigData/07_Scala总结/Scala总结终结篇.md","localizedDate":"2024年10月28日","excerpt":"\\n<hr>\\n<h2>接Scala总结下篇</h2>\\n<h2>八、集合</h2>\\n<h3>8.13 自定义排序 SortWith</h3>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> --自定义排序：</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    1</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.方法：sortWith(形参)，返回值为经过自定义排序以后的集合；</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    2</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.形参：是一个函数，</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">           函数形参为：集合中的两个元素，</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">               参数1：第一个元素left；</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">               参数2：第二个元素right；</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">           函数返回值为：boolean类型，true和false</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    3</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.排序规则：       </span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">         a、如果</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"left &gt; right\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">,则是左边的数据比右边的大，则是</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"降序\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">         b、如果</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"left &lt; right\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">,则是左边的数据比右边的小，则是</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"升序\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    4</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.函数返回值：</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">       \\ta、当满足你的排序要求时，你就返回true</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">      \\tb、当不满足你的排序要求时，你就返回false</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    5</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.比较方式：在scala中，默认是指两两进行比较</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">         </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    6</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.默认排序规则：sortWith()默认是升序</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as comp,k as data};
