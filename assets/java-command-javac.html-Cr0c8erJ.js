import{_ as a,c as l,a as o,o as e}from"./app-4x2aIoqi.js";const n={};function i(r,s){return e(),l("div",null,s[0]||(s[0]=[o(`<h1 id="java编译" tabindex="-1"><a class="header-anchor" href="#java编译"><span>Java编译</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>IDE或maven等工具已将Java程序的编译代劳。但工具越高级，隐藏的细节就越多，一旦出现问题就懵逼，归根到底还是基础概念不牢靠。返璞归真，回到最原始的地方<code>javac</code>，会让问题豁然开朗。下面就一步一步演示用<code>javac</code>和<code>java</code>徒手编译运行一个常规工程。</p><h2 id="_2-hello-world练个手" tabindex="-1"><a class="header-anchor" href="#_2-hello-world练个手"><span>2. Hello World练个手</span></a></h2><p>来个简单的先，我们祭出祖传的HelloWorld程序。（感兴趣的话，可以试一试徒手是否写的出来~）</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>写完后，保存为：<code>HelloWorld.java</code>，然后在当前目录执行<code>javac</code>编译命令：</p><div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>javac HelloWorld.java</span></span></code></pre></div><p>查看<strong>当前目录</strong>（更准确的说是java文件同级目录），果然生成了<code>HelloWorld.class</code>：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloWorld.class</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span></span></code></pre></div><p>继续在<strong>当前目录运行</strong><code>java</code>命令，正确打印出Hello, World!</p><div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>maoshuai@ms:~/javaLinux/w1$ java HelloWorld </span></span>
<span class="line"><span>Hello, World!</span></span></code></pre></div><p>老司机，稳！看起来很简单嘛：先<code>javac</code>再<code>java</code>。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503295.png" alt="image-20220428163059164" tabindex="0" loading="lazy"><figcaption>image-20220428163059164</figcaption></figure><h3 id="_2-1-容易犯的错" tabindex="-1"><a class="header-anchor" href="#_2-1-容易犯的错"><span>2.1 容易犯的错</span></a></h3><ul><li>执行class 或.java 文件</li></ul><p>虽然简单，但新手通常会犯的一个错：想象成去<strong>执行</strong><code>.class</code>文件，比如写成这样，自然会报错：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503349.png" alt="image-20220428163045920" tabindex="0" loading="lazy"><figcaption>image-20220428163045920</figcaption></figure><h2 id="_3-带包名" tabindex="-1"><a class="header-anchor" href="#_3-带包名"><span>3. 带包名</span></a></h2><p>一切都很顺利，但没有包名是不专业的，所以我们加一个牛逼的包<code>package com.zszdevelop;</code>：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">package</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> com.zszdevelop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>还是一样用<code>javac</code>编译，查看<strong>当前目录</strong>下<code>HelloWorld.class</code>生成了，很顺利。</p><p>还是一样用<code>java</code>命令，瞬间被打脸：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503384.png" alt="image-20220428163506356" tabindex="0" loading="lazy"><figcaption>image-20220428163506356</figcaption></figure><p>想了想，<strong>HelloWorld已经有自己的包名了，所以它的名字不在是没有姓氏</strong>的<code>HelloWorld</code>，新名字叫<code>com.zszdevelop.HelloWorld</code>，那么传给<code>java</code>自然要用新名字，再试一试：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503413.png" alt="image-20220428163605539" tabindex="0" loading="lazy"><figcaption>image-20220428163605539</figcaption></figure><p>还是被打脸，这时候老司机告诉你，创建一个<code>com.zszdevelop</code>目录，然后把<code>HelloWorld.class</code>放进来，执行：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mv</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.class</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloWorld.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Hello,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503444.png" alt="image-20220428163804684" tabindex="0" loading="lazy"><figcaption>image-20220428163804684</figcaption></figure><p>果然，正常打印出了Hello, World!</p><p><strong>上面的步骤，说明了两点：</strong></p><ol><li>增加了package名，所以class名也变了，行不改名坐不改姓，自然要带上姓（即所谓全限定名）。</li><li>Java <strong>会根据包名对应出目录结构，并从class path搜索该目录去找class文件</strong>。由于默认的class path是当前目录，所以<code>com.zszdevelop.HelloWorld</code>必须存储在<code>./com/zszdevelop/HelloWorld.class</code></li></ol><p>当然每次自己创建包路径的目录太麻烦。<strong><code>-d</code>参数可以代劳上面的工作</strong>：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloWorld.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">Hello,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><p><code>-d</code>指定了生成class文件的根目录（这里用的是当前目录），并且会根据class的包路径创建子目录。</p><h2 id="_4-编译两个有依赖关系的class" tabindex="-1"><a class="header-anchor" href="#_4-编译两个有依赖关系的class"><span>4. 编译两个有依赖关系的class</span></a></h2><p>包名解决了，我们再复杂些，搞个依赖调用。首先，我们抽取一个<code>HelloService</code>：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">package</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> com.zszdevelop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HelloService</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> printHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;HelloService, &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;!&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>然后修改<code>HelloWorld.java</code>，调用<code>HelloService</code>完成say hello：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">package</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> com.zszdevelop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        HelloService</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> service</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> HelloService</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        service</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">printHello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>接着我们依次编译：<code>HelloService.java</code>和<code>HelloWorld.java</code>，最后运行：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloService.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span><span style="color:#98C379;--shiki-dark:#98C379;">   com</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503473.png" alt="image-20220428164924047" tabindex="0" loading="lazy"><figcaption>image-20220428164924047</figcaption></figure><p>直觉上，要先编译<code>HelloService.java</code>，这是对的。那如果先编译<code>HelloWorld.java</code>呢？当然是打脸：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503500.png" alt="image-20220428164950212" tabindex="0" loading="lazy"><figcaption>image-20220428164950212</figcaption></figure><p>如果编译的时候，还要根据依赖关系确定顺序，太low了吧。我觉得<code>java</code>命令应该能自动解决它，一次性将两个java文件传给它试一试：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloService.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> LS</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService.java</span><span style="color:#98C379;--shiki-dark:#98C379;">	HelloWorld.java</span><span style="color:#98C379;--shiki-dark:#98C379;">		com</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503531.png" alt="image-20220428165035879" tabindex="0" loading="lazy"><figcaption>image-20220428165035879</figcaption></figure><p>牛逼，它自动解决了顺序问题，赞一个（虽然我不怀好意的将<code>HelloWorld.java</code>放到了前面）！</p><h2 id="_5-使用src和target目录" tabindex="-1"><a class="header-anchor" href="#_5-使用src和target目录"><span>5. 使用src和target目录</span></a></h2><p>从上面的例子可以看出，虽然class文件必须放在包名一致的目录里，<strong>但java源文件并没有这个要求</strong>。不过，为了管理方便，我们将java源文件也放在包结构目录里：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;">  mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mv</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> *</span><span style="color:#98C379;--shiki-dark:#98C379;">.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;">  ls</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService.java</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;">  javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop/</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">*</span><span style="color:#98C379;--shiki-dark:#98C379;">.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span><span style="color:#98C379;--shiki-dark:#98C379;"> com/zszdevelop/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService.class</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloService.java</span><span style="color:#98C379;--shiki-dark:#98C379;">  HelloWorld.class</span><span style="color:#98C379;--shiki-dark:#98C379;">   HelloWorld.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503560.png" alt="image-20220428165610980" tabindex="0" loading="lazy"><figcaption>image-20220428165610980</figcaption></figure><p>编译时<code>javac</code>要传入新的java文件路径（这里用了通配符），其他也没有什么不同。可以看到<strong>class文件生成到了与java文件相同的目录里</strong>。class文件和java源文件放在一起，很不清爽，能否像IDE里那样：java文件放到src目录，class文件放到target目录？下面我试一试。</p><p>先创建src和target目录，并将原来的java文件都移动到src目录：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mkdir</span><span style="color:#98C379;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mkdir</span><span style="color:#98C379;--shiki-dark:#98C379;"> target</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> mv</span><span style="color:#98C379;--shiki-dark:#98C379;"> com</span><span style="color:#98C379;--shiki-dark:#98C379;"> src</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">src</span><span style="color:#98C379;--shiki-dark:#98C379;">    target</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503589.png" alt="image-20220428165943655" tabindex="0" loading="lazy"><figcaption>image-20220428165943655</figcaption></figure><p>然后编译，<code>-d</code>参数指定到target目录：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> javac</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> target</span><span style="color:#98C379;--shiki-dark:#98C379;"> src/com/zszdevelop/</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">*</span><span style="color:#98C379;--shiki-dark:#98C379;">.java</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> ls</span><span style="color:#98C379;--shiki-dark:#98C379;"> target/com/zszdevelop/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService.class</span><span style="color:#98C379;--shiki-dark:#98C379;"> HelloWorld.class</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503615.png" alt="image-20220428170120215" tabindex="0" loading="lazy"><figcaption>image-20220428170120215</figcaption></figure><p>怎么运行呢？直接在当前目录运行是不行了，毕竟多了一层target目录，进入target目录运行，妥妥的：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>(base) ➜  test cd target</span></span>
<span class="line"><span>(base) ➜  target java com.zszdevelop.HelloWorld</span></span>
<span class="line"><span>HelloService, World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503643.png" alt="image-20220428170206636" tabindex="0" loading="lazy"><figcaption>image-20220428170206636</figcaption></figure><p>除了进入<code>target</code>目录以外，更常用的方法是通过<code>-classpath</code>（或简写为<code>-cp</code>）选项设置<strong>类路径</strong>：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">➜</span><span style="color:#98C379;--shiki-dark:#98C379;">  test</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -cp</span><span style="color:#98C379;--shiki-dark:#98C379;"> target</span><span style="color:#98C379;--shiki-dark:#98C379;"> com.zszdevelop.HelloWorld</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">HelloService,</span><span style="color:#98C379;--shiki-dark:#98C379;"> World!</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503672.png" alt="image-20220428170320183" tabindex="0" loading="lazy"><figcaption>image-20220428170320183</figcaption></figure><h2 id="_6-类路径classpath" tabindex="-1"><a class="header-anchor" href="#_6-类路径classpath"><span>6. 类路径CLASSPATH</span></a></h2><p>上面演示了通过<code>-cp</code>设置类路径。下面再进一步研究一下类路径。</p><p>类路径，是JRE搜索用户级class文件或其他资源的路径，<code>javac</code>或<code>java</code>等工具都可以指定类路径。如果没有设置，默认的类路径就是当前目录。<strong>但如果设置了类路径，默认值就被覆盖了，所以如果想保留当前目录为类路径，需要同时将<code>.</code>加入</strong>，有点像默认构造函数的感觉。</p><p>类路径，可以通过环境变量<code>CLASSPATH</code>或<code>-cp</code>参数设置，后者会覆盖前者。推荐通过<code>-cp</code>设置，它只会影响当前进程。</p><p>类路径类似操作系统里的<code>path</code>概念，不过它是java工具搜索class文件的路径。同样的，类路径可以是多个，并通过分号分隔：</p><div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>export CLASSPATH=path1:path2:...</span></span></code></pre></div><p>或者：</p><div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>sdkTool -classpath path1:path2:...</span></span></code></pre></div><p>sdkTool可以是 java, javac, javadoc等。</p><p>类路径不仅可以是目录，还也可以是jar包或zip包。</p><p>类路径的设置是有顺序的，java会优先在靠前的类路径里搜索。这一点和操作系统的<code>path</code>类似。</p><p>类路径可以用通配符<code>*</code>匹配jar或zip，但：</p><ol><li>通配符只匹配jar或zip，比如path/*只是将下面的jar或zip加入类路径，但path本身不加入类路径。</li><li>通配符不递归搜索，即指匹配第一层目录下的jar或zip。</li><li>通配符匹配到的jar或zip，加入到classpath的顺序是不确定的。因此，更稳妥的做法是显示的枚举所有jar或zip。</li><li>通配符适用于<code>CLASSPATH</code>变量或<code>-cp</code>参数，但不适用于jar包的manifest文件。</li></ol><h2 id="_7-javac" tabindex="-1"><a class="header-anchor" href="#_7-javac"><span>7. Javac</span></a></h2><p>javac的语法如下：</p><div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>javac [ options ] [ sourcefiles ] [ classes] [ @argfiles ]</span></span></code></pre></div><ul><li>options：是一些参数，比如-cp，-d</li><li>sourcefiles：就是编译的java文件，如<code>HelloWorld.java</code>，可以是多个，并用空格隔开</li><li>classes：用来处理处理注解。暂时没搞懂怎么用</li><li>@argfiles，就是包含option或java文件列表的文件路径，用@符号开头，就像上面的@javaOptions.txt和@javaFiles.txt</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://zhuanlan.zhihu.com/p/74229762" target="_blank" rel="noopener noreferrer">第1期：抛开IDE，了解一下javac如何编译</a></p>`,85)]))}const c=a(n,[["render",i],["__file","java-command-javac.html.vue"]]),t=JSON.parse(`{"path":"/posts/Java/Java%E7%BC%96%E8%AF%91/java-command-javac.html","title":"Java编译","lang":"zh-CN","frontmatter":{"aliases":"Java编译, 'Java编译'","tags":null,"cssclass":null,"source":null,"created":"2024-02-22 10:48","updated":"2024-10-11 15:26","description":"Java编译 1. 简介 IDE或maven等工具已将Java程序的编译代劳。但工具越高级，隐藏的细节就越多，一旦出现问题就懵逼，归根到底还是基础概念不牢靠。返璞归真，回到最原始的地方javac，会让问题豁然开朗。下面就一步一步演示用javac和java徒手编译运行一个常规工程。 2. Hello World练个手 来个简单的先，我们祭出祖传的Hell...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Java%E7%BC%96%E8%AF%91/java-command-javac.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Java编译"}],["meta",{"property":"og:description","content":"Java编译 1. 简介 IDE或maven等工具已将Java程序的编译代劳。但工具越高级，隐藏的细节就越多，一旦出现问题就懵逼，归根到底还是基础概念不牢靠。返璞归真，回到最原始的地方javac，会让问题豁然开朗。下面就一步一步演示用javac和java徒手编译运行一个常规工程。 2. Hello World练个手 来个简单的先，我们祭出祖传的Hell..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503295.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java编译\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503295.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503349.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503384.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503413.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503444.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503473.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503500.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503531.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503560.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503589.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503615.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503643.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403111503672.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. Hello World练个手","slug":"_2-hello-world练个手","link":"#_2-hello-world练个手","children":[{"level":3,"title":"2.1 容易犯的错","slug":"_2-1-容易犯的错","link":"#_2-1-容易犯的错","children":[]}]},{"level":2,"title":"3. 带包名","slug":"_3-带包名","link":"#_3-带包名","children":[]},{"level":2,"title":"4. 编译两个有依赖关系的class","slug":"_4-编译两个有依赖关系的class","link":"#_4-编译两个有依赖关系的class","children":[]},{"level":2,"title":"5. 使用src和target目录","slug":"_5-使用src和target目录","link":"#_5-使用src和target目录","children":[]},{"level":2,"title":"6. 类路径CLASSPATH","slug":"_6-类路径classpath","link":"#_6-类路径classpath","children":[]},{"level":2,"title":"7. Javac","slug":"_7-javac","link":"#_7-javac","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":6.39,"words":1916},"filePathRelative":"posts/Java/Java编译/java-command-javac.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>IDE或maven等工具已将Java程序的编译代劳。但工具越高级，隐藏的细节就越多，一旦出现问题就懵逼，归根到底还是基础概念不牢靠。返璞归真，回到最原始的地方<code>javac</code>，会让问题豁然开朗。下面就一步一步演示用<code>javac</code>和<code>java</code>徒手编译运行一个常规工程。</p>\\n<h2>2. Hello World练个手</h2>\\n<p>来个简单的先，我们祭出祖传的HelloWorld程序。（感兴趣的话，可以试一试徒手是否写的出来~）</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">public</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\"> class</span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\"> HelloWorld</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\">    public</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\"> static</span><span style=\\"color:#C678DD;--shiki-dark:#C678DD\\"> void</span><span style=\\"color:#61AFEF;--shiki-dark:#61AFEF\\"> main</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">(</span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">String</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">[] </span><span style=\\"color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">args</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">){</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">        System</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.</span><span style=\\"color:#E5C07B;--shiki-dark:#E5C07B\\">out</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">.</span><span style=\\"color:#61AFEF;--shiki-dark:#61AFEF\\">println</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">(</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"Hello, World!\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n</div>","autoDesc":true}`);export{c as comp,t as data};
