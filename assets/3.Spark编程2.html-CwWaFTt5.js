import{_ as a,c as n,a as i,o as l}from"./app-CpAF2rca.js";const r={};function e(B,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="spark编程2" tabindex="-1"><a class="header-anchor" href="#spark编程2"><span>Spark编程2</span></a></h1><hr><h2 id="接2-spark架构及编程" tabindex="-1"><a class="header-anchor" href="#接2-spark架构及编程"><span>接2.Spark架构及编程</span></a></h2><h2 id="五、spark核心编程" tabindex="-1"><a class="header-anchor" href="#五、spark核心编程"><span>五、Spark核心编程</span></a></h2><h3 id="_5-6-累加器" tabindex="-1"><a class="header-anchor" href="#_5-6-累加器"><span>5.6 累加器</span></a></h3><h4 id="_5-6-1-累加器基本介绍" tabindex="-1"><a class="header-anchor" href="#_5-6-1-累加器基本介绍"><span>5.6.1 累加器基本介绍</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1.什么是累加器？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  分布式共享只写变量，使用累加器完成数据的累加。 </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 分布式：每一个executor都拥有这个累加器</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 共享：Driver中的变量原封不动的被executor拥有一份副本 </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 只写：同一个executor中可以对这个变量进行改值，其他的executor不能读取。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 2.累加器用来解决什么问题？</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 想通过没有shuffle过程的算子来实现数据的累加</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot; 所谓累加器，一般作用就是累加（可以是数值的累加，也可以是数据的累加）&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，我们实现的方式是：在driver代码中，声明一个变量</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;类似一个容器&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，来进行接收累加的结果，但是发现，当前情况，driver端的变量传递给executor以后，并在executor进行计算，该变量无法返回给到driver</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   原因是：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   a、driver端能够传递给到executor，是因为存在闭包的原因</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   b、executor不能传递过来是因为没有闭包的原因。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   因此：我们使用了累计器的方式，将上诉声明的变量封装成累加器的方式，使的executor端计算的累加结果能够传回给到driver端。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 3.累计器实现过程：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   累加器用来把Executor端变量信息聚合到Driver端。在Driver程序中定义的变量，在Executor端的每个Task都会得到这个变量的一份新的副本，每个task更新这些副本的值后，传回Driver端进行merge</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20200608203039476](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200608203039.png)</p><h4 id="_5-6-2-累加器的使用" tabindex="-1"><a class="header-anchor" href="#_5-6-2-累加器的使用"><span>5.6.2 累加器的使用</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">     val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rdd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RDD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> sc.makeRDD(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //1.声明累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">LongAccumulator</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> sc.longAccumulator(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;sum&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    rdd.foreach(num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //2. 调用累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      sum.add(num)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 3. 获取累加器的值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(sum.value)</span></span></code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 一共有三种自带的累加器类型</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">longAccumulator 、doubleAccumulator()、collectionAccumulator()</span></span></code></pre></div><h4 id="_5-6-3-累加器的具体流程" tabindex="-1"><a class="header-anchor" href="#_5-6-3-累加器的具体流程"><span>5.6.3 累加器的具体流程</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 将累加器变量注册到spark中</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 执行计算时,spark会将累加器发送到executor执行计算</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 计算完毕后,executor会将累加器的计算结果返回到driver端。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;"> 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. driver端获取到多个累加器的结果，然后两两合并。最后得到累加器的执行结果</span></span></code></pre></div><p>![image-20200608204813705](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200608204813.png)</p><h4 id="_5-6-4-自定累加器" tabindex="-1"><a class="header-anchor" href="#_5-6-4-自定累加器"><span>5.6.4 自定累加器</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--步骤：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 自定义累加器类，继承extends  AccumulatorV2</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[IN, OUT]</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#C678DD;--shiki-dark:#C678DD;">IN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：累加器输入数据的类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        OUT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：累加器返回值的数据类型</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        需指定如上两个参数的数据类型</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 重写AccumulatorV2中6个方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法1：判断当前的累加器是初始化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def isZero: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Boolean</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法2：复制一个累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): AccumulatorV2</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[String, mutable.Map[String, Int]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法3：重置累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">reset</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法4：向累加器中增加值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">add</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(v: String): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法5：合并当前累加器和其他累加器，两两合并，此方法由Driver端调用，合并由executor返回的多个累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(other: AccumulatorV2</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[String, mutable.Map[String, Int]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             --方法6： 返回当前累加器的值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">mutable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">Map</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[String, Int]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 在Driver端的代码</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            a、 创建累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            b、 注册累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            c、 使用累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            d、 获取累加器的值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -- 说明：方法1/2/3在闭包检测和序列化时会使用到。依次进行调用，调用的顺序是：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            copy</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --&gt; reset --&gt; isZero</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义累加器实现wordcount</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Scala3_ACC</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;acc&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sc</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkContext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(sparkConf)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rdd</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> sc.makeRDD(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;spark hadoop&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;java hello scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //1. 创建累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> acc</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> WordCountAccumulator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //2. 注册累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    sc.register(acc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //3. 调用累加器</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    rdd.flatMap(_.split(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)).foreach(</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      word </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> acc.add(word)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //4. 获取累加器的值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    println(acc.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    sc.stop()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //自定义累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> WordCountAccumulator</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AccumulatorV2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]] {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> wordCountMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法1：判断当前的累加器是初始化</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> isZero</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Boolean</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      wordCountMap.isEmpty</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法2：复制一个累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AccumulatorV2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> WordCountAccumulator</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法3：重置累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reset</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      wordCountMap.clear()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //-方法4：向累加器中增加值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> add</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">word</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      wordCountMap(word) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> wordCountMap.getOrElse(word, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //方法5：合并当前累加器和其他累加器，两两合并，此方法由Driver端调用，合并由executor返回的多个累加器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">other</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AccumulatorV2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> wordCountMap</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> other.value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      wordCountMap </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map1.foldLeft(map2)((map, kv) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        map(kv._1) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> map.getOrElse(kv._1, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> kv._2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        map</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //方法6：返回当前累加器的值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: mutable.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      wordCountMap</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-广播变量" tabindex="-1"><a class="header-anchor" href="#_5-7-广播变量"><span>5.7 广播变量</span></a></h3><h4 id="_5-7-1-介绍" tabindex="-1"><a class="header-anchor" href="#_5-7-1-介绍"><span>5.7.1 介绍</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--1. 当前现状</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   一个Executor有多个core，所以可以同时执行多个task，当Driver需要传递一个数据量很大的对象时，由于每一个task中都含有这么一个变量，这样一来，数据在executor中就存在多份。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--2. 导致问题：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.在Executor数据冗余</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.Executor内存可能溢出</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.如果存在shuffle阶段，数据传输效率将会非常低。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   为了解决出现这种性能的问题，可以将数据独立出来，在executor的内存中只保留一份，防止shuffle操作。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--3. 由于数据是保存在task中，如何独立出来呢？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  使用广播变量的模式。   </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--4. 什么是广播变量？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   分布式共享只读变量</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 只读：只能被访问，不能被修改</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 共享：可以被当前executor中所有task访问，还可以被其他的executor访问</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--5. 广播变量的声明和使用</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       val list </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> List( (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        --声明广播变量</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        val broadcast: Broadcast</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[List[(String, Int)]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> sc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">broadcast</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(list)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        --使用广播变量 </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ((k, v) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">- </span><span style="color:#D19A66;--shiki-dark:#D19A66;">broadcast</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20200608213525912](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200608213525.png)</p><h4 id="_5-7-2-编程实现" tabindex="-1"><a class="header-anchor" href="#_5-7-2-编程实现"><span>5.7.2 编程实现</span></a></h4><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rdd1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> sc.makeRDD(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">( (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ),</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">( (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 声明广播变量</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> broadcast</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Broadcast</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)]] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> sc.broadcast(list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> resultRDD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RDD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> rdd1.map {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (key, num) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> num2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用广播变量</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ((k, v) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> broadcast.value) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            num2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> v</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        (key, (num, num2))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        resultRDD.collect().foreach(println)</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24)]))}const o=a(r,[["render",e],["__file","3.Spark编程2.html.vue"]]),k=JSON.parse('{"path":"/posts/BigData/08_Spark/3.Spark%E7%BC%96%E7%A8%8B2.html","title":"Spark编程2","lang":"zh-CN","frontmatter":{"description":"Spark编程2 接2.Spark架构及编程 五、Spark核心编程 5.6 累加器 5.6.1 累加器基本介绍 ![image-20200608203039476](https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608203039.png) 5.6.2 累加器的使用 5.6.3 累加...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/BigData/08_Spark/3.Spark%E7%BC%96%E7%A8%8B2.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Spark编程2"}],["meta",{"property":"og:description","content":"Spark编程2 接2.Spark架构及编程 五、Spark核心编程 5.6 累加器 5.6.1 累加器基本介绍 ![image-20200608203039476](https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608203039.png) 5.6.2 累加器的使用 5.6.3 累加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608203039.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spark编程2\\",\\"image\\":[\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608203039.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608204813.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200608213525.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"接2.Spark架构及编程","slug":"接2-spark架构及编程","link":"#接2-spark架构及编程","children":[]},{"level":2,"title":"五、Spark核心编程","slug":"五、spark核心编程","link":"#五、spark核心编程","children":[{"level":3,"title":"5.6 累加器","slug":"_5-6-累加器","link":"#_5-6-累加器","children":[]},{"level":3,"title":"5.7 广播变量","slug":"_5-7-广播变量","link":"#_5-7-广播变量","children":[]}]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"posts/BigData/08_Spark/3.Spark编程2.md","localizedDate":"2024年10月28日","excerpt":"\\n<hr>\\n<h2>接2.Spark架构及编程</h2>\\n<h2>五、Spark核心编程</h2>\\n<h3>5.6 累加器</h3>\\n<h4>5.6.1 累加器基本介绍</h4>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">-- 1.什么是累加器？</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">  分布式共享只写变量，使用累加器完成数据的累加。 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    1</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">. 分布式：每一个executor都拥有这个累加器</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    2</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">. 共享：Driver中的变量原封不动的被executor拥有一份副本 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">    3</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">. 只写：同一个executor中可以对这个变量进行改值，其他的executor不能读取。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">-- 2.累加器用来解决什么问题？</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D19A66;--shiki-dark:#D19A66\\">   1</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">. 想通过没有shuffle过程的算子来实现数据的累加</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\" 所谓累加器，一般作用就是累加（可以是数值的累加，也可以是数据的累加）\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">，我们实现的方式是：在driver代码中，声明一个变量</span><span style=\\"color:#98C379;--shiki-dark:#98C379\\">\\"类似一个容器\\"</span><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">，来进行接收累加的结果，但是发现，当前情况，driver端的变量传递给executor以后，并在executor进行计算，该变量无法返回给到driver</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   原因是：</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   a、driver端能够传递给到executor，是因为存在闭包的原因</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   b、executor不能传递过来是因为没有闭包的原因。</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   </span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   因此：我们使用了累计器的方式，将上诉声明的变量封装成累加器的方式，使的executor端计算的累加结果能够传回给到driver端。</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">-- 3.累计器实现过程：</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF;--shiki-dark:#ABB2BF\\">   累加器用来把Executor端变量信息聚合到Driver端。在Driver程序中定义的变量，在Executor端的每个Task都会得到这个变量的一份新的副本，每个task更新这些副本的值后，传回Driver端进行merge</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,k as data};
