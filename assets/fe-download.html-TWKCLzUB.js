import{_ as a,c as n,a as l,o as i}from"./app-4x2aIoqi.js";const e={};function o(p,s){return i(),n("div",null,s[0]||(s[0]=[l(`<h1 id="前端js-vue下载后台传过来的流文件" tabindex="-1"><a class="header-anchor" href="#前端js-vue下载后台传过来的流文件"><span>前端js/vue下载后台传过来的流文件</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>项目中经常需要用到下载文件，如导出用户信息，下载一些文件等。我们在vue中如何实现呢？主要有如下两种方案</p><ul><li>使用Blob对象，构造a标签</li><li>使用封装好的<strong>js-file-download</strong></li></ul><blockquote><p>这两种方法下载的文件都<strong>不会乱码</strong>，但是 <strong>不管使用哪种方法，发送请求时都要设置 responseType</strong></p></blockquote><h2 id="_2-方案一-使用blob对象-构造a标签" tabindex="-1"><a class="header-anchor" href="#_2-方案一-使用blob对象-构造a标签"><span>2. 方案一：使用Blob对象，构造a标签</span></a></h2><h3 id="_2-1-blob-简介" tabindex="-1"><a class="header-anchor" href="#_2-1-blob-简介"><span>2.1 Blob 简介</span></a></h3><p>Blob对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File接口基于Blob，继承了blob的功能并将其扩展使其支持用户系统上的文件。</p><h3 id="_2-2-blob-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-2-blob-构造函数"><span>2.2 Blob()构造函数</span></a></h3><p>语法</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> aBlob</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">( </span><span style="color:#E06C75;--shiki-dark:#E06C75;">array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">options</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> );</span></span></code></pre></div><p>参数</p><ul><li><em>array</em> 是一个由<code>ArrayBuffer</code> <code>ArrayBufferView</code>, Blob<code>, </code>DOMString<code>等对象构成的 [</code>Array<code>，或者其他类似对象的混合体，它将会被放进 </code>Blob\`。DOMStrings会被编码为UTF-8。</li><li><em>options</em> 是可选的，它可能会指定如下两个属性： <ul><li><code>type</code>，默认值为 <code>&quot;&quot;</code>，它代表了将会被放入到blob中的数组内容的MIME类型。<strong>也就是设置文件类型。</strong></li><li><code>endings</code>，默认值为<code>&quot;transparent&quot;</code>，用于指定包含行结束符<code>\\n</code>的字符串如何被写入。 它是以下两个值中的一个： <code>&quot;native&quot;</code>，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 <code>&quot;transparent&quot;</code>，代表会保持blob中保存的结束符不变。</li></ul></li></ul><h3 id="_2-3-url对象" tabindex="-1"><a class="header-anchor" href="#_2-3-url对象"><span>2.3 URL对象</span></a></h3><p>通过创建URL对象指定文件的下载链接。</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建新的URL表示指定的File对象或者Blob对象。</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> objectURL</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> window</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">window</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">revokeObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">objectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 释放内存</span></span></code></pre></div><blockquote><p>在每次调用createObjectURL()方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL()方法来释放。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p></blockquote><h3 id="_2-4-利用a标签自定义文件名" tabindex="-1"><a class="header-anchor" href="#_2-4-利用a标签自定义文件名"><span>2.4 利用a标签自定义文件名</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> link </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 生成一个a标签。</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">href</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> window</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(blob);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // href属性指定下载链接</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">download</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> fileName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // dowload属性指定文件名</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">click</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // click()事件触发下载</span></span></code></pre></div><p>download 属性设置文件名时，可以直接设置扩展名。如果没有设置，则浏览器将自动检测正确的文件扩展名并添加到文件 。</p><h3 id="_2-5-主要完整代码" tabindex="-1"><a class="header-anchor" href="#_2-5-主要完整代码"><span>2.5 主要完整代码</span></a></h3><ul><li><p>普通下载</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">axios</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">postUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">params</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">responseType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;arraybuffer&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">then</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建Blob对象，设置文件类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> blob</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">([</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">res</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;application/vnd.ms-excel&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> objectUrl</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建URL</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    location</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">href</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> objectUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">revokeObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">objectUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 释放内存</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div></li><li><p>自定义下载后的文件名</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 利用a标签自定义下载文件名</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> link</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createElement</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">axios</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">postUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">params</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">responseType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;arraybuffer&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">then</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建Blob对象，设置文件类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> blob</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">([</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">res</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;application/vnd.ms-excel&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> objectUrl</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">blob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建URL</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">href</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> objectUrl</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">download</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;xxx&#39;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 自定义文件名</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    link</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">click</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 下载文件</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    URL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">revokeObjectURL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">objectUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 释放内存</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div></li></ul><h2 id="_3-方案二-使用-js-file-download" tabindex="-1"><a class="header-anchor" href="#_3-方案二-使用-js-file-download"><span>3. 方案二：使用 <code>js-file-download</code></span></a></h2><ul><li><p>安装</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">npm</span><span style="color:#98C379;--shiki-dark:#98C379;"> install</span><span style="color:#98C379;--shiki-dark:#98C379;"> js-file-download</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --save</span></span></code></pre></div></li><li><p>使用</p><div class="language-javascript" data-ext="javascript" data-title="javascript"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> fileDownload</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;js-file-download&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">axios</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">postUrl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">params</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">responseType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;arraybuffer&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">then</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    fileDownload</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">res</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;xxx.xls&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div></li></ul><h2 id="_4-可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#_4-可能遇到的问题"><span>4. 可能遇到的问题</span></a></h2><h3 id="_4-1-axios获取不到文件名" tabindex="-1"><a class="header-anchor" href="#_4-1-axios获取不到文件名"><span>4.1 axios获取不到文件名</span></a></h3><ol><li><p>需要在服务端加上此请求头</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//响应时在响应头里添加 Access-Control-Expose-Headers </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setHeader</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Access-Control-Expose-Headers&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Content-Disposition&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div></li><li><p>前端还是用原生的axios post 方法吧</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>download(url, params, filename) {</span></span>
<span class="line"><span>        // NProgress.start()</span></span>
<span class="line"><span>        return axios.post(url, params, {</span></span>
<span class="line"><span>            timeout: 300000,</span></span>
<span class="line"><span>            baseURL: baseUrl,</span></span>
<span class="line"><span>            transformRequest: [(params) =&gt; {</span></span>
<span class="line"><span>                return tansParams(params);</span></span>
<span class="line"><span>            }],</span></span>
<span class="line"><span>            headers: {</span></span>
<span class="line"><span>                &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span></span>
<span class="line"><span>                &quot;Authorization&quot;: &quot;Bearer &quot; + getToken()</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            responseType: &quot;blob&quot;</span></span>
<span class="line"><span>        }).then((response) =&gt; {</span></span>
<span class="line"><span>            if (filename == null||filename== undefined||filename==&#39;&#39;){</span></span>
<span class="line"><span>                // 前提是服务端要在header设置Access-Control-Expose-Headers: Content-Disposition</span></span>
<span class="line"><span>                // 前端才能正常获取到Content-Disposition内容</span></span>
<span class="line"><span>                const disposition = response.headers[&quot;content-disposition&quot;];</span></span>
<span class="line"><span>                let filename = disposition.substring(disposition.indexOf(&quot;filename=&quot;) + 9, disposition.length);</span></span>
<span class="line"><span>                // iso8859-1的字符转换成中文</span></span>
<span class="line"><span>                filename = decodeURI(escape(filename));</span></span>
<span class="line"><span>                // 去掉双引号</span></span>
<span class="line"><span>                filename = filename.replace(/\\&quot;/g, &quot;&quot;);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span>            const content = response.data;</span></span>
<span class="line"><span>            const blob = new Blob([content]);</span></span>
<span class="line"><span>            if (&quot;download&quot; in document.createElement(&quot;a&quot;)) {</span></span>
<span class="line"><span>                const elink = document.createElement(&quot;a&quot;);</span></span>
<span class="line"><span>                elink.download = filename;</span></span>
<span class="line"><span>                elink.style.display = &quot;none&quot;;</span></span>
<span class="line"><span>                elink.href = URL.createObjectURL(blob);</span></span>
<span class="line"><span>                document.body.appendChild(elink);</span></span>
<span class="line"><span>                elink.click();</span></span>
<span class="line"><span>                URL.revokeObjectURL(elink.href);</span></span>
<span class="line"><span>                document.body.removeChild(elink);</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>                navigator.msSaveBlob(blob, filename);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            // NProgress.done()</span></span>
<span class="line"><span>        }).catch((r) =&gt; {</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    },</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://segmentfault.com/a/1190000020540788" target="_blank" rel="noopener noreferrer">前端js/vue下载后台传过来的流文件（如excel）并设置下载文件名</a></p>`,29)]))}const t=a(e,[["render",o],["__file","fe-download.html.vue"]]),c=JSON.parse('{"path":"/posts/Web/frontend-base/fe-download.html","title":"前端js/vue下载后台传过来的流文件","lang":"zh-CN","frontmatter":{"description":"前端js/vue下载后台传过来的流文件 1. 简介 项目中经常需要用到下载文件，如导出用户信息，下载一些文件等。我们在vue中如何实现呢？主要有如下两种方案 使用Blob对象，构造a标签 使用封装好的js-file-download 这两种方法下载的文件都不会乱码，但是 不管使用哪种方法，发送请求时都要设置 responseType 2. 方案一：使用...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Web/frontend-base/fe-download.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"前端js/vue下载后台传过来的流文件"}],["meta",{"property":"og:description","content":"前端js/vue下载后台传过来的流文件 1. 简介 项目中经常需要用到下载文件，如导出用户信息，下载一些文件等。我们在vue中如何实现呢？主要有如下两种方案 使用Blob对象，构造a标签 使用封装好的js-file-download 这两种方法下载的文件都不会乱码，但是 不管使用哪种方法，发送请求时都要设置 responseType 2. 方案一：使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端js/vue下载后台传过来的流文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 方案一：使用Blob对象，构造a标签","slug":"_2-方案一-使用blob对象-构造a标签","link":"#_2-方案一-使用blob对象-构造a标签","children":[{"level":3,"title":"2.1 Blob 简介","slug":"_2-1-blob-简介","link":"#_2-1-blob-简介","children":[]},{"level":3,"title":"2.2 Blob()构造函数","slug":"_2-2-blob-构造函数","link":"#_2-2-blob-构造函数","children":[]},{"level":3,"title":"2.3 URL对象","slug":"_2-3-url对象","link":"#_2-3-url对象","children":[]},{"level":3,"title":"2.4 利用a标签自定义文件名","slug":"_2-4-利用a标签自定义文件名","link":"#_2-4-利用a标签自定义文件名","children":[]},{"level":3,"title":"2.5 主要完整代码","slug":"_2-5-主要完整代码","link":"#_2-5-主要完整代码","children":[]}]},{"level":2,"title":"3. 方案二：使用 js-file-download","slug":"_3-方案二-使用-js-file-download","link":"#_3-方案二-使用-js-file-download","children":[]},{"level":2,"title":"4. 可能遇到的问题","slug":"_4-可能遇到的问题","link":"#_4-可能遇到的问题","children":[{"level":3,"title":"4.1 axios获取不到文件名","slug":"_4-1-axios获取不到文件名","link":"#_4-1-axios获取不到文件名","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":3.64,"words":1093},"filePathRelative":"posts/Web/frontend-base/fe-download.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>项目中经常需要用到下载文件，如导出用户信息，下载一些文件等。我们在vue中如何实现呢？主要有如下两种方案</p>\\n<ul>\\n<li>使用Blob对象，构造a标签</li>\\n<li>使用封装好的<strong>js-file-download</strong></li>\\n</ul>\\n<blockquote>\\n<p>这两种方法下载的文件都<strong>不会乱码</strong>，但是 <strong>不管使用哪种方法，发送请求时都要设置 responseType</strong></p>\\n</blockquote>\\n<h2>2. 方案一：使用Blob对象，构造a标签</h2>","autoDesc":true}');export{t as comp,c as data};
