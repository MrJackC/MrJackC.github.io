import{_ as i,c as l,a as r,b as e,e as n,w as o,d as t,r as p,o as d}from"./app-B1yAKrtW.js";const c={};function h(g,a){const s=p("font");return d(),l("div",null,[a[37]||(a[37]=r('<h1 id="java-web基础-tomcat-http协议" tabindex="-1"><a class="header-anchor" href="#java-web基础-tomcat-http协议"><span>Java Web基础 - Tomcat&amp;Http协议</span></a></h1><h1 id="tomcat-http协议" tabindex="-1"><a class="header-anchor" href="#tomcat-http协议"><span>Tomcat&amp;Http协议</span></a></h1><h1 id="_1-企业开发简介" tabindex="-1"><a class="header-anchor" href="#_1-企业开发简介"><span>1 企业开发简介</span></a></h1><h2 id="_1-1-javaee规范" tabindex="-1"><a class="header-anchor" href="#_1-1-javaee规范"><span>1.1 JavaEE规范</span></a></h2><p><code>JavaEE</code>规范是<code>J2EE</code>规范的新名称，早期被称为<code>J2EE</code>规范，其全称是<code>Java 2 Platform Enterprise Edition</code>，它是由SUN公司领导、各厂家共同制定并得到广泛认可的工业标准（<code>JCP</code>组织成员）。之所以改名为<code>JavaEE</code>，目的还是让大家清楚<code>J2EE</code>只是<code>Java</code>企业应用。在2004年底中国软件技术大会<code>Ioc</code>微容器(也就是<code>Jdon</code>框架的实现原理)演讲中指出：我们需要一个跨<code>J2SE/WEB/EJB</code>的微容器，保护我们的业务核心组件，以延续它的生命力，而不是依赖<code>J2SE/J2EE</code>版本.此次<code>J2EE</code>改名为<code>Java EE</code>，实际也反映出业界这种共同心声。</p><p><code>JavaEE</code>规范是很多<code>Java</code>开发技术的总称。这些技术规范都是沿用自<code>J2EE</code>的。一共包括了13个技术规范。例如：<code>jsp/servlet</code>，<code>jndi</code>，<code>jaxp</code>，<code>jdbc</code>，<code>jni</code>，<code>jaxb</code>，<code>jmf</code>，<code>jta</code>，<code>jpa</code>，<code>EJB</code>等。</p><p>其中，<code>JCP</code>组织的全称是<code>Java Community Process</code>。它是一个开放的国际组织，主要由<code>Java</code>开发者以及被授权者组成，职能是发展和更新。成立于1998年。官网是：<a href="https://jcp.org/en/home/index" target="_blank" rel="noopener noreferrer">JCP</a></p><p><code>JavaEE</code>的版本是延续了<code>J2EE</code>的版本，但是没有继续采用其命名规则。<code>J2EE</code>的版本从1.0开始到1.4结束，而<code>JavaEE</code>版本是从<code>JavaEE 5</code>版本开始，目前最新的的版本是<code>JavaEE 8</code>。</p><p>详情请参考：<a href="https://www.oracle.com/technetwork/cn/java/javaee/overview/index.html" target="_blank" rel="noopener noreferrer">JavaEE8规范概览</a></p><h2 id="_1-2-web概述" tabindex="-1"><a class="header-anchor" href="#_1-2-web概述"><span>1.2 Web概述</span></a></h2>',10)),e("p",null,[a[1]||(a[1]=r("Web在英文中的含义是网状物，网络。在计算机领域，它通常指的是后者，即<b>网络</b>。像我们前面接触的<code>WWW</code>，它是由3个单词组成的，即：<code>World Wide Web </code>，中文含义是<b>万维网</b>。而我们前面学的<code>HTML</code>，<code>CSS</code>和<code>JS</code>的参考文档《<code>W3School</code>全套教程》中的<code>W3C</code>就是万维网联盟。他们的出现都是为了让我们在网络的世界中获取资源，这些资源的存放之处，我们称之为",19)),e("b",null,[n(s,{color:"red"},{default:o(()=>a[0]||(a[0]=[t("网站")])),_:1})]),a[2]||(a[2]=t("。我们通过输入网站的地址（即：网址），就可以访问网站中提供的资源。在网上我们能访问到的内容全是资源（不区分局域网还是广域网）。只不过，不同类型的资源展示的效果不一样。"))]),a[38]||(a[38]=r('<p>首先，我们先来介绍资源的分类，它分为静态资源和动态资源。其中：</p><p>静态资源指的是，网站中提供给人们展示的资源是一成不变的，也就是说不同人或者在不同时间，看到的内容都是一样的。例如：我们看到的新闻，网站的使用手册，网站功能说明文档等等。而作为开发者，我们编写的<code>html</code>,<code>css</code>,<code>js</code>,图片，多媒体等等都可以称为静态资源。</p><p>动态资源它指的是，网站中提供给人们展示的资源是由程序产生的，在不同的时间或者用不同的人员由于身份的不同，所看到的内容是不一样的。例如：我们在12306上购买火车票，火车票的余票数由于时间的变化，会逐渐的减少，直到最后没有余票。还有，我们在<code>CSDN</code>上下载资料，只有登录成功后，且积分足够时才能下载。否则就不能下载，这就是访客身份和会员身份的区别。作为开发人员，我们编写的<code>JSP</code>，<code>servlet</code>，<code>php</code>，<code>ASP</code>等都是动态资源。</p><p>关于广域网和局域网的划分，广域网指的就是万维网，也就是我们说的互联网。局域网是指的是在一定范围之内可以访问的网络，出了这个范围，就不能再使用的网络。</p><h2 id="_1-3-系统结构" tabindex="-1"><a class="header-anchor" href="#_1-3-系统结构"><span>1.3 系统结构</span></a></h2><h3 id="_1-3-1-系统结构简介" tabindex="-1"><a class="header-anchor" href="#_1-3-1-系统结构简介"><span>1.3.1 系统结构简介</span></a></h3><p>在我们前面课程的学习中，开发的都是<code>Java</code>工程。这些工程在企业中称之为项目或者产品。项目也好，产品也罢，它是有系统架构的，系统架构的划分有很多种方式。我们今天讨论的是基础结构上的划分。除此之外，还有技术选型划分，部署方式划分等等。</p><p>基础结构划分：C/S结构，B/S结构两类。</p><p>技术选型划分：Model1模型，Model2模型，MVC模型和三层架构+MVC模型。</p><p>部署方式划分：一体化架构，垂直拆分架构，分布式架构，流动计算架构，微服务架构。</p><h3 id="_1-3-2-c-s结构" tabindex="-1"><a class="header-anchor" href="#_1-3-2-c-s结构"><span>1.3.2 C/S结构</span></a></h3><p>它指的是客户端——服务器的方式。其中C代表着Client，S代表着服务器。C/S结构的系统设计图如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246743.jpg" alt="CS结构图" tabindex="0" loading="lazy"><figcaption>CS结构图</figcaption></figure><h3 id="_1-3-3-b-s结构" tabindex="-1"><a class="header-anchor" href="#_1-3-3-b-s结构"><span>1.3.3 B/S结构</span></a></h3><p>它指的是浏览器——服务器的方式。其中B代表着Browser，S代表着服务器。B/S结构的系统设计图如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246807.jpg" alt="BS结构图" tabindex="0" loading="lazy"><figcaption>BS结构图</figcaption></figure><h3 id="_1-3-4-两种结构的区别及优略" tabindex="-1"><a class="header-anchor" href="#_1-3-4-两种结构的区别及优略"><span>1.3.4 两种结构的区别及优略</span></a></h3><p><strong>两种结构的区别</strong></p><p>第一：硬件环境不同，C/S通常是建立在专用的网络或小范围的网络环境上（即局域网），且必须要安装客户端。而B/S是建立在广域网上的，适应范围强，通常有操作系统和浏览器就行。</p><p>第二：C/S结构比B/S结构更安全，因为用户群相对固定，对信息的保护更强。</p><p>第三：B/S结构维护升级比较简单，而C/S结构维护升级相对困难。</p><p><strong>优略</strong></p><p>1 C/S：是能充分发挥客户端PC的处理能力，很多工作可以在客户端处理后再提交给服务器。对应的优点就是客户端响应速度快。</p><p>2 B/S：总体拥有成本低、维护方便、 分布性强、开发简单，可以不用安装任何专门的软件就能 实现在任何地方进行操作，客户端零维护，系统的扩展非常容易，只要有一台能上网的电脑就能使用。</p><p><strong>关于课程中结构的选择</strong></p>',25)),e("p",null,[e("b",null,[n(s,{color:"red"},{default:o(()=>a[3]||(a[3]=[t("我们的课程中涉及的系统结构都是是基于B/S结构。")])),_:1})])]),a[39]||(a[39]=r(`<h1 id="_2-tomcat" tabindex="-1"><a class="header-anchor" href="#_2-tomcat"><span>2 Tomcat</span></a></h1><h2 id="_2-1-tomcat介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-tomcat介绍"><span>2.1 Tomcat介绍</span></a></h2><h3 id="_2-1-1-关于服务器" tabindex="-1"><a class="header-anchor" href="#_2-1-1-关于服务器"><span>2.1.1 关于服务器</span></a></h3><p>服务器的概念非常的广泛，它可以指代一台特殊的计算机（相比普通计算机运行更快、负载更高、价格更贵），也可以指代用于部署网站的应用。我们这里说的服务器，其实是web服务器，或者应用服务器。它本质就是一个软件，一个应用。作用就是发布我们的应用（工程），让用户可以通过浏览器访问我们的应用。</p><p>常见的应用服务器，请看下表：</p><table><thead><tr><th>服务器名称</th><th>说明</th></tr></thead><tbody><tr><td>weblogic</td><td>实现了javaEE规范，重量级服务器，又称为javaEE容器</td></tr><tr><td>websphereAS</td><td>实现了javaEE规范，重量级服务器。</td></tr><tr><td>JBOSSAS</td><td>实现了JavaEE规范，重量级服务器。免费的。</td></tr><tr><td>Tomcat</td><td>实现了jsp/servlet规范，是一个轻量级服务器，开源免费。</td></tr></tbody></table><h3 id="_2-1-2-tomcat下载与安装" tabindex="-1"><a class="header-anchor" href="#_2-1-2-tomcat下载与安装"><span>2.1.2 Tomcat下载与安装</span></a></h3><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat官网下载地址</a></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246843.png" alt="tomcat官网" tabindex="0" loading="lazy"><figcaption>tomcat官网</figcaption></figure><h3 id="_2-1-3-tomcat各版本所需支持" tabindex="-1"><a class="header-anchor" href="#_2-1-3-tomcat各版本所需支持"><span>2.1.3 Tomcat各版本所需支持</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246869.png" alt="Tomcat各版本使用技术支持" tabindex="0" loading="lazy"><figcaption>Tomcat各版本使用技术支持</figcaption></figure><h3 id="_2-1-4-tomcat目录结构详解" tabindex="-1"><a class="header-anchor" href="#_2-1-4-tomcat目录结构详解"><span>2.1.4 Tomcat目录结构详解</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246902.png" alt="tomcat目录结构详解" tabindex="0" loading="lazy"><figcaption>tomcat目录结构详解</figcaption></figure><h2 id="_2-2-tomcat基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-tomcat基本使用"><span>2.2 Tomcat基本使用</span></a></h2><h3 id="_2-2-1-tomcat启动和停止及问题分析解决" tabindex="-1"><a class="header-anchor" href="#_2-2-1-tomcat启动和停止及问题分析解决"><span>2.2.1 Tomcat启动和停止及问题分析解决</span></a></h3><h4 id="_1-启动和停止" tabindex="-1"><a class="header-anchor" href="#_1-启动和停止"><span>1）启动和停止</span></a></h4><p>Tomcat服务器的启动文件在二进制文件目录中：<img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246932.png" alt="1574762703742" loading="lazy">，这两个文件就是Tomcat的启动文件。</p><p>Tomcat服务器的停止文件也在二进制文件目录中：<img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246958.png" alt="1574762805135" loading="lazy">，这两个文件就是Tomcat的停止文件。</p><p>其中<code>.bat</code>文件是针对<code>windows</code>系统的运行程序，<code>.sh</code>文件是针对<code>linux</code>系统的运行程序。</p><h4 id="_2-启动问题" tabindex="-1"><a class="header-anchor" href="#_2-启动问题"><span>2）启动问题</span></a></h4><p><strong>第一个问题：启动一闪而过</strong></p><p>原因：没有配置环境变量。</p><p>解决办法：配置上JAVA_HOME环境变量</p><p><strong>第二个：Address already in use : JVM_Bind</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246989.png" alt="1574768107180" tabindex="0" loading="lazy"><figcaption>1574768107180</figcaption></figure><p>原因：端口被占用</p><p>解决办法：找到占用该端口的应用</p><p>​ 进程不重要：使用cmd命令：netstat -a -o 查看pid 在任务管理器中结束占用端口的进程。</p><p>​ 进程很重要：修改自己的端口号。修改的是Tomcat目录下<code>\\conf\\server.xml</code>中的配置。</p><p>​ <img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246007.png" alt="1574768222804" loading="lazy"></p><p><strong>第三个：启动产生很多异常，但能正常启动</strong></p><p>原因：Tomcat中部署着很多项目，每次启动这些项目都会启动。而这些项目中有启动报异常的。</p><p>解决办法：</p><p>​ 能找到报异常的项目，就把它从发布目录中移除。</p><p>​ 不能确定报异常的项目，就重新解压一个新的Tomcat。</p><p><strong>第四个：其它问题</strong></p><p>例如：启动产生异常，但是不能正常启动。此时就需要解压一个新的Tomcat启动，来确定是系统问题，还是Tomcat的问题。</p><p>所以，此时就需要具体问题，具体分析，然后再对症解决。</p><h3 id="_2-2-2-idea集成tomcat服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-2-idea集成tomcat服务器"><span>2.2.2 IDEA集成Tomcat服务器</span></a></h3><p><strong>第一步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246032.png" alt="IDEA配置Tomcat1" tabindex="0" loading="lazy"><figcaption>IDEA配置Tomcat1</figcaption></figure><p><strong>第二步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246057.png" alt="IDEA配置Tomcat2" tabindex="0" loading="lazy"><figcaption>IDEA配置Tomcat2</figcaption></figure><p><strong>第三步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246081.png" alt="IDEA配置Tomcat3" tabindex="0" loading="lazy"><figcaption>IDEA配置Tomcat3</figcaption></figure><p><strong>第四步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246104.png" alt="IDEA配置Tomcat4" tabindex="0" loading="lazy"><figcaption>IDEA配置Tomcat4</figcaption></figure><h3 id="_2-2-3-linux系统安装tomcat" tabindex="-1"><a class="header-anchor" href="#_2-2-3-linux系统安装tomcat"><span>2.2.3 Linux系统安装Tomcat</span></a></h3><p><strong>第一步：下载tomcat</strong></p><p>参考**2.1.2小节的《Tomcat下载与安装》**进入Tomcat官网，找到对应版本点击<code>download</code>进入下载页面，如下图：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246131.png" alt="Linux版Tomcat" tabindex="0" loading="lazy"><figcaption>Linux版Tomcat</figcaption></figure><p><strong>第二步：上传到linux</strong></p><p>在crt上 使用 alt+p<br> 将windows上的软件拖进去即可(root目录)</p><p><strong>第三步：在 /usr/local 新建一个文件夹tomcat</strong></p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mkdir /usr/local/tomcat</span></span></code></pre></div><p><strong>第四步：移动 tomcat...tar.gz 到 /usr/local/tomcat</strong></p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mv apache-tomcat-8.5.32.tar.gz /usr/local/tomcat/</span></span></code></pre></div><p><strong>第五步：进入/usr/local/tomcat目录,解压Tomcat</strong></p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>cd /usr/local/tomcat</span></span>
<span class="line"><span>tar -xvf apache-tomcat-8.5.32.tar.gz</span></span></code></pre></div><p><strong>第六步：进入 /usr/local/tomcat/apache-tomcat-8.5.32/bin</strong></p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>cd /usr/local/tomcat/apache-tomcat-8.5.32/bin</span></span></code></pre></div><p><strong>第七步：启动tomcat</strong></p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>方式1:</span></span>
<span class="line"><span>	sh startup.sh</span></span>
<span class="line"><span>方式2:</span></span>
<span class="line"><span>	./startup.sh</span></span></code></pre></div><p>**第八步：修改防火墙的规则 **</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>方式1:service iptables stop  关闭防火墙(不建议); 用到哪一个端口号就放行哪一个(80,8080,3306...)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方式2:放行8080 端口</span></span>
<span class="line"><span>	修改配置文件</span></span>
<span class="line"><span>		cd /etc/sysconfig</span></span>
<span class="line"><span>		vi iptables</span></span>
<span class="line"><span>			复制(yy , p)	</span></span>
<span class="line"><span>				-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span></span>
<span class="line"><span>			改成</span></span>
<span class="line"><span>				-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span></span>
<span class="line"><span>		重启加载防火墙或者重启防火墙</span></span>
<span class="line"><span>			service iptables reload  </span></span>
<span class="line"><span>			或者</span></span>
<span class="line"><span>			service iptables restart</span></span></code></pre></div><h2 id="_2-3-tomcat发布应用-javaweb应用" tabindex="-1"><a class="header-anchor" href="#_2-3-tomcat发布应用-javaweb应用"><span>2.3 Tomcat发布应用-JavaWeb应用</span></a></h2><h3 id="_2-3-1-javaweb工程概述" tabindex="-1"><a class="header-anchor" href="#_2-3-1-javaweb工程概述"><span>2.3.1 JavaWeb工程概述</span></a></h3><p><code>JavaWeb</code>应用是一个全新的应用种类。这类应用程序指供浏览器访问的程序，通常也简称为web应用。</p><p>一个web应用由多个静态web资源和动态web资源组成，例如：html、css、js文件，jsp文件、java程序、支持jar包、工程配置文件、图片、音视频等等。</p><p>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给Web服务器管理（Tomcat就是Web服务器之一），这个过程称之为虚似目录的映射。</p><h3 id="_2-3-2-javaweb应用目录结构详解" tabindex="-1"><a class="header-anchor" href="#_2-3-2-javaweb应用目录结构详解"><span>2.3.2 JavaWeb应用目录结构详解</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246165.png" alt="1574768644245" tabindex="0" loading="lazy"><figcaption>1574768644245</figcaption></figure><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>myapp--------------应用名称</span></span>
<span class="line"><span>    1.html</span></span>
<span class="line"><span>    css/css.css</span></span>
<span class="line"><span>    js/demo.js</span></span>
<span class="line"><span>	WEB-INF--------如果有web.xml或者.class文件时，该目录必须存在，且严格区分大小写。</span></span>
<span class="line"><span>		   --------该目录下的资源，客户端是无法直接访问的。</span></span>
<span class="line"><span>           --------目录中内容如下：</span></span>
<span class="line"><span>        classes目录----------------web应用的class文件（加载顺序：我们的class，lib目录中的jar包，tomcat的lib目录中的jar包。优先级依次降低）</span></span>
<span class="line"><span>        lib目录--------------------web应用所需的jar包（tomcat的lib目录下jar为所有应用共享）</span></span>
<span class="line"><span>        web.xml-------------------web应用的主配置文件</span></span></code></pre></div><h3 id="_2-3-3-javaweb应用的创建" tabindex="-1"><a class="header-anchor" href="#_2-3-3-javaweb应用的创建"><span>2.3.3 JavaWeb应用的创建</span></a></h3><p><strong>第一步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246200.png" alt="IDEA创建Javaweb工程" tabindex="0" loading="lazy"><figcaption>IDEA创建Javaweb工程</figcaption></figure><p><strong>第二步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246230.png" alt="创建Javaweb工程2" tabindex="0" loading="lazy"><figcaption>创建Javaweb工程2</figcaption></figure><p><strong>第三步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246254.png" alt="创建Javaweb工程3" tabindex="0" loading="lazy"><figcaption>创建Javaweb工程3</figcaption></figure><p><strong>第四步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246285.png" alt="创建Javaweb工程4" tabindex="0" loading="lazy"><figcaption>创建Javaweb工程4</figcaption></figure><h3 id="_2-3-4-javaweb应用的部署" tabindex="-1"><a class="header-anchor" href="#_2-3-4-javaweb应用的部署"><span>2.3.4 JavaWeb应用的部署</span></a></h3><h4 id="_1-idea部署" tabindex="-1"><a class="header-anchor" href="#_1-idea部署"><span>1）IDEA部署</span></a></h4><p><strong>第一步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246306.png" alt="IDEA发布工程1" tabindex="0" loading="lazy"><figcaption>IDEA发布工程1</figcaption></figure><p><strong>第二步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246333.png" alt="IDEA发布工程2" tabindex="0" loading="lazy"><figcaption>IDEA发布工程2</figcaption></figure><p><strong>第三步</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246354.png" alt="IDEA发布工程3-启动服务" tabindex="0" loading="lazy"><figcaption>IDEA发布工程3-启动服务</figcaption></figure><h4 id="_2-war包发布" tabindex="-1"><a class="header-anchor" href="#_2-war包发布"><span>2）war包发布</span></a></h4>`,91)),e("p",null,[e("strong",null,[a[9]||(a[9]=t("第一步：使用")),e("b",null,[a[6]||(a[6]=e("code",null,"jar -cvf war",-1)),a[7]||(a[7]=t(" ")),n(s,{color:"blue"},{default:o(()=>a[4]||(a[4]=[t("包的名称")])),_:1}),a[8]||(a[8]=t("  ")),n(s,{color:"purple"},{default:o(()=>a[5]||(a[5]=[t("当前目录中哪些资源要打入war")])),_:1})])])]),a[40]||(a[40]=r('<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246378.png" alt="jar命令" tabindex="0" loading="lazy"><figcaption>jar命令</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246401.png" alt="war包" tabindex="0" loading="lazy"><figcaption>war包</figcaption></figure><p><strong>第二步：把打好的war拷贝到tomcat的webapps目录中</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246427.png" alt="拷贝war包到webapps" tabindex="0" loading="lazy"><figcaption>拷贝war包到webapps</figcaption></figure><p><strong>第三步：启动服务时，tomcat会自动解压。</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246451.png" alt="启动Tomcat自动解压war包" tabindex="0" loading="lazy"><figcaption>启动Tomcat自动解压war包</figcaption></figure><h3 id="_2-4-1-tomcat配置虚拟目录" tabindex="-1"><a class="header-anchor" href="#_2-4-1-tomcat配置虚拟目录"><span>2.4.1 Tomcat配置虚拟目录</span></a></h3><p>虚拟目录的配置，支持两种方式。第一种是通过在主配置文件中添加标签实现。第二种是通过写一个独立配置文件实现。</p>',8)),e("p",null,[a[11]||(a[11]=r("第一种方式：在<code>server.xml</code>的<code>&lt;Host&gt;</code>元素中加一个<code>&lt;Context path=&quot;&quot; docBase=&quot;&quot;/&gt;</code>元素。<br> ​ <code>path</code>：访问资源URI。URI名称可以随便起，但是必须在前面加上一个/<br> ​ <code>docBase</code>：资源所在的磁盘物理地址。<br> 第二种方式：是写一个独立的<code>xml</code>文件，该文件名可以随便起。在文件内写一个<code>&lt;Context/&gt;</code>元素。<br> ​ 该文件要放在Tomcat目录中的<code>conf\\Catalina\\localhost\\</code>目录下。<br> 需要注意的是，在使用了独立的配置文件之后，访问资源URI就变成了",27)),e("b",null,[n(s,{color:"red"},{default:o(()=>a[10]||(a[10]=[t("/+文件的名称")])),_:1})]),a[12]||(a[12]=t("。而")),a[13]||(a[13]=e("code",null,"Context",-1)),a[14]||(a[14]=t("的")),a[15]||(a[15]=e("code",null,"path",-1)),a[16]||(a[16]=t("属性就失效了。"))]),a[41]||(a[41]=r(`<h3 id="_2-4-2-tomcat配置虚拟主机" tabindex="-1"><a class="header-anchor" href="#_2-4-2-tomcat配置虚拟主机"><span>2.4.2 Tomcat配置虚拟主机</span></a></h3><p>在<code>&lt;Engine&gt;</code>元素中添加一个<code>&lt;Host name=&quot;&quot; appBase=&quot;&quot; unparkWARs=&quot;&quot; autoDeploy=&quot;&quot; /&gt;</code>，其中：<br> ​ <code>name</code>：指定主机的名称<br> ​ <code>appBase</code>：当前主机的应用发布目录<br> ​ <code>unparkWARs</code>：启动时是否自动解压war包<br> ​ <code>autoDeploy</code>：是否自动发布</p><p>配置示例如下：</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Host</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;www.itcast.cn&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> appBase</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;D:\\itcastapps&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> unpackWARs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> autoDeploy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Host</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;www.itheima.com&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> appBase</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;D:\\itheimaapps&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> unpackWARs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> autoDeploy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre></div><h3 id="_2-4-3-tomcat默认项配置" tabindex="-1"><a class="header-anchor" href="#_2-4-3-tomcat默认项配置"><span>2.4.3 Tomcat默认项配置</span></a></h3><p><strong>配置默认端口</strong></p>`,6)),e("p",null,[a[18]||(a[18]=t("Tomcat服务器主配置文件中配置着访问端口，它在配置文件中写的值是：8080。但是它不是Tomcat的默认端口。我们此处说的默认端口是，当使用默认值的时候，端口号可以省略。Tomcat的默认端口是")),e("b",null,[n(s,{color:"red"},{default:o(()=>a[17]||(a[17]=[t("80")])),_:1})]),a[19]||(a[19]=t("。"))]),a[42]||(a[42]=r(`<p>配置方式如下：</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Connector</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> port</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;80&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> protocol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;HTTP/1.1&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> connectionTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;20000&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> redirectPort</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;8443&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre></div><p><strong>配置默认应用</strong></p><p>有两种方式配置默认应用。<br> 第一种：把要作为默认应用的应用，名称改为<code>ROOT</code>。放到<code>webapps</code>目录中。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246475.png" alt="默认应用1" tabindex="0" loading="lazy"><figcaption>默认应用1</figcaption></figure><p>第二种：写一个独立的配置文件，文件名称为<code>ROOT.xml</code>。<br> ​ 注意：<code>ROOT</code>必须大写。当使用了独立的<code>ROOT.xml</code>文件时，<code>webapps</code>下<code>ROOT</code>应用就不是默认应用了。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246500.png" alt="默认应用2" tabindex="0" loading="lazy"><figcaption>默认应用2</figcaption></figure><p><strong>配置默认主页</strong></p><p>首先要明确的是，配置默认主页是针对应用说的。是应用的默认主页。<br> 在应用的web.xml中配置：</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file-list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;默认主页&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file-list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file-list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;index.html&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;index.htm&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;index.jsp&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">welcome-file-list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h1 id="_3-http协议" tabindex="-1"><a class="header-anchor" href="#_3-http协议"><span>3 HTTP协议</span></a></h1><h2 id="_3-1-http协议概述" tabindex="-1"><a class="header-anchor" href="#_3-1-http协议概述"><span>3.1 HTTP协议概述</span></a></h2><h3 id="_3-1-1-http协议概念" tabindex="-1"><a class="header-anchor" href="#_3-1-1-http协议概念"><span>3.1.1 HTTP协议概念</span></a></h3><p>HTTP的全称是：Hyper Text Transfer Protocol，意为 超文本传输协议。它指的是服务器和客户端之间交互必须遵循的一问一答的规则。形容这个规则：问答机制、握手机制。</p><p>它规范了请求和响应内容的类型和格式。</p><p>HTTP协议是由<code>W3C</code>组织管理和维护的。</p><h3 id="_3-1-2-http协议版本" tabindex="-1"><a class="header-anchor" href="#_3-1-2-http协议版本"><span>3.1.2 HTTP协议版本</span></a></h3><p>目前HTTP协议主要是1.0版本和1.1版本。这两个版本的区别主要是两个方面。</p><p>第一：HTTP1.1版本比1.0版本多了一些消息头。</p><p>第二：HTTP1.1版本和1.0版本的执行过程不一样。执行过程如下：</p><table><thead><tr><th>HTTP1.0</th><th>HTTP1.1</th></tr></thead><tbody><tr><td>创建连接（TCP/IP）</td><td>创建连接（TCP/IP）</td></tr><tr><td>发送请求</td><td>发送请求1</td></tr><tr><td>得到响应</td><td>得到响应1</td></tr><tr><td>关闭连接</td><td>发送请求2</td></tr><tr><td>创建连接（TCP/IP）</td><td>得到响应2</td></tr><tr><td>发送请求</td><td>.......</td></tr><tr><td>得到响应</td><td>.......</td></tr><tr><td>关闭连接</td><td>连接超时或手动关闭连接</td></tr></tbody></table><h3 id="_3-1-3-http协议相关说明" tabindex="-1"><a class="header-anchor" href="#_3-1-3-http协议相关说明"><span>3.1.3 HTTP协议相关说明</span></a></h3><p>HTTP协议概念是客户浏览器和服务器一种一问一答的规则，那么必须要有问有答，而且要先问后答。<br> 但是我们使用<code>&lt;script&gt;</code>,<code>&lt;link&gt;</code>和<code>&lt;img&gt;</code>标签，没有手动发起请求，但是仍然能从服务器端拿到数据，原因就是：<strong>在浏览器遇到<code>&lt;script&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;img&gt;</code>标签时会自动发出请求。</strong></p><h2 id="_3-2-http协议组成" tabindex="-1"><a class="header-anchor" href="#_3-2-http协议组成"><span>3.2 HTTP协议组成</span></a></h2><p>由HTTP协议的概念可知，它分为问和答两部分。其中问指的就是请求部分，而答指的就是响应部分。</p><h3 id="_3-2-1请求部分" tabindex="-1"><a class="header-anchor" href="#_3-2-1请求部分"><span>3.2.1请求部分</span></a></h3><p>请求行： 永远位于请求的第一行<br> 请求消息头： 从第二行开始，到第一个空行结束<br> 请求的正文： 从第一个空行后开始，到正文的结束</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246530.jpg" alt="请求部分" tabindex="0" loading="lazy"><figcaption>请求部分</figcaption></figure><h3 id="_3-2-2-响应部分" tabindex="-1"><a class="header-anchor" href="#_3-2-2-响应部分"><span>3.2.2 响应部分</span></a></h3><p>响应行： 永远位于响应的第一行<br> 响应消息头： 从第二行开始，到第一个空行结束<br> 响应的正文： 从第一个空行后开始，到正文的结束</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246569.jpg" alt="响应部分" tabindex="0" loading="lazy"><figcaption>响应部分</figcaption></figure><h3 id="_3-3-3-消息头的共性分析" tabindex="-1"><a class="header-anchor" href="#_3-3-3-消息头的共性分析"><span>3.3.3 消息头的共性分析</span></a></h3>`,34)),e("p",null,[a[24]||(a[24]=t("消息头名称首字母大写，多个单词每个单词的首字母都大写。")),a[25]||(a[25]=e("br",null,null,-1)),a[26]||(a[26]=t(" 多个单词用")),e("b",null,[n(s,{color:"red"},{default:o(()=>a[20]||(a[20]=[t("-")])),_:1})]),a[27]||(a[27]=t("分隔")),a[28]||(a[28]=e("br",null,null,-1)),a[29]||(a[29]=t(" 名称和值之间用")),e("b",null,[n(s,{color:"red"},{default:o(()=>a[21]||(a[21]=[t("冒号加空格")])),_:1})]),a[30]||(a[30]=t("分隔")),a[31]||(a[31]=e("br",null,null,-1)),a[32]||(a[32]=t(" 多个值之间用")),e("b",null,[n(s,{color:"red"},{default:o(()=>a[22]||(a[22]=[t("逗号加空格")])),_:1})]),a[33]||(a[33]=t("分隔")),a[34]||(a[34]=e("br",null,null,-1)),a[35]||(a[35]=t(" 两个头之间用")),e("b",null,[n(s,{color:"red"},{default:o(()=>a[23]||(a[23]=[t("回车")])),_:1})]),a[36]||(a[36]=t("分隔"))]),a[43]||(a[43]=r(`<h2 id="_3-3-请求部分详解" tabindex="-1"><a class="header-anchor" href="#_3-3-请求部分详解"><span>3.3 请求部分详解</span></a></h2><h3 id="_3-3-1-请求行详解" tabindex="-1"><a class="header-anchor" href="#_3-3-1-请求行详解"><span>3.3.1 请求行详解</span></a></h3><p>请求行：<code>GET /myapp/2.html HTTP/1.1</code></p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求的方式。（还有POST）</td></tr><tr><td>/myapp/2.html</td><td>请求的资源。</td></tr><tr><td>HTTP/1.1</td><td>使用的协议，及协议的版本。</td></tr></tbody></table><h3 id="_3-3-2-请求消息头详解" tabindex="-1"><a class="header-anchor" href="#_3-3-2-请求消息头详解"><span>3.3.2 请求消息头详解</span></a></h3><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>告知服务器，客户浏览器所支持的MIME类型。</td></tr><tr><td>Accept-Encoding</td><td>告知服务器，客户浏览器所支持的压缩编码格式。最常用的就是gzip压缩。</td></tr><tr><td>Accept-Language</td><td>告知服务器，客户浏览器所支持的语言。一般都是zh_CN或en_US等。</td></tr><tr><td>Referer</td><td>告知服务器，当前请求的来源。<br>只有当前请求有来源的时候，才有这个消息头。从地址栏输入的没有来源。<br>作用：1 投放广告 2 防盗链</td></tr><tr><td>Content-Type</td><td>告知服务器，请求正文的MIME类型。</td></tr><tr><td>Content-Length</td><td>告知服务器，请求正文的长度。</td></tr><tr><td>User-Agent</td><td>浏览器相关信息</td></tr><tr><td>Connection: Keep-Alive</td><td>连接的状态：保持连接</td></tr><tr><td>If-Modified-Since</td><td>告知服务器，客户浏览器缓存文件的最后修改时间。</td></tr><tr><td>Cookie（********）</td><td>会话管理相关，非常的重要。</td></tr></tbody></table><h3 id="_3-3-3-请求正文详解" tabindex="-1"><a class="header-anchor" href="#_3-3-3-请求正文详解"><span>3.3.3 请求正文详解</span></a></h3><p>第一：只有post请求方式，才有请求的正文。get方式的正文是在地址栏中的。<br> 第二：表单的输入域有name属性的才会被提交。不分get和post的请求方式。<br> 第三：表单的enctype属性取值决定了请求正文的体现形式。概述的含义是：请求正文的MIME编码类型。</p><table><thead><tr><th>enctype取值</th><th>请求正文体现形式</th><th>示例</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>key=value&amp;key=value</td><td>username=test&amp;password=1234</td></tr><tr><td>multipart/form-data</td><td>此时变成了多部分表单数据。多部分是靠分隔符分隔的。</td><td>-----------------------------7df23a16c0210<br>Content-Disposition: form-data; name=&quot;username&quot;<br><br>test<br>-----------------------------7df23a16c0210<br>Content-Disposition: form-data; name=&quot;password&quot;<br><br>1234<br>-----------------------------7df23a16c0210<br>Content-Disposition: form-data; name=&quot;headfile&quot;; filename=&quot;C:\\Users\\zhy\\Desktop\\请求部分.jpg&quot;<br>Content-Type: image/pjpeg<br>-----------------------------7df23a16c0210</td></tr></tbody></table><h2 id="_3-4-响应部分详解" tabindex="-1"><a class="header-anchor" href="#_3-4-响应部分详解"><span>3.4 响应部分详解</span></a></h2><h3 id="_3-4-1-响应行详解" tabindex="-1"><a class="header-anchor" href="#_3-4-1-响应行详解"><span>3.4.1 响应行详解</span></a></h3><p>响应行：<code>HTTP/1.1 200 OK</code></p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>HTTP/1.1</td><td>使用协议的版本。</td></tr><tr><td>200</td><td>响应状态码</td></tr><tr><td>OK</td><td>状态码描述</td></tr></tbody></table><p>常用状态码介绍：</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>一切都OK&gt;</td></tr><tr><td>302/307</td><td>请求重定向(客户端行为，两次请求，地址栏发生改变)</td></tr><tr><td>304</td><td>请求资源未发生变化，使用缓存</td></tr><tr><td>404</td><td>请求资源未找到</td></tr><tr><td>500</td><td>服务器错误</td></tr></tbody></table><h3 id="_3-4-2-响应消息头详解" tabindex="-1"><a class="header-anchor" href="#_3-4-2-响应消息头详解"><span>3.4.2 响应消息头详解</span></a></h3><table><thead><tr><th>消息头</th><th>说明</th></tr></thead><tbody><tr><td>Location</td><td>请求重定向的地址，常与302,307配合使用。</td></tr><tr><td>Server</td><td>服务器相关信息。</td></tr><tr><td>Content-Type</td><td>告知客户浏览器，响应正文的MIME类型。</td></tr><tr><td>Content-Length</td><td>告知客户浏览器，响应正文的长度。</td></tr><tr><td>Content-Encoding</td><td>告知客户浏览器，响应正文使用的压缩编码格式。常用的gzip压缩。</td></tr><tr><td>Content-Language</td><td>告知客户浏览器，响应正文的语言。zh_CN或en_US等等。</td></tr><tr><td>Content-Disposition</td><td>告知客户浏览器，以下载的方式打开响应正文。</td></tr><tr><td>Refresh</td><td>定时刷新</td></tr><tr><td>Last-Modified</td><td>服务器资源的最后修改时间。</td></tr><tr><td>Set-Cookie（*******）</td><td>会话管理相关，非常的重要</td></tr><tr><td>Expires:-1</td><td>服务器资源到客户浏览器后的缓存时间</td></tr><tr><td>Catch-Control: no-catch</td><td>不要缓存，<a href="//xn--http1-i37hl13cy63grwq.xn--1-856b314a" target="_blank" rel="noopener noreferrer">//针对http协议1.1版本</a></td></tr><tr><td>Pragma:no-catch</td><td>不要缓存，<a href="//xn--http1-i37hl13cy63grwq.xn--0-856b314a" target="_blank" rel="noopener noreferrer">//针对http协议1.0版本</a></td></tr></tbody></table><h3 id="_3-4-3-响应正文详解" tabindex="-1"><a class="header-anchor" href="#_3-4-3-响应正文详解"><span>3.4.3 响应正文详解</span></a></h3><p>就和我们在浏览器上右键查看源文件看到的内容是一样的。</p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">head</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">link</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> rel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;css.css&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text/css&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;demo.js&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">head</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">img</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1.jpg&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h1 id="_4-综合案例-tomcat的具体应用" tabindex="-1"><a class="header-anchor" href="#_4-综合案例-tomcat的具体应用"><span>4 综合案例-Tomcat的具体应用</span></a></h1><h2 id="_4-1-静态资源案例-门户类网站的部署和访问" tabindex="-1"><a class="header-anchor" href="#_4-1-静态资源案例-门户类网站的部署和访问"><span>4.1 静态资源案例-门户类网站的部署和访问</span></a></h2><h3 id="_4-1-1-案例介绍" tabindex="-1"><a class="header-anchor" href="#_4-1-1-案例介绍"><span>4.1.1 案例介绍</span></a></h3><p><strong>需求：</strong></p><p>​ 在浏览器中输入地址，访问静态HTML页面。</p><p><strong>细节说明：</strong></p><p>​ 把<code>HTML</code>和<code>CSS</code>课程中制作的页面加入到<code>JavaWeb</code>工程中，在Tomcat中部署工程，然后启动Tomcat服务器，并使用浏览器访问。</p><h3 id="_4-1-2-实现步骤" tabindex="-1"><a class="header-anchor" href="#_4-1-2-实现步骤"><span>4.1.2 实现步骤</span></a></h3><p><strong>第一步：创建工程并选择使用的Tomcat版本</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246595.png" alt="静态资源工程1" tabindex="0" loading="lazy"><figcaption>静态资源工程1</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246618.png" alt="静态资源工程2" tabindex="0" loading="lazy"><figcaption>静态资源工程2</figcaption></figure><p><strong>第二步：拷贝资源到工程的web目录中</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246647.png" alt="静态资源工程3" tabindex="0" loading="lazy"><figcaption>静态资源工程3</figcaption></figure><p><strong>第三步：在web.xml中配置默认主页</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246677.png" alt="静态资源工程4" tabindex="0" loading="lazy"><figcaption>静态资源工程4</figcaption></figure><p><strong>第四步：部署工程到Tomcat服务器</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246707.png" alt="静态资源工程5" tabindex="0" loading="lazy"><figcaption>静态资源工程5</figcaption></figure><p><strong>第五步：测试浏览器访问</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246738.png" alt="静态资源工程6" tabindex="0" loading="lazy"><figcaption>静态资源工程6</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246773.png" alt="静态资源工程7" tabindex="0" loading="lazy"><figcaption>静态资源工程7</figcaption></figure><h2 id="_4-2-动态资源的案例-学生管理系统的部署和访问" tabindex="-1"><a class="header-anchor" href="#_4-2-动态资源的案例-学生管理系统的部署和访问"><span>4.2 动态资源的案例-学生管理系统的部署和访问</span></a></h2><h3 id="_4-2-1-案例介绍" tabindex="-1"><a class="header-anchor" href="#_4-2-1-案例介绍"><span>4.2.1 案例介绍</span></a></h3><p><strong>需求：</strong></p><p>​ 把JavaSE进阶阶段的学生管理系统的服务器改用Tomcat实现。</p><p><strong>细节说明：</strong></p><p>​ 把学生管理系统涉及的HTML和样式以及图片文件拷贝到JavaWeb工程中，在Tomcat中部署工程，然后启动Tomcat服务器，并使用浏览器访问。</p><h3 id="_4-2-2-实现步骤" tabindex="-1"><a class="header-anchor" href="#_4-2-2-实现步骤"><span>4.2.2 实现步骤</span></a></h3><p><strong>第一步：创建工程</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246812.png" alt="动态资源工程" tabindex="0" loading="lazy"><figcaption>动态资源工程</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246845.png" alt="动态资源工程1" tabindex="0" loading="lazy"><figcaption>动态资源工程1</figcaption></figure><p><strong>第二步：拷贝资源</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246867.png" alt="动态资源工程2" tabindex="0" loading="lazy"><figcaption>动态资源工程2</figcaption></figure><p><strong>第三步：配置默认主页</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246895.png" alt="动态资源工程4" tabindex="0" loading="lazy"><figcaption>动态资源工程4</figcaption></figure><p><strong>第四步：部署项目</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246922.png" alt="动态资源工程3" tabindex="0" loading="lazy"><figcaption>动态资源工程3</figcaption></figure><h3 id="_4-3-2-创建案例中的动态资源-servlet" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建案例中的动态资源-servlet"><span>4.3.2 创建案例中的动态资源-Servlet</span></a></h3><h4 id="_1-servlet简介" tabindex="-1"><a class="header-anchor" href="#_1-servlet简介"><span>1） Servlet简介</span></a></h4><p>Servlet翻译成中文是服务端脚本，它是SUN公司推出的一套规范，称为Servlet规范。Servlet规范是JavaEE规范中的一部分。我们可以通过查阅JavaEE规范的API来了解Servlet的基本概念。通过点击<a href="https://javaee.github.io/javaee-spec/javadocs/" target="_blank" rel="noopener noreferrer">JavaEE8官方文档</a>，就可以看到关于Servlet的内容介绍。</p><h4 id="_2-按步骤编写servlet" tabindex="-1"><a class="header-anchor" href="#_2-按步骤编写servlet"><span>2） 按步骤编写Servlet</span></a></h4><p><strong>前期准备：在IDEA创建Javaweb工程</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246953.png" alt="前期准备" tabindex="0" loading="lazy"><figcaption>前期准备</figcaption></figure><p><strong>第一步：编写一个普通类实现Servlet接口或者继承GenericServlet类或者继承HttpServlet</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246979.png" alt="编写Servlet" tabindex="0" loading="lazy"><figcaption>编写Servlet</figcaption></figure><p><strong>第二步：重写service方法，输出一句话</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246006.png" alt="重写Service方法" tabindex="0" loading="lazy"><figcaption>重写Service方法</figcaption></figure><p><strong>第三步：在web.xml配置Servlet</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246028.png" alt="配置Servlet" tabindex="0" loading="lazy"><figcaption>配置Servlet</figcaption></figure><p><strong>第四步：启动tomcat服务器测试</strong></p><p>在地址栏输入：<a href="http://localhost:8585/crm/studentServlet" target="_blank" rel="noopener noreferrer">http://localhost:8585/crm/studentServlet</a> 测试访问结果</p><h4 id="_3-测试访问" tabindex="-1"><a class="header-anchor" href="#_3-测试访问"><span>3）测试访问</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246061.png" alt="测试访问结果" tabindex="0" loading="lazy"><figcaption>测试访问结果</figcaption></figure>`,72))])}const m=i(c,[["render",h],["__file","Tomcat_Http协议.html.vue"]]),b=JSON.parse('{"path":"/posts/Java/JavaWeb/Tomcat_Http%E5%8D%8F%E8%AE%AE.html","title":"Java Web基础 - Tomcat&Http协议","lang":"zh-CN","frontmatter":{"aliases":"Java Web基础 - Tomcat&Http协议","tags":null,"cssclass":null,"source":null,"order":1,"category":["Java Web"],"created":"2024-02-22 10:48","updated":"2024-03-12 12:48","description":"Java Web基础 - Tomcat&Http协议 Tomcat&Http协议 1 企业开发简介 1.1 JavaEE规范 JavaEE规范是J2EE规范的新名称，早期被称为J2EE规范，其全称是Java 2 Platform Enterprise Edition，它是由SUN公司领导、各厂家共同制定并得到广泛认可的工业标准（JCP组织成员）。之所以...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Java/JavaWeb/Tomcat_Http%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Java Web基础 - Tomcat&Http协议"}],["meta",{"property":"og:description","content":"Java Web基础 - Tomcat&Http协议 Tomcat&Http协议 1 企业开发简介 1.1 JavaEE规范 JavaEE规范是J2EE规范的新名称，早期被称为J2EE规范，其全称是Java 2 Platform Enterprise Edition，它是由SUN公司领导、各厂家共同制定并得到广泛认可的工业标准（JCP组织成员）。之所以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246743.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Web基础 - Tomcat&Http协议\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246743.jpg\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246807.jpg\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246843.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246869.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246902.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246932.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246958.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246989.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246007.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246032.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246057.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246081.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246104.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246131.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246165.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246200.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246230.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246254.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246285.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246306.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246333.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246354.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246378.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246401.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246427.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246451.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246475.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246500.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246530.jpg\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246569.jpg\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246595.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246618.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246647.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246677.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246707.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246738.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246773.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246812.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246845.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246867.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246895.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246922.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246953.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246979.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246006.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246028.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121246061.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.1 JavaEE规范","slug":"_1-1-javaee规范","link":"#_1-1-javaee规范","children":[]},{"level":2,"title":"1.2 Web概述","slug":"_1-2-web概述","link":"#_1-2-web概述","children":[]},{"level":2,"title":"1.3 系统结构","slug":"_1-3-系统结构","link":"#_1-3-系统结构","children":[{"level":3,"title":"1.3.1 系统结构简介","slug":"_1-3-1-系统结构简介","link":"#_1-3-1-系统结构简介","children":[]},{"level":3,"title":"1.3.2 C/S结构","slug":"_1-3-2-c-s结构","link":"#_1-3-2-c-s结构","children":[]},{"level":3,"title":"1.3.3 B/S结构","slug":"_1-3-3-b-s结构","link":"#_1-3-3-b-s结构","children":[]},{"level":3,"title":"1.3.4 两种结构的区别及优略","slug":"_1-3-4-两种结构的区别及优略","link":"#_1-3-4-两种结构的区别及优略","children":[]}]},{"level":2,"title":"2.1 Tomcat介绍","slug":"_2-1-tomcat介绍","link":"#_2-1-tomcat介绍","children":[{"level":3,"title":"2.1.1 关于服务器","slug":"_2-1-1-关于服务器","link":"#_2-1-1-关于服务器","children":[]},{"level":3,"title":"2.1.2 Tomcat下载与安装","slug":"_2-1-2-tomcat下载与安装","link":"#_2-1-2-tomcat下载与安装","children":[]},{"level":3,"title":"2.1.3 Tomcat各版本所需支持","slug":"_2-1-3-tomcat各版本所需支持","link":"#_2-1-3-tomcat各版本所需支持","children":[]},{"level":3,"title":"2.1.4 Tomcat目录结构详解","slug":"_2-1-4-tomcat目录结构详解","link":"#_2-1-4-tomcat目录结构详解","children":[]}]},{"level":2,"title":"2.2 Tomcat基本使用","slug":"_2-2-tomcat基本使用","link":"#_2-2-tomcat基本使用","children":[{"level":3,"title":"2.2.1 Tomcat启动和停止及问题分析解决","slug":"_2-2-1-tomcat启动和停止及问题分析解决","link":"#_2-2-1-tomcat启动和停止及问题分析解决","children":[]},{"level":3,"title":"2.2.2 IDEA集成Tomcat服务器","slug":"_2-2-2-idea集成tomcat服务器","link":"#_2-2-2-idea集成tomcat服务器","children":[]},{"level":3,"title":"2.2.3 Linux系统安装Tomcat","slug":"_2-2-3-linux系统安装tomcat","link":"#_2-2-3-linux系统安装tomcat","children":[]}]},{"level":2,"title":"2.3 Tomcat发布应用-JavaWeb应用","slug":"_2-3-tomcat发布应用-javaweb应用","link":"#_2-3-tomcat发布应用-javaweb应用","children":[{"level":3,"title":"2.3.1 JavaWeb工程概述","slug":"_2-3-1-javaweb工程概述","link":"#_2-3-1-javaweb工程概述","children":[]},{"level":3,"title":"2.3.2 JavaWeb应用目录结构详解","slug":"_2-3-2-javaweb应用目录结构详解","link":"#_2-3-2-javaweb应用目录结构详解","children":[]},{"level":3,"title":"2.3.3 JavaWeb应用的创建","slug":"_2-3-3-javaweb应用的创建","link":"#_2-3-3-javaweb应用的创建","children":[]},{"level":3,"title":"2.3.4 JavaWeb应用的部署","slug":"_2-3-4-javaweb应用的部署","link":"#_2-3-4-javaweb应用的部署","children":[]},{"level":3,"title":"2.4.1 Tomcat配置虚拟目录","slug":"_2-4-1-tomcat配置虚拟目录","link":"#_2-4-1-tomcat配置虚拟目录","children":[]},{"level":3,"title":"2.4.2 Tomcat配置虚拟主机","slug":"_2-4-2-tomcat配置虚拟主机","link":"#_2-4-2-tomcat配置虚拟主机","children":[]},{"level":3,"title":"2.4.3 Tomcat默认项配置","slug":"_2-4-3-tomcat默认项配置","link":"#_2-4-3-tomcat默认项配置","children":[]}]},{"level":2,"title":"3.1 HTTP协议概述","slug":"_3-1-http协议概述","link":"#_3-1-http协议概述","children":[{"level":3,"title":"3.1.1 HTTP协议概念","slug":"_3-1-1-http协议概念","link":"#_3-1-1-http协议概念","children":[]},{"level":3,"title":"3.1.2 HTTP协议版本","slug":"_3-1-2-http协议版本","link":"#_3-1-2-http协议版本","children":[]},{"level":3,"title":"3.1.3 HTTP协议相关说明","slug":"_3-1-3-http协议相关说明","link":"#_3-1-3-http协议相关说明","children":[]}]},{"level":2,"title":"3.2 HTTP协议组成","slug":"_3-2-http协议组成","link":"#_3-2-http协议组成","children":[{"level":3,"title":"3.2.1请求部分","slug":"_3-2-1请求部分","link":"#_3-2-1请求部分","children":[]},{"level":3,"title":"3.2.2 响应部分","slug":"_3-2-2-响应部分","link":"#_3-2-2-响应部分","children":[]},{"level":3,"title":"3.3.3 消息头的共性分析","slug":"_3-3-3-消息头的共性分析","link":"#_3-3-3-消息头的共性分析","children":[]}]},{"level":2,"title":"3.3 请求部分详解","slug":"_3-3-请求部分详解","link":"#_3-3-请求部分详解","children":[{"level":3,"title":"3.3.1 请求行详解","slug":"_3-3-1-请求行详解","link":"#_3-3-1-请求行详解","children":[]},{"level":3,"title":"3.3.2 请求消息头详解","slug":"_3-3-2-请求消息头详解","link":"#_3-3-2-请求消息头详解","children":[]},{"level":3,"title":"3.3.3 请求正文详解","slug":"_3-3-3-请求正文详解","link":"#_3-3-3-请求正文详解","children":[]}]},{"level":2,"title":"3.4 响应部分详解","slug":"_3-4-响应部分详解","link":"#_3-4-响应部分详解","children":[{"level":3,"title":"3.4.1 响应行详解","slug":"_3-4-1-响应行详解","link":"#_3-4-1-响应行详解","children":[]},{"level":3,"title":"3.4.2 响应消息头详解","slug":"_3-4-2-响应消息头详解","link":"#_3-4-2-响应消息头详解","children":[]},{"level":3,"title":"3.4.3 响应正文详解","slug":"_3-4-3-响应正文详解","link":"#_3-4-3-响应正文详解","children":[]}]},{"level":2,"title":"4.1 静态资源案例-门户类网站的部署和访问","slug":"_4-1-静态资源案例-门户类网站的部署和访问","link":"#_4-1-静态资源案例-门户类网站的部署和访问","children":[{"level":3,"title":"4.1.1 案例介绍","slug":"_4-1-1-案例介绍","link":"#_4-1-1-案例介绍","children":[]},{"level":3,"title":"4.1.2 实现步骤","slug":"_4-1-2-实现步骤","link":"#_4-1-2-实现步骤","children":[]}]},{"level":2,"title":"4.2 动态资源的案例-学生管理系统的部署和访问","slug":"_4-2-动态资源的案例-学生管理系统的部署和访问","link":"#_4-2-动态资源的案例-学生管理系统的部署和访问","children":[{"level":3,"title":"4.2.1 案例介绍","slug":"_4-2-1-案例介绍","link":"#_4-2-1-案例介绍","children":[]},{"level":3,"title":"4.2.2 实现步骤","slug":"_4-2-2-实现步骤","link":"#_4-2-2-实现步骤","children":[]},{"level":3,"title":"4.3.2 创建案例中的动态资源-Servlet","slug":"_4-3-2-创建案例中的动态资源-servlet","link":"#_4-3-2-创建案例中的动态资源-servlet","children":[]}]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":19.58,"words":5875},"filePathRelative":"posts/Java/JavaWeb/Tomcat&Http协议.md","localizedDate":"2024年10月21日","excerpt":"\\n<h1>Tomcat&amp;Http协议</h1>\\n<h1>1 企业开发简介</h1>\\n<h2>1.1 JavaEE规范</h2>\\n<p><code>JavaEE</code>规范是<code>J2EE</code>规范的新名称，早期被称为<code>J2EE</code>规范，其全称是<code>Java 2 Platform Enterprise Edition</code>，它是由SUN公司领导、各厂家共同制定并得到广泛认可的工业标准（<code>JCP</code>组织成员）。之所以改名为<code>JavaEE</code>，目的还是让大家清楚<code>J2EE</code>只是<code>Java</code>企业应用。在2004年底中国软件技术大会<code>Ioc</code>微容器(也就是<code>Jdon</code>框架的实现原理)演讲中指出：我们需要一个跨<code>J2SE/WEB/EJB</code>的微容器，保护我们的业务核心组件，以延续它的生命力，而不是依赖<code>J2SE/J2EE</code>版本.此次<code>J2EE</code>改名为<code>Java EE</code>，实际也反映出业界这种共同心声。</p>","autoDesc":true}');export{m as comp,b as data};
