import{_ as a,c as t,a as l,o as n}from"./app-CZJgH_ea.js";const i={};function o(s,e){return n(),t("div",null,e[0]||(e[0]=[l('<h1 id="collection-类关系图" tabindex="-1"><a class="header-anchor" href="#collection-类关系图"><span>Collection 类关系图</span></a></h1><blockquote><p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。</p></blockquote><h2 id="_1-知识体系结构" tabindex="-1"><a class="header-anchor" href="#_1-知识体系结构"><span>1. 知识体系结构</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120914766.png" alt="java_collections_overview" tabindex="0" loading="lazy"><figcaption>java_collections_overview</figcaption></figure><h2 id="_2-介绍" tabindex="-1"><a class="header-anchor" href="#_2-介绍"><span>2. 介绍</span></a></h2><p>容器，就是可以容纳其他Java对象的对象。<em>Java Collections Framework(JCF)</em> 为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p><ul><li>降低编程难度</li><li>提高程序性能</li><li>提高API间的互操作性</li><li>降低学习难度</li><li>降低设计和实现相关API的难度</li><li>增加程序的重用性</li></ul><p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p><h2 id="_3-collection" tabindex="-1"><a class="header-anchor" href="#_3-collection"><span>3. Collection</span></a></h2><blockquote><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。</p></blockquote><h3 id="_3-1-set" tabindex="-1"><a class="header-anchor" href="#_3-1-set"><span>3.1 Set</span></a></h3><h4 id="_3-1-1-treeset" tabindex="-1"><a class="header-anchor" href="#_3-1-1-treeset"><span>3.1.1 TreeSet</span></a></h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p><h4 id="_3-1-2-hashset" tabindex="-1"><a class="header-anchor" href="#_3-1-2-hashset"><span>3.1.2 HashSet</span></a></h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="_3-1-3-linkedhashset" tabindex="-1"><a class="header-anchor" href="#_3-1-3-linkedhashset"><span>3.1.3 LinkedHashSet</span></a></h4><p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p><h3 id="_3-2-list" tabindex="-1"><a class="header-anchor" href="#_3-2-list"><span>3.2 List</span></a></h3><h4 id="_3-2-1-arraylist" tabindex="-1"><a class="header-anchor" href="#_3-2-1-arraylist"><span>3.2.1 ArrayList</span></a></h4><p>基于动态数组实现，支持随机访问。</p><h4 id="_3-2-2-vector" tabindex="-1"><a class="header-anchor" href="#_3-2-2-vector"><span>3.2.2 Vector</span></a></h4><p>和 ArrayList 类似，但它是线程安全的。</p><h4 id="_3-2-3-linkedlist" tabindex="-1"><a class="header-anchor" href="#_3-2-3-linkedlist"><span>3.2.3 LinkedList</span></a></h4><p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p><h3 id="_3-3-queue" tabindex="-1"><a class="header-anchor" href="#_3-3-queue"><span>3.3 Queue</span></a></h3><h4 id="_3-3-1-linkedlist" tabindex="-1"><a class="header-anchor" href="#_3-3-1-linkedlist"><span>3.3.1 LinkedList</span></a></h4><p>可以用它来实现双向队列。</p><h4 id="_3-3-2-priorityqueue" tabindex="-1"><a class="header-anchor" href="#_3-3-2-priorityqueue"><span>3.3.2 PriorityQueue</span></a></h4><p>基于堆结构实现，可以用它来实现优先队列。</p><h2 id="_4-map" tabindex="-1"><a class="header-anchor" href="#_4-map"><span>4. Map</span></a></h2><h3 id="_4-1-treemap" tabindex="-1"><a class="header-anchor" href="#_4-1-treemap"><span>4.1 TreeMap</span></a></h3><p>基于红黑树实现。</p><h3 id="_4-2-hashmap" tabindex="-1"><a class="header-anchor" href="#_4-2-hashmap"><span>4.2 HashMap</span></a></h3><p>基于哈希表实现。</p><h3 id="_4-3-hashtable" tabindex="-1"><a class="header-anchor" href="#_4-3-hashtable"><span>4.3 HashTable</span></a></h3><p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p><h3 id="_4-4-linkedhashmap" tabindex="-1"><a class="header-anchor" href="#_4-4-linkedhashmap"><span>4.4 LinkedHashMap</span></a></h3><p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://pdai.tech/md/java/collection/java-collection-all.html" target="_blank" rel="noopener noreferrer"><strong>Collection 类关系图</strong></a></p>',40)]))}const h=a(i,[["render",o],["__file","java-collection-overview.html.vue"]]),c=JSON.parse('{"path":"/posts/Java/Java%E9%9B%86%E5%90%88/java-collection-overview.html","title":"Collection 类关系图","lang":"zh-CN","frontmatter":{"aliases":"Collection 类关系图","tags":null,"cssclass":null,"source":null,"order":10,"category":["Java"],"created":"2024-02-22 10:47","updated":"2024-03-12 09:14","description":"Collection 类关系图 本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。 1. 知识体系结构 java_collections_overviewjava_collections_overview 2. 介绍 容器，就是可以容纳其他Java对象的对象。Java Collections Framewo...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Java%E9%9B%86%E5%90%88/java-collection-overview.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Collection 类关系图"}],["meta",{"property":"og:description","content":"Collection 类关系图 本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。 1. 知识体系结构 java_collections_overviewjava_collections_overview 2. 介绍 容器，就是可以容纳其他Java对象的对象。Java Collections Framewo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120914766.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Collection 类关系图\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120914766.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 知识体系结构","slug":"_1-知识体系结构","link":"#_1-知识体系结构","children":[]},{"level":2,"title":"2. 介绍","slug":"_2-介绍","link":"#_2-介绍","children":[]},{"level":2,"title":"3. Collection","slug":"_3-collection","link":"#_3-collection","children":[{"level":3,"title":"3.1 Set","slug":"_3-1-set","link":"#_3-1-set","children":[]},{"level":3,"title":"3.2 List","slug":"_3-2-list","link":"#_3-2-list","children":[]},{"level":3,"title":"3.3 Queue","slug":"_3-3-queue","link":"#_3-3-queue","children":[]}]},{"level":2,"title":"4. Map","slug":"_4-map","link":"#_4-map","children":[{"level":3,"title":"4.1 TreeMap","slug":"_4-1-treemap","link":"#_4-1-treemap","children":[]},{"level":3,"title":"4.2 HashMap","slug":"_4-2-hashmap","link":"#_4-2-hashmap","children":[]},{"level":3,"title":"4.3 HashTable","slug":"_4-3-hashtable","link":"#_4-3-hashtable","children":[]},{"level":3,"title":"4.4 LinkedHashMap","slug":"_4-4-linkedhashmap","link":"#_4-4-linkedhashmap","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.36,"words":709},"filePathRelative":"posts/Java/Java集合/java-collection-overview.md","localizedDate":"2024年10月21日","excerpt":"\\n<blockquote>\\n<p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。</p>\\n</blockquote>\\n<h2>1. 知识体系结构</h2>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120914766.png\\" alt=\\"java_collections_overview\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>java_collections_overview</figcaption></figure>","autoDesc":true}');export{h as comp,c as data};
