import{_ as a,c as n,a as i,o as l}from"./app-4x2aIoqi.js";const e={};function r(t,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="rabbitmq进阶-过期时间ttl" tabindex="-1"><a class="header-anchor" href="#rabbitmq进阶-过期时间ttl"><span>RabbitMQ进阶 - 过期时间TTL</span></a></h1><p>Time to Live 简称 TTL，即过期时间。RabbitMQ 可以对 <strong>消息</strong> 和 <strong>队列</strong> 设置 TTL。</p><h2 id="_1-设置消息的-ttl" tabindex="-1"><a class="header-anchor" href="#_1-设置消息的-ttl"><span>1. 设置消息的 TTL</span></a></h2><ul><li>通过队列设置：队列中的消息都有相同的过期时间</li><li>对消息本身设置：每条消息的 TTL 可以不同</li></ul><p>如果两种一起设置，则以最小的 TTL 生效。</p><p>消息在队列中生存时间一旦超过 TTL，就会变成「死信（Dead Message）」，消费者将无法收到该消息。（具体细节后续章节讲解）</p><h3 id="_1-1-在队列上设置" tabindex="-1"><a class="header-anchor" href="#_1-1-在队列上设置"><span>1.1 在队列上设置</span></a></h3><p>定义队列时，通过参数 <code>x-message-ttl</code> 设置，单位是 <strong>毫秒</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arguments </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;x-message-ttl&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">6000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(QUEUE_NAME, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, arguments);</span></span></code></pre></div><p>TTL 值得几种情况：</p><ul><li>值为 0 ：表示，除非此时可以直接将消息投递到消费者，否则该消息被立即丢弃</li><li>大于 0：将在该时间内过期，</li></ul><h3 id="_1-2-在消息设置" tabindex="-1"><a class="header-anchor" href="#_1-2-在消息设置"><span>1.2 在消息设置</span></a></h3><p>通过 BasicProperties 来设置 expiration 属性：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> AMQP</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">BasicProperties</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Builder</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> builder </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AMQP</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">BasicProperties</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">builder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">builder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">deliveryMode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 持久化消息</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">builder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">expiration</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;60000&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置消息的 ttl</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">basicPublish</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(EXCHANGE_NAME,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">                     &quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                     true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                     builder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">                     &quot;mandatory test&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getBytes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    );</span></span></code></pre></div><p>此种方式当超过 TTL 时，并不会立即从队列中抹去，而是在投递消费者时判定的。而在队列上一旦过期，则立即从队列中抹去。</p><p>这是因为内部实现的原因导致的：</p><ul><li>队列中已过期的消息肯定在队列头部，只要定期从队头开始扫描是否有过期的消息即可</li><li>在消息中设置的过期，需要扫描整个队列。</li></ul><blockquote><p>因为第一种方法里，队列中已过期的消息肯定在队列头部，RabbitMQ只要定期从队头开始扫描是否有过期消息即可，而第二种方法里，每条消息的过期时间不同，如果要删除所有过期消息，势必要扫描整个队列，所以不如等到此消息即将被消费时再判定是否过期，如果过期，再进行删除。</p></blockquote><h2 id="_2-设置队列的-ttl" tabindex="-1"><a class="header-anchor" href="#_2-设置队列的-ttl"><span>2. 设置队列的 TTL</span></a></h2><blockquote><p>注意这是队列TTL，上面两个都是消息TTL,只是1.1 的是在队列中设置消息ttl</p></blockquote><p>定义队列时间，通过参数 <code>x-expires</code> 参数，单位为毫秒</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arguments </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 该参数必须大于 0，要么就不设置</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;x-expires&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">6000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(QUEUE_NAME, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, arguments);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueBind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);</span></span></code></pre></div><p>队列的 TTL 其实就是在声明：当队列空闲多久时，被自动删除。</p><p><strong>空闲多久指的是</strong>：队列上没有任何消费者、也没有被重新声明、并且在过期时间内也未调用过 Basic.Get 命令</p><p>适合使用的场景：可以应用在类似 RPC 方式的回复队列，在 RPC 中，许多队列会被创建出来，但是未被使用。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://zq99299.github.io/mq-tutorial/rabbitmq-ac/04/02.html" target="_blank" rel="noopener noreferrer">过期时间 TTL</a></p><p><a href="https://hiddenpps.blog.csdn.net/article/details/54916011" target="_blank" rel="noopener noreferrer">RabbitMQ之TTL（Time-To-Live 过期时间）</a></p><p><a href="https://juejin.cn/post/6844904002996404231" target="_blank" rel="noopener noreferrer">RabbitMQ高级特性-TTL队列/消息</a></p>`,29)]))}const p=a(e,[["render",r],["__file","rabbitmq-x-ttl.html.vue"]]),B=JSON.parse('{"path":"/posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-ttl.html","title":"RabbitMQ进阶 - 过期时间TTL","lang":"zh-CN","frontmatter":{"order":40,"category":["RabbitMQ","MQ"],"created":"2024-10-26 09:41","updated":"2024-10-26 09:48","description":"RabbitMQ进阶 - 过期时间TTL Time to Live 简称 TTL，即过期时间。RabbitMQ 可以对 消息 和 队列 设置 TTL。 1. 设置消息的 TTL 通过队列设置：队列中的消息都有相同的过期时间 对消息本身设置：每条消息的 TTL 可以不同 如果两种一起设置，则以最小的 TTL 生效。 消息在队列中生存时间一旦超过 TTL，...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-ttl.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"RabbitMQ进阶 - 过期时间TTL"}],["meta",{"property":"og:description","content":"RabbitMQ进阶 - 过期时间TTL Time to Live 简称 TTL，即过期时间。RabbitMQ 可以对 消息 和 队列 设置 TTL。 1. 设置消息的 TTL 通过队列设置：队列中的消息都有相同的过期时间 对消息本身设置：每条消息的 TTL 可以不同 如果两种一起设置，则以最小的 TTL 生效。 消息在队列中生存时间一旦超过 TTL，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ进阶 - 过期时间TTL\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 设置消息的 TTL","slug":"_1-设置消息的-ttl","link":"#_1-设置消息的-ttl","children":[{"level":3,"title":"1.1 在队列上设置","slug":"_1-1-在队列上设置","link":"#_1-1-在队列上设置","children":[]},{"level":3,"title":"1.2 在消息设置","slug":"_1-2-在消息设置","link":"#_1-2-在消息设置","children":[]}]},{"level":2,"title":"2. 设置队列的 TTL","slug":"_2-设置队列的-ttl","link":"#_2-设置队列的-ttl","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.54,"words":763},"filePathRelative":"posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-ttl.md","localizedDate":"2024年10月28日","excerpt":"\\n<p>Time to Live 简称 TTL，即过期时间。RabbitMQ 可以对 <strong>消息</strong> 和 <strong>队列</strong> 设置 TTL。</p>\\n<h2>1. 设置消息的 TTL</h2>\\n<ul>\\n<li>通过队列设置：队列中的消息都有相同的过期时间</li>\\n<li>对消息本身设置：每条消息的 TTL 可以不同</li>\\n</ul>\\n<p>如果两种一起设置，则以最小的 TTL 生效。</p>\\n<p>消息在队列中生存时间一旦超过 TTL，就会变成「死信（Dead Message）」，消费者将无法收到该消息。（具体细节后续章节讲解）</p>\\n<h3>1.1 在队列上设置</h3>","autoDesc":true}');export{p as comp,B as data};
