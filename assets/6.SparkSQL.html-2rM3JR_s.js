import{_ as a,c as n,a as i,o as l}from"./app-tJW29Kmg.js";const p={};function r(e,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="sparksql" tabindex="-1"><a class="header-anchor" href="#sparksql"><span>SparkSQL</span></a></h1><hr><h2 id="一、-sparksql概述" tabindex="-1"><a class="header-anchor" href="#一、-sparksql概述"><span>一、 SparkSQL概述</span></a></h2><h3 id="_1-1-sparksql是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-sparksql是什么"><span>1.1 SparkSQL是什么？</span></a></h3><p>![image-20200612190658269](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612190658.png)</p><p>![image-20200612190701687](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612190701.png)</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Spark SQL是Spark用于</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;结构化数据&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(structured </span><span style="color:#C678DD;--shiki-dark:#C678DD;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)处理的Spark模块</span></span></code></pre></div><h3 id="_1-2-hive-和-sparksql解析" tabindex="-1"><a class="header-anchor" href="#_1-2-hive-和-sparksql解析"><span>1.2 Hive 和 SparkSQL解析</span></a></h3><ul><li>Hive和SparkSQL之间的关系</li></ul><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Hive是SQL-</span><span style="color:#C678DD;--shiki-dark:#C678DD;">on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-Hadoop的工具，但由于底层还是基于MR，所以效率低。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 产生了大量提升SQL-</span><span style="color:#C678DD;--shiki-dark:#C678DD;">on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-Hadoop的工具，表现较为突出的是：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Drill</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Impala</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Shark</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Shark是Spark生态环境组件之一，基于Hive开发，性能较hive提高了10-100倍。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 由于Shark性能提升时，有很多Hive的依赖(如hive的解析器，查询优化器等)，制约了Shark的发展。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2014</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，Shark项目终止，开始了SparkSQL项目。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 自此，Hive的底层引擎可以是tez、mr、Spark</span></span></code></pre></div><ul><li>SparkSQL</li></ul><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 简化RDD，提高开发效率</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 提供了2个编程抽象，类型spark core中的RDD：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  a、DataFrame </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--DF</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  b、DataSet   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--DS</span></span></code></pre></div><h3 id="_1-3-dataframe是什么" tabindex="-1"><a class="header-anchor" href="#_1-3-dataframe是什么"><span>1.3 DataFrame是什么</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--  DataFrame是什么</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">DataFrame 是一种以RDD为基础的分布式数据集，类似传统数据库中的二维表格。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- DataFrame 与RDD的区别</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. DF带有结构(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Schema</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)信息,即包含了二维表数据集每一列的列名和类型；</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 在性能上，DF的执行性能优于RDD，因为它底层会自动优化执行过程，它是如何做到的呢？利用基于关系代数的等价变换，将高成本的操作替换为低成本操作的过程，如简化shuffle阶段，先过滤再进行IO等等。</span></span></code></pre></div><p>![image-20200612191859183](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612191859.png)</p><h3 id="_1-4-dataset是什么" tabindex="-1"><a class="header-anchor" href="#_1-4-dataset是什么"><span>1.4 DataSet是什么</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--1. DataSet是什么？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    是分布式数据集合，是DataFrame的扩展，是一个强类型集合。</span></span></code></pre></div><h3 id="_1-5-三者之间的关系" tabindex="-1"><a class="header-anchor" href="#_1-5-三者之间的关系"><span>1.5 三者之间的关系</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--1. 三者出现的时间顺序</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   Spark1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> RDD </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   Spark1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DataFrame</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">   Spark1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Dataset</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--2. 三者之间的关系</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   a、DataFrame是在RDD上进行扩展，将数据增加了结构信息</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   b、DataSet是在DataFrame的基础上进行扩展，增加数据的类型。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   c、DataFrame是DataSet的一个特例，即为数据类型ROW的DataSet</span></span></code></pre></div><h2 id="二、-sparksql核心编程" tabindex="-1"><a class="header-anchor" href="#二、-sparksql核心编程"><span>二、 SparkSQL核心编程</span></a></h2><h3 id="_2-1-sparksql的环境对象" tabindex="-1"><a class="header-anchor" href="#_2-1-sparksql的环境对象"><span>2.1 SparkSQL的环境对象</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--1. 上下文的环境对象</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. SparkCore  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--&gt; SparkContext,使用sc来代替</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. SparkSQL   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--&gt; SparkSession，使用spark代替，实际上是内部封装了SparkContext,底层实现还是SparkContext</span></span></code></pre></div><p>![image-20200612193832283](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612193832.png)</p><h3 id="_2-2-dataframe" tabindex="-1"><a class="header-anchor" href="#_2-2-dataframe"><span>2.2 DataFrame</span></a></h3><h4 id="_2-2-1-创建dataframe" tabindex="-1"><a class="header-anchor" href="#_2-2-1-创建dataframe"><span>2.2.1 创建DataFrame</span></a></h4><blockquote><p>一共有 三种方式：</p><ol><li>通过Spark的数据源进行创建</li><li>从一个存在的RDD进行转换</li><li>还可以从HiveTable进行查询返回</li></ol></blockquote><p>暂时先讲第一种，就是从数据源中创建，另外两种后续章节讨论。</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 1. 启动Spark-Local模式中的Spark</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  [atguigu@hadoop105 spark-local]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">$ bin/spark-shell </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 2. 创建DataFrame</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  scala</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> val df </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">json</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;examples/src/main/resources/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  打印结果：df: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">org</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">apache</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">sql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.DataFrame </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> [age: bigint, name: string]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 3. 说明：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 为啥数据类型是bigint，是因为从文件中读取数据，不知道数据的长度，所用使用bigint来表示，如果是从内存创建df，那么Spark可以知道数据的具体类型。</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">json</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;path:String&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)，从指定路径下读取json格式的文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 4. 展示df的内容： show</span></span></code></pre></div><p>![image-20200612194906529](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612194906.png)</p><h4 id="_2-2-2-sql语法" tabindex="-1"><a class="header-anchor" href="#_2-2-2-sql语法"><span>2.2.2 SQL语法</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- SQL语法说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">SQL语法风格是指我们查询数据的时候使用SQL语句来查询，这种风格的查询必须要有临时视图或者全局视图来辅助</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1. 创建临时视图和全局视图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          a、 创建临时视图，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              createTempView </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              createOrReplaceTempView :原视图存在则覆盖，不存在则创建</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              --案例</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">              df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">createTempView</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;People&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          b、 创建全局视图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              createGlobalTempView  </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              createOrReplaceGlobalTempView  :原视图存在则覆盖，不存在则创建</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              --案例</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">              df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">createGlobalTempView</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;People&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         c、 两种视图含义上的区别：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">             临时视图：表示仅此次的sparkSession可以使用</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">             全局视图：表示多次连接均可使用，可以理解为多次连接Mysql</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         d、 两种视图在访问上的区别：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">             全局视图需要加上：</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;global_temp.&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">才能进行访问。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         e、 view 和 table的区别：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">             view:  是临时结果，视图，由查询结果得到的对象，不能进行增删改，只能查询</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">             table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：是长久存在，可以进行增删改查操作。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   --总结：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     创建临时或者全部表，也就是视图，临时表是仅在本次连接可用，新的连接sparkSession就不能使用，但是全局表是可以跨连接使用，类似咱们的mysql，多次访问mysql的数据库，数据库中的表单都是可以访问的，同时在创建视图的时候，需要给创建的视图进行命名，如果视图名称已存在，那么会报错可以使用createorReplace，如果表存在，那么直接覆盖，如果不存在，则直接创建。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 2. spark.newSession : 创建新的SparkSQL的连接</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 3. spark.sql(&quot;sql语句&quot;).show</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20200612200712373](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612200712.png)</p><h4 id="_2-2-3-dsl" tabindex="-1"><a class="header-anchor" href="#_2-2-3-dsl"><span>2.2.3 DSL</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 什么是DSL</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   一个特定领域的语言，用来管理结构。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 好处：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   不用创建临时的绘图。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 具体的应用见API，用到的方法和展示的方式是相同的</span></span></code></pre></div><h4 id="_2-2-4-sql语法和dsl语法的区别" tabindex="-1"><a class="header-anchor" href="#_2-2-4-sql语法和dsl语法的区别"><span>2.2.4 SQL语法和DSL语法的区别</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --1. 两个的用途是什么:均是用来查询，SQL是针对数据结构，DSL是针对数据类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --2. 区别是什么</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      a、sql需要建立临时的表，而dsl不需要</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b、调用sql的对象不同，使用sql使用的是sparkSession的对象，而dsl是dataframe或者是dataSet</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      c、语法上的差异：</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">         sql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">sql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(sql文)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         DSL: ds/df.</span></span></code></pre></div><h3 id="_2-3-dataframe-dateset-rdd三者之间的转换" tabindex="-1"><a class="header-anchor" href="#_2-3-dataframe-dateset-rdd三者之间的转换"><span>2.3 DataFrame/DateSet/RDD三者之间的转换</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1. RDD &lt;=&gt; DF</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      a、RDD </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--&gt; DF </span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">         &quot;rdd.toDF(&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">列名1</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;，&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">列名2</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;，...)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b、DF </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--&gt; RDD</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">         &quot;df.rdd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 2. RDD  &lt;=&gt; DS</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      a、 RDD </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DS</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           将rdd的数据转换为样例类的格式。</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">           &quot;rdd.toDS&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b、 DS </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> RDD</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">           &quot;ds.rdd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 3. DF &lt;=&gt; DS</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     a、DF </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DS </span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       &quot;df.as[样例类]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">，该样例类必须存在，而且df中的数据个样例类对应</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     b、 DS </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DS</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       &quot;ds.toDF&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        a、通过DF转换得来的RDD的数据类型是ROW。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        b、通过DS转换得来的RDD的数据类型和DS的数据类型一致</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        c、RDD:只关心数据本身</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           DataFrame:关心数据的结构</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">           DataSet:关心数据类型</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20200612193232509](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612193232.png)</p><h3 id="_2-4-idea编程" tabindex="-1"><a class="header-anchor" href="#_2-4-idea编程"><span>2.4 IDEA编程</span></a></h3><h4 id="_2-4-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_2-4-1-添加依赖"><span>2.4.1 添加依赖</span></a></h4><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;org.apache.spark&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;spark-sql_2.12&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;2.4.5&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h4 id="_2-4-2-构建sparksession对象" tabindex="-1"><a class="header-anchor" href="#_2-4-2-构建sparksession对象"><span>2.4.2 构建sparkSession对象</span></a></h4><ol><li>重要：连接SparkSQL</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 创建环境</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;sparksql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. 创建SparkSession对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.builder().config(sparkConf).getOrCreate()</span></span></code></pre></div><ol start="2"><li>添加隐式转换，每次构建完对象以后都需要增加这个 隐式转换的代码</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 3. 增加隐式转换</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.implicits._</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1. 这里的spark不是Scala中的包名，而是创建的sparkSession对象的变量名称</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;"> 2. spark对象不能使用var声明，因为Scala只支持val修饰的对象的引入&quot;</span></span></code></pre></div><ol start="3"><li>说明</li></ol><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 为啥要导入隐式转换</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">sparkSQL是在spark的基础上进行延伸，属于功能的扩展，使用隐式转换，体现了OCP开发原则。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--构建对象为什么不直接new呢？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">因为sparkSession是对sparkContext的包装，创建这个对象时，需要很多步骤，将这些过程进行封装，让开发更容易，使用一个构建器来创建对象。</span></span></code></pre></div><h4 id="_2-4-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-4-3-代码实现"><span>2.4.3 代码实现</span></a></h4><ol><li>创建df</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read.json(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><ol start="2"><li>查看DataFrame的Schema信息</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  frame.printSchema()</span></span></code></pre></div><p>![image-20200612213154690](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612213154.png)</p><ol start="3"><li>只查看&quot;username&quot;列数据</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  frame.select(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span></code></pre></div><p>![image-20200612213954376](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612213954.png)</p><ol start="4"><li>查看&quot;username&quot;列数据以及&quot;age+1&quot;数据</li></ol><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">说明:</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 涉及到运算的时候, 每列都必须</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;使用$, 或者采用引号表达式：单引号+字段名&quot;</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 取别名</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">frame.select(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&#39;age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&#39;age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> as </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;newAge&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span></code></pre></div><p>![image-20200612214218042](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612214218.png)</p><ol start="5"><li>查看&quot;age&quot;大于&quot;20&quot;的数据</li></ol><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">frame.filter(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&#39;age</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span></code></pre></div><p>![image-20200612214550513](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612214550.png)</p><h3 id="_2-5-udf和udaf" tabindex="-1"><a class="header-anchor" href="#_2-5-udf和udaf"><span>2.5 UDF和UDAF</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 什么是UDF，什么是UDAF?</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    a、UDF : UserDefinedFunction,用户自定义函数，可以类比为map方法，给你一个数据，然后对每条数据进行处理，如取出日期中年信息</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    b、UDAF : UserDefinedAggregateorFunction，用户自定义</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;聚合&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">函数，可以类比sql中的count，sum、avg、max、min等方法</span></span></code></pre></div><h4 id="_2-5-1-udf" tabindex="-1"><a class="header-anchor" href="#_2-5-1-udf"><span>2.5.1 UDF</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建dataFrame</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 自定义和注册udf</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         方法：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">udf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.register(形参)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         形参：有两个形参</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              形参1：自定义函数的名字</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              形参2：自定义函数的逻辑，是一个函数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">     3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 使用自定义函数：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 使用自定义的udf函数用于sql语法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            a、创建临时或全局视图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            b、</span><span style="color:#D19A66;--shiki-dark:#D19A66;">使用spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">sql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(sql文)的方法调用自定的UDF方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">        3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 使用于DSL语法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            a、获取注册udf的返回值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            b、</span><span style="color:#D19A66;--shiki-dark:#D19A66;">使用df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(调用函数(列名))，调用自定的udf函数</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码实现</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 1. 创建dataFrame</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read.json(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    2. 自定义和注册udf，并获取返回值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     方法：spark.udf.register(形参)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     形参：有两个形参</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          形参1：自定义函数的名字</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          形参2：自定义函数的逻辑，是一个函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">     val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> udf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">UserDefinedFunction</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.udf.register(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;newName&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (x :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;Name:&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> x )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3.1、使用sql语法使用自定义udf函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //  a、创建临时或全局视图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.createOrReplaceTempView(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;people&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用spark.sql(sql文)的方法调用自定的UDF方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;select newName(name) from people&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3.2、使用于DSL语法使用自定义udf函数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.select(udf(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&#39;name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)).show()</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-2-udaf" tabindex="-1"><a class="header-anchor" href="#_2-5-2-udaf"><span>2.5.2 UDAF</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">自定义的UDAF分为两种：弱类型自定义聚合函数、强类型自定义函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   --1. 关于强类型自定义函数的说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    将数据转换为dataset，此时二维表中的一条数据封装为一个对象因为聚合函数是强类型，那么sql中没有类型的概念，所以SQL语法无法使用， 可以采用DSL语法方法进行访问将聚合函数转换为查询的列让DataSet访问</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --2、强类型自定义函数和弱类型自定义的区别：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       a、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;使用范围区别&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          弱类型自定义函数支持SQL语法和DSL语法，</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          而强类型语言仅支持DSL语法，因为SQL没有类型的概念</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       b、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;声明自定义方法方式的差别&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          &quot;弱类型语言&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">             1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">）自定义函数，继承extends UserDefinedAggregatorFunction</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">             2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) 重写8个方法：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法1：指明输入值的数据类型，不能是map类型，只能是anyval中的类型，特别注意数据的格式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def inputSchema: StructType </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法2：指明缓冲区的数据类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def bufferSchema: StructType </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法3：指明输出值的数据类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def dataType: DataType </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法4：数据的稳定性，设定true</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def deterministic: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Boolean</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法5：初始化缓冲区的值，对缓冲区</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def initialize(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: MutableAggregationBuffer): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法6：更新缓冲区的数据，每来一条数据，将数据更新到缓冲区内</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: MutableAggregationBuffer, input: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法7：合并缓冲区中的数据，两两合并</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(buffer1: MutableAggregationBuffer, buffer2: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): Unit </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                方法8： 计算最后的结果</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def evaluate(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#C678DD;--shiki-dark:#C678DD;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): Any </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">          &quot;强类型语言&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">）自定义函数，继承extends Aggregator</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) 指明父类中的三个泛型</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                   [-IN, BUF, OUT]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    -</span><span style="color:#C678DD;--shiki-dark:#C678DD;">IN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: 指输入的数据类型，和java中 ? super IN相同，指传入的参数类型为IN类型或是IN的父类类型</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    BUF：指缓冲区的数据类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    OUT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：指输出的数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    此时-</span><span style="color:#C678DD;--shiki-dark:#C678DD;">IN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：是指原表的一条数据，因为已经是被封装成了一个对象，所以是People</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    BUF：(对象的年龄，次数)，(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    OUT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：(平均年龄)，(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) 重写6个方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法1：初始化缓冲区的值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def zero: avgAGE</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法2：将数据添加到缓冲区</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def reduce(b: avgAGE, a: People): avgAGE</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法3：合并缓冲区，两两进行合并</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def </span><span style="color:#C678DD;--shiki-dark:#C678DD;">merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(b1: avgAGE, b2: avgAGE): avgAGE</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法4：计算最后的结果</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def finish(reduction: avgAGE): Long</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法5：固定写法，输入的编码器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def bufferEncoder: Encoder</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[avgAGE]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> Encoders</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    方法6：固定的写法，输入的解码器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                    override</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> def outputEncoder: Encoder</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[Long]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> Encoders</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">scalaLong</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       c、 </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;使用上的区别&quot;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">             &quot;弱语言&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               使用在sql语法上：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               a、创建临时视图或者全局视图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               b、new 自定义方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                  val uadf </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  new MyUADF</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               c、注册自定义方法</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                   spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">udf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.register(函数名，uadf)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               d、使用自定义方法</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                   spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">sql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;select 函数名(输入列) from  全局表&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               使用在DSL上：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               a、new 自定义方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                  val uadf </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  new MyUADF</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               b、注册自定义方法，并获取表达式的返回值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                  val UADF: UserDefinedAggregateFunction </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">udf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.register(函数名，uadf)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               c、使用自定义方法</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                  df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(UADF(输入列)).show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">             &quot;强类型&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：只用在DSL的语法中</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    // </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建df</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    val frame: DataFrame </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">json</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    // </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 将df转换成ds</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    val ds: Dataset</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[People]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">as</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[People]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    // </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建自定义的UADF对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    val udaf </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> new MyUADF</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    // </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 将对象转化为一个列</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    val column: TypedColumn</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[People, Long]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> udaf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">toColumn</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    // </span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 调用自定义函数</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">                    ds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(column).show()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     --3、如何选择强类型和弱类型自定义方法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        当自定义的方法中，考虑数据作为一个对象进行传输时，需要考虑使用强类型自定义函数</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>弱类型自定聚合函数</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSQL2_udaf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;udaf&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.builder().config(sparkConf).getOrCreate()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  spark.implicits._</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建dataframe</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rdd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RDD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.sparkContext.makeRDD( </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scala&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;spark&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">15</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">), </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;context&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">30</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> rdd.toDF()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // a、注册自定义的uadf</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> udaf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyUDAF</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // b、注册自定义函数，并获取返回值。</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">     val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> UADF</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">UserDefinedAggregateFunction</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.udf.register(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;myUADF&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,udaf)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方式1：使用与mysql语法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;select myUADF(age) from User&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方式2： 使用与DSL语法</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.select(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">UADF</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&#39;age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)).show()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 1. 需求：求年龄的平均值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyUDAF</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> UserDefinedAggregateFunction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法1：输入数据的类型,将年龄一个一个给传进来</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> inputSchema</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">StructType</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      StructType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">StructField</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">IntegerType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法2：缓冲区的数据类型,数据的类型，需要记录年龄的总和，次数,可以存放到一个map集合中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 关于数据的格式有：LongType</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> bufferSchema</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">StructType</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      StructType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        StructField</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;totalAge&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">IntegerType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        StructField</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">IntegerType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法3：结果数据的数据类型,返回值的数据类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> dataType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataType</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> IntegerType</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法4：数据是否安全</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> deterministic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Boolean</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法5：缓冲区初始化,就是给缓冲区的每个值设定一个初始值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> initialize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MutableAggregationBuffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法6：更新缓冲区</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MutableAggregationBuffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">input</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  input.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法7：因为是多executor执行，合并所有分区的数据</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buffer1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MutableAggregationBuffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buffer2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer1(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer1.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  buffer2.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer1(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer1.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer2.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法8：计算最后的结果</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> evaluate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buffer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Row</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Any</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (name:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,age :</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解析：</li></ul><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  input.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   buffer(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): 理解为设置索引位置为0的值</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   buffer.getInt(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ：获取索引为0位置的数据</span></span></code></pre></div><ul><li>强类型自定义的函数</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSQL5_UADF</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;UADF&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.builder().config(sparkConf).getOrCreate()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  spark.implicits._</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 创建df</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read.json(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. 将df转换成ds</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Dataset</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> frame.as[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 创建自定义的UADF对象</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> udaf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyUADF</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 4. 将对象转化为一个列</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> column</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">TypedColumn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> udaf.toColumn</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 5. 调用自定义函数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    ds.select(column).show()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  需求：统计平均年龄</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  1. 自定义类，继承与extends Aggregator</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  2. 指定Aggregator的泛型，分别是：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    [-IN, BUF, OUT]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    -IN: 指输入的数据类型，和java中 ? super IN相同，指传入的参数类型为IN类型或是IN的父类类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    BUF：指缓冲区的数据类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    OUT：指输出的数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    此时-IN：是指原表的一条数据，因为已经是被封装成了一个对象，所以是People</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    BUF：(对象的年龄，次数)，(Int,Int)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    OUT：(平均年龄)，(Int)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> avgAGE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sumAge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyUADF</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Aggregator</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,avgAGE,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //  方法1：初始化缓冲区的值</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zero</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: avgAGE </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      avgAGE(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0L</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0L</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 方法2：将数据添加到缓冲区</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reduce</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: avgAGE, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): avgAGE </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b.sumAge </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> a.age</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b.count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //  方法3：合并缓冲区，两两进行合并</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> merge</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: avgAGE, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: avgAGE): avgAGE </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b1.count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> b1.count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> b2.count</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b1.sumAge </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">b1.sumAge </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> b2.sumAge</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      b1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //  方法4：计算最后的结果</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> finish</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reduction</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: avgAGE): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      reduction.sumAge </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> reduction.count</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //  方法5：固定写法，输入的编码器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> bufferEncoder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Encoder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[avgAGE] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Encoders</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.product</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //  方法6：固定的写法，输入的解码器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> outputEncoder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Encoder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Encoders</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.scalaLong</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-数据的加载和保存" tabindex="-1"><a class="header-anchor" href="#_2-6-数据的加载和保存"><span>2.6 数据的加载和保存</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">数据加载和保存的方式有很多种方式，根据不同的需求，主要有以下几种：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式1：通用的数据加载和保存方式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式2：parquet</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式3：JSON</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式4：CSV</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式5：Mysql</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--方式6：Hive</span></span></code></pre></div><h4 id="_2-6-1-通用的数据加载和保存方式" tabindex="-1"><a class="header-anchor" href="#_2-6-1-通用的数据加载和保存方式"><span>2.6.1 通用的数据加载和保存方式</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--什么是通用的方式？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  指使用相同的API，根据不同的参数，读取和保存不同格式的数据。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   SparkSQL默认读取和保存的文件格式是parquet。</span></span></code></pre></div><h5 id="_2-6-1-1-读取数据" tabindex="-1"><a class="header-anchor" href="#_2-6-1-1-读取数据"><span>2.6.1.1 读取数据</span></a></h5><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--1. 通用的数据加载方式[默认为parquet格式]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    方式：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#C678DD;--shiki-dark:#C678DD;">load</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(pat:String)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--2. 读取不同格式的数据，可以对不同的数据格式进行设定</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    方式：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;数据格式&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:string).</span><span style="color:#C678DD;--shiki-dark:#C678DD;">load</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:String)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    说明：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    a、</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;数据格式&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:string):数据格式可以是：</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;csv&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;textFile&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;orc&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    b、数据的路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--3. 还可以加option，导入一些参数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     方式：</span><span style="color:#D19A66;--shiki-dark:#D19A66;">spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;…&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[.option(&quot;…&quot;)]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#C678DD;--shiki-dark:#C678DD;">load</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;…&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     在</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">格式下需要传入JDBC相应参数，</span><span style="color:#C678DD;--shiki-dark:#C678DD;">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">、user、password和dbtable</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">我们前面都是使用read API 先把文件加载到 DataFrame然后再查询，其实，我们也可以直接在文件上进行查询:  </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;文件格式.\`文件路径\`&quot;</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 情况1：直接load</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">spark.read.load(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/users.parquet&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 情况2：指定文件格式</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">spark.read.format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).load(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 情况3：使用文件格式.\`文件路径\`方式</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;select * from json.\`input/people.json\`&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span></code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 因为在实际生产情况下，json文件的数据格式的场景是非常多的，Spark对于json文件格式要求如下：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. JSON文件的格式要求整个文件满足JSON的语法规则</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Spark读取文件默认是以行为单位进行读取</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. Spark读取JSON文件时，要求文件中的每一行满足JSON格式</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果文件格式不正确，那么不会发生错误，而是解析结果不是我们预期的结果。</span></span></code></pre></div><h5 id="_2-6-1-2-保存数据" tabindex="-1"><a class="header-anchor" href="#_2-6-1-2-保存数据"><span>2.6.1.2 保存数据</span></a></h5><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 保存的方法：</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#C678DD;--shiki-dark:#C678DD;">save</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:String)</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 默认的保存格式为parquet格式</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果想要指定保存的格式,增加format方法，在format的方法中指定形参数据保存的格式</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">       frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;">save</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;output&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果保存的路径已经存在，那么会报错：</span><span style="color:#C678DD;--shiki-dark:#C678DD;">output</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> already </span><span style="color:#C678DD;--shiki-dark:#C678DD;">exists</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 如果文件路径已经存在时不能创建，那么在实际的生产的情况下，岂不是会生成很多小文件？</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       解决方案：使用mode，指定模式</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       方法：mode(形参)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       形参：saveMode: SaveMode,数据类型是一个枚举类</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       枚举类的对象有：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       a、</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:追加，如果原文件目录或表存在，那么在原路径下进行生产一个新的文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       b、Overwrite:重写，如果原文件目录或表存在，那么将原路径下的文件进行直接覆盖</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       c、ErrorIfExists：默认值，如果原文件目录存在，则报错</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       d、</span><span style="color:#C678DD;--shiki-dark:#C678DD;">Ignore</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">：如果原文件目录或表存在，那么不报错，但是也不保存数据</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">frame.write.mode(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Overwrite&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).save(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;output&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h4 id="_2-6-2-csv" tabindex="-1"><a class="header-anchor" href="#_2-6-2-csv"><span>2.6.2 CSV</span></a></h4><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//读取文件</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read.format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;csv&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;sep&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;inferSchema&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;header&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .load(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;input/people.csv&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.show()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 保存数据</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.write.mode(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Append&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).save(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;output&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h4 id="_2-6-3-mysql" tabindex="-1"><a class="header-anchor" href="#_2-6-3-mysql"><span>2.6.3 MySQL</span></a></h4><ul><li>方式1：使用option的方式进行参数配置</li></ul><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //从MYsql中读取数据</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read.format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;url&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc:mysql://hadoop105:3306/mysql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;driver&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;123456&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dbtable&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;db&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .load()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 保存到数据库中</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.write.format(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;url&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc:mysql://hadoop105:3306/mysql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;driver&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;123456&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .option(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dbtable&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;db1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .mode(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Append&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).save()</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式2：使用jdbc的方法</li></ul><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建连接</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> props</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Properties</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Properties</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    props.setProperty(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    props.setProperty(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;123456&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.read</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        .jdbc(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc:mysql://hadoop105:3306/mysql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;db&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, props)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    df.show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 将数据保存到Mysql中</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> rdd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RDD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> spark.sparkContext.makeRDD(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> frame</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DataFrame</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> rdd.toDF(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    frame.write.mode(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Append&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).jdbc(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jdbc:mysql://hadoop105:3306/mysql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;db2&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, props)</span></span></code></pre></div><h4 id="_2-6-4-hive" tabindex="-1"><a class="header-anchor" href="#_2-6-4-hive"><span>2.6.4 Hive</span></a></h4><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>1. Spark中内嵌了hive。</span></span></code></pre></div><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Hive&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">     val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .builder()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .enableHiveSupport()   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 支持hive</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .config(sparkConf)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .getOrCreate()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 创建表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//    spark.sql(&quot;create table aa (id int)&quot;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 查询表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//    spark.sql(&quot;show tables&quot;).show()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;load data  local inpath &#39;input/id.text&#39; into table aa&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;select * from aa &quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span></code></pre></div><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>2. 外置Hive</span></span>
<span class="line"><span> 步骤：</span></span>
<span class="line"><span> a、导入依赖</span></span>
<span class="line"><span> b、将hive</span></span>
<span class="line"><span> c、取消tez引擎</span></span>
<span class="line"><span> d、代码实现，访问hive中的表</span></span></code></pre></div><ul><li>导入依赖</li></ul><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;org.apache.spark&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;spark-hive_2.12&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;2.4.5&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;org.apache.hive&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;hive-exec&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;3.1.2&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><ul><li>将hive-site.xml文件拷贝到项目的resources目录中，代码实现</li></ul><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">   val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;hive&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.builder().enableHiveSupport().config(sparkConf).getOrCreate()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;show databases&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.stop()</span></span></code></pre></div><h2 id="三、项目实战" tabindex="-1"><a class="header-anchor" href="#三、项目实战"><span>三、项目实战</span></a></h2><h3 id="_3-1-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-1-数据准备"><span>3.1 数据准备</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 我们这次 Spark-sql 操作中所有的数据均来自 Hive，首先在 Hive 中创建表,，并导入数据。一共有3张表： 1张用户行为表，1张城市表，1 张产品表</span></span></code></pre></div><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //修改hadoop的用户</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.setProperty(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;HADOOP_USER_NAME&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;atguigu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkConf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkConf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().setMaster(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;local[*]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).setAppName(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;pro&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> spark</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SparkSession</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SparkSession</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.builder().enableHiveSupport().config(sparkConf).getOrCreate()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;use  spark_sql&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;show databases&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).show()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |CREATE TABLE \`user_visit_action\`(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`date\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`user_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`session_id\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`page_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`action_time\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`search_keyword\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`click_category_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`click_product_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`order_category_ids\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`order_product_ids\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`pay_category_ids\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`pay_product_ids\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`city_id\` bigint)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |row format delimited fields terminated by &#39;\\t&#39;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;load data local inpath &#39;input/user_visit_action.txt&#39; into table user_visit_action&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |CREATE TABLE \`product_info\`(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`product_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`product_name\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`extend_info\` string)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |row format delimited fields terminated by &#39;\\t&#39;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;load data local inpath &#39;input/product_info.txt&#39; into table product_info&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |CREATE TABLE \`city_info\`(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`city_id\` bigint,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`city_name\` string,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |  \`area\` string)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">        |row format delimited fields terminated by &#39;\\t&#39;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.sql(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;load data local inpath &#39;input/city_info.txt&#39; into table city_info&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    spark.stop()</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-需求-各区域热门商品-top3" tabindex="-1"><a class="header-anchor" href="#_3-2-需求-各区域热门商品-top3"><span>3.2 需求 ： 各区域热门商品 Top3</span></a></h3><h4 id="_3-2-1-需求" tabindex="-1"><a class="header-anchor" href="#_3-2-1-需求"><span>3.2.1 需求</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--这里的热门商品是从点击量的维度来看的，计算各个区域前三大热门商品，并备注上每个商品在主要城市中的分布比例，超过两个城市用其他显示</span></span></code></pre></div><table><thead><tr><th><em><strong>*地区*</strong></em></th><th><em><strong>*商品名称*</strong></em></th><th><em><strong>*点击次数*</strong></em></th><th><em><strong>*城市备注*</strong></em></th></tr></thead><tbody><tr><td><em><strong>*华北*</strong></em></td><td>商品A</td><td>100000</td><td>北京21.2%，天津13.2%，其他65.6%</td></tr><tr><td><em><strong>*华北*</strong></em></td><td>商品P</td><td>80200</td><td>北京63.0%，太原10%，其他27.0%</td></tr><tr><td><em><strong>*华北*</strong></em></td><td>商品M</td><td>40000</td><td>北京63.0%，太原10%，其他27.0%</td></tr><tr><td><em><strong>*东北*</strong></em></td><td>商品J</td><td>92000</td><td>大连28%，辽宁17.0%，其他 55.0%</td></tr></tbody></table><h4 id="_3-2-2-需求分析" tabindex="-1"><a class="header-anchor" href="#_3-2-2-需求分析"><span>3.2.2 需求分析</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">SELECT</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">clickCount</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">	SELECT</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">clickCount</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">	RANK</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">over</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">partition</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> by</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#C678DD;--shiki-dark:#C678DD;">  order by</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> clickCount </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DESC</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> click_rank</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">	FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		SELECT</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(*) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> clickCount </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">	FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		SELECT</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city_id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">pro</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_visit_action </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			WHERE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> click_category_id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">			)t1 </span><span style="color:#C678DD;--shiki-dark:#C678DD;">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> product_info pro</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			on</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  pro</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">click_product_id</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> city_info city</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">			on</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city_id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> city</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">city_id</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">			)t2</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">		group by</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">area</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">t2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">product_name</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">	)t3</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  )t4</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> t4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">click_rank</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20200616000034398](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic" target="_blank" rel="noopener noreferrer">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200616000036.png)</p><ul><li>补充备注信息</li></ul><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span></span></span></code></pre></div>`,118)]))}const B=a(p,[["render",r],["__file","6.SparkSQL.html.vue"]]),k=JSON.parse('{"path":"/posts/BigData/08_Spark/6.SparkSQL.html","title":"SparkSQL","lang":"zh-CN","frontmatter":{"description":"SparkSQL 一、 SparkSQL概述 1.1 SparkSQL是什么？ ![image-20200612190658269](https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612190658.png) ![image-20200612190701687](https://lia...","head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/BigData/08_Spark/6.SparkSQL.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"SparkSQL"}],["meta",{"property":"og:description","content":"SparkSQL 一、 SparkSQL概述 1.1 SparkSQL是什么？ ![image-20200612190658269](https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612190658.png) ![image-20200612190701687](https://lia..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612190658.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SparkSQL\\",\\"image\\":[\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612190658.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612190701.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612191859.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612193832.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612194906.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612200712.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612193232.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612213154.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612213954.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612214218.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200612214550.png\\",\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200616000036.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"一、 SparkSQL概述","slug":"一、-sparksql概述","link":"#一、-sparksql概述","children":[{"level":3,"title":"1.1 SparkSQL是什么？","slug":"_1-1-sparksql是什么","link":"#_1-1-sparksql是什么","children":[]},{"level":3,"title":"1.2 Hive 和 SparkSQL解析","slug":"_1-2-hive-和-sparksql解析","link":"#_1-2-hive-和-sparksql解析","children":[]},{"level":3,"title":"1.3  DataFrame是什么","slug":"_1-3-dataframe是什么","link":"#_1-3-dataframe是什么","children":[]},{"level":3,"title":"1.4  DataSet是什么","slug":"_1-4-dataset是什么","link":"#_1-4-dataset是什么","children":[]},{"level":3,"title":"1.5  三者之间的关系","slug":"_1-5-三者之间的关系","link":"#_1-5-三者之间的关系","children":[]}]},{"level":2,"title":"二、 SparkSQL核心编程","slug":"二、-sparksql核心编程","link":"#二、-sparksql核心编程","children":[{"level":3,"title":"2.1 SparkSQL的环境对象","slug":"_2-1-sparksql的环境对象","link":"#_2-1-sparksql的环境对象","children":[]},{"level":3,"title":"2.2 DataFrame","slug":"_2-2-dataframe","link":"#_2-2-dataframe","children":[]},{"level":3,"title":"2.3 DataFrame/DateSet/RDD三者之间的转换","slug":"_2-3-dataframe-dateset-rdd三者之间的转换","link":"#_2-3-dataframe-dateset-rdd三者之间的转换","children":[]},{"level":3,"title":"2.4 IDEA编程","slug":"_2-4-idea编程","link":"#_2-4-idea编程","children":[]},{"level":3,"title":"2.5 UDF和UDAF","slug":"_2-5-udf和udaf","link":"#_2-5-udf和udaf","children":[]},{"level":3,"title":"2.6 数据的加载和保存","slug":"_2-6-数据的加载和保存","link":"#_2-6-数据的加载和保存","children":[]}]},{"level":2,"title":"三、项目实战","slug":"三、项目实战","link":"#三、项目实战","children":[{"level":3,"title":"3.1 数据准备","slug":"_3-1-数据准备","link":"#_3-1-数据准备","children":[]},{"level":3,"title":"3.2 需求  ： 各区域热门商品 Top3","slug":"_3-2-需求-各区域热门商品-top3","link":"#_3-2-需求-各区域热门商品-top3","children":[]}]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":18.89,"words":5666},"filePathRelative":"posts/BigData/08_Spark/6.SparkSQL.md","localizedDate":"2024年10月28日","excerpt":"\\n<hr>\\n<h2>一、 SparkSQL概述</h2>\\n<h3>1.1 SparkSQL是什么？</h3>\\n<p>![image-20200612190658269](<a href=\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612190658.png)</p>\\n<p>![image-20200612190701687](<a href=\\"https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200612190701.png)</p>","autoDesc":true}');export{B as comp,k as data};
