import{_ as a,c as e,a as n,o as i}from"./app-DP7tPpgD.js";const l={};function o(r,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="docker基础-dockercompose详解" tabindex="-1"><a class="header-anchor" href="#docker基础-dockercompose详解"><span>Docker基础 - DockerCompose详解</span></a></h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景"><span>1. 背景</span></a></h2><p>我们可以通过<code>Dockerfile</code>文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到<strong>需要多个容器相互配合来完成某项任务</strong>的情况，或者开发一个<code>Web</code>应用，除了<code>Web</code>服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。</p><p><code>Docker Compose</code>恰好满足了这样的需求，</p><ul><li>它是用于定义和运行多容器<code>Docker</code>应用程序的工具。</li><li>通过<code>Compose</code>，您可以使用<code>YAML</code>文件来配置应用程序所需要的服务。</li><li>然后使用一个命令，就可以通过<code>YAML</code>配置文件创建并启动所有服务。</li></ul><p>Docker Compose<code>项目是</code>Docker<code>官方的开源项目，来源于之前的</code>Fig<code>项目，使用</code>Python<code>语言编写。负责实现对</code>Docker<code>容器集群的快速编排。项目地址为：</code><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener noreferrer">https://github.com/docker/compose/releases</a></p><blockquote><ul><li>Docker Compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）</li><li>Docker Compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例</li></ul></blockquote><h2 id="_2-docker-compose使用的三个步骤" tabindex="-1"><a class="header-anchor" href="#_2-docker-compose使用的三个步骤"><span>2. Docker Compose使用的三个步骤</span></a></h2><p><code>Docker Compose</code>使用的三个步骤为：</p><ul><li>使用<code>Dockerfile</code>文件定义应用程序的环境；</li><li>使用<code>docker-compose.yml</code>文件定义构成应用程序的服务，这样它们可以在隔离环境中一起运行；</li><li>执行<code>docker-compose up</code>命令来创建并启动所有服务。</li></ul><h2 id="_3-安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#_3-安装-docker-compose"><span>3. 安装 Docker Compose</span></a></h2><ul><li>安装 Docker Compose 可以通过下面命令自动下载适应版本的 Compose，并为安装脚本添加执行权限</li></ul><div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">sudo curl </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">L</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> https</span><span style="color:#D19A66;--shiki-dark:#D19A66;">:</span><span style="color:#E06C75;--shiki-dark:#E06C75;">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">github.com</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">compose</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">releases</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">download</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1.21</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">compose</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">$(uname </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">s)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">$(uname </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">m) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">o </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">usr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">local</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">bin</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">compose</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">sudo chmod </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">x </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">usr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">local</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">bin</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">compose</span></span></code></pre></div><ul><li>查看安装是否成功</li></ul><div class="language-cmd" data-ext="cmd" data-title="cmd"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">docker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-</span><span style="color:#E06C75;--shiki-dark:#E06C75;">compose</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75;">v</span></span></code></pre></div><ul><li>卸载</li></ul><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">rm</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span></code></pre></div><h2 id="_4-docker-compose-yml-文件" tabindex="-1"><a class="header-anchor" href="#_4-docker-compose-yml-文件"><span>4. docker-compose.yml 文件</span></a></h2><p><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener noreferrer">官方文档</a></p><ul><li><p><code>Docker Compose</code>允许用户通过<code>docker-compose.yml</code>文件（YAML 格式）来定义一组相关联的容器为一个工程（project）。</p></li><li><p>一个工程包含多个服务（service）</p></li><li><p>每个服务中定义了创建容器时所需的镜像、参数、依赖等。</p></li></ul><h2 id="_5-顶级配置" tabindex="-1"><a class="header-anchor" href="#_5-顶级配置"><span>5. 顶级配置</span></a></h2><p><code>Docker Compose</code>模板文件我们需要关注的顶级配置有<code>version</code>、<code>services</code>、<code>networks</code>、<code>volumes</code>几个部分，除<code>version</code>外，其他几个顶级配置下还有很多下级配置，后面也会详细给大家介绍，先来看看这几个顶级配置都什么意思：</p><ul><li><code>version</code>：描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code></li><li><code>services</code>：定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等</li><li><code>networkds</code>：定义网络，可以多个，根据<code>DNS server</code>让相同网络中的容器可以直接通过容器名称进行通信</li><li><code>volumes</code>：数据卷，用于实现目录挂载</li></ul><h3 id="_5-1-version-版本信息" tabindex="-1"><a class="header-anchor" href="#_5-1-version-版本信息"><span>5.1 version 版本信息</span></a></h3><p>描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code>。关于每个版本的详细信息请参考：<code>https://docs.docker.com/compose/compose-file/compose-versioning/</code></p><p>以下为<code>Compose</code>文件的版本信息所对应的<code>Docker</code>版本。</p><table><thead><tr><th>Compose file format</th><th style="text-align:right;">Docker Engine release</th></tr></thead><tbody><tr><td>3.8</td><td style="text-align:right;">19.03.0+</td></tr><tr><td>3.7</td><td style="text-align:right;">18.06.0+</td></tr><tr><td>3.6</td><td style="text-align:right;">18.02.0+</td></tr><tr><td>3.5</td><td style="text-align:right;">17.12.0+</td></tr><tr><td>3.4</td><td style="text-align:right;">17.09.0+</td></tr><tr><td>3.3</td><td style="text-align:right;">17.06.0+</td></tr><tr><td>3.2</td><td style="text-align:right;">17.04.0+</td></tr><tr><td>3.1</td><td style="text-align:right;">1.13.1+</td></tr><tr><td>3.0</td><td style="text-align:right;">1.13.0+</td></tr><tr><td>...</td><td style="text-align:right;">1.x.x</td></tr></tbody></table><h2 id="_6-services-定义服务" tabindex="-1"><a class="header-anchor" href="#_6-services-定义服务"><span>6. services 定义服务</span></a></h2><p><code>services</code>用来定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等，就像将命令行参数传递给<code>docker run</code>一样。同样，网络和数据卷的定义也是一样的。</p><p>比如，通过<code>docker run</code>命令构建一个<code>MySQL</code>应用容器的命令如下：</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -di</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --name</span><span style="color:#98C379;--shiki-dark:#98C379;"> mysql8</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> 3306:3306</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -v</span><span style="color:#98C379;--shiki-dark:#98C379;"> /mydata/docker_mysql/conf:/etc/mysql/conf.d</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -v</span><span style="color:#98C379;--shiki-dark:#98C379;"> /mydata/docker_mysql/data:/var/lib/mysql</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -e</span><span style="color:#98C379;--shiki-dark:#98C379;"> MYSQL_ROOT_PASSWORD=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1234</span><span style="color:#98C379;--shiki-dark:#98C379;"> mysql:8</span></span></code></pre></div><p>使用<code>docker-compose.yml</code>以后则可以这样定义：</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义服务，可以多个</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  mysql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql:8</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 创建容器时所需的镜像</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql8</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 宿主机与容器的端口映射关系</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3306:3306&quot;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 左边宿主机端口:右边容器端口</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    environment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建容器时所需的环境变量</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      MYSQL_ROOT_PASSWORD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1234</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/mydata/docker_mysql/conf:/etc/mysql/conf.d&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/mydata/docker_mysql/data:/var/lib/mysql&quot;</span></span></code></pre></div><h3 id="_6-1-image-镜像名称标签" tabindex="-1"><a class="header-anchor" href="#_6-1-image-镜像名称标签"><span>6.1 image 镜像名称标签</span></a></h3><p>指定创建容器时所需的镜像名称标签或者镜像<code>ID</code>。如果镜像在本地不存在，会去远程拉取。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  web</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">hello-world</span></span></code></pre></div><h3 id="_6-2-build-构建容器" tabindex="-1"><a class="header-anchor" href="#_6-2-build-构建容器"><span>6.2 build 构建容器</span></a></h3><p>除了可以基于指定的镜像构建容器，还可以基于<code>Dockerfile</code>文件构建，在使用<code>up</code>命令时会执行构建任务。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015369.png" alt="image-20220617200827325" tabindex="0" loading="lazy"><figcaption>image-20220617200827325</figcaption></figure><h3 id="_6-3-context-文件路径" tabindex="-1"><a class="header-anchor" href="#_6-3-context-文件路径"><span>6.3 context 文件路径</span></a></h3><p>该选项可以是<code>Dockerfile</code>文件的绝对/相对路径，也可以是远程<code>Git</code>仓库的<code>URL</code>，当提供的值是相对路径时，相对当前<code>docker-compose.yml</code>文件所在目录。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">.</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 相对当前 docker-compose.yml 文件所在目录，基于名称为 Dockerfile 的文件构建镜像</span></span></code></pre></div><h3 id="_6-4-dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#_6-4-dockerfile-构建镜像"><span>6.4 dockerfile 构建镜像</span></a></h3><p>一般情况下，默认都基于文件名叫<code>Dockerfile</code>的文件构建镜像，当然也可以是自定义的文件名，使用<code>dockerfile</code>声明，不过这个选项只能声明文件名，文件所在路径还是要通过<code>centext</code>来声明。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">.</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 相对当前 docker-compose.yml 文件所在目录</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  dockerfile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">Dockerfile-alternate</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 基于名称为 Dockerfile-alternate 的文件构建镜像</span></span></code></pre></div><h3 id="_6-5-container-name-容器名称" tabindex="-1"><a class="header-anchor" href="#_6-5-container-name-容器名称"><span>6.5 container_name 容器名称</span></a></h3><p><code>Compose</code>创建的容器默认生成的名称格式为：<code>工程名称_服务条目名称_序号</code>。如果要使用自定义名称，使用<code>container_name</code>声明。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  mycentos</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mycentos7</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span></span></code></pre></div><p>因为<code>Docker</code>容器名称必须是唯一的，所以如果指定了自定义名称，就不能将服务扩展至多个容器。这样做可能会导致错误。</p><h3 id="_6-6-depends-on-容器依赖" tabindex="-1"><a class="header-anchor" href="#_6-6-depends-on-容器依赖"><span>6.6 depends_on 容器依赖</span></a></h3><p>使用<code>Compose</code>最大的好处就是敲最少的命令做更多的事情，但一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没有启动数据库容器的情况下启动了<code>Web</code>应用容器，应用容器会因为找不到数据库而退出。<code>depends_on</code>就是用来解决容器依赖、启动先后问题的配置项。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  web</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    depends_on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">db</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  redis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  db</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql</span></span></code></pre></div><p>上述<code>YAML</code>文件定义的容器会先启动<code>db</code>和<code>redis</code>两个服务，最后才启动<code>web</code>服务。</p><h3 id="_6-7-ports-暴露端口" tabindex="-1"><a class="header-anchor" href="#_6-7-ports-暴露端口"><span>6.7 ports 暴露端口</span></a></h3><p>容器对外暴露的端口，格式：左边宿主机端口:右边容器端口。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;80:80&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;8080:8080&quot;</span></span></code></pre></div><h3 id="_6-8-expose-接受端口范围" tabindex="-1"><a class="header-anchor" href="#_6-8-expose-接受端口范围"><span>6.8 expose 接受端口范围</span></a></h3><p>容器暴露的端口不映射到宿主机，只允许能被连接的服务访问。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">expose</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;80&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;8080&quot;</span></span></code></pre></div><h3 id="_6-9-restart-重启策略" tabindex="-1"><a class="header-anchor" href="#_6-9-restart-重启策略"><span>6.9 restart 重启策略</span></a></h3><p>容器重启策略，简单的理解就是<code>Docker</code>重启以后容器要不要一起启动</p><ul><li>no：默认的重启策略，在任何情况下都不会重启容器；</li><li>on-failure：容器非正常退出时，比如退出状态为非0(异常退出)，才会重启容器；</li><li>always：容器总是重新启动，即使容器被手动停止了，当<code>Docker</code>重启时容器也还是会一起启动；</li><li>unless-stopped：容器总是重新启动，除非容器被停止（手动或其他方式），那么<code>Docker</code>重启时容器则不会启动。</li></ul><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  nginx</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mynginx</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;80:80&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    restart</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">always</span></span></code></pre></div><h3 id="_6-10-environment-环境变量" tabindex="-1"><a class="header-anchor" href="#_6-10-environment-环境变量"><span>6.10 environment 环境变量</span></a></h3><p>添加环境变量。可以使用数组也可以使用字典。布尔相关的值（true、false、yes、no）都需要用引号括起来，以确保 YML 解析器不会将它们转换为真或假。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">environment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  RUOYI_ENV</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">development</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  SHOW</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  SESSION_SECRET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span></code></pre></div><p>或者以下格式：</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">environment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">RUOYI_ENV=development</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">SHOW=true</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">SESSION_SECRET</span></span></code></pre></div><h4 id="_6-10-1-env-file-文件获取环境变量" tabindex="-1"><a class="header-anchor" href="#_6-10-1-env-file-文件获取环境变量"><span>6.10.1 env_file 文件获取环境变量</span></a></h4><p>从文件中获取环境变量，可以指定一个或多个文件，其优先级低于<code>environment</code>指定的环境变量。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">env_file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">/opt/runtime_opts.env</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 绝对路径</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">./common.env</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 相对路径，相对当前 docker-compose.yml 文件所在目录</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  - </span><span style="color:#98C379;--shiki-dark:#98C379;">./apps/web.env</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 相对路径，相对当前 docker-compose.yml 文件所在目录</span></span></code></pre></div><p>注意：env 文件中的每一行需采用<code>键=值</code>格式。以<code>#</code>开头的行会被视为注释并被忽略。空行也会被忽略。</p><h3 id="_6-11-command-执行命令" tabindex="-1"><a class="header-anchor" href="#_6-11-command-执行命令"><span>6.11 command 执行命令</span></a></h3><p>覆盖容器启动后默认执行的命令。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">command</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">echo &quot;helloworld&quot;</span></span></code></pre></div><p>该命令也可以是一个列表。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">command</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;helloworld&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><h3 id="_6-12-volumes-目录挂载" tabindex="-1"><a class="header-anchor" href="#_6-12-volumes-目录挂载"><span>6.12 volumes 目录挂载</span></a></h3><p>数据卷，用于实现目录挂载，支持指定目录挂载、匿名挂载、具名挂载。</p><ul><li>指定目录挂载的格式为：左边宿主机目录:右边容器目录，或者左边宿主机目录:右边容器目录:读写权限；</li><li>匿名挂载格式为：容器目录即可，或者容器目录即可:读写权限；</li><li>具名挂载格式为：数据卷条目名称:容器目录，或者数据卷条目名称:容器目录:读写权限。</li></ul><div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 描述 Compose 文件的版本信息</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义服务，可以多个</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  mysql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql:8</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 创建容器时所需的镜像</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql8</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 宿主机与容器的端口映射关系</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;3306:3306&quot;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 左边宿主机端口:右边容器端口</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    environment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建容器时所需的环境变量</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      MYSQL_ROOT_PASSWORD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1234</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 绝对路径</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/mydata/docker_mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 相对路径，相对当前 docker-compose.yml 文件所在目录</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">“./conf:/etc/mysql/conf.d“</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 匿名挂载，匿名挂载只需要写容器目录即可，容器外对应的目录会在 /var/lib/docker/volume 中生成</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/var/lib/mysql&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 具名挂载，就是给数据卷起了个名字，容器外对应的目录会在 /var/lib/docker/volume 中生成</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;mysql-data-volume:/var/lib/mysql&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义数据卷，可以多个</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  mysql-data-volume</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 一个具体数据卷的条目名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">mysql-data-volume</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 数据卷名称，默认为&quot;工程名称_数据卷条目名称&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-13-network-mode-网络模式" tabindex="-1"><a class="header-anchor" href="#_6-13-network-mode-网络模式"><span>6.13 network_mode 网络模式</span></a></h3><p>设置网络模式，类似 docker run 时添加的参数 --net host 或者 --network host 的用法</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">network_mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;bridge&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">network_mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;host&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">network_mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;none&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">network_mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;service:[service name]&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">network_mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;container:[container name/id]&quot;</span></span></code></pre></div><h3 id="_6-14-networks" tabindex="-1"><a class="header-anchor" href="#_6-14-networks"><span>6.14 networks</span></a></h3><p>配置容器连接的网络，引用顶级 networks 下的条目。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义服务，可以多个</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  nginx</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置容器连接的网络，引用顶级 networks 下的条目</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      - </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx-net</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 一个具体网络的条目名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义网络，可以多个。如果不声明，默认会创建一个网络名称为&quot;工程名称_default&quot;的 bridge 网络</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  nginx-net</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 一个具体网络的条目名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx-net</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 网络名称，默认为&quot;工程名称_网络条目名称&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    driver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">bridge</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 网络模式，默认为 bridge</span></span></code></pre></div><h3 id="_6-15-aliases" tabindex="-1"><a class="header-anchor" href="#_6-15-aliases"><span>6.15 aliases</span></a></h3><p>网络上此服务的别名。同一网络上的其他容器可以使用服务名或此别名连接到服务容器。同一服务在不同的网络上可以具有不同的别名。</p><div class="language-yml" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义服务，可以多个</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  nginx</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 配置容器连接的网络，引用顶级 networks 下的条目</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      nginx-net</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 一个具体网络的条目名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        aliases</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 服务别名，可以多个</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          - </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 同一网络上的其他容器可以使用服务名或此别名连接到服务容器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义网络，可以多个。如果不声明，默认会创建一个网络名称为&quot;工程名称_default&quot;的 bridge 网络</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">networks</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  nginx-net</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 一个具体网络的条目名称</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx-net</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 网络名称，默认为&quot;工程名称_网络条目名称&quot;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    driver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">bridge</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 网络模式，默认为 bridge</span></span></code></pre></div><h3 id="_6-16-links" tabindex="-1"><a class="header-anchor" href="#_6-16-links"><span>6.16 links</span></a></h3><p>服务之间可以使用服务名称相互访问，links 允许定义一个别名，从而使用该别名访问其它服务</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">version:</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;2&#39;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">services:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    web:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        build:</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        links:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            -</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;db:database&quot;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    db:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        image:</span><span style="color:#98C379;--shiki-dark:#98C379;"> postgres</span></span></code></pre></div><ul><li>这样 Web 服务就可以使用 db 或 database 作为 hostname 访问 db 服务了</li></ul><h2 id="_7-compose-常用命令" tabindex="-1"><a class="header-anchor" href="#_7-compose-常用命令"><span>7. Compose 常用命令</span></a></h2><p>官方文档：<code>https://docs.docker.com/compose/reference/overview/</code></p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [-f &lt;</span><span style="color:#98C379;--shiki-dark:#98C379;">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">g&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;">...]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [options] [COMMAND] [ARGS...]</span></span></code></pre></div><p>部分命令选项如下：</p><ul><li>-f，--file：指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml；</li><li>-p, --project-name：指定工程名称，默认使用 docker-compose.yml 文件所在目录的名称；</li><li>-v：打印版本并退出；</li><li>--log-level：定义日志等级（DEBUG, INFO, WARNING, ERROR, CRITICAL）。</li></ul><h3 id="_7-1-up" tabindex="-1"><a class="header-anchor" href="#_7-1-up"><span>7.1 up</span></a></h3><p><code>docker-compose up</code>创建并启动所有服务的容器。指定多个<code>yml</code>加<code>-f</code>选项。以守护进程模式运行加<code>-d</code>选项。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 前台启动</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> up</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 后台启动</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> up</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -f 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -f</span><span style="color:#98C379;--shiki-dark:#98C379;"> docker-compose.yml</span><span style="color:#98C379;--shiki-dark:#98C379;"> up</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span></span></code></pre></div><h3 id="_7-2-logs" tabindex="-1"><a class="header-anchor" href="#_7-2-logs"><span>7.2 logs</span></a></h3><p><code>docker-compose logs</code>查看服务容器的输出日志。默认情况下，<code>docker-compose</code>将对不同的服务输出使用不同的颜色来区分。可以通过<code>--no-color</code>来关闭颜色。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出日志，不同的服务输出使用不同的颜色来区分</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> logs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 跟踪日志输出</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> logs</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -f</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭颜色</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> logs</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --no-color</span></span></code></pre></div><h3 id="_7-3-ps" tabindex="-1"><a class="header-anchor" href="#_7-3-ps"><span>7.3 ps</span></a></h3><p><code>docker-compose ps</code>列出工程中所有服务的容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列出工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> ps</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列出工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> ps</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-4-run" tabindex="-1"><a class="header-anchor" href="#_7-4-run"><span>7.4 run</span></a></h3><p><code>docker-compose run</code>在指定服务容器上执行一个命令。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在工程中指定服务的容器上执行 echo &quot;helloworld&quot;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span><span style="color:#98C379;--shiki-dark:#98C379;"> echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;helloworld&quot;</span></span></code></pre></div><h3 id="_7-5-exec" tabindex="-1"><a class="header-anchor" href="#_7-5-exec"><span>7.5 exec</span></a></h3><p><code>docker-compose exec</code>进入服务容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> exec</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span><span style="color:#98C379;--shiki-dark:#98C379;"> bash</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当一个服务拥有多个容器时，可通过 --index 参数进入到该服务下的任何容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> exec</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --index=1</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span><span style="color:#98C379;--shiki-dark:#98C379;"> bash</span></span></code></pre></div><h3 id="_7-6-pause" tabindex="-1"><a class="header-anchor" href="#_7-6-pause"><span>7.6 pause</span></a></h3><p><code>docker-compose pause</code>暂停服务容器</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暂停工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> pause</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暂停工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> pause</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-7-unpause" tabindex="-1"><a class="header-anchor" href="#_7-7-unpause"><span>7.7 unpause</span></a></h3><p><code>docker-compose unpause</code>恢复服务容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 恢复工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> unpause</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 恢复工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> unpause</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-8-restart" tabindex="-1"><a class="header-anchor" href="#_7-8-restart"><span>7.8 restart</span></a></h3><p><code>docker-compose restart</code>重启服务容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 重启工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> restart</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 重启工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> restart</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-9-start" tabindex="-1"><a class="header-anchor" href="#_7-9-start"><span>7.9 start</span></a></h3><p><code>docker-compose start</code>启动服务容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> start</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-10-stop" tabindex="-1"><a class="header-anchor" href="#_7-10-stop"><span>7.10 stop</span></a></h3><p><code>docker-compose stop</code>停止服务容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止工程中所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> stop</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> stop</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-11-kill" tabindex="-1"><a class="header-anchor" href="#_7-11-kill"><span>7.11 kill</span></a></h3><p><code>docker-compose kill</code>通过发送<code>SIGKILL</code>信号停止指定服务的容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过发送 SIGKILL 信号停止工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> kill</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-12-rm" tabindex="-1"><a class="header-anchor" href="#_7-12-rm"><span>7.12 rm</span></a></h3><p>docker-compose rm 删除服务（停止状态）容器。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除所有（停止状态）服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 先停止所有服务的容器，再删除所有服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -s</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 不询问是否删除，直接删除</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -f</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除服务容器挂载的数据卷</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -v</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除工程中指定服务的容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -sv</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-13-down" tabindex="-1"><a class="header-anchor" href="#_7-13-down"><span>7.13 down</span></a></h3><p>停止并删除所有服务的容器、网络、镜像、数据卷。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止并删除工程中所有服务的容器、网络</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> stop</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止并删除工程中所有服务的容器、网络、镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> down</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --rmi</span><span style="color:#98C379;--shiki-dark:#98C379;"> all</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止并删除工程中所有服务的容器、网络、数据卷</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> down</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -v</span></span></code></pre></div><h3 id="_7-14-images" tabindex="-1"><a class="header-anchor" href="#_7-14-images"><span>7.14 images</span></a></h3><p><code>docker-compose images</code>打印服务容器所对应的镜像。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印所有服务的容器所对应的镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> images</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印指定服务的容器所对应的镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> images</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-15-port" tabindex="-1"><a class="header-anchor" href="#_7-15-port"><span>7.15 port</span></a></h3><p><code>docker-compose port</code>打印指定服务容器的某个端口所映射的宿主机端口。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> port</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 80</span></span></code></pre></div><h3 id="_7-16-top" tabindex="-1"><a class="header-anchor" href="#_7-16-top"><span>7.16 top</span></a></h3><p><code>docker-compose top</code>显示正在运行的进程。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示工程中所有服务的容器正在运行的进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> top</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示工程中指定服务的容器正在运行的进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> top</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span></code></pre></div><h3 id="_7-17-pull" tabindex="-1"><a class="header-anchor" href="#_7-17-pull"><span>7.17 pull</span></a></h3><p><code>docker-compose pull</code>拉取服务依赖的镜像。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拉取工程中所有服务依赖的镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> pull</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拉取工程中 nginx 服务依赖的镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> pull</span><span style="color:#98C379;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拉取镜像过程中不打印拉取进度信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379;"> pull</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -q</span></span></code></pre></div><h3 id="_7-18-config" tabindex="-1"><a class="header-anchor" href="#_7-18-config"><span>7.18 config</span></a></h3><p><code>docker-compose config -q</code>验证<code>docker-compose.yml</code>文件。当配置正确时，不输出任何内容，当配置错误时，输出错误信息。</p><h3 id="_7-19-help" tabindex="-1"><a class="header-anchor" href="#_7-19-help"><span>7.19 help</span></a></h3><p><code>docker-compose -help</code>查看帮助。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://www.jianshu.com/p/658911a8cff3" target="_blank" rel="noopener noreferrer">Docker：Docker Compose 详解</a></p><p><a href="http://doc.ruoyi.vip/ruoyi-cloud/cloud/dokcer.html#docker-compose" target="_blank" rel="noopener noreferrer">若依官方文档</a></p>`,157)]))}const c=a(l,[["render",o],["__file","docker-compose-overview.html.vue"]]),t=JSON.parse('{"path":"/posts/Docker/docker-compose-overview.html","title":"Docker基础 - DockerCompose详解","lang":"zh-CN","frontmatter":{"description":"Docker基础 - DockerCompose详解 1. 背景 我们可以通过Dockerfile文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况，或者开发一个Web应用，除了Web服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。 Docker Compose恰好...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Docker/docker-compose-overview.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Docker基础 - DockerCompose详解"}],["meta",{"property":"og:description","content":"Docker基础 - DockerCompose详解 1. 背景 我们可以通过Dockerfile文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况，或者开发一个Web应用，除了Web服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。 Docker Compose恰好..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015369.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker基础 - DockerCompose详解\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015369.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 背景","slug":"_1-背景","link":"#_1-背景","children":[]},{"level":2,"title":"2. Docker Compose使用的三个步骤","slug":"_2-docker-compose使用的三个步骤","link":"#_2-docker-compose使用的三个步骤","children":[]},{"level":2,"title":"3. 安装 Docker Compose","slug":"_3-安装-docker-compose","link":"#_3-安装-docker-compose","children":[]},{"level":2,"title":"4. docker-compose.yml 文件","slug":"_4-docker-compose-yml-文件","link":"#_4-docker-compose-yml-文件","children":[]},{"level":2,"title":"5.  顶级配置","slug":"_5-顶级配置","link":"#_5-顶级配置","children":[{"level":3,"title":"5.1 version 版本信息","slug":"_5-1-version-版本信息","link":"#_5-1-version-版本信息","children":[]}]},{"level":2,"title":"6. services 定义服务","slug":"_6-services-定义服务","link":"#_6-services-定义服务","children":[{"level":3,"title":"6.1 image 镜像名称标签","slug":"_6-1-image-镜像名称标签","link":"#_6-1-image-镜像名称标签","children":[]},{"level":3,"title":"6.2 build 构建容器","slug":"_6-2-build-构建容器","link":"#_6-2-build-构建容器","children":[]},{"level":3,"title":"6.3 context 文件路径","slug":"_6-3-context-文件路径","link":"#_6-3-context-文件路径","children":[]},{"level":3,"title":"6.4 dockerfile 构建镜像","slug":"_6-4-dockerfile-构建镜像","link":"#_6-4-dockerfile-构建镜像","children":[]},{"level":3,"title":"6.5 container_name 容器名称","slug":"_6-5-container-name-容器名称","link":"#_6-5-container-name-容器名称","children":[]},{"level":3,"title":"6.6 depends_on 容器依赖","slug":"_6-6-depends-on-容器依赖","link":"#_6-6-depends-on-容器依赖","children":[]},{"level":3,"title":"6.7 ports 暴露端口","slug":"_6-7-ports-暴露端口","link":"#_6-7-ports-暴露端口","children":[]},{"level":3,"title":"6.8 expose 接受端口范围","slug":"_6-8-expose-接受端口范围","link":"#_6-8-expose-接受端口范围","children":[]},{"level":3,"title":"6.9 restart 重启策略","slug":"_6-9-restart-重启策略","link":"#_6-9-restart-重启策略","children":[]},{"level":3,"title":"6.10 environment 环境变量","slug":"_6-10-environment-环境变量","link":"#_6-10-environment-环境变量","children":[]},{"level":3,"title":"6.11 command 执行命令","slug":"_6-11-command-执行命令","link":"#_6-11-command-执行命令","children":[]},{"level":3,"title":"6.12 volumes 目录挂载","slug":"_6-12-volumes-目录挂载","link":"#_6-12-volumes-目录挂载","children":[]},{"level":3,"title":"6.13 network_mode 网络模式","slug":"_6-13-network-mode-网络模式","link":"#_6-13-network-mode-网络模式","children":[]},{"level":3,"title":"6.14 networks","slug":"_6-14-networks","link":"#_6-14-networks","children":[]},{"level":3,"title":"6.15  aliases","slug":"_6-15-aliases","link":"#_6-15-aliases","children":[]},{"level":3,"title":"6.16  links","slug":"_6-16-links","link":"#_6-16-links","children":[]}]},{"level":2,"title":"7. Compose 常用命令","slug":"_7-compose-常用命令","link":"#_7-compose-常用命令","children":[{"level":3,"title":"7.1 up","slug":"_7-1-up","link":"#_7-1-up","children":[]},{"level":3,"title":"7.2 logs","slug":"_7-2-logs","link":"#_7-2-logs","children":[]},{"level":3,"title":"7.3 ps","slug":"_7-3-ps","link":"#_7-3-ps","children":[]},{"level":3,"title":"7.4 run","slug":"_7-4-run","link":"#_7-4-run","children":[]},{"level":3,"title":"7.5 exec","slug":"_7-5-exec","link":"#_7-5-exec","children":[]},{"level":3,"title":"7.6 pause","slug":"_7-6-pause","link":"#_7-6-pause","children":[]},{"level":3,"title":"7.7 unpause","slug":"_7-7-unpause","link":"#_7-7-unpause","children":[]},{"level":3,"title":"7.8 restart","slug":"_7-8-restart","link":"#_7-8-restart","children":[]},{"level":3,"title":"7.9 start","slug":"_7-9-start","link":"#_7-9-start","children":[]},{"level":3,"title":"7.10 stop","slug":"_7-10-stop","link":"#_7-10-stop","children":[]},{"level":3,"title":"7.11 kill","slug":"_7-11-kill","link":"#_7-11-kill","children":[]},{"level":3,"title":"7.12 rm","slug":"_7-12-rm","link":"#_7-12-rm","children":[]},{"level":3,"title":"7.13 down","slug":"_7-13-down","link":"#_7-13-down","children":[]},{"level":3,"title":"7.14 images","slug":"_7-14-images","link":"#_7-14-images","children":[]},{"level":3,"title":"7.15 port","slug":"_7-15-port","link":"#_7-15-port","children":[]},{"level":3,"title":"7.16 top","slug":"_7-16-top","link":"#_7-16-top","children":[]},{"level":3,"title":"7.17 pull","slug":"_7-17-pull","link":"#_7-17-pull","children":[]},{"level":3,"title":"7.18 config","slug":"_7-18-config","link":"#_7-18-config","children":[]},{"level":3,"title":"7.19 help","slug":"_7-19-help","link":"#_7-19-help","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":14.07,"words":4221},"filePathRelative":"posts/Docker/docker-compose-overview.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 背景</h2>\\n<p>我们可以通过<code>Dockerfile</code>文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到<strong>需要多个容器相互配合来完成某项任务</strong>的情况，或者开发一个<code>Web</code>应用，除了<code>Web</code>服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。</p>\\n<p><code>Docker Compose</code>恰好满足了这样的需求，</p>\\n<ul>\\n<li>它是用于定义和运行多容器<code>Docker</code>应用程序的工具。</li>\\n<li>通过<code>Compose</code>，您可以使用<code>YAML</code>文件来配置应用程序所需要的服务。</li>\\n<li>然后使用一个命令，就可以通过<code>YAML</code>配置文件创建并启动所有服务。</li>\\n</ul>","autoDesc":true}');export{c as comp,t as data};
