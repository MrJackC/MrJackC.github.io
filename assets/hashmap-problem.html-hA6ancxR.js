import{_ as p,c as s,a as e,o as t}from"./app-BfIe-EZg.js";const n={};function i(l,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="hashmap相关问题" tabindex="-1"><a class="header-anchor" href="#hashmap相关问题"><span>HashMap相关问题</span></a></h1><h2 id="_1-hashmap中相关概念" tabindex="-1"><a class="header-anchor" href="#_1-hashmap中相关概念"><span>1. HashMap中相关概念</span></a></h2><ul><li><p>size：</p><p>表示HashMap中存放KV数量（为链表和树中的KV的总和）</p></li><li><p>capacity（容量）</p><p>capacity就是指HashMap中桶的数量，默认值为16，<strong>容量都是2的幂</strong></p></li><li><p>loadFactor（装载因子）</p><p>装载因子用来衡量HashMap满的程度，loadFactor的默认值为0.75f。计算HashMap的实时装载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。</p></li><li><p>threshold：</p><p>表示当HashMap的size大于threshold时会执行resize操作。</p></li></ul><h2 id="_2-假如我们需要存500个数需要多大的hashmap" tabindex="-1"><a class="header-anchor" href="#_2-假如我们需要存500个数需要多大的hashmap"><span>2. 假如我们需要存500个数需要多大的HashMap?</span></a></h2><ul><li><p>HashMap 默认的初始化大小为16，之后每次扩充，变为原来的2倍</p><p>需要存储500个数，那么至少512个的容量。</p></li><li><p>又因为HashMap每次put操作都会检查一遍size（当前容量）&gt; initailCapacity*loadFactor。</p><ul><li><p>默认的负载因子为0.75</p><p>500已经大于512*0.75=384，<strong>所以还需要自动扩容到1024</strong></p></li><li><p>更改负载因子为1</p><p>那么只需要512个空间</p></li></ul></li></ul><p>PS: 特殊情况HashMap的数还有可能都打在一个槽上，我们这里以每个都不一样为例</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>   @Test</span></span>
<span class="line"><span>    public void test02() throws Exception {</span></span>
<span class="line"><span>        HashMap&lt;Object,Object&gt; map = new HashMap&lt;&gt;();</span></span>
<span class="line"><span>        for (int i = 0;i&lt;500;i++){</span></span>
<span class="line"><span>            map.put(i,i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 通过反射获取容量变量capacity,并调用map对象</span></span>
<span class="line"><span>        Method capacity = map.getClass().getDeclaredMethod(&quot;capacity&quot;);</span></span>
<span class="line"><span>        capacity.setAccessible(true);</span></span>
<span class="line"><span>        Integer realCapacity = (Integer) capacity.invoke(map);</span></span>
<span class="line"><span>        // HashMap插入500个数，实际容量为1024</span></span>
<span class="line"><span>        System.out.println(&quot;HashMap插入500个数，实际容量为&quot; + realCapacity);</span></span>
<span class="line"><span>    }</span></span></code></pre></div><h2 id="_3-hashmap的负载因子" tabindex="-1"><a class="header-anchor" href="#_3-hashmap的负载因子"><span>3. HashMap的负载因子</span></a></h2><p>HashMap默认的负载因子为0.75</p>`,9)]))}const c=p(n,[["render",i],["__file","hashmap-problem.html.vue"]]),o=JSON.parse('{"path":"/posts/Java/Java%E9%9B%86%E5%90%88/hashmap-problem.html","title":"HashMap相关问题","lang":"zh-CN","frontmatter":{"aliases":"HashMap相关问题","tags":null,"cssclass":null,"source":null,"order":920,"category":["Java"],"created":"2024-02-22 10:47","updated":"2024-03-12 09:12","description":"HashMap相关问题 1. HashMap中相关概念 size： 表示HashMap中存放KV数量（为链表和树中的KV的总和） capacity（容量） capacity就是指HashMap中桶的数量，默认值为16，容量都是2的幂 loadFactor（装载因子） 装载因子用来衡量HashMap满的程度，loadFactor的默认值为0.75f。计算...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Java%E9%9B%86%E5%90%88/hashmap-problem.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"HashMap相关问题"}],["meta",{"property":"og:description","content":"HashMap相关问题 1. HashMap中相关概念 size： 表示HashMap中存放KV数量（为链表和树中的KV的总和） capacity（容量） capacity就是指HashMap中桶的数量，默认值为16，容量都是2的幂 loadFactor（装载因子） 装载因子用来衡量HashMap满的程度，loadFactor的默认值为0.75f。计算..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashMap相关问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. HashMap中相关概念","slug":"_1-hashmap中相关概念","link":"#_1-hashmap中相关概念","children":[]},{"level":2,"title":"2. 假如我们需要存500个数需要多大的HashMap?","slug":"_2-假如我们需要存500个数需要多大的hashmap","link":"#_2-假如我们需要存500个数需要多大的hashmap","children":[]},{"level":2,"title":"3. HashMap的负载因子","slug":"_3-hashmap的负载因子","link":"#_3-hashmap的负载因子","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"posts/Java/Java集合/hashmap-problem.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. HashMap中相关概念</h2>\\n<ul>\\n<li>\\n<p>size：</p>\\n<p>表示HashMap中存放KV数量（为链表和树中的KV的总和）</p>\\n</li>\\n<li>\\n<p>capacity（容量）</p>\\n<p>capacity就是指HashMap中桶的数量，默认值为16，<strong>容量都是2的幂</strong></p>\\n</li>\\n<li>\\n<p>loadFactor（装载因子）</p>\\n<p>装载因子用来衡量HashMap满的程度，loadFactor的默认值为0.75f。计算HashMap的实时装载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。</p>\\n</li>\\n<li>\\n<p>threshold：</p>\\n<p>表示当HashMap的size大于threshold时会执行resize操作。</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,o as data};
