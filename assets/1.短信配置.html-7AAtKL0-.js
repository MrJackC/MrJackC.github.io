import{_ as o,c as r,a,o as n}from"./app-CzniW49G.js";const i={};function t(s,e){return n(),r("div",null,e[0]||(e[0]=[a(`<h1 id="短信配置" tabindex="-1"><a class="header-anchor" href="#短信配置"><span>短信配置</span></a></h1><p>友情提示：</p><p>该功能依赖“消息队列”，需要参考 <a href="https://doc.iocoder.cn/message-queue/" target="_blank" rel="noopener noreferrer">《消息队列》</a> 文档进行开启消息队列。</p><p>本章节，介绍项目的短信功能。该功能提供统一的短信 API 给其它模块，使它们可以快速接入短信功能，无需关心不同短信平台的具体对接。</p><p>短信采用异步发送，基于 <a href="https://doc.iocoder.cn/message-queue" target="_blank" rel="noopener noreferrer">Redis 消息队列</a>，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/01.png" alt="整体流程" tabindex="0" loading="lazy"><figcaption>整体流程</figcaption></figure><ul><li><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-biz-sms</code> (opens new window)</a>业务组件：封装不同短信平台的客户端。</li><li><code>yudao-module-system</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/sms/" target="_blank" rel="noopener noreferrer"><code>sms</code> (opens new window)</a>业务模块，提供短信渠道、模板的配置，短信日志的查看，短信的发送等功能。</li></ul><h2 id="_1-表结构" tabindex="-1"><a class="header-anchor" href="#_1-表结构"><span><a href="https://doc.iocoder.cn/sms/#_1-%E8%A1%A8%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>1. 表结构</span></a></h2><figure><img src="https://doc.iocoder.cn/img/短信配置/02.png" alt="表结构" tabindex="0" loading="lazy"><figcaption>表结构</figcaption></figure><h2 id="_2-短信配置" tabindex="-1"><a class="header-anchor" href="#_2-短信配置"><span><a href="https://doc.iocoder.cn/sms/#_2-%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>2. 短信配置</span></a></h2><p>本小节，讲解如何配置短信功能，整个过程如下：</p><ul><li>新建一个短信【渠道】，配置对应短信平台的账号</li><li>新建一个短信【模版】，配置对应短信平台的模板</li><li>测试该短信模板，查看对应的短信【日志】，确认是否发送成功</li></ul><h3 id="_2-1-新建短信渠道" tabindex="-1"><a class="header-anchor" href="#_2-1-新建短信渠道"><span><a href="https://doc.iocoder.cn/sms/#_2-1-%E6%96%B0%E5%BB%BA%E7%9F%AD%E4%BF%A1%E6%B8%A0%E9%81%93" target="_blank" rel="noopener noreferrer">#</a>2.1 新建短信渠道</span></a></h3><p>① 点击 [系统管理 -&gt; 短信管理 -&gt; 短信渠道] 菜单，查看短信渠道的列表。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/03.png" alt="短信渠道的列表" tabindex="0" loading="lazy"><figcaption>短信渠道的列表</figcaption></figure><p>② 点击 [新增] 按钮，选择渠道编码为【调试（钉钉）】，并填写信息如下图：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/04.png" alt="短信渠道的新增" tabindex="0" loading="lazy"><figcaption>短信渠道的新增</figcaption></figure><div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">短信 API 的账号</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">696b5d8ead48071237e4aa5861ff08dbadb2b4ded1c688a7b7c9afc615579859</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">短信 API 的密钥</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">SEC5c4e5ff888bc8a9923ae47f59e7ccd30af1f14d93c55b4e2c9cb094e35aeed67</span></span></code></pre></div><p>疑问 1：为什么选择渠道编码为【调试（钉钉）】？</p><p>该类型使用钉钉机器人来模拟短信发送，用于日常调试。</p><ul><li>短信 API 的账号，对应机器人的 Webhook 的 <code>access_token</code> 参数</li><li>短信 API 的密钥，对应机器人的安全设置的加签</li></ul><p>上图使用的配置，是艿艿自己的钉钉机器人。正式使用时，必须参考 <a href="https://open.dingtalk.com/document/group/custom-robot-access" target="_blank" rel="noopener noreferrer">《钉钉开放平台 —— 自定义机器人接入 》 (opens new window)</a>文档，申请自己的专属机器人。</p><p>疑问 2：可以选择其它渠道编码吗？</p><p>当然可以，这里主要考虑部分同学暂时没有申请短信平台，所以使用【调试（钉钉）】渠道编码。</p><p>不同短信平台的配置，可见 <a href="https://doc.iocoder.cn/sms/#_6-%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0%E9%99%84%E5%BD%95" target="_blank" rel="noopener noreferrer">「6. 短信平台附录」</a> 小节。</p><h3 id="_2-2-新建短信模板" tabindex="-1"><a class="header-anchor" href="#_2-2-新建短信模板"><span><a href="https://doc.iocoder.cn/sms/#_2-2-%E6%96%B0%E5%BB%BA%E7%9F%AD%E4%BF%A1%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener noreferrer">#</a>2.2 新建短信模板</span></a></h3><p>① 点击 [系统管理 -&gt; 短信管理 -&gt; 短信模板] 菜单，查看短信模板的列表。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/05.png" alt="短信模板的新增" tabindex="0" loading="lazy"><figcaption>短信模板的新增</figcaption></figure><p>② 点击 [新增] 按钮，选择刚创建的短信渠道，并填写信息如下图：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/06.png" alt="短信模板的新增" tabindex="0" loading="lazy"><figcaption>短信模板的新增</figcaption></figure><ul><li>短信渠道编号：发送该短信模板时，使用的短信渠道，即使用哪个短信平台进行发送</li><li>模板编号：短信模板的唯一标识，使用短信 API 时，通过它标识使用的短信模板</li><li>模板内容：短信模板的内容，使用 <code>{var}</code> 作为占位符，例如说 <code>{name}</code>、<code>{code}</code> 等</li><li>短信 API 模板编号：短信平台的短信模板的编号，需要保证该模板在短信平台已经审核通过</li><li>开启状态：短信模板被禁用时，该短信模板将不发送短信，只记录短信日志</li></ul><p>疑问：为什么设计短信模板的功能？</p><p>在一些场景下，需要修改短信模板所使用的短信平台。例如说：短信平台出现故障，或者切换短信平台等等。</p><p>此时，只需要修改短信模板的两个属性：短信渠道编号、短信 API 模板编号，无需重启应用。</p><h3 id="_2-3-查看短信日志" tabindex="-1"><a class="header-anchor" href="#_2-3-查看短信日志"><span><a href="https://doc.iocoder.cn/sms/#_2-3-%E6%9F%A5%E7%9C%8B%E7%9F%AD%E4%BF%A1%E6%97%A5%E5%BF%97" target="_blank" rel="noopener noreferrer">#</a>2.3 查看短信日志</span></a></h3><p>① 使用钉钉，扫码 <a href="https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/07.jpg" target="_blank" rel="noopener noreferrer">图片</a> 加入机器人所在的【ruoyi-vue-pro 短信测试群】，查看测试短信的模拟发送。</p><p>② 点击 [测试] 按钮，输入任一手机号，进行该短信模板的模拟发送。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/08.png" alt="测试短信模板" tabindex="0" loading="lazy"><figcaption>测试短信模板</figcaption></figure><figure><img src="https://doc.iocoder.cn/img/短信配置/09.png" alt="测试短信模板" tabindex="0" loading="lazy"><figcaption>测试短信模板</figcaption></figure><p>友情提示：如果使用的短信渠道是阿里云、腾讯云等正式的短信平台，则会发送到填写的手机号中。例如说：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/10.png" alt="接收示例" tabindex="0" loading="lazy"><figcaption>接收示例</figcaption></figure><p>③ 点击 [系统管理 -&gt; 短信管理 -&gt; 短信日志] 采单，可以查看到每条短信的发送状态、接收状态。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/11.png" alt="短信日志" tabindex="0" loading="lazy"><figcaption>短信日志</figcaption></figure><h2 id="_3-短信发送" tabindex="-1"><a class="header-anchor" href="#_3-短信发送"><span><a href="https://doc.iocoder.cn/sms/#_3-%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81" target="_blank" rel="noopener noreferrer">#</a>3. 短信发送</span></a></h2><h3 id="_3-1-smssendapi" tabindex="-1"><a class="header-anchor" href="#_3-1-smssendapi"><span><a href="https://doc.iocoder.cn/sms/#_3-1-smssendapi" target="_blank" rel="noopener noreferrer">#</a>3.1 SmsSendApi</span></a></h3><p>使用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/api/sms/SmsSendApi.java" target="_blank" rel="noopener noreferrer">SmsSendApi (opens new window)</a>进行短信的发送，支持多种用户类型。它的方法如下：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/21.png" alt="短信发送" tabindex="0" loading="lazy"><figcaption>短信发送</figcaption></figure><h3 id="_3-2-实战案例" tabindex="-1"><a class="header-anchor" href="#_3-2-实战案例"><span><a href="https://doc.iocoder.cn/sms/#_3-2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>3.2 实战案例</span></a></h3><p>以工作流申请通过时，发送短信为例子，讲解 SmsSendApi 的使用。</p><p>① 引入 <code>yudao-module-system-api</code> 依赖，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/22.png" alt=" 依赖" tabindex="0" loading="lazy"><figcaption> 依赖</figcaption></figure><p>② 新建对应的短信模板，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/23.png" alt="新建短信模板" tabindex="0" loading="lazy"><figcaption>新建短信模板</figcaption></figure><p>③ 使用 Spring 注入 SmsSendApi Bean，调用对应的短信发送方法。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/24.png" alt="调用 SmsSendApi 方法" tabindex="0" loading="lazy"><figcaption>调用 SmsSendApi 方法</figcaption></figure><h2 id="_4-验证码发送" tabindex="-1"><a class="header-anchor" href="#_4-验证码发送"><span><a href="https://doc.iocoder.cn/sms/#_4-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81" target="_blank" rel="noopener noreferrer">#</a>4. 验证码发送</span></a></h2><h3 id="_4-1-smscodeapi" tabindex="-1"><a class="header-anchor" href="#_4-1-smscodeapi"><span><a href="https://doc.iocoder.cn/sms/#_4-1-smscodeapi" target="_blank" rel="noopener noreferrer">#</a>4.1 SmsCodeApi</span></a></h3><p>使用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/api/sms/SmsCodeApi.java" target="_blank" rel="noopener noreferrer">SmsCodeApi (opens new window)</a>进行【验证码】短信的发送，例如说：用户手机验证码登录、用户忘记密码等等。它的方法如下：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/21.png" alt="短信发送" tabindex="0" loading="lazy"><figcaption>短信发送</figcaption></figure><p>验证码使用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/sms/SmsCodeDO.java" target="_blank" rel="noopener noreferrer"><code>system_sms_code</code> (opens new window)</a>表进行存储，默认每天最多发送 10 条，每分钟发送 1 条，有效期为 10 分钟，可通过 <code>yudao.sms-code</code> 配置项进行自定义：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/32.png" alt=" 配置项" tabindex="0" loading="lazy"><figcaption> 配置项</figcaption></figure><h3 id="_4-2-实战案例" tabindex="-1"><a class="header-anchor" href="#_4-2-实战案例"><span><a href="https://doc.iocoder.cn/sms/#_4-2-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>4.2 实战案例</span></a></h3><p>以会员用户手机验证码登录为例子，讲解 SmsCodeApi 的使用。</p><p>① 引入 <code>yudao-module-system-api</code> 依赖，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/34.png" alt=" 依赖" tabindex="0" loading="lazy"><figcaption> 依赖</figcaption></figure><p>② 新建对应的短信模板，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/35.png" alt="新建短信模板" tabindex="0" loading="lazy"><figcaption>新建短信模板</figcaption></figure><p>③ 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-api/src/main/java/cn/iocoder/yudao/module/system/enums/sms/SmsSceneEnum.java" target="_blank" rel="noopener noreferrer">SmsSceneEnum (opens new window)</a>中，枚举会员用户的手机号登录的场景，如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/36.png" alt="SmsSceneEnum 枚举" tabindex="0" loading="lazy"><figcaption>SmsSceneEnum 枚举</figcaption></figure><p>④ 使用 Spring 注入 SmsCodeApi Bean，调用对应的短信验证码的发送与使用方法。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/33.png" alt="调用 SmsCodeApi 方法" tabindex="0" loading="lazy"><figcaption>调用 SmsCodeApi 方法</figcaption></figure><h2 id="_5-短信客户端" tabindex="-1"><a class="header-anchor" href="#_5-短信客户端"><span><a href="https://doc.iocoder.cn/sms/#_5-%E7%9F%AD%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>5. 短信客户端</span></a></h2><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-biz-sms</code> (opens new window)</a>业务组件，对接阿里云、腾讯云等短信平台，提供统一的短信客户端，提供给 <code>yudao-module-system</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/sms/" target="_blank" rel="noopener noreferrer"><code>sms</code> (opens new window)</a>业务模块来调用。</p><h3 id="_5-1-smsclient" tabindex="-1"><a class="header-anchor" href="#_5-1-smsclient"><span><a href="https://doc.iocoder.cn/sms/#_5-1-smsclient" target="_blank" rel="noopener noreferrer">#</a>5.1 SmsClient</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/src/main/java/cn/iocoder/yudao/framework/sms/core/client/SmsClient.java" target="_blank" rel="noopener noreferrer">SmsClient (opens new window)</a>接口，定义短信客户端的方法。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/41.png" alt="SmsClient 接口" tabindex="0" loading="lazy"><figcaption>SmsClient 接口</figcaption></figure><p>每个短信平台，都对应一个 SmsClient 实现类。</p><figure><img src="https://doc.iocoder.cn/img/短信配置/42.png" alt="SmsClient 实现" tabindex="0" loading="lazy"><figcaption>SmsClient 实现</figcaption></figure><h3 id="_5-2-smscodemapping" tabindex="-1"><a class="header-anchor" href="#_5-2-smscodemapping"><span><a href="https://doc.iocoder.cn/sms/#_5-2-smscodemapping" target="_blank" rel="noopener noreferrer">#</a>5.2 SmsCodeMapping</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/src/main/java/cn/iocoder/yudao/framework/sms/core/client/SmsCodeMapping.java" target="_blank" rel="noopener noreferrer">SmsCodeMapping (opens new window)</a>接口，定义短信平台错误码转换成 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/src/main/java/cn/iocoder/yudao/framework/sms/core/enums/SmsFrameworkErrorCodeConstants.java" target="_blank" rel="noopener noreferrer">标准错误码 (opens new window)</a>的方法。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/43.png" alt="SmsClient 接口" tabindex="0" loading="lazy"><figcaption>SmsClient 接口</figcaption></figure><p>每个短信平台，都对应一个 SmsCodeMapping 实现类。</p><figure><img src="https://doc.iocoder.cn/img/短信配置/44.png" alt="SmsClient 实现" tabindex="0" loading="lazy"><figcaption>SmsClient 实现</figcaption></figure><h3 id="_5-3-对接其它短信平台" tabindex="-1"><a class="header-anchor" href="#_5-3-对接其它短信平台"><span><a href="https://doc.iocoder.cn/sms/#_5-3-%E5%AF%B9%E6%8E%A5%E5%85%B6%E5%AE%83%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0" target="_blank" rel="noopener noreferrer">#</a>5.3 对接其它短信平台</span></a></h3><p>如果你想要对接其它短信平台，自定义一个 SmsClient + SmsCodeMapping 实现类，并使用 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/src/main/java/cn/iocoder/yudao/framework/sms/core/client/impl/SmsClientFactoryImpl.java#L77-L90" target="_blank" rel="noopener noreferrer">SmsClientFactoryImpl (opens new window)</a>进行创建。代码如下：</p><figure><img src="https://doc.iocoder.cn/img/短信配置/45.png" alt="SmsClientFactoryImpl 创建客户端" tabindex="0" loading="lazy"><figcaption>SmsClientFactoryImpl 创建客户端</figcaption></figure><h2 id="_6-短信平台附录" tabindex="-1"><a class="header-anchor" href="#_6-短信平台附录"><span><a href="https://doc.iocoder.cn/sms/#_6-%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0%E9%99%84%E5%BD%95" target="_blank" rel="noopener noreferrer">#</a>6. 短信平台附录</span></a></h2><p>一般情况下，建议接入 2-3 个短信平台，避免某个短信平台故障时，影响业务的正常运行。</p><p>例如说，手机验证码的短信平台 A 故障时，赶紧将短信验证码切换到短信平台 B 上，否则用户将无法正常登录或是注册。</p><h3 id="_6-1-阿里云" tabindex="-1"><a class="header-anchor" href="#_6-1-阿里云"><span><a href="https://doc.iocoder.cn/sms/#_6-1-%E9%98%BF%E9%87%8C%E4%BA%91" target="_blank" rel="noopener noreferrer">#</a>6.1 阿里云</span></a></h3><ul><li>短信 API 的账号、密钥，可通过 <a href="https://ram.console.aliyun.com/manage/ak" target="_blank" rel="noopener noreferrer">阿里云 —— AccessKey (opens new window)</a>获取。</li><li>短信发送回调 URL，可通过 <a href="https://dysms.console.aliyun.com/general/upward" target="_blank" rel="noopener noreferrer">阿里云 —— 短信服务 —— 通用设置 (opens new window)</a>配置。</li></ul><h3 id="_6-2-腾讯云" tabindex="-1"><a class="header-anchor" href="#_6-2-腾讯云"><span><a href="https://doc.iocoder.cn/sms/#_6-2-%E8%85%BE%E8%AE%AF%E4%BA%91" target="_blank" rel="noopener noreferrer">#</a>6.2 腾讯云</span></a></h3><ul><li><p>短信 API 的账号、密钥，可通过 <a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noopener noreferrer">腾讯云 —— API 密钥管理 (opens new window)</a>获取。</p><p>注意！！！</p><p>腾讯云需要额外使用 <a href="https://console.cloud.tencent.com/smsv2/app-manage" target="_blank" rel="noopener noreferrer">SDKAppID (opens new window)</a>参数，它的账号需要采用 <code>SDKAppID secretId</code> 格式，具体可见 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-sms/src/main/java/cn/iocoder/yudao/framework/sms/core/client/impl/tencent/TencentSmsChannelProperties.java" target="_blank" rel="noopener noreferrer">TencentSmsChannelProperties (opens new window)</a>类。</p></li><li><p>短信发送回调 URL，可通过 <a href="https://console.cloud.tencent.com/smsv2/app-setting" target="_blank" rel="noopener noreferrer">腾讯云 —— 短信 —— 基础配置 (opens new window)</a>配置。</p></li></ul><p>上次更新: 2023/07/29, 15:56:49</p>`,94)]))}const p=o(i,[["render",t],["__file","1.短信配置.html.vue"]]),d=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/9.%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%86%8C/1.%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE.html","title":"短信配置","lang":"zh-CN","frontmatter":{"description":"短信配置 友情提示： 该功能依赖“消息队列”，需要参考 《消息队列》 文档进行开启消息队列。 本章节，介绍项目的短信功能。该功能提供统一的短信 API 给其它模块，使它们可以快速接入短信功能，无需关心不同短信平台的具体对接。 短信采用异步发送，基于 Redis 消息队列，如下图所示： 整体流程整体流程 yudao-spring-boot-starter...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Java/Ruoyi-Vue-Pro/9.%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%86%8C/1.%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"短信配置"}],["meta",{"property":"og:description","content":"短信配置 友情提示： 该功能依赖“消息队列”，需要参考 《消息队列》 文档进行开启消息队列。 本章节，介绍项目的短信功能。该功能提供统一的短信 API 给其它模块，使它们可以快速接入短信功能，无需关心不同短信平台的具体对接。 短信采用异步发送，基于 Redis 消息队列，如下图所示： 整体流程整体流程 yudao-spring-boot-starter..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T07:41:53.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-21T07:41:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"短信配置\\",\\"image\\":[\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/01.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/02.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/03.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/04.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/05.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/06.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/08.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/09.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/10.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/11.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/21.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/22.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/23.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/24.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/21.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/32.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/34.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/35.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/36.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/33.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/41.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/42.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/43.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/44.png\\",\\"https://doc.iocoder.cn/img/%E7%9F%AD%E4%BF%A1%E9%85%8D%E7%BD%AE/45.png\\"],\\"dateModified\\":\\"2024-11-21T07:41:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"#1. 表结构","slug":"_1-表结构","link":"#_1-表结构","children":[]},{"level":2,"title":"#2. 短信配置","slug":"_2-短信配置","link":"#_2-短信配置","children":[{"level":3,"title":"#2.1 新建短信渠道","slug":"_2-1-新建短信渠道","link":"#_2-1-新建短信渠道","children":[]},{"level":3,"title":"#2.2 新建短信模板","slug":"_2-2-新建短信模板","link":"#_2-2-新建短信模板","children":[]},{"level":3,"title":"#2.3 查看短信日志","slug":"_2-3-查看短信日志","link":"#_2-3-查看短信日志","children":[]}]},{"level":2,"title":"#3. 短信发送","slug":"_3-短信发送","link":"#_3-短信发送","children":[{"level":3,"title":"#3.1 SmsSendApi","slug":"_3-1-smssendapi","link":"#_3-1-smssendapi","children":[]},{"level":3,"title":"#3.2 实战案例","slug":"_3-2-实战案例","link":"#_3-2-实战案例","children":[]}]},{"level":2,"title":"#4. 验证码发送","slug":"_4-验证码发送","link":"#_4-验证码发送","children":[{"level":3,"title":"#4.1 SmsCodeApi","slug":"_4-1-smscodeapi","link":"#_4-1-smscodeapi","children":[]},{"level":3,"title":"#4.2 实战案例","slug":"_4-2-实战案例","link":"#_4-2-实战案例","children":[]}]},{"level":2,"title":"#5. 短信客户端","slug":"_5-短信客户端","link":"#_5-短信客户端","children":[{"level":3,"title":"#5.1 SmsClient","slug":"_5-1-smsclient","link":"#_5-1-smsclient","children":[]},{"level":3,"title":"#5.2 SmsCodeMapping","slug":"_5-2-smscodemapping","link":"#_5-2-smscodemapping","children":[]},{"level":3,"title":"#5.3 对接其它短信平台","slug":"_5-3-对接其它短信平台","link":"#_5-3-对接其它短信平台","children":[]}]},{"level":2,"title":"#6. 短信平台附录","slug":"_6-短信平台附录","link":"#_6-短信平台附录","children":[{"level":3,"title":"#6.1 阿里云","slug":"_6-1-阿里云","link":"#_6-1-阿里云","children":[]},{"level":3,"title":"#6.2 腾讯云","slug":"_6-2-腾讯云","link":"#_6-2-腾讯云","children":[]}]}],"git":{"createdTime":1732174913000,"updatedTime":1732174913000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":8.42,"words":2526},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/9.系统手册/1.短信配置.md","localizedDate":"2024年11月21日","excerpt":"\\n<p>友情提示：</p>\\n<p>该功能依赖“消息队列”，需要参考 <a href=\\"https://doc.iocoder.cn/message-queue/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《消息队列》</a> 文档进行开启消息队列。</p>\\n<p>本章节，介绍项目的短信功能。该功能提供统一的短信 API 给其它模块，使它们可以快速接入短信功能，无需关心不同短信平台的具体对接。</p>\\n<p>短信采用异步发送，基于 <a href=\\"https://doc.iocoder.cn/message-queue\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Redis 消息队列</a>，如下图所示：</p>","autoDesc":true}');export{p as comp,d as data};
