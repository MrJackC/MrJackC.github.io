import{_ as a,c as i,a as n,o as l}from"./app-4x2aIoqi.js";const e={};function o(r,s){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="文件存储-上传下载" tabindex="-1"><a class="header-anchor" href="#文件存储-上传下载"><span>文件存储（上传下载）</span></a></h1><p>项目支持将文件上传到三类存储器：</p><ol><li>兼容 S3 协议的对象存储：支持 MinIO、腾讯云 COS、七牛云 Kodo、华为云 OBS、亚马逊 S3 等等。</li><li>磁盘存储：本地、FTP 服务器、SFTP 服务器。</li><li>数据库存储：MySQL、Oracle、PostgreSQL、SQL Server 等等。</li></ol><p>技术选型？</p><ul><li>优先，✔ 推荐方案 1。如果无法使用云服务，可以自己搭建一个 MinIO 服务。参见 <a href="https://www.iocoder.cn/Spring-Boot/MinIO/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 对象存储 MinIO 入门 》 (opens new window)</a>文章。</li><li>其次，推荐方案 3。数据库的主从机制可以实现高可用，备份也方便，少量小文件问题不大。</li><li>最后，× 不推荐方案 2。主要是实现高可用比较困难，无法实现故障转移。</li></ul><h2 id="_1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-快速入门"><span><a href="https://doc.iocoder.cn/file/#_1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8" target="_blank" rel="noopener noreferrer">#</a>1. 快速入门</span></a></h2><p>本小节，我们来添加个文件配置，并使用它上传下载文件。</p><h3 id="_1-1-新增配置" tabindex="-1"><a class="header-anchor" href="#_1-1-新增配置"><span><a href="https://doc.iocoder.cn/file/#_1-1-%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>1.1 新增配置</span></a></h3><p>① 打开 [基础设施 -&gt; 文件管理 -&gt; 文件配置] 菜单，进入文件配置的界面。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/01.png" alt="文件配置" tabindex="0" loading="lazy"><figcaption>文件配置</figcaption></figure><p>② 点击 [新增] 按钮，选择存储器为【S3 对象存储器】，并填写七牛云的配置。如下图：</p><figure><img src="https://doc.iocoder.cn/img/上传下载/02.png" alt="S3 对象存储器" tabindex="0" loading="lazy"><figcaption>S3 对象存储器</figcaption></figure><ul><li>节点地址：<a href="http://s3-cn-south-1.qiniucs.com" target="_blank" rel="noopener noreferrer">s3-cn-south-1.qiniucs.com</a></li><li>存储 bucket：ruoyi-vue-pro</li><li>accessKey：b7yvuhBSAGjmtPhMFcn9iMOxUOY_I06cA_p0ZUx8</li><li>accessSecret：kXM1l5ia1RvSX3QaOEcwI3RLz3Y2rmNszWonKZtP</li><li>自定义域名：<a href="http://test.yudao.iocoder.cn" target="_blank" rel="noopener noreferrer">http://test.yudao.iocoder.cn</a></li></ul><p>友善的眼神！</p><p>上述七牛云的配置，是艿艿为了大家方便体验，请勿在测试或生产环境体验。</p><p>③ 添加完后，点击该配置所在行的 [测试] 按钮，测试配置是否正确。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/03.png" alt="测试配置" tabindex="0" loading="lazy"><figcaption>测试配置</figcaption></figure><p>④ 测试通过后，点击该配置所在行的 [主配置] 按钮，设置它为<strong>默认</strong>的配置，后续使用它进行文件的上传。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/07.png" alt="测试配置" tabindex="0" loading="lazy"><figcaption>测试配置</figcaption></figure><h3 id="_1-2-上传文件" tabindex="-1"><a class="header-anchor" href="#_1-2-上传文件"><span><a href="https://doc.iocoder.cn/file/#_1-2-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>1.2 上传文件</span></a></h3><p>① 点击 [基础设施 -&gt; 文件管理 -&gt; 文件列表] 菜单，进入文件列表的界面。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/04.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><p>② 点击 [上传文件] 按钮，选择要上传的文件。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/05.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><p>③ 上传完成后，如果想要删除，可点击该文件所在行的 [删除] 按钮。</p><figure><img src="https://doc.iocoder.cn/img/上传下载/06.png" alt="文件列表" tabindex="0" loading="lazy"><figcaption>文件列表</figcaption></figure><h2 id="_2-文件上传" tabindex="-1"><a class="header-anchor" href="#_2-文件上传"><span><a href="https://doc.iocoder.cn/file/#_2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0" target="_blank" rel="noopener noreferrer">#</a>2. 文件上传</span></a></h2><p>项目提供了 2 种文件上传的方式，分别适合前端、后端使用。</p><h3 id="_2-1-方式一-前端上传" tabindex="-1"><a class="header-anchor" href="#_2-1-方式一-前端上传"><span><a href="https://doc.iocoder.cn/file/#_2-1-%E6%96%B9%E5%BC%8F%E4%B8%80-%E5%89%8D%E7%AB%AF%E4%B8%8A%E4%BC%A0" target="_blank" rel="noopener noreferrer">#</a>2.1 方式一：前端上传</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/file/FileController.java" target="_blank" rel="noopener noreferrer">FileController (opens new window)</a>提供了 <code>/admin-api/infra/file/upload</code> RESTful API，用于前端直接上传文件。</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// FileController.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PostMapping</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/upload&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Operation</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">summary</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;上传文件&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">OperateLog</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">logArgs</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 上传文件，没有记录操作日志的必要</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> CommonResult</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">String</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> uploadFile</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">FileUploadReqVO</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> uploadReqVO) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    MultipartFile</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> file </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> uploadReqVO</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getFile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> path </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> uploadReqVO</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> success</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fileService</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createFile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getOriginalFilename</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(), path,</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        IoUtil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">readBytes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getInputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()))</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>前端上传文件的代码如何实现，可见：</p><ul><li>文件列表，文件上传 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/views/infra/file/index.vue#L59-L76" target="_blank" rel="noopener noreferrer"><code>index.vue</code>(opens new window)</a></li><li>个人中心，头像修改 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/views/system/user/profile/userAvatar.vue#L122-L135" target="_blank" rel="noopener noreferrer"><code>userAvatar.vue</code>(opens new window)</a></li></ul><h3 id="_2-2-方式二-后端上传" tabindex="-1"><a class="header-anchor" href="#_2-2-方式二-后端上传"><span><a href="https://doc.iocoder.cn/file/#_2-2-%E6%96%B9%E5%BC%8F%E4%BA%8C-%E5%90%8E%E7%AB%AF%E4%B8%8A%E4%BC%A0" target="_blank" rel="noopener noreferrer">#</a>2.2 方式二：后端上传</span></a></h3><p><code>yudao-module-infra</code> 的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-api/src/main/java/cn/iocoder/yudao/module/infra/api/file/FileApi.java" target="_blank" rel="noopener noreferrer">FileApi (opens new window)</a>提供了 <code>#createFile(...)</code> 方法，用于后端需要上传文件的逻辑。</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// FileApi.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 保存文件，并返回文件的访问路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> content</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> createFile</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> byte</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] content)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>例如说，个人中心修改头像时，需要进行头像的上传。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/上传下载/08.png" alt="后端上传" tabindex="0" loading="lazy"><figcaption>后端上传</figcaption></figure><p>注意，需要使用到后端上传的 Maven 模块，需要引入 <code>yudao-module-infra-api</code> 依赖。例如说 <code>yudao-module-system-biz</code> 模块的 <code>pom.xml</code> 文件，引用如下：</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;cn.iocoder.boot&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;yudao-module-infra-api&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;\${revision}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="_3-文件下载" tabindex="-1"><a class="header-anchor" href="#_3-文件下载"><span><a href="https://doc.iocoder.cn/file/#_3-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener noreferrer">#</a>3. 文件下载</span></a></h2><p>文件上传成功后，返回的是<strong>完整的 URL 访问路径</strong>，例如说 <a href="http://test.yudao.iocoder.cn/822aebded6e6414e912534c6091771a4.jpg" target="_blank" rel="noopener noreferrer">http://test.yudao.iocoder.cn/822aebded6e6414e912534c6091771a4.jpg (opens new window)</a>。</p><p>不同的文件存储器，返回的 URL 路径的规则是不同的：</p><p>① 当存储器是【S3 对象存储】时，支持 HTTP 访问，所以直接使用 S3 对象存储返回的 URL 路径即可。</p><p>② 当存储器是【数据库】【本地磁盘】等时，它们只支持存储，所以需要 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/file/FileController.java" target="_blank" rel="noopener noreferrer">FileController (opens new window)</a>提供的 <code>/admin-api/infra/file/{configId}/get/{path}</code> RESTful API，读取文件内容后返回。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// FileController.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">GetMapping</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/{configId}/get/**&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PermitAll</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Operation</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">summary</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;下载文件&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Parameter</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;configId&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> description</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;配置编号&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  required</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getFileContent</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                           HttpServletResponse</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                           @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PathVariable</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;configId&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> configId) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取请求的路径</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> path </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> StrUtil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">subAfter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getRequestURI</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(), </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/get/&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">StrUtil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(path)</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        throw</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;结尾的 path 路径必须传递&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 读取内容</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    byte</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] content </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fileService</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getFileContent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(configId, path);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (content </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">warn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;[getFileContent][configId({}) path({}) 文件不存在]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, configId, path);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setStatus</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NOT_FOUND</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    ServletUtils</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">writeAttachment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(response, path, content);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-文件客户端" tabindex="-1"><a class="header-anchor" href="#_4-文件客户端"><span><a href="https://doc.iocoder.cn/file/#_4-%E6%96%87%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>4. 文件客户端</span></a></h2><p>技术组件 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-file/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-file</code> (opens new window)</a>，定义了 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-file/src/main/java/cn/iocoder/yudao/framework/file/core/client/FileClient.java" target="_blank" rel="noopener noreferrer">FileClient (opens new window)</a>接口，抽象了文件客户端的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> FileClient</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 获得客户端编号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 客户端编号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    Long</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 上传文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> content</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件流</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 相对路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 完整路径，即 HTTP 访问地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> upload</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">byte</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">content</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 删除文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 相对路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> delete</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 获得文件的内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 相对路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件的内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    byte</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">[] getContent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FileClient 有 5 个实现类，使用不同存储器进行文件的上传与下载。UML 类图如所示：</p><figure><img src="https://doc.iocoder.cn/img/上传下载/09.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>文件上传的调用的 UML 时序图如下所示：</p><figure><img src="https://doc.iocoder.cn/img/上传下载/10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_5-s3-对象存储的配置" tabindex="-1"><a class="header-anchor" href="#_5-s3-对象存储的配置"><span><a href="https://doc.iocoder.cn/file/#_5-s3-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>5. S3 对象存储的配置</span></a></h2><p>做的不错的云存储服务，都是兼容 S3 协议的。如何获取对应的 S3 配置，艿艿整理到了 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-file/src/main/java/cn/iocoder/yudao/framework/file/core/client/s3/S3FileClientConfig.java" target="_blank" rel="noopener noreferrer">S3FileClientConfig (opens new window)</a>配置类。</p><p>有一点要注意，云存储服务的 Bucket 需要设置为<strong>公共读</strong>，不然 URL 无法访问到文件。</p><p>并且，最好使用自定义域名，方便迁移到不同的云存储服务。</p>`,57)]))}const p=a(e,[["render",o],["__file","13.文件存储（上传下载）.html.vue"]]),c=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/2.%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/13.%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%EF%BC%89.html","title":"文件存储（上传下载）","lang":"zh-CN","frontmatter":{"description":"文件存储（上传下载） 项目支持将文件上传到三类存储器： 兼容 S3 协议的对象存储：支持 MinIO、腾讯云 COS、七牛云 Kodo、华为云 OBS、亚马逊 S3 等等。 磁盘存储：本地、FTP 服务器、SFTP 服务器。 数据库存储：MySQL、Oracle、PostgreSQL、SQL Server 等等。 技术选型？ 优先，✔ 推荐方案 1。如...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Ruoyi-Vue-Pro/2.%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/13.%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"文件存储（上传下载）"}],["meta",{"property":"og:description","content":"文件存储（上传下载） 项目支持将文件上传到三类存储器： 兼容 S3 协议的对象存储：支持 MinIO、腾讯云 COS、七牛云 Kodo、华为云 OBS、亚马逊 S3 等等。 磁盘存储：本地、FTP 服务器、SFTP 服务器。 数据库存储：MySQL、Oracle、PostgreSQL、SQL Server 等等。 技术选型？ 优先，✔ 推荐方案 1。如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T07:41:53.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-21T07:41:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件存储（上传下载）\\",\\"image\\":[\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/01.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/02.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/03.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/07.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/04.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/05.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/06.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/08.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/09.png\\",\\"https://doc.iocoder.cn/img/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/10.png\\"],\\"dateModified\\":\\"2024-11-21T07:41:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"#1. 快速入门","slug":"_1-快速入门","link":"#_1-快速入门","children":[{"level":3,"title":"#1.1 新增配置","slug":"_1-1-新增配置","link":"#_1-1-新增配置","children":[]},{"level":3,"title":"#1.2 上传文件","slug":"_1-2-上传文件","link":"#_1-2-上传文件","children":[]}]},{"level":2,"title":"#2. 文件上传","slug":"_2-文件上传","link":"#_2-文件上传","children":[{"level":3,"title":"#2.1 方式一：前端上传","slug":"_2-1-方式一-前端上传","link":"#_2-1-方式一-前端上传","children":[]},{"level":3,"title":"#2.2 方式二：后端上传","slug":"_2-2-方式二-后端上传","link":"#_2-2-方式二-后端上传","children":[]}]},{"level":2,"title":"#3. 文件下载","slug":"_3-文件下载","link":"#_3-文件下载","children":[]},{"level":2,"title":"#4. 文件客户端","slug":"_4-文件客户端","link":"#_4-文件客户端","children":[]},{"level":2,"title":"#5. S3 对象存储的配置","slug":"_5-s3-对象存储的配置","link":"#_5-s3-对象存储的配置","children":[]}],"git":{"createdTime":1732174913000,"updatedTime":1732174913000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1640},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/2.后端手册/13.文件存储（上传下载）.md","localizedDate":"2024年11月21日","excerpt":"\\n<p>项目支持将文件上传到三类存储器：</p>\\n<ol>\\n<li>兼容 S3 协议的对象存储：支持 MinIO、腾讯云 COS、七牛云 Kodo、华为云 OBS、亚马逊 S3 等等。</li>\\n<li>磁盘存储：本地、FTP 服务器、SFTP 服务器。</li>\\n<li>数据库存储：MySQL、Oracle、PostgreSQL、SQL Server 等等。</li>\\n</ol>\\n<p>技术选型？</p>\\n<ul>\\n<li>优先，✔ 推荐方案 1。如果无法使用云服务，可以自己搭建一个 MinIO 服务。参见 <a href=\\"https://www.iocoder.cn/Spring-Boot/MinIO/?yudao\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《芋道 Spring Boot 对象存储 MinIO 入门 》 (opens new window)</a>文章。</li>\\n<li>其次，推荐方案 3。数据库的主从机制可以实现高可用，备份也方便，少量小文件问题不大。</li>\\n<li>最后，× 不推荐方案 2。主要是实现高可用比较困难，无法实现故障转移。</li>\\n</ul>","autoDesc":true}');export{p as comp,c as data};
