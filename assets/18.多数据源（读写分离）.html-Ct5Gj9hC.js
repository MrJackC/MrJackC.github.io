import{_ as e,c as r,a as o,o as n}from"./app-CZJgH_ea.js";const t={};function i(s,a){return n(),r("div",null,a[0]||(a[0]=[o(`<h1 id="多数据源-读写分离" tabindex="-1"><a class="header-anchor" href="#多数据源-读写分离"><span>多数据源（读写分离）</span></a></h1><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-mybatis</code> (opens new window)</a>技术组件，除了提供 MyBatis 数据库操作，还提供了如下 2 种功能：</p><ul><li>数据连接池：基于 <a href="https://github.com/alibaba/druid" target="_blank" rel="noopener noreferrer">Alibaba Druid (opens new window)</a>实现，额外提供监控的能力。</li><li>多数据源（读写分离）：基于 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener noreferrer">Dynamic Datasource (opens new window)</a>实现，支持 Druid 连接池，可集成 <a href="https://www.iocoder.cn/Seata/install/?yudao" target="_blank" rel="noopener noreferrer">Seata (opens new window)</a>实现分布式事务。</li></ul><h2 id="_1-数据连接池" tabindex="-1"><a class="header-anchor" href="#_1-数据连接池"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_1-%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0" target="_blank" rel="noopener noreferrer">#</a>1. 数据连接池</span></a></h2><p>友情提示：</p><p>如果你未学习过 Druid 数据库连接池，可以后续阅读 <a href="http://www.iocoder.cn/Spring-Boot/datasource-pool/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 数据库连接池入门》 (opens new window)</a>文章。</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;com.alibaba&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;druid-spring-boot-starter&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_1-1-druid-监控配置" tabindex="-1"><a class="header-anchor" href="#_1-1-druid-监控配置"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_1-1-druid-%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>1.1 Druid 监控配置</span></a></h3><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code> (opens new window)</a>配置文件中，通过 <code>spring.datasource.druid</code> 配置项，仅仅设置了 Druid <strong>监控</strong>相关的配置项目，具体数据库的设置需要使用 Dynamic Datasource 的配置项。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/01.png" alt=" 配置项" tabindex="0" loading="lazy"><figcaption> 配置项</figcaption></figure><h3 id="_1-2-druid-监控界面" tabindex="-1"><a class="header-anchor" href="#_1-2-druid-监控界面"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_1-2-druid-%E7%9B%91%E6%8E%A7%E7%95%8C%E9%9D%A2" target="_blank" rel="noopener noreferrer">#</a>1.2 Druid 监控界面</span></a></h3><p>① 访问后端的 <code>/druid/index.html</code> 路径，例如说本地的 <code>http://127.0.0.1:48080/druid/index.html</code> 地址，可以查看到 Druid 监控界面。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/02.png" alt="Druid 监控界面" tabindex="0" loading="lazy"><figcaption>Druid 监控界面</figcaption></figure><p>② 访问前端的 [基础设施 -&gt; MySQL 监控] 菜单，也可以查看到 Druid 监控界面。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/03.png" alt="Druid 监控界面" tabindex="0" loading="lazy"><figcaption>Druid 监控界面</figcaption></figure><p>补充说明：</p><p>前端 [基础设施 -&gt; MySQL 监控] 菜单，通过 iframe 内嵌后端的 <code>/druid/index.html</code> 路径。</p><p>如果你想自定义地址，可以前往 [基础设置 -&gt; 配置管理] 菜单，设置 key 为 <code>url.druid</code> 配置项。</p><h2 id="_2-多数据源" tabindex="-1"><a class="header-anchor" href="#_2-多数据源"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener noreferrer">#</a>2. 多数据源</span></a></h2><p>友情提示：</p><p>如果你未学习过多数据源，可以后续阅读 <a href="http://www.iocoder.cn/Spring-Boot/dynamic-datasource/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 多数据源（读写分离）入门》 (opens new window)</a>文章。</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;com.baomidou&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;dynamic-datasource-spring-boot-starter&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_2-1-多数据源配置" tabindex="-1"><a class="header-anchor" href="#_2-1-多数据源配置"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-1-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>2.1 多数据源配置</span></a></h3><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml#L30-L58" target="_blank" rel="noopener noreferrer"><code>application-local.yaml</code> (opens new window)</a>配置文件中，通过 <code>spring.datasource.dynamic</code> 配置项，配置了 Master-Slave 主从两个数据源。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/04.png" alt=" 配置项" tabindex="0" loading="lazy"><figcaption> 配置项</figcaption></figure><h3 id="_2-2-数据源切换" tabindex="-1"><a class="header-anchor" href="#_2-2-数据源切换"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-2-%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2" target="_blank" rel="noopener noreferrer">#</a>2.2 数据源切换</span></a></h3><h4 id="_2-2-1-master-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-1-master-注解"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-2-1-master-%E6%B3%A8%E8%A7%A3" target="_blank" rel="noopener noreferrer">#</a>2.2.1 @Master 注解</span></a></h4><p>在方法上添加 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/Master.java" target="_blank" rel="noopener noreferrer"><code>@Master</code> (opens new window)</a>注解，使用名字为 <code>master</code> 的数据源，即使用【主】库，一般适合【写】场景。示例如下图：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/05.png" alt="@Master 注解" tabindex="0" loading="lazy"><figcaption>@Master 注解</figcaption></figure><p>由于项目的 <code>spring.datasource.dynamic.primary</code> 为 <code>master</code>，默认使用【主】库，所以无需手动添加 <code>@Master</code> 注解。</p><h4 id="_2-2-2-slave-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-2-slave-注解"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-2-2-slave-%E6%B3%A8%E8%A7%A3" target="_blank" rel="noopener noreferrer">#</a>2.2.2 @Slave 注解</span></a></h4><p>在方法上添加 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/Slave.java" target="_blank" rel="noopener noreferrer"><code>@Slave</code> (opens new window)</a>注解，使用名字为 <code>slave</code> 的数据源，即使用【从】库，一般适合【读】场景。示例如下图：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/06.png" alt="@Slave 注解" tabindex="0" loading="lazy"><figcaption>@Slave 注解</figcaption></figure><h4 id="_2-2-3-ds-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-3-ds-注解"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-2-3-ds-%E6%B3%A8%E8%A7%A3" target="_blank" rel="noopener noreferrer">#</a>2.2.3 @DS 注解</span></a></h4><p>在方法上添加 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/DS.java" target="_blank" rel="noopener noreferrer"><code>@DS</code> (opens new window)</a>注解，使用指定名字的数据源，适合多数据源的情况。示例如下图：</p><figure><img src="https://doc.iocoder.cn/img/多数据源/07.png" alt="@DS 注解" tabindex="0" loading="lazy"><figcaption>@DS 注解</figcaption></figure><h3 id="_2-3-分布式事务" tabindex="-1"><a class="header-anchor" href="#_2-3-分布式事务"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_2-3-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener noreferrer">#</a>2.3 分布式事务</span></a></h3><p>在使用 Spring <code>@Transactional</code> 声明的事务中，无法进行数据源的切换，此时有 3 种解决方案：</p><p>① 拆分成多个 Spring 事务，每个事务对应一个数据源。如果是【写】场景，可能会存在多数据源的事务不一致的问题。</p><p>② 引入 Seata 框架，提供完整的分布式事务的解决方案，可学习 <a href="https://www.iocoder.cn/Seata/install/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Seata 极简入门 》 (opens new window)</a>文章。</p><p>③ 使用 Dynamic Datasource 提供的 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/DSTransactional.java" target="_blank" rel="noopener noreferrer"><code>@DSTransactional</code> (opens new window)</a>注解，支持多数据源的切换，不提供绝对可靠的多数据源的事务一致性（强于 ① 弱于 ②），可学习 <a href="https://www.yinxiang.com/everhub/note/ac0175c8-35f5-4d66-8cd3-c662d7a16441" target="_blank" rel="noopener noreferrer">《DSTransactional 实现源码分析 》 (opens new window)</a>文章。</p><h2 id="_3-分库分表" tabindex="-1"><a class="header-anchor" href="#_3-分库分表"><span><a href="https://doc.iocoder.cn/dynamic-datasource/#_3-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8" target="_blank" rel="noopener noreferrer">#</a>3. 分库分表</span></a></h2><p>建议采用 ShardingSphere 的子项目 Sharding-JDBC 完成分库分表的功能，可阅读 <a href="https://www.iocoder.cn/Spring-Boot/sharding-datasource/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 分库分表入门 》 (opens new window)</a>文章，学习如何整合进项目。</p>`,43)]))}const c=e(t,[["render",i],["__file","18.多数据源（读写分离）.html.vue"]]),p=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/2.%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/18.%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%88%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%89.html","title":"多数据源（读写分离）","lang":"zh-CN","frontmatter":{"description":"多数据源（读写分离） yudao-spring-boot-starter-mybatis (opens new window)技术组件，除了提供 MyBatis 数据库操作，还提供了如下 2 种功能： 数据连接池：基于 Alibaba Druid (opens new window)实现，额外提供监控的能力。 多数据源（读写分离）：基于 Dynamic...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Ruoyi-Vue-Pro/2.%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/18.%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%88%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"多数据源（读写分离）"}],["meta",{"property":"og:description","content":"多数据源（读写分离） yudao-spring-boot-starter-mybatis (opens new window)技术组件，除了提供 MyBatis 数据库操作，还提供了如下 2 种功能： 数据连接池：基于 Alibaba Druid (opens new window)实现，额外提供监控的能力。 多数据源（读写分离）：基于 Dynamic..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T07:41:53.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-21T07:41:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多数据源（读写分离）\\",\\"image\\":[\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/01.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/02.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/03.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/04.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/05.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/06.png\\",\\"https://doc.iocoder.cn/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/07.png\\"],\\"dateModified\\":\\"2024-11-21T07:41:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"#1. 数据连接池","slug":"_1-数据连接池","link":"#_1-数据连接池","children":[{"level":3,"title":"#1.1 Druid 监控配置","slug":"_1-1-druid-监控配置","link":"#_1-1-druid-监控配置","children":[]},{"level":3,"title":"#1.2 Druid 监控界面","slug":"_1-2-druid-监控界面","link":"#_1-2-druid-监控界面","children":[]}]},{"level":2,"title":"#2. 多数据源","slug":"_2-多数据源","link":"#_2-多数据源","children":[{"level":3,"title":"#2.1 多数据源配置","slug":"_2-1-多数据源配置","link":"#_2-1-多数据源配置","children":[]},{"level":3,"title":"#2.2 数据源切换","slug":"_2-2-数据源切换","link":"#_2-2-数据源切换","children":[]},{"level":3,"title":"#2.3 分布式事务","slug":"_2-3-分布式事务","link":"#_2-3-分布式事务","children":[]}]},{"level":2,"title":"#3. 分库分表","slug":"_3-分库分表","link":"#_3-分库分表","children":[]}],"git":{"createdTime":1732174913000,"updatedTime":1732174913000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":3.79,"words":1136},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/2.后端手册/18.多数据源（读写分离）.md","localizedDate":"2024年11月21日","excerpt":"\\n<p><a href=\\"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>yudao-spring-boot-starter-mybatis</code> (opens new window)</a>技术组件，除了提供 MyBatis 数据库操作，还提供了如下 2 种功能：</p>\\n<ul>\\n<li>数据连接池：基于 <a href=\\"https://github.com/alibaba/druid\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Alibaba Druid (opens new window)</a>实现，额外提供监控的能力。</li>\\n<li>多数据源（读写分离）：基于 <a href=\\"https://github.com/baomidou/dynamic-datasource-spring-boot-starter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dynamic Datasource (opens new window)</a>实现，支持 Druid 连接池，可集成 <a href=\\"https://www.iocoder.cn/Seata/install/?yudao\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Seata (opens new window)</a>实现分布式事务。</li>\\n</ul>","autoDesc":true}');export{c as comp,p as data};
