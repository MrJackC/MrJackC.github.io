import{_ as l,c as i,a as n,b as s,o as e}from"./app-CZJgH_ea.js";const o={};function p(r,a){return e(),i("div",null,a[0]||(a[0]=[n(`<h1 id="es详解-es字段类型" tabindex="-1"><a class="header-anchor" href="#es详解-es字段类型"><span>ES详解 - ES字段类型</span></a></h1><p>在学习 ES 文档相关操作之前，我们先学习 ES 中常用的字段类型。</p><h2 id="_1-字段类型" tabindex="-1"><a class="header-anchor" href="#_1-字段类型"><span>1. 字段类型</span></a></h2><h3 id="_1-1-text" tabindex="-1"><a class="header-anchor" href="#_1-1-text"><span>1.1 text</span></a></h3><p>当一个字段的内容<strong>需要被全文检索</strong>时，可以使用<code>text</code>类型，</p><p>优点</p><ul><li><p><strong>支持长内容的存储</strong>，比如检索文章内容、商品信息等。</p></li><li><p><strong>该类型的字段内容在保存时会被分词器分析，并且拆分成多个词项</strong></p><p>然后根据拆分后的词项生成对应的索引，根据关键字检索时可能会将关键字分词，用分好的词从之前生成的索引中去匹配，进而找到对应的文档。</p></li></ul><p>局限性</p><ul><li>对于<code>text</code>类型的字段你可能无法通过指定文本精确的检索到。</li><li>另外需要注意的是，<code>text</code>类型的字段不能直接用于排序、聚合操作。</li></ul><p>这种类型的字符串也称做<code>analyzed</code>字符串。</p><h3 id="_1-2-keyword" tabindex="-1"><a class="header-anchor" href="#_1-2-keyword"><span>1.2 keyword</span></a></h3><p><code>keyword</code>类型适用于结构化的字段，比如手机号、商品id、用户id等，默认最大长度为256。</p><ul><li><code>keyword</code>类型的字段内容不会被分词器分析、拆分，而是根据原始文本直接生成倒排索引，所以<code>keyword</code>类型的字段可以直接通过原始文本精确的检索到。</li><li><code>keyword</code>类型的字段可用于过滤、排序、聚合操作。</li></ul><p>这种字符串称做<code>not-analyzed</code>字符串。</p><h3 id="_1-3-日期类型" tabindex="-1"><a class="header-anchor" href="#_1-3-日期类型"><span>1.3 日期类型</span></a></h3><p>ES 中的<code>date</code>类型默认支持如下两种格式：</p><ul><li><code>strict_date_optional_time</code>，表示 <strong>yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSSSSZ</strong> 或者 <strong>yyyy-MM-dd</strong> 格式的日期</li><li><code>epoch_millis</code>，表示从 1970.1.1 零点到现在的毫秒数，</li></ul><p>如果我们要存储类似<code>2020-12-01 20:10:15</code>这种格式的日期就会有问题，我们可以在创建索引时指定字段为<code>date</code>类型以及可以匹配的日期格式：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">PUT blog</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;mappings&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;publishDate&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;date&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;format&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>需要注意的是，如果不主动指定字段类型为<code>date</code>，ES 默认使用<code>text</code>类型去保存日期的值。</p><h3 id="_1-4-布尔类型" tabindex="-1"><a class="header-anchor" href="#_1-4-布尔类型"><span>1.4 布尔类型</span></a></h3><p><code>boolean</code>类型就简单了，有<code>true</code>、<code>false</code>两个值。</p><h3 id="_1-5-数值类型" tabindex="-1"><a class="header-anchor" href="#_1-5-数值类型"><span>1.5 数值类型</span></a></h3><table><thead><tr><th>类型</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>integer</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float</td><td>32位单精度IEEE 754浮点类型</td></tr><tr><td>double</td><td>64位双精度IEEE 754浮点类型</td></tr><tr><td>half_float</td><td>16位半精度IEEE 754浮点类型</td></tr><tr><td>scaled_float</td><td>缩放类型的的浮点数</td></tr></tbody></table><p>一般情况下，如果可以满足需求，则优先使用范围小的类型，来提高效率。</p><h3 id="_1-6-数组类型" tabindex="-1"><a class="header-anchor" href="#_1-6-数组类型"><span>1.6 数组类型</span></a></h3><p>其实在 ES 中并没有数组类型，但我们却可以按数组格式来存储数据，因为 ES 中默认每个字段可以包含多个值，同时要求多个值得类型必须一致。例如可以按照如下方式指定一个字段的值为数组：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;label&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &quot;Elastcsearch&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &quot;7.9.3版本&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  ]</span></span></code></pre></div><h3 id="_1-7-对象类型" tabindex="-1"><a class="header-anchor" href="#_1-7-对象类型"><span>1.7 对象类型</span></a></h3><p>这个其实没什么特别的，由于 ES 中以 JSON 格式存储数据，所以一个 JSON 对象中的某个字段值可以是另一个 JSON 对象。</p><h3 id="_1-8-范围类型" tabindex="-1"><a class="header-anchor" href="#_1-8-范围类型"><span>1.8 范围类型</span></a></h3><table><thead><tr><th>类型</th><th>技能</th></tr></thead><tbody><tr><td>integer_range</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long_range</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float_range</td><td>32位单精度IEEE 754浮点类型</td></tr><tr><td>double_range</td><td>64位双精度IEEE 754浮点类型</td></tr><tr><td>date_range</td><td>自系统历元以来无符号64位整数范围内的毫秒数</td></tr><tr><td>ip_range</td><td>IPv4、IPv6 的一系列IP地址值</td></tr></tbody></table><p>例如我们可以创建索引时定义一个日期范围的字段类型：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">PUT blog</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;mappings&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;reader_age_range&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;integer_range&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>添加文档时可以这样指定字段的值：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;reader_age_range&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;gte&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;lte&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">50</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_2-数组类型与嵌套数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数组类型与嵌套数据类型"><span>2. 数组类型与嵌套数据类型</span></a></h2><h3 id="_2-1-开箱即用的数组类型" tabindex="-1"><a class="header-anchor" href="#_2-1-开箱即用的数组类型"><span>2.1 <strong>开箱即用的数组类型</strong></span></a></h3><p>在ElasticSearch中，没有专门的数组（Array）数据类型，但是，在默认情况下，任意一个字段都可以包含0或多个值，这意味着每个字段默认都是数组类型，只不过，数组类型的各个元素值的数据类型必须相同。在ElasticSearch中，数组是开箱即用的（out of box），不需要进行任何配置，就可以直接使用。</p><h4 id="_2-1-1-数组类型" tabindex="-1"><a class="header-anchor" href="#_2-1-1-数组类型"><span><strong>2.1.1 数组类型</strong></span></a></h4><p>在同一个数组中，数组元素的数据类型是相同的，ElasticSearch不支持元素为多个数据类型：[ 10, &quot;some string&quot; ]，常用的数组类型是：</p>`,41),s("ul",null,[s("li",null,'字符数组: [ "one", "two" ]'),s("li",null,"整数数组: productid:[ 1, 2 ]"),s("li",{"user.name:[Mary,John],user.age:[12,10]":""},'对象（文档）数组: "user":[ { "name": "Mary", "age": 12 }, { "name": "John", "age": 10 }]，ElasticSearch内部把对象数组展开为')],-1),n(`<p>对于文档数组，每个元素都是结构相同的文档，文档之间都不是独立的，在文档数组中，不能独立于其他文档而去查询单个文档，这是因为，一个文档的内部字段之间的关联被移除，各个文档共同构成对象数组。</p><p>对整数数组进行查询，例如，使用多词条（terms）查询类型，查询productid为1和2的文档：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>{  </span></span>
<span class="line"><span>   &quot;query&quot;:{  </span></span>
<span class="line"><span>      &quot;terms&quot;:{  </span></span>
<span class="line"><span>         &quot;productid&quot;:[ 1, 2 ]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_2-1-2对象数组" tabindex="-1"><a class="header-anchor" href="#_2-1-2对象数组"><span><strong>2.1.2对象数组</strong></span></a></h4><p>通过PUT动词，自动创建索引和文档类型，在文档中创建对象数组：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">PUT my_index/my_type/</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;group&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;fans&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : [ </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;last&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :  </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Smith&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;last&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :  </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;White&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>ElasticSearch引擎内部把对象数组展开成扁平的数据结构</strong>，把上例的文档类型的数据结构展开之后，文档数据类似于：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;group&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :        </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;fans&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;user.first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : [ </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;alice&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;john&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ],</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;user.last&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :  [ </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;smith&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;white&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>字段 user.first 和 user.last 被展开成数组字段，但是，这样展开之后，单个文档内部的字段之间的关联就会丢失，在该例中，展开的文档数据丢失first和last字段之间的关联，比如，A<code>lice</code> 和 <code>white</code> 的关联就丢失了。</p><h2 id="_2-2-嵌套数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-嵌套数据类型"><span>2.2 <strong>嵌套数据类型</strong></span></a></h2><blockquote><p>嵌套数据类型是<strong>对象数据类型的特殊版本</strong>，它允许对象数组中的各个对象被索引，数组中的各个对象之间保持独立，能够对每一个文档进行单独查询</p></blockquote><p>嵌套数据类型<strong>是对象数据类型的特殊版本</strong>，</p><ul><li>它允许对象数组中的各个对象被索引</li><li>数组中的各个对象之间保持独立，能够对每一个文档进行单独查询</li></ul><p>这就意味着，嵌套数据类型保留文档的内部之间的关联，ElasticSearch引擎内部使用不同的方式处理嵌套数据类型和对象数组的方式，对于嵌套数据类型，ElasticSearch把数组中的每一个嵌套文档（Nested Document）索引为单个文档，这些文档是隐藏（Hidden）的，文档之间是相互独立的，但是，保留文档的内部字段之间的关联，使用嵌套查询（Nested Query）能够独立于其他文档而去查询单个文档。在创建嵌套数据类型的字段时，需要设置字段的type属性为nested。</p><h4 id="_2-2-1-在索引映射中创建嵌套字段" tabindex="-1"><a class="header-anchor" href="#_2-2-1-在索引映射中创建嵌套字段"><span><strong>2.2.1 在索引映射中创建嵌套字段</strong></span></a></h4><p>设置user字段为嵌套数据类型，由于每个字段默认都可以是数组类型，因此，嵌套字段也可以是对象数组。</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;mappings&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">   &quot;my_type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">         &quot;group&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">         &quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;nested&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">               &quot;first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">               &quot;second&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:{  </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h4 id="_2-2-2-为嵌套字段赋值" tabindex="-1"><a class="header-anchor" href="#_2-2-2-为嵌套字段赋值"><span><strong>2.2.2 为嵌套字段赋值</strong></span></a></h4><p>为嵌套字段赋予多个值，那么ElasticSearch自动把字段值转换为数组类型。</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">PUT my_index/my_type/</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;group&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;fans&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : [ </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;last&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :  </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Smith&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;first&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;last&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> :  </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;White&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>在ElasticSearch内部，嵌套的文档（Nested Documents）被索引为很多独立的隐藏文档（separate documents），这些隐藏文档只能通过嵌套查询（Nested Query）访问。每一个嵌套的文档都是嵌套字段（文档数组）的一个元素。嵌套文档的内部字段之间的关联被ElasticSearch引擎保留，而嵌套文档之间是相互独立的。在该例中，ElasticSearch引起保留Alice和White之间的关联，而John和White之间是没有任何关联的。</p><p>默认情况下，每个索引最多创建50个嵌套文档，可以通过索引设置选项：index.mapping.nested_fields.limit 修改默认的限制。</p><blockquote><p>Indexing a document with 100 nested fields actually indexes 101 documents as each nested document is indexed as a separate document.</p></blockquote><h3 id="_2-3-easy-es中的嵌套类型" tabindex="-1"><a class="header-anchor" href="#_2-3-easy-es中的嵌套类型"><span>2.3 easy-es中的嵌套类型</span></a></h3><h4 id="_2-3-1-前言" tabindex="-1"><a class="header-anchor" href="#_2-3-1-前言"><span>2.3.1 前言</span></a></h4><p>ES底层是Lucene,由于<strong>Lucene实际上是不支持嵌套类型的,所有文档都是以扁平的结构存储在Lucene中</strong>,ES对嵌套文档的支持,实际上也是采取了一种投机取巧的方式实现的.</p><p><strong>嵌套的文档均以独立的文档存入,然后添加关联关系</strong>,这就会导致,一条嵌套类型的文档,底层实际上存储了N条数据,而且更新时会株连九族式更新,<strong>导致效率低下</strong>,而且对于嵌套类型,其查询功能也受限,不支持聚合排序等功能,因此我们并不建议您在实际开发中使用这种类型.</p><p>ES本身更适合&quot;大宽表&quot;模式,不要带着传统关系型数据库那种思维方式去使用ES,我们完全可以通过把多张表中的字段和内容合并到一张表(一个索引)中,来完成期望功能,尽可能规避嵌套类型的使用,不仅效率高,功能也更强大.</p><p>当然存在即合理,也确实有个别场景下,不可避免的会用到嵌套类型,作为全球首屈一指的ES-ORM框架,我们对此也提供了支持,用户可以不用,但我们不能没有!</p><h4 id="_2-3-2-嵌套类型创建索引" tabindex="-1"><a class="header-anchor" href="#_2-3-2-嵌套类型创建索引"><span>2.3.2 嵌套类型创建索引</span></a></h4><ul><li>自动挡模式:</li></ul><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Document</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 省略其它字段...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 嵌套类型 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">IndexField</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">fieldType</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> FieldType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">NESTED</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> nestedClass</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> List</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> users</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span></code></pre></div><blockquote><p>注意</p><p>务必像上面示例一样指定类型为fieldType=NESTED及其nestedClass,否则会导致框架无法正常运行</p></blockquote><h2 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例"><span>3. 示例</span></a></h2><p>最后我们通过一个完整的例子梳理一下这些字段类型，首先创建<code>blog</code>索引，并指定相关字段的类型：</p><h3 id="_3-1-建索引" tabindex="-1"><a class="header-anchor" href="#_3-1-建索引"><span>3.1 建索引</span></a></h3><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">PUT blog</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;mappings&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;publishDate&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;date&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;format&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;reader_age_range&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;integer_range&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_3-2-添加文档数据" tabindex="-1"><a class="header-anchor" href="#_3-2-添加文档数据"><span>3.2 添加文档数据</span></a></h3><p>然后添加一条文档数据：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">POST blog/_doc</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;title&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Learn Elastcsearch&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;publishDate&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;2020-12-01 20:10:15&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;isTop&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;score&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">4.5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;commnetNum&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;label&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &quot;Elastcsearch&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &quot;7.9.3版本&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;author&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;shehuan&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;github&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;https://github.com/shehuan&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;reader_age_range&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;gte&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;lte&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">50</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-说明" tabindex="-1"><a class="header-anchor" href="#_3-3-说明"><span>3.3 说明</span></a></h3><p>上边我们只指定了<code>publishDate</code>和<code>reader_age_range</code>字段的类型，其它的并未指定。其实在添加文档时，ES 也会根据字段的值动态的推断出它的类型，即动态映射，但这样可能出现推断不符合预期的问题，例如前边说过的日期类型，所以你可以根据实际情况选择是否主动指定字段的类型。</p><h3 id="_3-4-查看文档mapping信息" tabindex="-1"><a class="header-anchor" href="#_3-4-查看文档mapping信息"><span>3.4 查看文档mapping信息</span></a></h3><p>再使用如下请求查看一下文档字段的<code>mapping</code>信息：</p><div class="language-cmd" data-ext="cmd" data-title="cmd"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">GET </span><span style="color:#E06C75;--shiki-dark:#E06C75;">blog</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">_mapping</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">?pretty</span></span></code></pre></div><p>结果如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  &quot;blog&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    &quot;mappings&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;author&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;properties&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;github&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;fields&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                &quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                  &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                  &quot;ignore_above&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#D19A66;--shiki-dark:#D19A66;">256</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;fields&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                &quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                  &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                  &quot;ignore_above&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#D19A66;--shiki-dark:#D19A66;">256</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;commnetNum&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;long&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;isTop&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;boolean&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;label&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;fields&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;ignore_above&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#D19A66;--shiki-dark:#D19A66;">256</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;publishDate&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;date&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;format&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;reader_age_range&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;integer_range&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;score&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;float&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        &quot;title&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          &quot;fields&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            &quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;type&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;keyword&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">              &quot;ignore_above&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#D19A66;--shiki-dark:#D19A66;">256</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们未指定<code>title</code>字段的类型， ES 自动将其映射成了<code>text</code>类型，同时还添加了一个类型为<code>keyword</code>的字段：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121422610.png" alt="image-20221221140355189" tabindex="0" loading="lazy"><figcaption>image-20221221140355189</figcaption></figure><p>这意味着，我们可以使用<code>title.keyword</code>的方式将<code>title</code>字段当做<code>keyword</code>类型去使用。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://www.jianshu.com/p/9af735d634a2" target="_blank" rel="noopener noreferrer">Elasticsearch 字段类型</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/4904430.html" target="_blank" rel="noopener noreferrer">ElasticSearch入门 第六篇：复合数据类型——数组，对象和嵌套</a></p>`,53)]))}const B=l(o,[["render",p],["__file","elasticsearch-field-type.html.vue"]]),d=JSON.parse('{"path":"/posts/Database/ES/elasticsearch-field-type.html","title":"ES详解 - ES字段类型","lang":"zh-CN","frontmatter":{"aliases":"ES详解 - ES字段类型","tags":null,"cssclass":null,"source":null,"order":35,"category":["ElasticSearch"],"created":"2024-02-22 10:49","updated":"2024-03-12 14:22","description":"ES详解 - ES字段类型 在学习 ES 文档相关操作之前，我们先学习 ES 中常用的字段类型。 1. 字段类型 1.1 text 当一个字段的内容需要被全文检索时，可以使用text类型， 优点 支持长内容的存储，比如检索文章内容、商品信息等。 该类型的字段内容在保存时会被分词器分析，并且拆分成多个词项 然后根据拆分后的词项生成对应的索引，根据关键字检...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Database/ES/elasticsearch-field-type.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"ES详解 - ES字段类型"}],["meta",{"property":"og:description","content":"ES详解 - ES字段类型 在学习 ES 文档相关操作之前，我们先学习 ES 中常用的字段类型。 1. 字段类型 1.1 text 当一个字段的内容需要被全文检索时，可以使用text类型， 优点 支持长内容的存储，比如检索文章内容、商品信息等。 该类型的字段内容在保存时会被分词器分析，并且拆分成多个词项 然后根据拆分后的词项生成对应的索引，根据关键字检..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121422610.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES详解 - ES字段类型\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121422610.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 字段类型","slug":"_1-字段类型","link":"#_1-字段类型","children":[{"level":3,"title":"1.1 text","slug":"_1-1-text","link":"#_1-1-text","children":[]},{"level":3,"title":"1.2 keyword","slug":"_1-2-keyword","link":"#_1-2-keyword","children":[]},{"level":3,"title":"1.3 日期类型","slug":"_1-3-日期类型","link":"#_1-3-日期类型","children":[]},{"level":3,"title":"1.4 布尔类型","slug":"_1-4-布尔类型","link":"#_1-4-布尔类型","children":[]},{"level":3,"title":"1.5 数值类型","slug":"_1-5-数值类型","link":"#_1-5-数值类型","children":[]},{"level":3,"title":"1.6 数组类型","slug":"_1-6-数组类型","link":"#_1-6-数组类型","children":[]},{"level":3,"title":"1.7 对象类型","slug":"_1-7-对象类型","link":"#_1-7-对象类型","children":[]},{"level":3,"title":"1.8 范围类型","slug":"_1-8-范围类型","link":"#_1-8-范围类型","children":[]}]},{"level":2,"title":"2. 数组类型与嵌套数据类型","slug":"_2-数组类型与嵌套数据类型","link":"#_2-数组类型与嵌套数据类型","children":[{"level":3,"title":"2.1 开箱即用的数组类型","slug":"_2-1-开箱即用的数组类型","link":"#_2-1-开箱即用的数组类型","children":[]}]},{"level":2,"title":"2.2 嵌套数据类型","slug":"_2-2-嵌套数据类型","link":"#_2-2-嵌套数据类型","children":[{"level":3,"title":"2.3 easy-es中的嵌套类型","slug":"_2-3-easy-es中的嵌套类型","link":"#_2-3-easy-es中的嵌套类型","children":[]}]},{"level":2,"title":"3. 示例","slug":"_3-示例","link":"#_3-示例","children":[{"level":3,"title":"3.1 建索引","slug":"_3-1-建索引","link":"#_3-1-建索引","children":[]},{"level":3,"title":"3.2 添加文档数据","slug":"_3-2-添加文档数据","link":"#_3-2-添加文档数据","children":[]},{"level":3,"title":"3.3 说明","slug":"_3-3-说明","link":"#_3-3-说明","children":[]},{"level":3,"title":"3.4 查看文档mapping信息","slug":"_3-4-查看文档mapping信息","link":"#_3-4-查看文档mapping信息","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":9.81,"words":2943},"filePathRelative":"posts/Database/ES/elasticsearch-field-type.md","localizedDate":"2024年10月21日","excerpt":"\\n<p>在学习 ES 文档相关操作之前，我们先学习 ES 中常用的字段类型。</p>\\n<h2>1. 字段类型</h2>\\n<h3>1.1 text</h3>\\n<p>当一个字段的内容<strong>需要被全文检索</strong>时，可以使用<code>text</code>类型，</p>\\n<p>优点</p>\\n<ul>\\n<li>\\n<p><strong>支持长内容的存储</strong>，比如检索文章内容、商品信息等。</p>\\n</li>\\n<li>\\n<p><strong>该类型的字段内容在保存时会被分词器分析，并且拆分成多个词项</strong></p>\\n<p>然后根据拆分后的词项生成对应的索引，根据关键字检索时可能会将关键字分词，用分好的词从之前生成的索引中去匹配，进而找到对应的文档。</p>\\n</li>\\n</ul>","autoDesc":true}');export{B as comp,d as data};
