import{_ as a,c as l,a as n,o as e}from"./app-B-YfeyLA.js";const i={};function r(p,s){return e(),l("div",null,s[0]||(s[0]=[n(`<h1 id="mysql-性能优化" tabindex="-1"><a class="header-anchor" href="#mysql-性能优化"><span>MySQL - 性能优化</span></a></h1><h2 id="_1-使用-explain-进行分析" tabindex="-1"><a class="header-anchor" href="#_1-使用-explain-进行分析"><span>1. 使用 Explain 进行分析</span></a></h2><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p><p>比较重要的字段有:</p><ul><li><p>select_type : 查询类型，有简单查询、联合查询、子查询等</p></li><li><p>key : 使用的索引</p></li><li><p>rows : 扫描的行数</p><p>rows扫描的行数，越小越好</p></li><li><p>type：使用索引的类型</p><p>通过type的值判断查询是否高效，判断此次是全表扫描还是索引扫描</p><ul><li>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</li></ul></li></ul><h2 id="_2-优化数据访问" tabindex="-1"><a class="header-anchor" href="#_2-优化数据访问"><span>2. 优化数据访问</span></a></h2><h3 id="_2-1-减少请求的数据量" tabindex="-1"><a class="header-anchor" href="#_2-1-减少请求的数据量"><span>2.1. 减少请求的数据量</span></a></h3><ul><li>只返回必要的列: 最好不要使用 SELECT * 语句。</li><li>只返回必要的行: 使用 LIMIT 语句来限制返回的数据。</li><li>缓存重复查询的数据: 使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li></ul><h3 id="_2-2-减少服务器端扫描的行数" tabindex="-1"><a class="header-anchor" href="#_2-2-减少服务器端扫描的行数"><span>2.2. 减少服务器端扫描的行数</span></a></h3><p>最有效的方式是使用索引来覆盖查询。</p><h2 id="_3-重构查询方式" tabindex="-1"><a class="header-anchor" href="#_3-重构查询方式"><span>3. 重构查询方式</span></a></h2><h3 id="_3-1-切分大查询" tabindex="-1"><a class="header-anchor" href="#_3-1-切分大查询"><span>3.1. 切分大查询</span></a></h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">DELEFT </span><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> messages </span><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> create</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DATE_SUB(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOW</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(), INTERVAL </span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> MONTH</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">rows_affected </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">do {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    rows_affected </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> do_query(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    &quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="color:#C678DD;--shiki-dark:#C678DD;">while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> rows_affected </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span></span></code></pre></div><h3 id="_3-2-分解大连接查询" tabindex="-1"><a class="header-anchor" href="#_3-2-分解大连接查询"><span>3.2 分解大连接查询</span></a></h3><h4 id="_3-2-1-大连接查询分解好处" tabindex="-1"><a class="header-anchor" href="#_3-2-1-大连接查询分解好处"><span>3.2.1 大连接查询分解好处</span></a></h4><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有:</p><ul><li><strong>让缓存更高效</strong>。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li><li>分解成多个单表查询，这些<strong>单表查询的缓存结果更可能被其它查询使用到</strong>，从而减少冗余记录的查询。</li><li><strong>减少锁竞争</strong>；</li><li>在应用层进行连接，可以更容易对数据库进行拆分，从而<strong>更容易做到高性能和可伸缩</strong>。（分库分表做准备）</li><li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li></ul><h4 id="_3-2-2-示例" tabindex="-1"><a class="header-anchor" href="#_3-2-2-示例"><span>3.2.2 示例</span></a></h4><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">SELECT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tab</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">JOIN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tag_post </span><span style="color:#C678DD;--shiki-dark:#C678DD;">ON</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> tag_post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">tag_id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">tag</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">id</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">JOIN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> post </span><span style="color:#C678DD;--shiki-dark:#C678DD;">ON</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> tag_post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">post_id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">id</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> tag</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">tag</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">SELECT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tag </span><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tag</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">SELECT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tag_post </span><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tag_id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1234</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">SELECT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> post </span><span style="color:#C678DD;--shiki-dark:#C678DD;">WHERE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#D19A66;--shiki-dark:#D19A66;">id</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> IN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">123</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">456</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">567</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">9098</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">8904</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-performance.html" target="_blank" rel="noopener noreferrer"><strong>MySQL - 性能优化</strong></a></p>`,24)]))}const t=a(i,[["render",r],["__file","sql-mysql-performance.html.vue"]]),B=JSON.parse('{"path":"/posts/Database/MySQL/sql-mysql-performance.html","title":"MySQL - 性能优化","lang":"zh-CN","frontmatter":{"aliases":"MySQL - 性能优化","tags":null,"cssclass":null,"source":null,"order":210,"category":["Mysql","数据库"],"created":"2024-02-22 10:49","updated":"2024-03-13 09:45","description":"MySQL - 性能优化 1. 使用 Explain 进行分析 Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。 比较重要的字段有: select_type : 查询类型，有简单查询、联合查询、子查询等 key : 使用的索引 rows : 扫描的行数 rows扫描的行数，越小越好 type：...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Database/MySQL/sql-mysql-performance.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"MySQL - 性能优化"}],["meta",{"property":"og:description","content":"MySQL - 性能优化 1. 使用 Explain 进行分析 Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。 比较重要的字段有: select_type : 查询类型，有简单查询、联合查询、子查询等 key : 使用的索引 rows : 扫描的行数 rows扫描的行数，越小越好 type：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL - 性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 使用 Explain 进行分析","slug":"_1-使用-explain-进行分析","link":"#_1-使用-explain-进行分析","children":[]},{"level":2,"title":"2. 优化数据访问","slug":"_2-优化数据访问","link":"#_2-优化数据访问","children":[{"level":3,"title":"2.1. 减少请求的数据量","slug":"_2-1-减少请求的数据量","link":"#_2-1-减少请求的数据量","children":[]},{"level":3,"title":"2.2. 减少服务器端扫描的行数","slug":"_2-2-减少服务器端扫描的行数","link":"#_2-2-减少服务器端扫描的行数","children":[]}]},{"level":2,"title":"3. 重构查询方式","slug":"_3-重构查询方式","link":"#_3-重构查询方式","children":[{"level":3,"title":"3.1. 切分大查询","slug":"_3-1-切分大查询","link":"#_3-1-切分大查询","children":[]},{"level":3,"title":"3.2 分解大连接查询","slug":"_3-2-分解大连接查询","link":"#_3-2-分解大连接查询","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.46,"words":739},"filePathRelative":"posts/Database/MySQL/sql-mysql-performance.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 使用 Explain 进行分析</h2>\\n<p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p>\\n<p>比较重要的字段有:</p>\\n<ul>\\n<li>\\n<p>select_type : 查询类型，有简单查询、联合查询、子查询等</p>\\n</li>\\n<li>\\n<p>key : 使用的索引</p>\\n</li>\\n<li>\\n<p>rows : 扫描的行数</p>\\n<p>rows扫描的行数，越小越好</p>\\n</li>\\n<li>\\n<p>type：使用索引的类型</p>\\n<p>通过type的值判断查询是否高效，判断此次是全表扫描还是索引扫描</p>\\n<ul>\\n<li>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{t as comp,B as data};
