import{_ as p,c as e,a as i,b as s,d as l,e as r,o,r as t}from"./app-DP7tPpgD.js";const k={};function c(B,a){const n=t("bean");return o(),e("div",null,[a[6]||(a[6]=i(`<h1 id="注解开发" tabindex="-1"><a class="header-anchor" href="#注解开发"><span>注解开发</span></a></h1><h2 id="_1-注解驱动的意义" tabindex="-1"><a class="header-anchor" href="#_1-注解驱动的意义"><span>1)注解驱动的意义</span></a></h2><h3 id="_1-1-什么是注解驱动" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是注解驱动"><span>1.1)什么是注解驱动</span></a></h3><p>注解启动时使用注解的形式替代xml配置，将繁杂的spring配置文件从工程中彻底消除掉，简化书写</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606028.png" alt="1591023265469" tabindex="0" loading="lazy"><figcaption>1591023265469</figcaption></figure><h3 id="_1-2-注解驱动的弊端" tabindex="-1"><a class="header-anchor" href="#_1-2-注解驱动的弊端"><span>1.2)注解驱动的弊端</span></a></h3><ul><li><p>为了达成注解驱动的目的，可能会将原先很简单的书写，变的更加复杂</p></li><li><p>XML中配置第三方开发的资源是很方便的，但使用注解驱动无法在第三方开发的资源中进行编辑，因此会增大开发工作量</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606093.png" alt="1591023337010" tabindex="0" loading="lazy"><figcaption>1591023337010</figcaption></figure><h2 id="_2-常用注解" tabindex="-1"><a class="header-anchor" href="#_2-常用注解"><span>2)常用注解</span></a></h2><h3 id="_2-1-启动注解功能" tabindex="-1"><a class="header-anchor" href="#_2-1-启动注解功能"><span>2.1)启动注解功能</span></a></h3><ul><li><p>启动注解扫描，加载类中配置的注解项</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">context:component-scan</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> base-package</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;packageName&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>在进行包所扫描时，会对配置的包及其子包中所有文件进行扫描</p></li><li><p>扫描过程是以文件夹递归迭代的形式进行的</p></li><li><p>扫描过程仅读取合法的java文件</p></li><li><p>扫描时仅读取spring可识别的注解</p></li><li><p>扫描结束后会将可识别的有效注解转化为spring对应的资源加入IoC容器</p></li></ul></li><li><p>注意：</p><ul><li><p>无论是注解格式还是XML配置格式，最终都是将资源加载到IoC容器中，差别仅仅是数据读取方式不同</p></li><li><p>从加载效率上来说注解优于XML配置文件</p></li></ul></li></ul><h3 id="_2-2-bean的定义" tabindex="-1"><a class="header-anchor" href="#_2-2-bean的定义"><span>2.2)bean的定义</span></a></h3><ul><li><p>名称：@Component @Controller @Service @Repository</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置该类为spring管理的bean</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{}</span></span></code></pre></div></li><li><p>说明：</p><ul><li>@Controller、@Service 、@Repository是@Component的衍生注解，功能同@Component</li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的访问id</li></ul></li></ul><h3 id="_2-3-bean的作用域" tabindex="-1"><a class="header-anchor" href="#_2-3-bean的作用域"><span>2.3)bean的作用域</span></a></h3><ul><li><p>名称：@Scope</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置该类作为bean对应的scope属性</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Scope</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{}</span></span></code></pre></div></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的作用域，默认为singleton</li></ul></li></ul><h3 id="_2-4-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-4-bean的生命周期"><span>2.4)bean的生命周期</span></a></h3><ul><li><p>名称：@PostConstruct、@PreDestroy</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：方法定义上方</p></li><li><p>作用：设置该类作为bean对应的生命周期方法</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PostConstruct</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> init</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() { </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;init...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> }</span></span></code></pre></div></li></ul><h3 id="_2-5-加载第三方资源" tabindex="-1"><a class="header-anchor" href="#_2-5-加载第三方资源"><span>2.5)加载第三方资源</span></a></h3><ul><li><p>名称：@Bean</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：方法定义上方</p></li><li><p>作用：设置该方法的返回值作为spring管理的bean</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Bean</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dataSource&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> DruidDataSource</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> createDataSource</span><span style="color:#E06C75;--shiki-dark:#E06C75;">() {    </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ……</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>因为第三方bean无法在其源码上进行修改，使用@Bean解决第三方bean的引入问题</p></li><li><p>该注解用于替代XML配置中的静态工厂与实例工厂创建bean，不区分方法是否为静态或非静态</p></li><li><p>@Bean所在的类必须被spring扫描加载，否则该注解无法生效</p></li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的访问id</li></ul></li></ul><h3 id="_2-6-bean的非引用类型属性注入" tabindex="-1"><a class="header-anchor" href="#_2-6-bean的非引用类型属性注入"><span>2.6)bean的非引用类型属性注入</span></a></h3><ul><li><p>名称：@Value</p></li><li><p>类型：<strong>属性注解、方法注解</strong></p></li><li><p>位置：属性定义上方，方法定义上方</p></li><li><p>作用：设置对应属性的值或对方法进行传参</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Value</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;\${jdbc.username}&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> username</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>value值仅支持非引用类型数据，赋值时对方法的所有参数全部赋值</p></li><li><p>value值支持读取properties文件中的属性值，通过类属性将properties中数据传入类中</p></li><li><p>value值支持SpEL</p></li><li><p>@value注解如果添加在属性上方，可以省略set方法（set方法的目的是为属性赋值）</p></li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义对应的属性值或参数值</li></ul></li></ul><h3 id="_2-7-bean的引用类型属性注入" tabindex="-1"><a class="header-anchor" href="#_2-7-bean的引用类型属性注入"><span>2.7)bean的引用类型属性注入</span></a></h3><ul><li><p>名称：@Autowired、@Qualifier</p></li><li><p>类型：<strong>属性注解、方法注解</strong></p></li><li><p>位置：属性定义上方，方法定义上方</p></li><li><p>作用：设置对应属性的对象或对方法进行引用类型传参</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Autowired</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">required</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Qualifier</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;userDao&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> UserDao</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> userDao</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></li><li><p>说明：</p><ul><li>@Autowired默认按类型装配，指定@Qualifier后可以指定自动装配的bean的id</li></ul></li><li><p>相关属性</p><ul><li>required：定义该属性是否允许为null</li></ul></li></ul><h3 id="_2-8-bean的引用类型属性注入" tabindex="-1"><a class="header-anchor" href="#_2-8-bean的引用类型属性注入"><span>2.8)bean的引用类型属性注入</span></a></h3><ul><li><p>名称：@Primary</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置类对应的bean按类型装配时优先装配</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Primary</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{}</span></span></code></pre></div></li><li><p>说明：</p><ul><li>@Autowired默认按类型装配，当出现相同类型的bean，使用@Primary提高按类型自动装配的优先级，多个@Primary会导致优先级设置无效</li></ul></li></ul><h3 id="_2-9-bean的引用类型属性注入" tabindex="-1"><a class="header-anchor" href="#_2-9-bean的引用类型属性注入"><span>2.9)bean的引用类型属性注入</span></a></h3><ul><li><p>名称：@Inject、@Named、@Resource</p></li><li><p>说明：</p><ul><li>@Inject与@Named是JSR330规范中的注解，功能与@Autowired和@Qualifier完全相同，适用于不同架构场景</li><li>@Resource是JSR250规范中的注解，可以简化书写格式</li></ul></li><li><p>@Resource相关属性</p><ul><li><p>name：设置注入的bean的id</p></li><li><p>type：设置注入的bean的类型，接收的参数为Class类型</p></li></ul></li></ul><h3 id="_2-10-加载properties文件" tabindex="-1"><a class="header-anchor" href="#_2-10-加载properties文件"><span>2.10)加载properties文件</span></a></h3><ul><li><p>名称：@PropertySource</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：加载properties文件中的属性值</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PropertySource</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;classpath:filename.properties&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Value</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;\${propertiesAttributeName}&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> attributeName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>说明：</p><ul><li>不支持*通配格式，一旦加载，所有spring控制的bean中均可使用对应属性值</li></ul></li><li><p>相关属性</p><ul><li><p>value（默认）：设置加载的properties文件名</p></li><li><p>ignoreResourceNotFound：如果资源未找到，是否忽略，默认为false</p></li></ul></li></ul><h3 id="_2-11-纯注解格式" tabindex="-1"><a class="header-anchor" href="#_2-11-纯注解格式"><span>2.11)纯注解格式</span></a></h3><ul><li><p>名称：@Configuration、@ComponentScan</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置当前类为spring核心配置加载类</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ComponentScan</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;scanPackageName&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SpringConfigClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>核心配合类用于替换spring核心配置文件，此类可以设置空的，不设置变量与属性</p></li><li><p>bean扫描工作使用注解@ComponentScan替代</p></li></ul></li></ul><p><strong>AnnotationConfigApplicationContext</strong></p><ul><li><p>加载纯注解格式上下文对象，需要使用AnnotationConfigApplicationContext</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AnnotationConfigApplicationContext</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ctx </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> AnnotationConfigApplicationContext</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SpringConfig</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></li></ul><h3 id="_2-12-第三方bean配置与管理" tabindex="-1"><a class="header-anchor" href="#_2-12-第三方bean配置与管理"><span>2.12)第三方bean配置与管理</span></a></h3><ul><li><p>名称：@Import</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：导入第三方bean作为spring控制的资源</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Import</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">OtherClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>@Import注解在同一个类上，仅允许添加一次，如果需要导入多个，使用数组的形式进行设定</p></li><li><p>在被导入的类中可以继续使用@Import导入其他资源（了解）</p></li><li><p>@Bean所在的类可以使用导入的形式进入spring容器，无需声明为bean</p></li></ul></li></ul><h2 id="_3-bean加载控制" tabindex="-1"><a class="header-anchor" href="#_3-bean加载控制"><span>3)bean加载控制</span></a></h2><h3 id="_3-1-依赖加载" tabindex="-1"><a class="header-anchor" href="#_3-1-依赖加载"><span>3.1)依赖加载</span></a></h3><p>(1)@DependsOn</p><ul><li><p>名称：@DependsOn</p></li><li><p>类型：类注解、方法注解</p></li><li><p>位置：bean定义的位置（类上或方法上）</p></li><li><p>作用：控制bean的加载顺序，使其在指定bean加载完毕后再加载</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">DependsOn</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;beanId&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>说明：</p><ul><li><p>配置在方法上，使@DependsOn指定的bean优先于@Bean配置的bean进行加载</p></li><li><p>配置在类上，使@DependsOn指定的bean优先于当前类中所有@Bean配置的bean进行加载</p></li><li><p>配置在类上，使@DependsOn指定的bean优先于@Component等配置的bean进行加载</p></li></ul></li><li><p>相关属性</p><ul><li>value（默认）：设置当前bean所依赖的bean的id</li></ul></li></ul><p>(2)@Order</p><ul><li><p>名称：@Order</p></li><li><p>类型：<strong>配置类注解</strong></p></li><li><p>位置：配置类定义的位置（类上）</p></li><li><p>作用：控制配置类的加载顺序</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Order</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SpringConfigClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li></ul><p>(3)@Lazy</p><ul><li><p>名称：@Lazy</p></li><li><p>类型：<strong>类注解、方法注解</strong></p></li><li><p>位置：bean定义的位置（类上或方法上）</p></li><li><p>作用：控制bean的加载时机，使其延迟加载</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Lazy</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li></ul><h3 id="_3-2-依赖加载应用场景" tabindex="-1"><a class="header-anchor" href="#_3-2-依赖加载应用场景"><span><strong>3.2)依赖加载应用场景</strong></span></a></h3><p>@DependsOn</p><ul><li><p>微信订阅号，发布消息和订阅消息的bean的加载顺序控制</p></li><li><p>双11活动期间，零点前是结算策略A，零点后是结算策略B，策略B操作的数据为促销数据。策略B加载顺序与促销数据的加载顺序</p></li></ul><p>@Lazy</p><ul><li>程序灾难出现后对应的应急预案处理是启动容器时加载时机</li></ul><p>@Order</p><ul><li>多个种类的配置出现后，优先加载系统级的，然后加载业务级的，避免细粒度的加载控制</li></ul><h2 id="_4-整合第三方技术" tabindex="-1"><a class="header-anchor" href="#_4-整合第三方技术"><span>4)整合第三方技术</span></a></h2><h3 id="_4-1-综合案例改版-注解整合mybatis" tabindex="-1"><a class="header-anchor" href="#_4-1-综合案例改版-注解整合mybatis"><span>4.1)综合案例改版（注解整合MyBatis）</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606138.png" alt="1591024717408" tabindex="0" loading="lazy"><figcaption>1591024717408</figcaption></figure><h3 id="_4-2-注解整合mybatis分析" tabindex="-1"><a class="header-anchor" href="#_4-2-注解整合mybatis分析"><span>4.2)注解整合MyBatis分析</span></a></h3><ul><li><p>业务类使用注解形式声明bean，属性采用注解注入</p></li><li><p>建立独立的配置管理类，分类管理外部资源，根据功能进行分类，并提供对应的方法获取bean</p></li><li><p>使用注解形式启动bean扫描，加载所有注解配置的资源（bean）</p></li><li><p>使用AnnotationConfigApplicationContext对象加载所有的启动配置类，内部使用导入方式进行关联</p></li></ul><h3 id="_4-3-注解整合mybatis步骤" tabindex="-1"><a class="header-anchor" href="#_4-3-注解整合mybatis步骤"><span>4.3)注解整合MyBatis步骤</span></a></h3><p>1.修改mybatis外部配置文件格式为注解格式</p><p>2.业务类使用@Component声明bean，使用@Autowired注入对象</p><p>3.建立配置文件JDBCConfig与MyBatisConfig类，并将其导入到核心配置类SpringConfig</p><p>4.开启注解扫描</p><p>5.使用AnnotationConfigApplicationContext对象加载配置项</p><h3 id="_4-4-综合案例改版-注解整合junit" tabindex="-1"><a class="header-anchor" href="#_4-4-综合案例改版-注解整合junit"><span>4.4)综合案例改版（注解整合Junit）</span></a></h3><p>1.Spring接管Junit的运行权，使用Spring专用的Junit类加载器</p><p>2.为Junit测试用例设定对应的spring容器：</p><ul><li><p>从Spring5.0以后，要求Junit的版本必须是4.12及以上</p></li><li><p>Junit仅用于单元测试，不能将Junit的测试类配置成spring的bean，否则该配置将会被打包进入工程中</p></li></ul><p>导入Spring整合Junit坐标</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;junit&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;4.12&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;org.springframework&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;spring-test&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dependency</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>Spring整合Junit测试用例注解格式</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RunWith</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SpringJUnit4ClassRunner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ContextConfiguration</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">classes</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SpringConfig</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> UserServiceTest</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_5-ioc底层核心原理" tabindex="-1"><a class="header-anchor" href="#_5-ioc底层核心原理"><span>5)IoC底层核心原理</span></a></h2><h3 id="_5-1-ioc核心接口" tabindex="-1"><a class="header-anchor" href="#_5-1-ioc核心接口"><span>5.1)IoC核心接口</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606167.png" alt="1591024936518" tabindex="0" loading="lazy"><figcaption>1591024936518</figcaption></figure><h3 id="_5-2-组件扫描器" tabindex="-1"><a class="header-anchor" href="#_5-2-组件扫描器"><span><strong>5.2)组件扫描器</strong></span></a></h3><ul><li>开发过程中，需要根据需求加载必要的bean，排除指定bean</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606205.png" alt="1591024975438" tabindex="0" loading="lazy"><figcaption>1591024975438</figcaption></figure><h3 id="_5-3-设定组件扫描加载过滤器" tabindex="-1"><a class="header-anchor" href="#_5-3-设定组件扫描加载过滤器"><span><strong>5.3)设定组件扫描加载过滤器</strong></span></a></h3><ul><li><p>名称：@ComponentScan</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置spring配置加载类扫描规则</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ComponentScan</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mrjason&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	           //设置基础扫描路径</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">    excludeFilters</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                          //设置过滤规则，当前为排除过滤</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">	@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ComponentScan.Filter</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(            </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//设置过滤器</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">	    type</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> FilterType</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ANNOTATION</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置过滤方式为按照注解进行过滤</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">	    classes</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Repository</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//设置具体的过滤项，过滤所有@Repository修饰的bean</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    )</span></span></code></pre></div></li></ul><p>​ includeFilters：设置包含性过滤器</p><p>​ excludeFilters：设置排除性过滤器</p><p>​ type：设置过滤器类型</p><h3 id="_5-4-自定义组件过滤器" tabindex="-1"><a class="header-anchor" href="#_5-4-自定义组件过滤器"><span><strong>5.4)自定义组件过滤器</strong></span></a></h3><ul><li><p>名称：TypeFilter</p></li><li><p>类型：<strong>接口</strong></p></li><li><p>作用：自定义类型过滤器</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyTypeFilter</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> TypeFilter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> boolean</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MetadataReader</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MetadataReaderFactory</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mrf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        ClassMetadata</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> cm</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> metadataReader</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getClassMetadata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        tring className </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> cm</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getClassName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">className</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">equals</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mrjason.dao.impl.BookDaoImpl&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)){</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li></ul><h3 id="_5-5-自定义导入器" tabindex="-1"><a class="header-anchor" href="#_5-5-自定义导入器"><span><strong>5.5)自定义导入器</strong></span></a></h3>`,83)),s("ul",null,[a[4]||(a[4]=s("li",null,[s("p",null,"bean只有通过配置才可以进入spring容器，被spring加载并控制")],-1)),s("li",null,[a[3]||(a[3]=s("p",null,"配置bean的方式如下：",-1)),s("ul",null,[s("li",null,[s("p",null,[a[0]||(a[0]=l("XML文件中使用")),r(n),a[1]||(a[1]=l("标签配置"))])]),a[2]||(a[2]=s("li",null,[s("p",null,"使用@Component及衍生注解配置")],-1))])]),a[5]||(a[5]=s("li",null,[s("p",null,"企业开发过程中，通常需要配置大量的bean，需要一种快速高效配置大量bean的方式")],-1))]),a[7]||(a[7]=i(`<p><strong>ImportSelector</strong></p><ul><li><p>名称： ImportSelector</p></li><li><p>类型：<strong>接口</strong></p></li><li><p>作用：自定义bean导入器</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyImportSelector</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ImportSelector</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">[] selectImports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AnnotationMetadata</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> icm</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[]{</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mrjason.dao.impl.AccountDaoImpl&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ComponentScan</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mrjason&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Import</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MyImportSelector</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SpringConfig</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li></ul><h3 id="_5-6-自定义注册器" tabindex="-1"><a class="header-anchor" href="#_5-6-自定义注册器"><span><strong>5.6)自定义注册器</strong></span></a></h3><ul><li><p>名称：ImportBeanDefinitionRegistrar</p></li><li><p>类型：<strong>接口</strong></p></li><li><p>作用：自定义bean定义注册器</p></li><li><p>范例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyImportBeanDefinitionRegistrar</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ImportBeanDefinitionRegistrar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> registerBeanDefinitions</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AnnotationMetadata</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> icm</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">BeanDefinitionRegistry</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        ClassPathBeanDefinitionScanner</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> scanner</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ClassPathBeanDefinitionScanner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(r, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        TypeFilter</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> TypeFilter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> boolean</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> match</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MetadataReader</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MetadataReaderFactory</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mrf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scanner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">addIncludeFilter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(tf);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //scanner.addExcludeFilter(tf);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scanner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">scan</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;com.mrjason&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li></ul><h3 id="_5-7-bean初始化过程解析" tabindex="-1"><a class="header-anchor" href="#_5-7-bean初始化过程解析"><span>5.7)bean初始化过程解析</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606236.png" alt="1591025338778" tabindex="0" loading="lazy"><figcaption>1591025338778</figcaption></figure><h3 id="_5-8-bean初始化过程解析" tabindex="-1"><a class="header-anchor" href="#_5-8-bean初始化过程解析"><span>5.8)bean初始化过程解析</span></a></h3><ul><li><p>BeanFactoryPostProcessor</p><ul><li><p>作用：定义了在bean工厂对象创建后，bean对象创建前执行的动作，用于对工厂进行创建后业务处理</p></li><li><p>运行时机：当前操作用于对工厂进行处理，仅运行一次</p></li></ul></li><li><p>BeanPostProcessor</p><ul><li><p>作用：定义了所有bean初始化前后进行的统一动作，用于对bean进行创建前业务处理与创建后业务处理</p></li><li><p>运行时机：当前操作伴随着每个bean的创建过程，每次创建bean均运行该操作</p></li></ul></li><li><p>InitializingBean</p><ul><li><p>作用：定义了每个bean的初始化前进行的动作，属于非统一性动作，用于对bean进行创建前业务处理</p></li><li><p>运行时机：当前操作伴随着任意一个bean的创建过程，保障其个性化业务处理</p></li></ul></li><li><p>注意：上述操作均需要被spring容器加载放可运行</p></li></ul><h3 id="_5-9-bean初始化过程解析" tabindex="-1"><a class="header-anchor" href="#_5-9-bean初始化过程解析"><span>5.9)bean初始化过程解析</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606273.png" alt="1591025440019" tabindex="0" loading="lazy"><figcaption>1591025440019</figcaption></figure><h3 id="_5-10-繁琐的bean初始化过程处理" tabindex="-1"><a class="header-anchor" href="#_5-10-繁琐的bean初始化过程处理"><span>5.10)繁琐的bean初始化过程处理</span></a></h3><ul><li>FactoryBean <ul><li>对单一的bean的初始化过程进行封装，达到简化配置的目的</li></ul></li></ul><p><strong>FactoryBean与BeanFactory区别</strong></p><ul><li><p>FactoryBean：封装单个bean的创建过程</p></li><li><p>BeanFactory：Spring容器顶层接口，定义了bean相关的获取操作</p></li></ul>`,14))])}const h=p(k,[["render",c],["__file","Spring-day02.html.vue"]]),C=JSON.parse('{"path":"/posts/Java/Java%E6%A1%86%E6%9E%B6/Spring/Spring-day02.html","title":"注解开发","lang":"zh-CN","frontmatter":{"created":"2022-09-27 17:45","updated":"2024-10-13 12:40","description":"注解开发 1)注解驱动的意义 1.1)什么是注解驱动 注解启动时使用注解的形式替代xml配置，将繁杂的spring配置文件从工程中彻底消除掉，简化书写 15910232654691591023265469 1.2)注解驱动的弊端 为了达成注解驱动的目的，可能会将原先很简单的书写，变的更加复杂 XML中配置第三方开发的资源是很方便的，但使用注解驱动无法在...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Java%E6%A1%86%E6%9E%B6/Spring/Spring-day02.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"注解开发"}],["meta",{"property":"og:description","content":"注解开发 1)注解驱动的意义 1.1)什么是注解驱动 注解启动时使用注解的形式替代xml配置，将繁杂的spring配置文件从工程中彻底消除掉，简化书写 15910232654691591023265469 1.2)注解驱动的弊端 为了达成注解驱动的目的，可能会将原先很简单的书写，变的更加复杂 XML中配置第三方开发的资源是很方便的，但使用注解驱动无法在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606028.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T09:32:06.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-29T09:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解开发\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606028.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606093.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606138.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606167.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606205.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606236.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606273.png\\"],\\"dateModified\\":\\"2024-10-29T09:32:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1)注解驱动的意义","slug":"_1-注解驱动的意义","link":"#_1-注解驱动的意义","children":[{"level":3,"title":"1.1)什么是注解驱动","slug":"_1-1-什么是注解驱动","link":"#_1-1-什么是注解驱动","children":[]},{"level":3,"title":"1.2)注解驱动的弊端","slug":"_1-2-注解驱动的弊端","link":"#_1-2-注解驱动的弊端","children":[]}]},{"level":2,"title":"2)常用注解","slug":"_2-常用注解","link":"#_2-常用注解","children":[{"level":3,"title":"2.1)启动注解功能","slug":"_2-1-启动注解功能","link":"#_2-1-启动注解功能","children":[]},{"level":3,"title":"2.2)bean的定义","slug":"_2-2-bean的定义","link":"#_2-2-bean的定义","children":[]},{"level":3,"title":"2.3)bean的作用域","slug":"_2-3-bean的作用域","link":"#_2-3-bean的作用域","children":[]},{"level":3,"title":"2.4)bean的生命周期","slug":"_2-4-bean的生命周期","link":"#_2-4-bean的生命周期","children":[]},{"level":3,"title":"2.5)加载第三方资源","slug":"_2-5-加载第三方资源","link":"#_2-5-加载第三方资源","children":[]},{"level":3,"title":"2.6)bean的非引用类型属性注入","slug":"_2-6-bean的非引用类型属性注入","link":"#_2-6-bean的非引用类型属性注入","children":[]},{"level":3,"title":"2.7)bean的引用类型属性注入","slug":"_2-7-bean的引用类型属性注入","link":"#_2-7-bean的引用类型属性注入","children":[]},{"level":3,"title":"2.8)bean的引用类型属性注入","slug":"_2-8-bean的引用类型属性注入","link":"#_2-8-bean的引用类型属性注入","children":[]},{"level":3,"title":"2.9)bean的引用类型属性注入","slug":"_2-9-bean的引用类型属性注入","link":"#_2-9-bean的引用类型属性注入","children":[]},{"level":3,"title":"2.10)加载properties文件","slug":"_2-10-加载properties文件","link":"#_2-10-加载properties文件","children":[]},{"level":3,"title":"2.11)纯注解格式","slug":"_2-11-纯注解格式","link":"#_2-11-纯注解格式","children":[]},{"level":3,"title":"2.12)第三方bean配置与管理","slug":"_2-12-第三方bean配置与管理","link":"#_2-12-第三方bean配置与管理","children":[]}]},{"level":2,"title":"3)bean加载控制","slug":"_3-bean加载控制","link":"#_3-bean加载控制","children":[{"level":3,"title":"3.1)依赖加载","slug":"_3-1-依赖加载","link":"#_3-1-依赖加载","children":[]},{"level":3,"title":"3.2)依赖加载应用场景","slug":"_3-2-依赖加载应用场景","link":"#_3-2-依赖加载应用场景","children":[]}]},{"level":2,"title":"4)整合第三方技术","slug":"_4-整合第三方技术","link":"#_4-整合第三方技术","children":[{"level":3,"title":"4.1)综合案例改版（注解整合MyBatis）","slug":"_4-1-综合案例改版-注解整合mybatis","link":"#_4-1-综合案例改版-注解整合mybatis","children":[]},{"level":3,"title":"4.2)注解整合MyBatis分析","slug":"_4-2-注解整合mybatis分析","link":"#_4-2-注解整合mybatis分析","children":[]},{"level":3,"title":"4.3)注解整合MyBatis步骤","slug":"_4-3-注解整合mybatis步骤","link":"#_4-3-注解整合mybatis步骤","children":[]},{"level":3,"title":"4.4)综合案例改版（注解整合Junit）","slug":"_4-4-综合案例改版-注解整合junit","link":"#_4-4-综合案例改版-注解整合junit","children":[]}]},{"level":2,"title":"5)IoC底层核心原理","slug":"_5-ioc底层核心原理","link":"#_5-ioc底层核心原理","children":[{"level":3,"title":"5.1)IoC核心接口","slug":"_5-1-ioc核心接口","link":"#_5-1-ioc核心接口","children":[]},{"level":3,"title":"5.2)组件扫描器","slug":"_5-2-组件扫描器","link":"#_5-2-组件扫描器","children":[]},{"level":3,"title":"5.3)设定组件扫描加载过滤器","slug":"_5-3-设定组件扫描加载过滤器","link":"#_5-3-设定组件扫描加载过滤器","children":[]},{"level":3,"title":"5.4)自定义组件过滤器","slug":"_5-4-自定义组件过滤器","link":"#_5-4-自定义组件过滤器","children":[]},{"level":3,"title":"5.5)自定义导入器","slug":"_5-5-自定义导入器","link":"#_5-5-自定义导入器","children":[]},{"level":3,"title":"5.6)自定义注册器","slug":"_5-6-自定义注册器","link":"#_5-6-自定义注册器","children":[]},{"level":3,"title":"5.7)bean初始化过程解析","slug":"_5-7-bean初始化过程解析","link":"#_5-7-bean初始化过程解析","children":[]},{"level":3,"title":"5.8)bean初始化过程解析","slug":"_5-8-bean初始化过程解析","link":"#_5-8-bean初始化过程解析","children":[]},{"level":3,"title":"5.9)bean初始化过程解析","slug":"_5-9-bean初始化过程解析","link":"#_5-9-bean初始化过程解析","children":[]},{"level":3,"title":"5.10)繁琐的bean初始化过程处理","slug":"_5-10-繁琐的bean初始化过程处理","link":"#_5-10-繁琐的bean初始化过程处理","children":[]}]}],"git":{"createdTime":1729494189000,"updatedTime":1730194326000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":2}]},"readingTime":{"minutes":10.41,"words":3123},"filePathRelative":"posts/Java/Java框架/Spring/Spring-day02.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1)注解驱动的意义</h2>\\n<h3>1.1)什么是注解驱动</h3>\\n<p>注解启动时使用注解的形式替代xml配置，将繁杂的spring配置文件从工程中彻底消除掉，简化书写</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111606028.png\\" alt=\\"1591023265469\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1591023265469</figcaption></figure>\\n<h3>1.2)注解驱动的弊端</h3>","autoDesc":true}');export{h as comp,C as data};
