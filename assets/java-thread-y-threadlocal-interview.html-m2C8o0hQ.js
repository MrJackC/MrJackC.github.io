import{_ as a,c as n,a as l,o as i}from"./app-BOcQBfH9.js";const e={};function r(p,s){return i(),n("div",null,s[0]||(s[0]=[l(`<h1 id="java-并发-threadlocal-面试场景" tabindex="-1"><a class="header-anchor" href="#java-并发-threadlocal-面试场景"><span>Java 并发 - ThreadLocal(面试场景)</span></a></h1><h2 id="_1-讲讲-threadlocal-在你们项目中的用法" tabindex="-1"><a class="header-anchor" href="#_1-讲讲-threadlocal-在你们项目中的用法"><span>1. 讲讲 ThreadLocal 在你们项目中的用法？</span></a></h2><p><strong>面试官</strong>：那你跟我讲讲 ThreadLocal 在你们项目中的用法吧。</p><p><strong>安琪拉</strong>：举个栗子，我们项目每秒钟同时会有很多用户请求，那每个请求都带有用户信息，我们知道通常都是一个线程处理一个用户请求，我们可以把用户信息丢到Threadlocal里面，让每个线程处理自己的用户信息，线程之间互不干扰。</p><h2 id="_2-threadlocal-是干什么的" tabindex="-1"><a class="header-anchor" href="#_2-threadlocal-是干什么的"><span>2. Threadlocal 是干什么的？</span></a></h2><p>面试官：那你来给我讲讲Threadlocal是干什么的？</p><p>安琪拉：Threadlocal 主要用来做线程变量的隔离，这么说可能不是很直观。</p><p>还是说前面提到的例子，我们程序在处理用户请求的时候，通常后端服务器是有一个线程池，来一个请求就交给一个线程来处理，那为了防止多线程并发处理请求的时候发生串数据，比如AB线程分别处理安琪拉和妲己的请求，A线程本来处理安琪拉的请求，结果访问到妲己的数据上了，把妲己支付宝的钱转走了。</p><p>所以就可以把安琪拉的数据跟A线程绑定，线程处理完之后解除绑定。<br><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853381.png" alt="image-20221217225448974" loading="lazy"></p><p>面试官：那把你刚才说的场景用伪代码实现一下，来笔给你！</p><p>安琪拉：ok</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//存放用户信息的ThreadLocal</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">UserInfo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> userInfoThreadLocal </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Response</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> handleRequest</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">UserInfo</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> userInfo) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Response</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> response </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Response</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  try</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1.用户信息set到线程局部变量中</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    userInfoThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(userInfo);</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    doHandle</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">finally</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3.使用完移除掉</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    userInfoThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">remove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//业务逻辑处理</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> doHandle</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2.实际用的时候取出来</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  UserInfo</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> userInfo </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> userInfoThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //查询用户资产</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  queryUserAsset</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(userInfo)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2.3 步骤很清楚了。</p><h2 id="_3-threadlocal-怎么实现线程变量的隔离" tabindex="-1"><a class="header-anchor" href="#_3-threadlocal-怎么实现线程变量的隔离"><span>3. Threadlocal 怎么实现线程变量的隔离</span></a></h2><p><strong>面试官</strong>：那你跟我说说<code>Threadlocal</code> 怎么实现线程变量的隔离的？</p><p><strong>安琪拉</strong>：Oh, 这么快进入正题，我先给你画个图，如下</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853440.png" alt="image-20221217225703733" tabindex="0" loading="lazy"><figcaption>image-20221217225703733</figcaption></figure><p>面试官：图我看了，那你对着前面你写的代码讲一下对应图中流程。</p><p>安琪拉：没问题</p><ul><li>首先我们通过<code>ThreadLocal&lt;UserInfo&gt; userInfoThreadLocal = new ThreadLocal()</code> 初始化了一个Threadlocal 对象，就是上图中说的Threadlocal 引用，这个引用指向堆中的ThreadLocal 对象；</li><li>然后我们调用userInfoThreadLocal.set(userInfo); 这里做了什么事呢？</li></ul><p>​ 我们把源代码拿出来，看一看就清晰了。</p><p>​ 我们知道 Thread 类有个 ThreadLocalMap 成员变量，这个Map key是Threadlocal 对象，value是你要存放的线程局部变量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;"># </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Threadlocal类</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Threadlocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> set</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">T</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //获取当前线程Thread，就是上图画的Thread 引用</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Thread</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> t </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">currentThread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //Thread类有个成员变量ThreadlocalMap，拿到这个Map</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  ThreadLocalMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> map </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(t)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (map </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //this指的就是Threadlocal对象</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    map</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, value);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  else</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    createMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(t</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocalMap</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> t) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //获取线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> t</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocals</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> createMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> t</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> T</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> firstValue) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //初始化</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  t</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocals</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ThreadLocalMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> firstValue)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thread类 Thread.class</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//每个线程都有自己的ThreadLocalMap 成员变量</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocalMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> threadLocals </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>这里是在当前线程对象的ThreadlocalMap中put了一个元素(Entry)，key是<strong>Threadlocal对象</strong>，value是userInfo。</p><p>理解二件事就都清楚了：</p><p>ThreadLocalMap 类的定义在 Threadlocal中。</p><ul><li>第一，Thread 对象是Java语言中线程运行的载体，每个线程都有对应的Thread 对象，存放线程相关的一些信息，</li><li>第二，Thread类中有个成员变量ThreadlocalMap，你就把他当成普通的Map，key存放的是Threadlocal对象，value是你要跟线程绑定的值（线程隔离的变量），比如这里是用户信息对象（UserInfo）。</li></ul><h2 id="_4-thread-类有个-threadlocalmap-属性的成员变量-但是threadlocalmap-的定义却在threadlocal-中-为什么这么做" tabindex="-1"><a class="header-anchor" href="#_4-thread-类有个-threadlocalmap-属性的成员变量-但是threadlocalmap-的定义却在threadlocal-中-为什么这么做"><span>4.Thread 类有个 ThreadlocalMap 属性的成员变量，但是ThreadlocalMap 的定义却在Threadlocal 中，为什么这么做？</span></a></h2><p><strong>面试官</strong>：你刚才说Thread 类有个 ThreadlocalMap 属性的成员变量，但是ThreadlocalMap 的定义却在Threadlocal 中，为什么这么做？</p><p><strong>安琪拉</strong>：我们看下ThreadlocalMap的说明</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ThreadLocalMap</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* ThreadLocalMap is a customized hash map suitable only for</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* maintaining thread local values. No operations are exported</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* outside of the ThreadLocal class. The </span><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> is</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> package </span><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> to</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* allow declaration of fields in </span><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#E06C75;--shiki-dark:#E06C75;">.  To help deal with</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* very large and long-lived usages, the hash table entries use</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* WeakReferences for keys. However, since reference queues are not</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* used, stale entries are guaranteed to be removed only when</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">* the table starts running out of space.</span></span></code></pre></div><p>大概意思是ThreadLocalMap 就是为维护线程本地变量而设计的，只做这一件事情。</p><p>这个也是为什么 ThreadLocalMap 是Thread的成员变量，但是却是Threadlocal 的内部类（非public，只有包访问权限，Thread和Threadlocal都在java.lang 包下），就是让使用者知道ThreadLocalMap就只做保存线程局部变量这一件事的。</p><h2 id="_5-为什么不用线程对象-thread对象-作为key" tabindex="-1"><a class="header-anchor" href="#_5-为什么不用线程对象-thread对象-作为key"><span>5. 为什么不用线程对象（Thread对象）作为key?</span></a></h2><p>面试官：既然是线程局部变量，那为什么不用线程对象（Thread对象）作为key，这样不是更清晰，直接用线程作为key获取线程变量？</p><p>安琪拉：这样设计会有个问题，比如: 我已经把用户信息存在线程变量里了，这个时候需要新增加一个线程变量，比方说新增用户地理位置信息，我们ThreadlocalMap 的key用的是线程，再存一个地理位置信息，key都是同一个线程（key一样），不就把原来的用户信息覆盖了嘛。Map.put(key,value) 操作熟悉吧，所以网上有些文章说ThreadlocalMap使用线程作为key是瞎扯的。</p><h2 id="_6-那新增地理位置信息应该怎么做" tabindex="-1"><a class="header-anchor" href="#_6-那新增地理位置信息应该怎么做"><span>6. 那新增地理位置信息应该怎么做?</span></a></h2><p>面试官：那新增地理位置信息应该怎么做？</p><p>安琪拉：新创建一个Threadlocal对象就好了，因为ThreadLocalMap的key是Threadlocal 对象，比如新增地理位置，我就再 Threadlocal &lt; Geo&gt; geo = new Threadlocal（）, 存放地理位置信息，这样线程的ThreadlocalMap里面会有二个元素，一个是用户信息，一个是地理位置。</p><h2 id="_7-threadlocalmap-是什么数据结构实现的" tabindex="-1"><a class="header-anchor" href="#_7-threadlocalmap-是什么数据结构实现的"><span>7. ThreadlocalMap 是什么数据结构实现的？</span></a></h2><p>面试官：ThreadlocalMap 是什么数据结构实现的？</p><p>安琪拉：跟HashMap 一样，也是数组实现的。</p><p>代码如下：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ThreadLocalMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //初始容量</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> INITIAL_CAPACITY </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 16</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //存放元素的数组</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //元素个数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;"> private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> size </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>table 就是存储线程局部变量的数组，数组元素是Entry类，Entry由key和value组成，key是Threadlocal对象，value是存放的对应线程变量</p><p>我们前面举得例子，数组存储结构如下图:</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853477.png" alt="image-20221217231536559" tabindex="0" loading="lazy"><figcaption>image-20221217231536559</figcaption></figure><h2 id="_8-threadlocalmap-发生hash冲突怎么办" tabindex="-1"><a class="header-anchor" href="#_8-threadlocalmap-发生hash冲突怎么办"><span>8. ThreadlocalMap 发生hash冲突怎么办?</span></a></h2><p>面试官：ThreadlocalMap 发生hash冲突怎么办？跟HashMap 有什么区别？</p><p>安琪拉：【心想】第一次碰到有问ThreadlocalMap哈希冲突的，这个面试越来越有意思了。</p><p>说道：有区别的，对待哈希冲突，HashMap采用的链表 + 红黑树的形式，如下图，链表长度过长(&gt;8) 就会转成红黑树:</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853509.png" alt="image-20221217231629117" tabindex="0" loading="lazy"><figcaption>image-20221217231629117</figcaption></figure><p>ThreadlocalMap既没有链表，也没有红黑树，采用的是开放定址法 ，是这样，是如果发生冲突，ThreadlocalMap直接往后找相邻的下一个节点，如果相邻节点为空，直接存进去，如果不为空，继续往后找，直到找到空的，把元素放进去，或者元素个数超过数组长度阈值，进行扩容。</p><p>如下图：还是以之前的例子讲解，ThreadlocalMap 数组长度是4，现在存地理位置的时候发生hash冲突（位置1已经有数据），那就把往后找，发现2 这个位置为空，就直接存放在2这个位置。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853543.png" alt="image-20221217231721030" tabindex="0" loading="lazy"><figcaption>image-20221217231721030</figcaption></figure><p>源代码（如果阅读起来困难，可以看完后文回过头来阅读）:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> set</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] tab </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> tab</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // hashcode &amp; 操作其实就是 %数组长度取余数，例如：数组长度是4，hashCode % (4-1) 就找到要存放元素的数组下标</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (len</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //找到数组的空槽（=null），一般ThreadlocalMap存放元素不会很多</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  for</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tab[i]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //找到数组的空槽（=null）</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tab[i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len)]) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //如果key值一样，算是更新操作，直接替换</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //key为空，做替换清理动作，这个后面聊WeakReference的时候讲</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">      replaceStaleEntry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //新new一个Entry</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  tab[i] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //数组元素个数+1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sz </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ++</span><span style="color:#E06C75;--shiki-dark:#E06C75;">size</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //如果没清理掉元素或者存放元素个数超过数组阈值，进行扩容</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">cleanSomeSlots</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sz) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sz </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    rehash</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//顺序遍历 +1 到了数组尾部，又回到数组头部（0这个位置）</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ((i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// get()方法，根据ThreadLocal key获取线程变量</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Entry</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getEntry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //计算hash值 &amp; 操作其实就是 %数组长度取余数，例如：数组长度是4，hashCode % (4-1) 就找到要查询的数组地址</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> table[i]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //快速判断 如果这个位置有值，key相等表示找到了，直接返回</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> key)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  else</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getEntryAfterMiss</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //miss之后顺序往后找（链地址法，这个后面再介绍）</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-threadlocalmap-中key是-weakreference类型-能讲讲java中有几种类似的引用-什么区别吗" tabindex="-1"><a class="header-anchor" href="#_9-threadlocalmap-中key是-weakreference类型-能讲讲java中有几种类似的引用-什么区别吗"><span>9. ThreadlocalMap 中key是 WeakReference类型，能讲讲Java中有几种类似的引用，什么区别吗</span></a></h2><p>面试官：我看你最前面图中画的ThreadlocalMap 中key是 WeakReference类型，能讲讲Java中有几种类似的引用，什么区别吗？</p><p>安琪拉：可以</p><ul><li>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它，当内存空间不足时，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。</li><li>如果一个对象只具有软引用，则内存空间充足时，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。</li><li>弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描内存区域时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</li><li>虚引用顾名思义，就是形同虚设。与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</li></ul><p>妥妥的八股文啊！尴尬(─.─|||。</p><h2 id="_10-为什么threadlocalmap-中key-设计成-weakreference-弱引用-类型" tabindex="-1"><a class="header-anchor" href="#_10-为什么threadlocalmap-中key-设计成-weakreference-弱引用-类型"><span>10. 为什么ThreadlocalMap 中key 设计成 WeakReference（弱引用）类型</span></a></h2><p>面试官：那你能讲讲为什么ThreadlocalMap 中key 设计成 WeakReference（弱引用）类型吗？</p><p>安琪拉：可以的，为了尽最大努力避免内存泄漏。</p><p>面试官：能详细讲讲吗？为什么是尽最大努力，你前面也讲被WeakReference 引用的对象会直接被GC（内存回收器） 回收，为什么不是直接避免了内存泄漏呢？</p><p>安琪拉：我们还是看下下面这张图</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853571.png" alt="image-20221217232239619" tabindex="0" loading="lazy"><figcaption>image-20221217232239619</figcaption></figure><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>private static final ThreadLocal&lt;UserInfo&gt; userInfoThreadLocal = new ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span>userInfoThreadLocal.set(userInfo);</span></span></code></pre></div><p>这里的引用关系是userInfoThreadLocal 引用了ThreadLocal对象，这是个强引用，ThreadLocal对象同时也被ThreadlocalMap的key引用，这是个WeakReference引用，我们前面说GC要回收ThreadLocal对象的前提是它只被WeakReference引用，没有任何强引用。</p><p>为了方便大家理解弱引用，我写了段Demo程序</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Object</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> angela </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Object</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //弱引用</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  WeakReference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> weakReference </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> WeakReference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(angela)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //angela和弱引用指向同一个对象</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(angela);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//java.lang.Object@4550017c</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">weakReference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//java.lang.Object@4550017c </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //将强引用angela置为null，这个对象就只剩下弱引用了,内存够用，弱引用也会被回收</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  angela </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">gc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//内存够用不会自动gc，手动唤醒gc</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(angela);</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//null</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">weakReference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//null</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>可以看到一旦一个对象只被弱引用引用，GC的时候就会回收这个对象。</p><p>所以只要ThreadLocal对象如果还被 userInfoThreadLocal（强引用） 引用着，GC是不会回收被WeakReference引用的对象的。</p><h2 id="_11-threadlocal对象有强引用-回收不掉-干嘛还要设计成weakreference类型" tabindex="-1"><a class="header-anchor" href="#_11-threadlocal对象有强引用-回收不掉-干嘛还要设计成weakreference类型"><span>11. ThreadLocal对象有强引用，回收不掉，干嘛还要设计成WeakReference类型</span></a></h2><p>面试官：那既然ThreadLocal对象有强引用，回收不掉，干嘛还要设计成WeakReference类型呢？</p><p>安琪拉：ThreadLocal的设计者考虑到线程往往生命周期很长，比如经常会用到线程池，线程一直存活着，根据JVM 根搜索算法，一直存在 Thread -&gt; ThreadLocalMap -&gt; Entry（元素）这样一条引用链路, 如下图，如果key不设计成WeakReference类型，是强引用的话，就一直不会被GC回收，key就一直不会是null，不为null Entry元素就不会被清理（ThreadLocalMap是根据key是否为null来判断是否清理Entry）<br><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853593.png" alt="image-20221217232949196" loading="lazy"></p><p>所以ThreadLocal的设计者认为只要ThreadLocal 所在的作用域结束了工作被清理了，GC回收的时候就会把key引用对象回收，key置为null，ThreadLocal会尽力保证Entry清理掉来最大可能避免内存泄漏。</p><p>来看下代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//元素类</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Entry</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> WeakReference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /** The value associated with this ThreadLocal. */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Object</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //key是从父类继承的，所以这里只有value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  Entry</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> v</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(k);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    value </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> v;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//WeakReference 继承了Reference，key是继承了范型的referent</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> abstract</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Reference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">T</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //这个就是被继承的key</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  private</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> T</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> referent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  Reference</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">T</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> referent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(referent, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entry 继承了WeakReference类，Entry 中的 key 是WeakReference类型的，在Java 中当对象只被 WeakReference 引用，没有其他对象引用时，被WeakReference 引用的对象发生GC 时会直接被回收掉。</p><h2 id="_12-那如果threadlocal-对象一直有强引用-那怎么办" tabindex="-1"><a class="header-anchor" href="#_12-那如果threadlocal-对象一直有强引用-那怎么办"><span>12. 那如果Threadlocal 对象一直有强引用，那怎么办</span></a></h2><p>面试官：那如果Threadlocal 对象一直有强引用，那怎么办？岂不是有内存泄漏风险。</p><p>安琪拉：最佳实践是用完手动调用remove函数。</p><p>我们看下源码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Threadlocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> remove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //这个是拿到线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      ThreadLocalMap</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> m</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> getMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">currentThread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (m </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">remove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//this就是ThreadLocal对象，移除，方法在下面</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ThreadlocalMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> remove</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    Entry</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;--shiki-dark:#E06C75;">tab</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> table;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> tab</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //计算位置</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> key</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (len</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tab[i];</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">         e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> tab[i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(i, len)]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //清理</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">clear</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        expungeStaleEntry</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(i); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//清理空槽</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//这个方法就是做元素清理</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">private</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> expungeStaleEntry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> staleSlot) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;">[] tab </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> tab</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //把staleSlot的value置为空，然后数组元素置为空</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  tab[staleSlot]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  tab[staleSlot] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  size</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //元素个数-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Rehash until we encounter null</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  Entry</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  for</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(staleSlot</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       (e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tab[i]) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">       i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len)) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    ThreadLocal</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //k 为null代表引用对象被GC回收掉了</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (k </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      tab[i] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      size</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //因为元素个数减少了，就把后面的元素重新hash</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> h </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //hash地址不相等，就代表这个元素之前发生过hash冲突(本来应该放在这没放在这)，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //现在因为有元素被移除了，很有可能原来冲突的位置空出来了，重试一次</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (h </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        tab[i] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //继续采用链地址法存放元素</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (tab[h] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          h </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> nextIndex</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(h</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> len)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        tab[h] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-有很多变量都要塞到threadlocalmap中-那岂不是要申明很多个threadlocal-对象-有没有好的解决办法。" tabindex="-1"><a class="header-anchor" href="#_13-有很多变量都要塞到threadlocalmap中-那岂不是要申明很多个threadlocal-对象-有没有好的解决办法。"><span>13. 有很多变量都要塞到ThreadlocalMap中,那岂不是要申明很多个Threadlocal 对象？有没有好的解决办法。</span></a></h2><p>面试官：最后一个问题，如果我有很多变量都要塞到ThreadlocalMap中，那岂不是要申明很多个Threadlocal 对象？有没有好的解决办法。</p><p>安琪拉：我们的最佳实践是搞个再封装一下，把ThreadLocalMap 的value 弄成Map就好了，这样只要一个Threadlocal 对象就好了。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://angela.blog.csdn.net/article/details/116516694?spm=1001.2014.3001.5502" target="_blank" rel="noopener noreferrer">一个ThreadLocal和面试官大战30个回合</a></p>`,93)]))}const k=a(e,[["render",r],["__file","java-thread-y-threadlocal-interview.html.vue"]]),c=JSON.parse('{"path":"/posts/Java/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/java-thread-y-threadlocal-interview.html","title":"Java 并发 - ThreadLocal(面试场景)","lang":"zh-CN","frontmatter":{"aliases":"Java 并发 - ThreadLocal(面试场景)","tags":null,"cssclass":null,"source":null,"order":46,"category":["Java","并发"],"created":"2024-02-22 10:48","updated":"2024-03-12 08:54","description":"Java 并发 - ThreadLocal(面试场景) 1. 讲讲 ThreadLocal 在你们项目中的用法？ 面试官：那你跟我讲讲 ThreadLocal 在你们项目中的用法吧。 安琪拉：举个栗子，我们项目每秒钟同时会有很多用户请求，那每个请求都带有用户信息，我们知道通常都是一个线程处理一个用户请求，我们可以把用户信息丢到Threadlocal里面...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Java/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/java-thread-y-threadlocal-interview.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Java 并发 - ThreadLocal(面试场景)"}],["meta",{"property":"og:description","content":"Java 并发 - ThreadLocal(面试场景) 1. 讲讲 ThreadLocal 在你们项目中的用法？ 面试官：那你跟我讲讲 ThreadLocal 在你们项目中的用法吧。 安琪拉：举个栗子，我们项目每秒钟同时会有很多用户请求，那每个请求都带有用户信息，我们知道通常都是一个线程处理一个用户请求，我们可以把用户信息丢到Threadlocal里面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853381.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发 - ThreadLocal(面试场景)\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853381.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853440.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853477.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853509.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853543.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853571.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403120853593.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 讲讲 ThreadLocal 在你们项目中的用法？","slug":"_1-讲讲-threadlocal-在你们项目中的用法","link":"#_1-讲讲-threadlocal-在你们项目中的用法","children":[]},{"level":2,"title":"2. Threadlocal 是干什么的？","slug":"_2-threadlocal-是干什么的","link":"#_2-threadlocal-是干什么的","children":[]},{"level":2,"title":"3. Threadlocal 怎么实现线程变量的隔离","slug":"_3-threadlocal-怎么实现线程变量的隔离","link":"#_3-threadlocal-怎么实现线程变量的隔离","children":[]},{"level":2,"title":"4.Thread 类有个 ThreadlocalMap 属性的成员变量，但是ThreadlocalMap 的定义却在Threadlocal 中，为什么这么做？","slug":"_4-thread-类有个-threadlocalmap-属性的成员变量-但是threadlocalmap-的定义却在threadlocal-中-为什么这么做","link":"#_4-thread-类有个-threadlocalmap-属性的成员变量-但是threadlocalmap-的定义却在threadlocal-中-为什么这么做","children":[]},{"level":2,"title":"5. 为什么不用线程对象（Thread对象）作为key?","slug":"_5-为什么不用线程对象-thread对象-作为key","link":"#_5-为什么不用线程对象-thread对象-作为key","children":[]},{"level":2,"title":"6. 那新增地理位置信息应该怎么做?","slug":"_6-那新增地理位置信息应该怎么做","link":"#_6-那新增地理位置信息应该怎么做","children":[]},{"level":2,"title":"7. ThreadlocalMap 是什么数据结构实现的？","slug":"_7-threadlocalmap-是什么数据结构实现的","link":"#_7-threadlocalmap-是什么数据结构实现的","children":[]},{"level":2,"title":"8. ThreadlocalMap 发生hash冲突怎么办?","slug":"_8-threadlocalmap-发生hash冲突怎么办","link":"#_8-threadlocalmap-发生hash冲突怎么办","children":[]},{"level":2,"title":"9. ThreadlocalMap 中key是 WeakReference类型，能讲讲Java中有几种类似的引用，什么区别吗","slug":"_9-threadlocalmap-中key是-weakreference类型-能讲讲java中有几种类似的引用-什么区别吗","link":"#_9-threadlocalmap-中key是-weakreference类型-能讲讲java中有几种类似的引用-什么区别吗","children":[]},{"level":2,"title":"10. 为什么ThreadlocalMap 中key 设计成 WeakReference（弱引用）类型","slug":"_10-为什么threadlocalmap-中key-设计成-weakreference-弱引用-类型","link":"#_10-为什么threadlocalmap-中key-设计成-weakreference-弱引用-类型","children":[]},{"level":2,"title":"11. ThreadLocal对象有强引用，回收不掉，干嘛还要设计成WeakReference类型","slug":"_11-threadlocal对象有强引用-回收不掉-干嘛还要设计成weakreference类型","link":"#_11-threadlocal对象有强引用-回收不掉-干嘛还要设计成weakreference类型","children":[]},{"level":2,"title":"12. 那如果Threadlocal 对象一直有强引用，那怎么办","slug":"_12-那如果threadlocal-对象一直有强引用-那怎么办","link":"#_12-那如果threadlocal-对象一直有强引用-那怎么办","children":[]},{"level":2,"title":"13. 有很多变量都要塞到ThreadlocalMap中,那岂不是要申明很多个Threadlocal 对象？有没有好的解决办法。","slug":"_13-有很多变量都要塞到threadlocalmap中-那岂不是要申明很多个threadlocal-对象-有没有好的解决办法。","link":"#_13-有很多变量都要塞到threadlocalmap中-那岂不是要申明很多个threadlocal-对象-有没有好的解决办法。","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":13.5,"words":4050},"filePathRelative":"posts/Java/Java多线程/java-thread-y-threadlocal-interview.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 讲讲 ThreadLocal 在你们项目中的用法？</h2>\\n<p><strong>面试官</strong>：那你跟我讲讲 ThreadLocal 在你们项目中的用法吧。</p>\\n<p><strong>安琪拉</strong>：举个栗子，我们项目每秒钟同时会有很多用户请求，那每个请求都带有用户信息，我们知道通常都是一个线程处理一个用户请求，我们可以把用户信息丢到Threadlocal里面，让每个线程处理自己的用户信息，线程之间互不干扰。</p>\\n<h2>2. Threadlocal 是干什么的？</h2>\\n<p>面试官：那你来给我讲讲Threadlocal是干什么的？</p>\\n","autoDesc":true}');export{k as comp,c as data};
