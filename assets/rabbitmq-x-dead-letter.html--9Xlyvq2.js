import{_ as a,c as n,a as e,o as i}from"./app-DEK5G3U7.js";const l={};function r(t,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="rabbitmq进阶-死信队列dlx" tabindex="-1"><a class="header-anchor" href="#rabbitmq进阶-死信队列dlx"><span>RabbitMQ进阶 - 死信队列DLX</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>Dead Letter Exchange 简称 DLX，可称为死信交换器，当消息在一个 <strong>队列中变成死信（dead message）<strong>之后，它能</strong>被重新发送到另一个交换器中</strong>，这个交换器就是 <strong>DLX</strong>，绑定在 DLX 上的队列就称为 <strong>死信队列</strong>。</p><p>消息变成死信一般有以下几种情况：</p><ul><li><p>消息被拒绝，并设置 requeue 参数为 false</p><p><code>Basic.Reject 或 Basic.Nack</code></p></li><li><p>消息过期</p></li><li><p>队列达到最大长度</p></li></ul><h2 id="_2-为什么需要死信队列" tabindex="-1"><a class="header-anchor" href="#_2-为什么需要死信队列"><span>2. 为什么需要死信队列</span></a></h2><p>为了保证订单业务的消息数据不丢失，需要使用到RabbitMQ的死信队列机制，当消息消费发生异常时，将消息投入死信队列中。</p><h2 id="_3-如何设置" tabindex="-1"><a class="header-anchor" href="#_3-如何设置"><span>3. 如何设置</span></a></h2><p>DLX 是一个普通的交换器，可以在任何队列上设置，当死信消息出现时，RabbitMQ 自动将这个 <strong>消息重新发布到设置的 DLX 上</strong>，从而被路由到另一个队列，即 <strong>死信队列</strong></p><p>在队列定义时，使用 <code>x-dead-letter-exchange</code> 参数来为这个队列添加 DLX</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Channel</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> channel </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> connection</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">createChannel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义 dlx</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">exchangeDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exchange.dlx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;direct&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义 dlx queue</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;queue.dlx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueBind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;queue.dlx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exchange.dlx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dlx-routing-key&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义正常的交换器</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">exchangeDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exchange.normal&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;fanout&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">final</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> arguments </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义队列事，通过该属性给该队列设置 DLX</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;x-dead-letter-exchange&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exchange.dlx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 还可以通过该属性重新消息的路由键，否则使用原消息的路由键</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;x-dead-letter-routing-key&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;dlx-routing-key&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置该队列的 ttl</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">arguments</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;x-message-ttl&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">10000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueDeclare</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;queue.normal&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, arguments);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">channel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">queueBind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;queue.normal&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exchange.normal&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码分为两部分：</p><ol><li><p>定义一个 DLX（其实就是普通的交换器），但是会把他绑定在正常的交换器上；</p><p>为该 DLX 绑定一个队列，用来接收死信消息</p></li><li><p>定义正常的交换器，并设置 DLX 交换器与路由键</p></li></ol><p>在 web 管理界面中如下图所示：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231119064.png" alt="image-20220923202344462" tabindex="0" loading="lazy"><figcaption>image-20220923202344462</figcaption></figure><ul><li>D：durable 持久化队列</li><li>TTL：消息有过期时间</li><li>DLX：绑定了死信交换器</li><li>DLK：是这个 <code>x-dead-letter-routing-key</code> 死信交换器设置了路由键</li></ul><h2 id="_4-死信消息流程" tabindex="-1"><a class="header-anchor" href="#_4-死信消息流程"><span>4. 死信消息流程</span></a></h2><p>一条消息过期时，就如下图所示，被转发到 DLX 交换器中</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231119109.png" alt="image-20220923202651510" tabindex="0" loading="lazy"><figcaption>image-20220923202651510</figcaption></figure><p>对于 RabbitMQ 来说， DLX 是非常有用的一个特性。还可以配合 TTL 实现延迟队列的功能。下一节讲解</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://zq99299.github.io/mq-tutorial/rabbitmq-ac/04/03.html" target="_blank" rel="noopener noreferrer">死信队列</a></p>`,22)]))}const p=a(l,[["render",r],["__file","rabbitmq-x-dead-letter.html.vue"]]),B=JSON.parse('{"path":"/posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-dead-letter.html","title":"RabbitMQ进阶 - 死信队列DLX","lang":"zh-CN","frontmatter":{"aliases":"RabbitMQ进阶 - 死信队列DLX","tags":null,"cssclass":null,"source":null,"order":50,"category":["RabbitMQ","MQ"],"created":"2024-02-22 10:50","updated":"2024-10-26 09:55","description":"RabbitMQ进阶 - 死信队列DLX 1. 简介 Dead Letter Exchange 简称 DLX，可称为死信交换器，当消息在一个 队列中变成死信（dead message）之后，它能被重新发送到另一个交换器中，这个交换器就是 DLX，绑定在 DLX 上的队列就称为 死信队列。 消息变成死信一般有以下几种情况： 消息被拒绝，并设置 reque...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-dead-letter.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"RabbitMQ进阶 - 死信队列DLX"}],["meta",{"property":"og:description","content":"RabbitMQ进阶 - 死信队列DLX 1. 简介 Dead Letter Exchange 简称 DLX，可称为死信交换器，当消息在一个 队列中变成死信（dead message）之后，它能被重新发送到另一个交换器中，这个交换器就是 DLX，绑定在 DLX 上的队列就称为 死信队列。 消息变成死信一般有以下几种情况： 消息被拒绝，并设置 reque..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231119064.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ进阶 - 死信队列DLX\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231119064.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231119109.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 为什么需要死信队列","slug":"_2-为什么需要死信队列","link":"#_2-为什么需要死信队列","children":[]},{"level":2,"title":"3. 如何设置","slug":"_3-如何设置","link":"#_3-如何设置","children":[]},{"level":2,"title":"4. 死信消息流程","slug":"_4-死信消息流程","link":"#_4-死信消息流程","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":654},"filePathRelative":"posts/MiddleWare/MQ_Rabbitmq/rabbitmq-x-dead-letter.md","localizedDate":"2024年10月28日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>Dead Letter Exchange 简称 DLX，可称为死信交换器，当消息在一个 <strong>队列中变成死信（dead message）<strong>之后，它能</strong>被重新发送到另一个交换器中</strong>，这个交换器就是 <strong>DLX</strong>，绑定在 DLX 上的队列就称为 <strong>死信队列</strong>。</p>\\n<p>消息变成死信一般有以下几种情况：</p>\\n<ul>\\n<li>\\n<p>消息被拒绝，并设置 requeue 参数为 false</p>\\n<p><code>Basic.Reject 或 Basic.Nack</code></p>\\n</li>\\n<li>\\n<p>消息过期</p>\\n</li>\\n<li>\\n<p>队列达到最大长度</p>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,B as data};
