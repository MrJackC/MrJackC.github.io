import{_ as i,c as t,a as l,o as n}from"./app-JRvFIbSa.js";const s={};function a(r,e){return n(),t("div",null,e[0]||(e[0]=[l('<h1 id="计算机网络常见知识点" tabindex="-1"><a class="header-anchor" href="#计算机网络常见知识点"><span>计算机网络常见知识点</span></a></h1><h2 id="_1-osi-与-tcp-ip-各层的结构与功能-都有哪些协议" tabindex="-1"><a class="header-anchor" href="#_1-osi-与-tcp-ip-各层的结构与功能-都有哪些协议"><span>1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议</span></a></h2><p>我们一般采用比较折中的办法，就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004193.png" alt="image-20191015223448393" tabindex="0" loading="lazy"><figcaption>image-20191015223448393</figcaption></figure><p>我们自上而下的介绍一下各层的作用</p><h3 id="_1-1-应用层" tabindex="-1"><a class="header-anchor" href="#_1-1-应用层"><span>1.1 应用层</span></a></h3><p>应用层（application-layer）的任务是通过应用<strong>进程间的交互</strong>来完成特定的网络应用</p><p>主要协议包括</p><ul><li>域名系统DNS</li><li>HTTP协议</li><li>电子邮件的SMTP协议</li></ul><h3 id="_1-2-运输层" tabindex="-1"><a class="header-anchor" href="#_1-2-运输层"><span>1.2 运输层</span></a></h3><p>运输层（transport layer）的主要任务就是负责<strong>向两台主机进程</strong>之间的通信提供通用的数据传输服务</p><p>传输层的主要协议：</p><ul><li><p><strong>传输控制协议TCP</strong>（Transmission Control Protocol）</p><p>提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</p></li><li><p><strong>用户数据协议 UDP</strong>（User Datagram Protocol）</p><p>提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</p></li></ul><h3 id="_1-3-网络层" tabindex="-1"><a class="header-anchor" href="#_1-3-网络层"><span>1.3 网络层</span></a></h3><p>在计算机网络中进行通信的两个计算机之间<strong>可能会经过很多个数据链路</strong>，也可能还要经过很多通信子网，网络层的任务就是<strong>选择合适的网间路由和交换结点，确保数据及时传送</strong>。</p><p>在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 <strong>IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称 <strong>数据报</strong>。</p><h3 id="_1-4-数据链路层" tabindex="-1"><a class="header-anchor" href="#_1-4-数据链路层"><span>1.4 数据链路层</span></a></h3><p><strong>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</strong> 在两个相邻节点之间传送数据时，<strong>数据链路层将网络层交下来的 IP 数据报组装成帧</strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p><h3 id="_1-5-物理层" tabindex="-1"><a class="header-anchor" href="#_1-5-物理层"><span>1.5 物理层</span></a></h3><p>在物理层上所传送的数据单位是比特。 <strong>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</strong></p><h2 id="_2-tcp-三次握手和四次挥手-常问" tabindex="-1"><a class="header-anchor" href="#_2-tcp-三次握手和四次挥手-常问"><span>2. TCP 三次握手和四次挥手（常问）</span></a></h2><p>为了准确无误的把数据送达目标处，TCP协议采用了三次握手策略</p><h3 id="_2-1-tcp-三次握手漫画图解" tabindex="-1"><a class="header-anchor" href="#_2-1-tcp-三次握手漫画图解"><span>2.1 TCP 三次握手漫画图解</span></a></h3><p>如下图所示，下面的两个机器人通过3次握手确定了对方能正确接收和发送消息</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004232.png" alt="image-20191015230322763" tabindex="0" loading="lazy"><figcaption>image-20191015230322763</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004254.png" alt="image-20191015230337899" tabindex="0" loading="lazy"><figcaption>image-20191015230337899</figcaption></figure><p>简单示意图：</p><ul><li>客户端：发送带有SYN 标志的数据包 一次握手-服务端</li><li>服务端- 发送带有SYN/ACK 标志的数据包— 二次握手— 客户端</li><li>客户端— 发送带有ACK 标志的数据包 三次握手 服务端</li></ul><h3 id="_2-2-为什么要三次握手" tabindex="-1"><a class="header-anchor" href="#_2-2-为什么要三次握手"><span>2.2 为什么要三次握手</span></a></h3><p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据发送与接收，而三次握手最主要的目的就是<strong>双方确认与对方的发送和接收是正常的</strong></p><ul><li>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</li><li>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</li><li>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</li></ul><p>所以三次握手就能确认双发收发功能都正常，缺一不可。</p><h3 id="_2-3-第二次握手为什么要回传syn和ack" tabindex="-1"><a class="header-anchor" href="#_2-3-第二次握手为什么要回传syn和ack"><span>2.3 第二次握手为什么要回传SYN和ACK?</span></a></h3><ul><li><p>回传SYN</p><p><strong>发送端</strong>确认自己<strong>发送能力</strong>没有问题</p></li><li><p>回传ACK</p><p><strong>接收端</strong>还不知道自己<strong>发送能力</strong>有没有问题，需要通过ACK来确认</p></li></ul><h2 id="_3-tcp-四次挥手-常问" tabindex="-1"><a class="header-anchor" href="#_3-tcp-四次挥手-常问"><span>3. TCP 四次挥手（常问）</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004277.png" alt="image-20191015233743517" tabindex="0" loading="lazy"><figcaption>image-20191015233743517</figcaption></figure><p>断开一个TCP 连接则需要”四次挥手“</p><ul><li>客户端-发送一个FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN 一样，一个FIN 将占用一个序号</li><li>服务器-<strong>关闭与客户端连接</strong>，发送送一个FIN 给客户端</li><li>客户端- 发送ACK 报文确认，并将确认序号设置为收到序号加1</li></ul><h3 id="_3-1-为什么要四次挥手" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么要四次挥手"><span>3.1 为什么要四次挥手</span></a></h3><p><strong>任何一方都可以在数据传送结束后发出发出释放通知</strong>，待对方确认后<strong>进入半关闭状态</strong>，当另一方也没有数据在发送的时候，则发送链接释放通知。<strong>对方确认后就完全关闭了TCP 链接</strong></p><blockquote><p>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p></blockquote><h2 id="_4-tcp-udp-协议的区别" tabindex="-1"><a class="header-anchor" href="#_4-tcp-udp-协议的区别"><span>4. TCP,UDP 协议的区别</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004299.png" alt="image-20191016001102137" tabindex="0" loading="lazy"><figcaption>image-20191016001102137</figcaption></figure><ul><li><strong>UDP 在传送数据之前不需要建立连接，远地主机在收到UDP 报文后，不需要给出任何确认</strong><ul><li>QQ语言</li><li>QQ视频</li><li>直播等</li></ul></li><li><strong>TCP提供面向连接的服务。在传送数据之前必须建立连接，数据传送结束后释放连接</strong>。 <ul><li>文件传输</li><li>发送和接收邮件</li><li>远程登录</li></ul></li></ul><h2 id="_5-tcp-协议如何保证可靠传输" tabindex="-1"><a class="header-anchor" href="#_5-tcp-协议如何保证可靠传输"><span>5. TCP 协议如何保证可靠传输</span></a></h2><ol><li><p><strong>确认和重传</strong>：接收方收到报文就会确认，发送方发送一段时间后没有收到确认就重传。</p></li><li><p><strong>数据校验</strong>：TCP报文头有校验和，用于校验报文是否损坏</p></li><li><p><strong>数据合理分片和排序</strong>：</p><ul><li>tcp会按MTU合理分片，接收方会缓存未按序到达的数据，重新排序后再交给应用层</li><li>UDP：IP数据报大于1500字节,大于MTU.这个时候发送方IP层就需要分片(fragmentation).把数据报分成若干片,使每一片都小于MTU.而接收方IP层则需要进行数据报的重组.这样就会多做许多事情,而更严重的是,由于UDP的特性,当某一片数据传送中丢失时,接收方便无法重组数据报.将导致丢弃整个UDP数据报.</li></ul></li><li><p><strong>流量控制</strong>：当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。（TCP 利用滑动窗口实现流量控制）</p></li><li><p><strong>拥塞控制</strong>：当网络拥塞时，减少数据的发送。</p></li></ol><h2 id="_6-在浏览器中输入url-地址-显示主页的过程-常问" tabindex="-1"><a class="header-anchor" href="#_6-在浏览器中输入url-地址-显示主页的过程-常问"><span>6. 在浏览器中输入url 地址&gt;&gt;显示主页的过程（常问）</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004320.png" alt="image-20191016225433454" tabindex="0" loading="lazy"><figcaption>image-20191016225433454</figcaption></figure><p>总体来说分为以下几个过程</p><ol><li>DNS 解析</li><li>TCP 连接</li><li>发送HTTP 请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h2 id="_7-状态码" tabindex="-1"><a class="header-anchor" href="#_7-状态码"><span>7. 状态码</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004342.png" alt="image-20191016225830440" tabindex="0" loading="lazy"><figcaption>image-20191016225830440</figcaption></figure><h2 id="_8-各种协议与http协议之间的关系" tabindex="-1"><a class="header-anchor" href="#_8-各种协议与http协议之间的关系"><span>8. 各种协议与HTTP协议之间的关系</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004367.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_9-http-长连接、短连接" tabindex="-1"><a class="header-anchor" href="#_9-http-长连接、短连接"><span>9. HTTP 长连接、短连接</span></a></h2><ul><li><p><strong>在HTTP1.0中默认使用短连接</strong></p><p>也就是客户端和服务器每进行一次HTTP操作，就建立一次连接，<strong>任务结束就中断连接</strong>。当客户端浏览器访问的某个HTML 或其他类型的Web页中包含有其他web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p></li><li><p><strong>从HTTP/1.1起默认使用长连接</strong></p><p>http1.1 默认使用长连接，用以保持连接特性，使用长连接的HTTP协议，会在响应体加入这行代码</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Connection:keep-alive</span></span></code></pre></div><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的<strong>TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接</strong>。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p></li></ul><p><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong></p><h2 id="_10-http-是不保存状态协议-如何保存用户状态" tabindex="-1"><a class="header-anchor" href="#_10-http-是不保存状态协议-如何保存用户状态"><span>10. HTTP 是不保存状态协议，如何保存用户状态</span></a></h2><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？</p><ul><li>Session机制 <ul><li>session 的主要作用就是通过服务端记录用户的状态</li><li>典型的应用场景就是购物车，当你要添加商品到购物车时，系统不知道是哪个用户操作的，因为HTTP协议是无状态的。服务器给特定的用户创建特定的session之后就可以标识这个用户并且跟踪这个用户</li><li>一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个Session</li></ul></li></ul><h3 id="_10-1-服务端如何保存session" tabindex="-1"><a class="header-anchor" href="#_10-1-服务端如何保存session"><span>10.1 服务端如何保存session</span></a></h3><p>保存的方式有很多，最常用的就是内存和数据库（比如内存数据库redis）</p><h3 id="_10-2-如何实现session跟踪" tabindex="-1"><a class="header-anchor" href="#_10-2-如何实现session跟踪"><span>10.2 如何实现session跟踪</span></a></h3><p>session保存在服务端，那么如何实现session跟踪呢？</p><p>大部分情况下，我们都是通过cookie中附加一个 Session ID来跟踪</p><h3 id="_10-3-如果cookie-被禁用如何跟踪" tabindex="-1"><a class="header-anchor" href="#_10-3-如果cookie-被禁用如何跟踪"><span>10.3 如果cookie 被禁用如何跟踪</span></a></h3><p>最常用的就是利用URL 重写吧Session ID 直接附加到URL 路径后面</p><h2 id="_11-cookie-的作用是什么-和session-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-cookie-的作用是什么-和session-有什么区别"><span>11. Cookie 的作用是什么？和Session 有什么区别？</span></a></h2><p>Cookie 和 Session 都是用来<strong>跟踪浏览器用户身份的会话方式</strong>（会话跟踪的方式）</p><p>因为Cookie数据保存在客户端（浏览器端），Session数据保存在服务端。所以造成他们的使用场景不同，安全性不同</p><ul><li>Cookie的应用场景 <ul><li>记住用户名</li><li>历史记录</li></ul></li><li>Session 的应用场景 <ul><li>购物车</li></ul></li></ul><h2 id="_12-http-1-0-和http-1-1-的主要区别" tabindex="-1"><a class="header-anchor" href="#_12-http-1-0-和http-1-1-的主要区别"><span>12. HTTP 1.0 和HTTP 1.1 的主要区别</span></a></h2><ol><li>长连接</li></ol><ul><li><strong>在HTTP/1.0中，默认使用的是短连接</strong>‘</li><li><strong>HTTP 1.1起，默认使用长连接</strong></li></ul><ol><li><strong>错误状态响应码</strong></li></ol><ul><li>在HTTP1.1中新增了24个错误状态响应码</li></ul><ol><li><strong>缓存处理</strong><ul><li>在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准</li><li>HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等<strong>更多可供选择的缓存头来控制缓存策略</strong>。</li></ul></li><li><strong>带宽优化及网络连接的使用</strong>（断点续传） <ul><li>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且<strong>不支持断点续传</strong>功能</li><li>HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li></ul></li></ol><h2 id="_13-uri-和url-的区别" tabindex="-1"><a class="header-anchor" href="#_13-uri-和url-的区别"><span>13. URI 和URL 的区别</span></a></h2><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Location) 是统一资源定位符，可以提供该资源的路径。<strong>它是一种具体的 URI</strong>，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><h2 id="_14-http-和-https-的区别" tabindex="-1"><a class="header-anchor" href="#_14-http-和-https-的区别"><span>14. HTTP 和 HTTPS 的区别？</span></a></h2><ol><li><p><strong>端口</strong>：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</p></li><li><p>安全性（传输内容明文）</p><p>HTTP 安全性没有 HTTPS高</p><ul><li>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。</li><li>HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密</li></ul></li><li><p>资源消耗上</p><p>HTTPS 比HTTP耗费更多服务器资源</p></li></ol>',81)]))}const p=i(s,[["render",a],["__file","cs-x-computer-network.html.vue"]]),c=JSON.parse('{"path":"/posts/Development-Tools/CS/cs-x-computer-network.html","title":"计算机网络常见知识点","lang":"zh-CN","frontmatter":{"aliases":"计算机网络常见知识点","tags":null,"cssclass":null,"source":null,"created":"2024-02-22 10:50","updated":"2024-05-30 16:22","description":"计算机网络常见知识点 1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议 我们一般采用比较折中的办法，就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 image-20191015223448393image-20191015223448393 我们自上而下的介绍一下各层的作用 1.1 应用层 应用层（applic...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Development-Tools/CS/cs-x-computer-network.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"计算机网络常见知识点"}],["meta",{"property":"og:description","content":"计算机网络常见知识点 1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议 我们一般采用比较折中的办法，就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 image-20191015223448393image-20191015223448393 我们自上而下的介绍一下各层的作用 1.1 应用层 应用层（applic..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004193.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络常见知识点\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004193.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004232.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004254.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004277.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004299.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004320.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004342.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004367.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议","slug":"_1-osi-与-tcp-ip-各层的结构与功能-都有哪些协议","link":"#_1-osi-与-tcp-ip-各层的结构与功能-都有哪些协议","children":[{"level":3,"title":"1.1 应用层","slug":"_1-1-应用层","link":"#_1-1-应用层","children":[]},{"level":3,"title":"1.2 运输层","slug":"_1-2-运输层","link":"#_1-2-运输层","children":[]},{"level":3,"title":"1.3 网络层","slug":"_1-3-网络层","link":"#_1-3-网络层","children":[]},{"level":3,"title":"1.4 数据链路层","slug":"_1-4-数据链路层","link":"#_1-4-数据链路层","children":[]},{"level":3,"title":"1.5 物理层","slug":"_1-5-物理层","link":"#_1-5-物理层","children":[]}]},{"level":2,"title":"2. TCP 三次握手和四次挥手（常问）","slug":"_2-tcp-三次握手和四次挥手-常问","link":"#_2-tcp-三次握手和四次挥手-常问","children":[{"level":3,"title":"2.1 TCP 三次握手漫画图解","slug":"_2-1-tcp-三次握手漫画图解","link":"#_2-1-tcp-三次握手漫画图解","children":[]},{"level":3,"title":"2.2 为什么要三次握手","slug":"_2-2-为什么要三次握手","link":"#_2-2-为什么要三次握手","children":[]},{"level":3,"title":"2.3 第二次握手为什么要回传SYN和ACK?","slug":"_2-3-第二次握手为什么要回传syn和ack","link":"#_2-3-第二次握手为什么要回传syn和ack","children":[]}]},{"level":2,"title":"3. TCP 四次挥手（常问）","slug":"_3-tcp-四次挥手-常问","link":"#_3-tcp-四次挥手-常问","children":[{"level":3,"title":"3.1 为什么要四次挥手","slug":"_3-1-为什么要四次挥手","link":"#_3-1-为什么要四次挥手","children":[]}]},{"level":2,"title":"4. TCP,UDP 协议的区别","slug":"_4-tcp-udp-协议的区别","link":"#_4-tcp-udp-协议的区别","children":[]},{"level":2,"title":"5. TCP 协议如何保证可靠传输","slug":"_5-tcp-协议如何保证可靠传输","link":"#_5-tcp-协议如何保证可靠传输","children":[]},{"level":2,"title":"6. 在浏览器中输入url 地址>>显示主页的过程（常问）","slug":"_6-在浏览器中输入url-地址-显示主页的过程-常问","link":"#_6-在浏览器中输入url-地址-显示主页的过程-常问","children":[]},{"level":2,"title":"7. 状态码","slug":"_7-状态码","link":"#_7-状态码","children":[]},{"level":2,"title":"8. 各种协议与HTTP协议之间的关系","slug":"_8-各种协议与http协议之间的关系","link":"#_8-各种协议与http协议之间的关系","children":[]},{"level":2,"title":"9. HTTP 长连接、短连接","slug":"_9-http-长连接、短连接","link":"#_9-http-长连接、短连接","children":[]},{"level":2,"title":"10. HTTP 是不保存状态协议，如何保存用户状态","slug":"_10-http-是不保存状态协议-如何保存用户状态","link":"#_10-http-是不保存状态协议-如何保存用户状态","children":[{"level":3,"title":"10.1 服务端如何保存session","slug":"_10-1-服务端如何保存session","link":"#_10-1-服务端如何保存session","children":[]},{"level":3,"title":"10.2 如何实现session跟踪","slug":"_10-2-如何实现session跟踪","link":"#_10-2-如何实现session跟踪","children":[]},{"level":3,"title":"10.3 如果cookie 被禁用如何跟踪","slug":"_10-3-如果cookie-被禁用如何跟踪","link":"#_10-3-如果cookie-被禁用如何跟踪","children":[]}]},{"level":2,"title":"11. Cookie 的作用是什么？和Session 有什么区别？","slug":"_11-cookie-的作用是什么-和session-有什么区别","link":"#_11-cookie-的作用是什么-和session-有什么区别","children":[]},{"level":2,"title":"12. HTTP 1.0 和HTTP 1.1 的主要区别","slug":"_12-http-1-0-和http-1-1-的主要区别","link":"#_12-http-1-0-和http-1-1-的主要区别","children":[]},{"level":2,"title":"13. URI 和URL 的区别","slug":"_13-uri-和url-的区别","link":"#_13-uri-和url-的区别","children":[]},{"level":2,"title":"14. HTTP 和 HTTPS 的区别？","slug":"_14-http-和-https-的区别","link":"#_14-http-和-https-的区别","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":10.63,"words":3188},"filePathRelative":"posts/Development-Tools/CS/cs-x-computer-network.md","localizedDate":"2024年10月28日","excerpt":"\\n<h2>1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议</h2>\\n<p>我们一般采用比较折中的办法，就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231004193.png\\" alt=\\"image-20191015223448393\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20191015223448393</figcaption></figure>","autoDesc":true}');export{p as comp,c as data};
