import{_ as e,c as s,a as i,o as n}from"./app-tJW29Kmg.js";const r={};function t(p,a){return n(),s("div",null,a[0]||(a[0]=[i(`<h1 id="持续集成与容器管理" tabindex="-1"><a class="header-anchor" href="#持续集成与容器管理"><span>持续集成与容器管理</span></a></h1><p>学习目标：</p><ul><li>掌握DockerMaven插件的使用</li><li>掌握持续集成工具Jenkins的安装与使用</li><li>掌握容器管理工具Rancher的安装与使用</li><li>掌握时间序列数据库influxDB的安装与使用</li><li>掌握容器监控工具cAdvisor的安装与使用</li><li>掌握图表工具Grafana的使用</li></ul><h1 id="_1-dockermaven插件" tabindex="-1"><a class="header-anchor" href="#_1-dockermaven插件"><span>1 DockerMaven插件</span></a></h1><p>微服务部署有两种方法：</p><p>（1）手动部署：首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</p><p>（2）通过Maven插件自动部署。</p><p>对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这里学习如何自动部署，这也是企业实际开发中经常使用的方法。</p><p>Maven插件自动部署步骤：</p><p>（1）修改宿主机的docker配置，让其可以远程访问</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>vi /lib/systemd/system/docker.service</span></span></code></pre></div><p>其中ExecStart=后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p><p>修改后如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613013.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）刷新配置，重启服务</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>systemctl daemon-reload</span></span>
<span class="line"><span>systemctl restart docker</span></span>
<span class="line"><span>docker start registry</span></span></code></pre></div><p>（3）在工程pom.xml 增加配置</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">finalName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;app&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">finalName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugins</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;com.spotify&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;docker-maven-plugin&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;0.4.13&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">configuration</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">               &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/assetsName&gt;192.168.184.141:5000/\${project.artifactId}:\${project.version}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/assetsName&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">base.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/assets&gt;jdk1.8&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">base.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">/assets&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">entryPoint</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/\${project.build.finalName}.jar&quot;]&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">entryPoint</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">resources</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">resource</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">targetPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;/&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">targetPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">directory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;\${project.build.directory}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">directory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">include</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;\${project.build.finalName}.jar&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">include</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">resource</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">resources</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dockerHost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;http://192.168.184.141:2375&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">dockerHost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">configuration</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">plugins</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置会自动生成Dockerfile</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>FROM jdk1.8</span></span>
<span class="line"><span>ADD app.jar /</span></span>
<span class="line"><span>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span></span></code></pre></div><p>（5）在windows的命令提示符下，进入工程tensquare_parent所在的目录</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mvn install</span></span></code></pre></div><p>进入tensquare_base 所在的目录，输入以下命令，进行打包和上传镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mvn docker:build  -Dpush./assets</span></span></code></pre></div><p>执行后，会有如下输出，代码正在上传</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613395.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）进入宿主机 , 查看镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker ./assetss</span></span></code></pre></div><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>REPOSITORY                              TAG                 ./assets ID            CREATED             SIZE</span></span>
<span class="line"><span>192.168.184.135:5000/tensquare_base   1.0-SNAPSHOT        83efa6b4478c        10 minutes ago      687.9 MB</span></span>
<span class="line"><span>192.168.184.135:5000/jdk1.8             latest              507438a0158f        6 hours ago         584 MB</span></span>
<span class="line"><span>jdk1.8                                  latest              507438a0158f        6 hours ago         584 MB</span></span></code></pre></div><p>输出如上内容，表示微服务已经做成镜像</p><p>浏览器访问 <a href="http://192.168.184.141:5000/v2/_catalog" target="_blank" rel="noopener noreferrer">http://192.168.184.141:5000/v2/_catalog</a> ，输出</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>{&quot;repositories&quot;:[&quot;tensquare_base&quot;]}</span></span></code></pre></div><p>浏览器访问 <a href="http://192.168.184.141:5000/v2/_catalog" target="_blank" rel="noopener noreferrer">http://192.168.184.141:5000/v2/_catalog</a> ，输出</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>{&quot;repositories&quot;:[&quot;tensquare_base&quot;]}</span></span></code></pre></div><p>（7） 启动容器：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di --name=base -p 9001:9001 192.168.184.141:5000/tensquare_base:1.0-SNAPSHOT</span></span></code></pre></div><h1 id="_2-持续集成工具-jenkins" tabindex="-1"><a class="header-anchor" href="#_2-持续集成工具-jenkins"><span>2 持续集成工具-Jenkins</span></a></h1><h2 id="_2-1-什么是持续集成" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是持续集成"><span>2.1 什么是持续集成</span></a></h2><p>​ 持续集成 Continuous integration ，简称CI</p><p>​ 随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p><p>​ 持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p><p>持续集成具有的特点：</p><ul><li>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li><li>需要有专门的集成服务器来执行集成构建；</li><li>需要有代码托管工具支持，我们下一小节将介绍Git以及可视化界面Gogs的使用</li></ul><p>持续集成的作用：</p><ul><li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li><li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li></ul><h2 id="_2-2-jenkins简介" tabindex="-1"><a class="header-anchor" href="#_2-2-jenkins简介"><span>2.2 Jenkins简介</span></a></h2><p>​ Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的软件工具。官方网站：<a href="http://jenkins-ci.org/" target="_blank" rel="noopener noreferrer">http://jenkins-ci.org/</a>。</p><p>​ Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p><p>​ 特点：</p><ul><li>易安装：仅仅一个 java -jar jenkins.war，从官网下载该文件后，直接运行，无需额外的安装，更无需安装数据库；</li><li>易配置：提供友好的GUI配置界面；</li><li>变更支持：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并输出到编译输出信息中；</li><li>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；</li><li>集成E-Mail/RSS/IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；</li><li>JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；</li><li>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；</li><li>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；</li><li>支持第三方插件：使得 Jenkins 变得越来越强大</li></ul><h2 id="_2-3-jenkins安装" tabindex="-1"><a class="header-anchor" href="#_2-3-jenkins安装"><span>2.3 Jenkins安装</span></a></h2><h3 id="_2-3-1-jdk安装" tabindex="-1"><a class="header-anchor" href="#_2-3-1-jdk安装"><span>2.3.1 JDK安装</span></a></h3><p>（1）将jdk-8u171-linux-x64.rpm上传至服务器（虚拟机）</p><p>（2）执行安装命令</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>rpm -ivh jdk-8u171-linux-x64.rpm</span></span></code></pre></div><p>RPM方式安装JDK，其根目录为：/usr/java/jdk1.8.0_171-amd64</p><h3 id="_2-3-2-jenkins安装与启动" tabindex="-1"><a class="header-anchor" href="#_2-3-2-jenkins安装与启动"><span>2.3.2 Jenkins安装与启动</span></a></h3><p>（1）下载jenkins</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>wget https://pkg.jenkins.io/redhat/jenkins-2.83-1.1.noarch.rpm</span></span></code></pre></div><p>或将jenkins-2.83-1.1.noarch.rpm上传至服务器</p><p>（2）安装jenkins</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>rpm -ivh jenkins-2.83-1.1.noarch.rpm</span></span></code></pre></div><p>（3）配置jenkins</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>vi /etc/sysconfig/jenkins</span></span></code></pre></div><p>修改用户和端口</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>JENKINS_USER=&quot;root&quot;</span></span>
<span class="line"><span>JENKINS_PORT=&quot;8888&quot;</span></span></code></pre></div><p>（4）启动服务</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>systemctl start jenkins</span></span></code></pre></div><p>（5）访问链接 <a href="http://192.168.184.135:8888" target="_blank" rel="noopener noreferrer">http://192.168.184.135:8888</a></p><p>从/var/lib/jenkins/secrets/initialAdminPassword中获取初始密码串</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613733.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）安装插件</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613461.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614510.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（7）新建用户</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613286.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完成安装进入主界面</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613840.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-4-jenkins插件安装" tabindex="-1"><a class="header-anchor" href="#_2-4-jenkins插件安装"><span>2.4 Jenkins插件安装</span></a></h2><p>我们以安装maven插件为例，演示插件的安装</p><p>（1）点击左侧的“系统管理”菜单 ,然后点击</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614282.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration ，点击“直接安装”按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614229.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看到如下图时，表示已经完成</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614206.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-5-全局工具配置" tabindex="-1"><a class="header-anchor" href="#_2-5-全局工具配置"><span>2.5 全局工具配置</span></a></h2><h3 id="_2-5-1-安装maven与本地仓库" tabindex="-1"><a class="header-anchor" href="#_2-5-1-安装maven与本地仓库"><span>2.5.1 安装Maven与本地仓库</span></a></h3><p>（1）将Maven压缩包上传至服务器（虚拟机）</p><p>（2）解压</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>tar zxvf apache-maven-3.5.4-bin.tar.gz</span></span></code></pre></div><p>（3）移动目录</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mv apache-maven-3.5.4 /usr/local/maven</span></span></code></pre></div><p>（4）编辑setting.xml配置文件<code>vi /usr/local/maven/conf/settings.xml </code>，配置本地仓库目录,内容如下</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;localRepository&gt;/usr/local/repository&lt;/localRepository&gt;</span></span></code></pre></div><p>（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到/usr/local/repository 。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>mv reponsitory_boot /usr/local/repository</span></span></code></pre></div><p>执行此步是为了以后在打包的时候不必重新下载，缩短打包的时间。</p><h3 id="_2-5-2-全局工具配置" tabindex="-1"><a class="header-anchor" href="#_2-5-2-全局工具配置"><span>2.5.2 全局工具配置</span></a></h3><p>选择系统管理，全局工具配置</p><p>（1）JDK配置</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614778.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置javahome为 /usr/java/jdk1.8.0_171-amd64</p><p>（2）Git配置 （本地已经安装了Git软件）</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614681.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）Maven配置</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614746.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-6-代码上传至git服务器" tabindex="-1"><a class="header-anchor" href="#_2-6-代码上传至git服务器"><span>2.6 代码上传至Git服务器</span></a></h2><h3 id="_2-6-1-gogs搭建与配置" tabindex="-1"><a class="header-anchor" href="#_2-6-1-gogs搭建与配置"><span>2.6.1 Gogs搭建与配置</span></a></h3><p>Gogs 是一款极易搭建的自助 Git 服务。</p><p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 <strong>所有平台</strong>，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p><p>地址：<a href="https://gitee.com/Unknown/gogs" target="_blank" rel="noopener noreferrer">https://gitee.com/Unknown/gogs</a></p><p>（1）下载镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker pull gogs/gogs</span></span></code></pre></div><p>（2）创建容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span></span></code></pre></div><p>（3）假设我的centos虚拟机IP为192.168.184.141 在地址栏输入<a href="http://192.168.184.141:3000" target="_blank" rel="noopener noreferrer">http://192.168.184.141:3000</a> 会进入首次运行安装程序页面，我们可以选择一种数据库作为gogs数据的存储，最简单的是选择SQLite3。如果对于规模较大的公司，可以选择MySQL</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615931.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615136.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击“立即安装”</p><p>这里的域名要设置为centos的IP地址,安装后显示主界面</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615423.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）注册</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615416.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）登录</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615863.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）创建仓库 <img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615002.png" alt="创建仓库" loading="lazy"></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615866.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-6-2-提交代码" tabindex="-1"><a class="header-anchor" href="#_2-6-2-提交代码"><span>2.6.2 提交代码</span></a></h3><p>步骤：</p><p>（1）在本地安装git(Windows版本)</p><p>（2）在IDEA中选择菜单 : File -- settings , 在窗口中选择Version Control -- Git</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616402.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）选择菜单VCS --&gt; Enable Version Control Integration...</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616002.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择Git</p><p>（4）设置远程地址: 右键点击工程选择菜单 Git --&gt; Repository --&gt;Remotes...</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616250.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616856.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）右键点击工程选择菜单 Git --&gt; Add</p><p>（6）右键点击工程选择菜单 Git --&gt; Commit Directory...</p><p>（7）右键点击工程选择菜单 Git --&gt; Repository --&gt; Push ...</p><h2 id="_2-7-任务的创建与执行" tabindex="-1"><a class="header-anchor" href="#_2-7-任务的创建与执行"><span>2.7 任务的创建与执行</span></a></h2><p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619339.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）源码管理，选择Git</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619397.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）Build</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619438.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>命令:</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>clean package docker:build -Dpush./assets</span></span></code></pre></div><p>用于清除、打包，构建docker镜像</p><p>最后点击“保存”按钮</p><p>（4）执行任务</p><h1 id="_3-容器管理工具rancher" tabindex="-1"><a class="header-anchor" href="#_3-容器管理工具rancher"><span>3 容器管理工具Rancher</span></a></h1><h2 id="_3-1-什么是rancher" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是rancher"><span>3.1 什么是Rancher</span></a></h2><p>​ Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应用部署和管理。</p><p>​ <a href="https://www.cnrancher.com/" target="_blank" rel="noopener noreferrer">https://www.cnrancher.com/</a></p><h2 id="_3-2-rancher安装" tabindex="-1"><a class="header-anchor" href="#_3-2-rancher安装"><span>3.2 Rancher安装</span></a></h2><p>（1）下载Rancher 镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker pull rancher/server</span></span></code></pre></div><p>（2）创建Rancher容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di --name=rancher -p 9090:8080 rancher/server</span></span></code></pre></div><p>（3）在浏览器输入地址： <a href="http://192.168.184.136:9090" target="_blank" rel="noopener noreferrer">http://192.168.184.136:9090</a> 即可看到高端大气的欢迎页</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619480.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击Got It 进入主界面</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）切换至中文界面</p><p>点击右下角的English 在弹出菜单中选择中文</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619570.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>切换后我们就可以看到亲切的中文界面啦~</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-3-rancher初始化" tabindex="-1"><a class="header-anchor" href="#_3-3-rancher初始化"><span>3.3 Rancher初始化</span></a></h2><h3 id="_3-3-1-添加环境" tabindex="-1"><a class="header-anchor" href="#_3-3-1-添加环境"><span>3.3.1 添加环境</span></a></h3><p>Rancher 支持将资源分组归属到多个<strong>环境</strong>。 每个环境具有自己独立的基础架构资源及服务，并由一个或多个用户、团队或组织所管理。</p><p>例如，您可以创建独立的“开发”、“测试”及“生产”环境以确保环境之间的安全隔离，将“开发”环境的访问权限赋予全部人员，但限制“生产”环境的访问权限给一个小的团队。</p><p>（1）选择“Default --&gt;环境管理” 菜单</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）填写名称，点击“创建”按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619678.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）按照上述步骤，添加十次方测试环境和生产环境</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619710.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）你可以通过点击logo右侧的菜单在各种环境下切换</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-2-添加主机" tabindex="-1"><a class="header-anchor" href="#_3-3-2-添加主机"><span>3.3.2 添加主机</span></a></h3><p>（1）选择基础架构--&gt;主机 菜单，点击添加主机</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619788.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）拷贝脚本</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619821.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）在服务器（虚拟机）上运行脚本</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619855.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）点击关闭按钮后，会看到界面中显示此主机。我们可以很方便地管理主机的每个容器的开启和关闭</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-3-添加应用" tabindex="-1"><a class="header-anchor" href="#_3-3-3-添加应用"><span>3.3.3 添加应用</span></a></h3><p>点击应用--&gt;全部(或用户) ，点击“添加应用”按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619929.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写名称和描述</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619962.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击“创建”按钮，列表中增加了新增的应用</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619998.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-4-应用部署" tabindex="-1"><a class="header-anchor" href="#_3-4-应用部署"><span>3.4 应用部署</span></a></h2><h3 id="_3-4-1-mysql部署" tabindex="-1"><a class="header-anchor" href="#_3-4-1-mysql部署"><span>3.4.1 MySQL部署</span></a></h3><p>镜像：centos/mysql-57-centos7 增加数据库服务</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619033.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：添加环境变量 MYSQL_ROOT_PASSWORD=123456</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击创建按钮，完成创建 上述操作相当于以下docker命令</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619100.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完成后服务列表中存在并且状态为激活 使用SQLyog测试链接，执行建表语句</p><h3 id="_3-4-2-rabbitmq部署" tabindex="-1"><a class="header-anchor" href="#_3-4-2-rabbitmq部署"><span>3.4.2 RabbitMQ部署</span></a></h3><p>镜像：rabbitmq:management 端口映射5671 5672 4369 15671 15672 25672</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>浏览器访问 <a href="http://192.168.184.136:15672/" target="_blank" rel="noopener noreferrer">http://192.168.184.136:15672/</a></p><h3 id="_3-4-3-redis部署" tabindex="-1"><a class="header-anchor" href="#_3-4-3-redis部署"><span>3.4.3 Redis部署</span></a></h3><p>进入应用，点击添加服务，名称redis ，镜像redis ，端口映射6379</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619168.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建后使用客户端测试链接</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>redis-cli -h 192.168.184.144</span></span></code></pre></div><p>测试成功</p><h3 id="_3-4-4-微服务部署" tabindex="-1"><a class="header-anchor" href="#_3-4-4-微服务部署"><span>3.4.4 微服务部署</span></a></h3><p>（1）搭建私有仓库</p><p>启动私有仓库容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di --name=registry -p 5000:5000 registry</span></span></code></pre></div><p>打开浏览器 输入地址<a href="http://192.168.184.144:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B%22repositories%22:%5B%5D%7D%60" target="_blank" rel="noopener noreferrer">http://192.168.184.144:5000/v2/_catalog看到\`{&quot;repositories&quot;:[]}\`</a> 表示私有仓库搭建成功并且内容为空</p><p>修改daemon.json</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>vi /etc/docker/daemon.json</span></span></code></pre></div><p>添加以下内容，保存退出。</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;insecure-registries&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:[</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;192.168.184.144:5000&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]}</span></span></code></pre></div><p>（2）修改docker配置，允许远程访问</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>vi /lib/systemd/system/docker.service</span></span></code></pre></div><p>其中ExecStart=后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p><p>修改后刷新配置，冲洗服务</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>systemctl daemon-reload</span></span>
<span class="line"><span>systemctl restart docker</span></span>
<span class="line"><span>docker start registry</span></span></code></pre></div><p>（3）修改微服务工程，添加DockerMaven插件</p><p>（4）连接mysql数据库，执行建库脚本</p><p>（5）添加服务base-service 镜像192.168.184.144:5000/tensquare_base:1.0-SNAPSHOT 端口映射9001</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619209.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）测试微服务 浏览器打开网址 <a href="http://192.168.184.144:9001/label" target="_blank" rel="noopener noreferrer">http://192.168.184.144:9001/label</a> 看是否可以看到标签列表</p><h2 id="_3-6-扩容与缩容" tabindex="-1"><a class="header-anchor" href="#_3-6-扩容与缩容"><span>3.6 扩容与缩容</span></a></h2><h3 id="_3-6-1-扩容" tabindex="-1"><a class="header-anchor" href="#_3-6-1-扩容"><span>3.6.1 扩容</span></a></h3><p>（1）在Rancher将创建的base-service（基础信息微服务）删除</p><p>（2）重新创建base-service ，不设置端口映射</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619245.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）在选择菜单API --&gt;WebHooks ，点击“添加接收器”按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619283.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）填写名称等信息，选择要扩容的服务，点击创建按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619324.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）接收器列表中新增了一条记录 ，点击触发地址将地址复制到剪切板</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619360.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）使用postman测试：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619400.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试后，发现容器由原来的1个变为了3个</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619453.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-6-2-缩容" tabindex="-1"><a class="header-anchor" href="#_3-6-2-缩容"><span>3.6.2 缩容</span></a></h3><p>刚才我们实现了扩容，那么如何减少容器数量呢？我们来试试如何缩容</p><p>（1）添加接收器 ,选择缩容，步长为1表示每次递减1个 ，点击创建按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619486.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）创建成功后，复制触发地址</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619528.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）使用postman测试</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619563.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="_4-influxdb" tabindex="-1"><a class="header-anchor" href="#_4-influxdb"><span>4 influxDB</span></a></h1><h2 id="_4-1-什么是influxdb" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是influxdb"><span>4.1 什么是influxDB</span></a></h2><p>​ influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，以便显示除实时信息之外的时序数据。</p><h2 id="_4-2-influxdb安装" tabindex="-1"><a class="header-anchor" href="#_4-2-influxdb安装"><span>4.2 influxDB安装</span></a></h2><p>（1）下载镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker pull tutum/influxdb</span></span></code></pre></div><p>（2）创建容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -di \\</span></span>
<span class="line"><span>   -p 8083:8083 \\</span></span>
<span class="line"><span>   -p 8086:8086 \\</span></span>
<span class="line"><span>   --expose 8090 \\</span></span>
<span class="line"><span>   --expose 8099 \\</span></span>
<span class="line"><span>   --name influxsrv \\</span></span>
<span class="line"><span>   tutum/influxdb</span></span></code></pre></div><p>端口概述： 8083端口:web访问端口 8086:数据写入端口</p><p>打开浏览器 <a href="http://192.168.184.144:8083" target="_blank" rel="noopener noreferrer">http://192.168.184.144:8083/</a></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619604.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-3-influxdb常用操作" tabindex="-1"><a class="header-anchor" href="#_4-3-influxdb常用操作"><span>4.3 influxDB常用操作</span></a></h2><h3 id="_4-3-1-创建数据库" tabindex="-1"><a class="header-anchor" href="#_4-3-1-创建数据库"><span>4.3.1 创建数据库</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE DATABASE &quot;cadvisor&quot;</span></span></code></pre></div><p>回车创建数据库</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>SHOW DATABASES</span></span></code></pre></div><p>查看数据库</p><h3 id="_4-3-2-创建用户并授权" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建用户并授权"><span>4.3.2 创建用户并授权</span></a></h3><p>创建用户</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>CREATE USER &quot;cadvisor&quot; WITH PASSWORD &#39;cadvisor&#39; WITH ALL PRIVILEGES</span></span></code></pre></div><p>查看用户</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>SHOW USRES</span></span></code></pre></div><p>用户授权</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>grant all privileges on cadvisor to cadvisor</span></span>
<span class="line"><span>grant WRITE on cadvisor to cadvisor</span></span>
<span class="line"><span>grant READ on cadvisor to cadvisor</span></span></code></pre></div><h3 id="_4-3-3-查看采集的数据" tabindex="-1"><a class="header-anchor" href="#_4-3-3-查看采集的数据"><span>4.3.3 查看采集的数据</span></a></h3><p>切换到cadvisor数据库，使用以下命令查看采集的数据</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>SHOW MEASUREMENTS</span></span></code></pre></div><p>现在我们还没有数据，如果想采集系统的数据，我们需要使用<strong>Cadvisor</strong>软件来实现</p><h1 id="_5-cadvisor" tabindex="-1"><a class="header-anchor" href="#_5-cadvisor"><span>5 cAdvisor</span></a></h1><h2 id="_5-1-什么是cadvisor" tabindex="-1"><a class="header-anchor" href="#_5-1-什么是cadvisor"><span>5.1 什么是cAdvisor</span></a></h2><p>​ Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker主机。更多详细操作和配置选项可以查看Github上的cAdvisor项目文档。</p><h2 id="_5-2-cadvisor安装" tabindex="-1"><a class="header-anchor" href="#_5-2-cadvisor安装"><span>5.2 cAdvisor安装</span></a></h2><p>（1）下载镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker pull google/cadvisor</span></span></code></pre></div><p>（2）创建容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --link influxsrv:influxsrv --name=cadvisor google/cadvisor -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086</span></span></code></pre></div><p>WEB前端访问地址</p><p><a href="http://192.168.184.144:8080/containers/" target="_blank" rel="noopener noreferrer">http://192.168.184.144:8080/containers/</a></p><p>性能指标含义参照如下地址</p><p><a href="https://blog.csdn.net/ZHANG_H_A/article/details/53097084" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/ZHANG_H_A/article/details/53097084</a></p><p>再次查看influxDB，发现已经有很多数据被采集进去了。</p><h1 id="_6-grafana" tabindex="-1"><a class="header-anchor" href="#_6-grafana"><span>6 Grafana</span></a></h1><h2 id="_6-1-什么是grafana" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是grafana"><span>6.1 什么是Grafana</span></a></h2><p>​ Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。<br> Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p><h2 id="_6-2-grafana安装" tabindex="-1"><a class="header-anchor" href="#_6-2-grafana安装"><span>6.2 Grafana安装</span></a></h2><p>（1）下载镜像</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker pull grafana/grafana</span></span></code></pre></div><p>（2）创建容器</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker run -d -p 3001:3000  -e INFLUXDB_HOST=influxsrv -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=cadvisor -e INFLUXDB_PASS=cadvisor --link influxsrv:influxsrv --name grafana grafana/grafana</span></span></code></pre></div><p>（3）访问</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>http://192.168.184.144:3001</span></span></code></pre></div><p>用户名密码均为admin</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619631.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）登录后提示你修改密码</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619682.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）之后进入主页面</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619728.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_6-3-grafana的使用" tabindex="-1"><a class="header-anchor" href="#_6-3-grafana的使用"><span>6.3 Grafana的使用</span></a></h2><h3 id="_6-3-1-添加数据源" tabindex="-1"><a class="header-anchor" href="#_6-3-1-添加数据源"><span>6.3.1 添加数据源</span></a></h3><p>（1）点击设置，DataSource</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619776.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）点击添加data source</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619826.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）为数据源起个名称，指定类型、地址、以及连接的数据库名、用户名和密码</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击保存。数据源建立成功</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-3-2-添加仪表盘" tabindex="-1"><a class="header-anchor" href="#_6-3-2-添加仪表盘"><span>6.3.2 添加仪表盘</span></a></h3><p>（1）选择Dashboards --Manager</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619982.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）点击“添加”按钮</p><p>（3）点击Graph 图标</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619027.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）出现下面图表的界面 ，点击Panel Title 选择Edit (编辑)</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619063.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）定义标题等基础信息</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619109.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（6）设置查询的信息为内存，指定容器名称</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619166.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（7）指定y轴的单位 为M</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619200.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（8）保存</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写名称</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619282.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-4-3-预警通知设置" tabindex="-1"><a class="header-anchor" href="#_6-4-3-预警通知设置"><span>6.4.3 预警通知设置</span></a></h3><p>（1）选择菜单 alerting--&gt; Notification channels</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619325.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）点击Add channel 按钮</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619370.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）填写名称，选择类型为webhook ,填写钩子地址</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619415.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个钩子地址是之前对base微服务扩容的地址</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619463.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（4）点击SendTest 测试 观察基础微服务是否增加容器</p><p>（5）点击save保存</p><p>（6）按照同样的方法添加缩容地址</p><h3 id="_6-4-4-仪表盘预警设置" tabindex="-1"><a class="header-anchor" href="#_6-4-4-仪表盘预警设置"><span>6.4.4 仪表盘预警设置</span></a></h3><p>（1）再次打开刚刚编辑的仪表盘</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619510.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）点击 Create Alert</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619542.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置预警线</p><p>（3）选择通知</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619590.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>保存更改</p>`,369)]))}const c=e(r,[["render",t],["__file","持续集成与容器管理.html.vue"]]),l=JSON.parse('{"path":"/posts/Docker/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86.html","title":"持续集成与容器管理","lang":"zh-CN","frontmatter":{"description":"持续集成与容器管理 学习目标： 掌握DockerMaven插件的使用 掌握持续集成工具Jenkins的安装与使用 掌握容器管理工具Rancher的安装与使用 掌握时间序列数据库influxDB的安装与使用 掌握容器监控工具cAdvisor的安装与使用 掌握图表工具Grafana的使用 1 DockerMaven插件 微服务部署有两种方法： （1）手动部...","head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Docker/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"持续集成与容器管理"}],["meta",{"property":"og:description","content":"持续集成与容器管理 学习目标： 掌握DockerMaven插件的使用 掌握持续集成工具Jenkins的安装与使用 掌握容器管理工具Rancher的安装与使用 掌握时间序列数据库influxDB的安装与使用 掌握容器监控工具cAdvisor的安装与使用 掌握图表工具Grafana的使用 1 DockerMaven插件 微服务部署有两种方法： （1）手动部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613013.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"持续集成与容器管理\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613013.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613395.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613733.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613461.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614510.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613286.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613840.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614282.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614229.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614206.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614778.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614681.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614746.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615931.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615136.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615423.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615416.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615863.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615002.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615866.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616402.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616002.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616250.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616856.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619339.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619397.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619438.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619480.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619518.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619570.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619608.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619639.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619678.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619710.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619749.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619788.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619821.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619855.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619890.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619929.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619962.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619998.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619033.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619066.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619100.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619131.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619168.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619209.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619245.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619283.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619324.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619360.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619400.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619453.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619486.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619528.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619563.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619604.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619631.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619682.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619728.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619776.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619826.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619873.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619928.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619982.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619027.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619063.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619109.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619166.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619200.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619241.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619282.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619325.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619370.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619415.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619463.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619510.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619542.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619590.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619632.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"2.1 什么是持续集成","slug":"_2-1-什么是持续集成","link":"#_2-1-什么是持续集成","children":[]},{"level":2,"title":"2.2 Jenkins简介","slug":"_2-2-jenkins简介","link":"#_2-2-jenkins简介","children":[]},{"level":2,"title":"2.3 Jenkins安装","slug":"_2-3-jenkins安装","link":"#_2-3-jenkins安装","children":[{"level":3,"title":"2.3.1 JDK安装","slug":"_2-3-1-jdk安装","link":"#_2-3-1-jdk安装","children":[]},{"level":3,"title":"2.3.2 Jenkins安装与启动","slug":"_2-3-2-jenkins安装与启动","link":"#_2-3-2-jenkins安装与启动","children":[]}]},{"level":2,"title":"2.4 Jenkins插件安装","slug":"_2-4-jenkins插件安装","link":"#_2-4-jenkins插件安装","children":[]},{"level":2,"title":"2.5 全局工具配置","slug":"_2-5-全局工具配置","link":"#_2-5-全局工具配置","children":[{"level":3,"title":"2.5.1 安装Maven与本地仓库","slug":"_2-5-1-安装maven与本地仓库","link":"#_2-5-1-安装maven与本地仓库","children":[]},{"level":3,"title":"2.5.2 全局工具配置","slug":"_2-5-2-全局工具配置","link":"#_2-5-2-全局工具配置","children":[]}]},{"level":2,"title":"2.6 代码上传至Git服务器","slug":"_2-6-代码上传至git服务器","link":"#_2-6-代码上传至git服务器","children":[{"level":3,"title":"2.6.1 Gogs搭建与配置","slug":"_2-6-1-gogs搭建与配置","link":"#_2-6-1-gogs搭建与配置","children":[]},{"level":3,"title":"2.6.2 提交代码","slug":"_2-6-2-提交代码","link":"#_2-6-2-提交代码","children":[]}]},{"level":2,"title":"2.7 任务的创建与执行","slug":"_2-7-任务的创建与执行","link":"#_2-7-任务的创建与执行","children":[]},{"level":2,"title":"3.1 什么是Rancher","slug":"_3-1-什么是rancher","link":"#_3-1-什么是rancher","children":[]},{"level":2,"title":"3.2 Rancher安装","slug":"_3-2-rancher安装","link":"#_3-2-rancher安装","children":[]},{"level":2,"title":"3.3 Rancher初始化","slug":"_3-3-rancher初始化","link":"#_3-3-rancher初始化","children":[{"level":3,"title":"3.3.1  添加环境","slug":"_3-3-1-添加环境","link":"#_3-3-1-添加环境","children":[]},{"level":3,"title":"3.3.2 添加主机","slug":"_3-3-2-添加主机","link":"#_3-3-2-添加主机","children":[]},{"level":3,"title":"3.3.3 添加应用","slug":"_3-3-3-添加应用","link":"#_3-3-3-添加应用","children":[]}]},{"level":2,"title":"3.4 应用部署","slug":"_3-4-应用部署","link":"#_3-4-应用部署","children":[{"level":3,"title":"3.4.1 MySQL部署","slug":"_3-4-1-mysql部署","link":"#_3-4-1-mysql部署","children":[]},{"level":3,"title":"3.4.2 RabbitMQ部署","slug":"_3-4-2-rabbitmq部署","link":"#_3-4-2-rabbitmq部署","children":[]},{"level":3,"title":"3.4.3 Redis部署","slug":"_3-4-3-redis部署","link":"#_3-4-3-redis部署","children":[]},{"level":3,"title":"3.4.4 微服务部署","slug":"_3-4-4-微服务部署","link":"#_3-4-4-微服务部署","children":[]}]},{"level":2,"title":"3.6 扩容与缩容","slug":"_3-6-扩容与缩容","link":"#_3-6-扩容与缩容","children":[{"level":3,"title":"3.6.1 扩容","slug":"_3-6-1-扩容","link":"#_3-6-1-扩容","children":[]},{"level":3,"title":"3.6.2 缩容","slug":"_3-6-2-缩容","link":"#_3-6-2-缩容","children":[]}]},{"level":2,"title":"4.1 什么是influxDB","slug":"_4-1-什么是influxdb","link":"#_4-1-什么是influxdb","children":[]},{"level":2,"title":"4.2 influxDB安装","slug":"_4-2-influxdb安装","link":"#_4-2-influxdb安装","children":[]},{"level":2,"title":"4.3 influxDB常用操作","slug":"_4-3-influxdb常用操作","link":"#_4-3-influxdb常用操作","children":[{"level":3,"title":"4.3.1 创建数据库","slug":"_4-3-1-创建数据库","link":"#_4-3-1-创建数据库","children":[]},{"level":3,"title":"4.3.2 创建用户并授权","slug":"_4-3-2-创建用户并授权","link":"#_4-3-2-创建用户并授权","children":[]},{"level":3,"title":"4.3.3 查看采集的数据","slug":"_4-3-3-查看采集的数据","link":"#_4-3-3-查看采集的数据","children":[]}]},{"level":2,"title":"5.1 什么是cAdvisor","slug":"_5-1-什么是cadvisor","link":"#_5-1-什么是cadvisor","children":[]},{"level":2,"title":"5.2 cAdvisor安装","slug":"_5-2-cadvisor安装","link":"#_5-2-cadvisor安装","children":[]},{"level":2,"title":"6.1 什么是Grafana","slug":"_6-1-什么是grafana","link":"#_6-1-什么是grafana","children":[]},{"level":2,"title":"6.2 Grafana安装","slug":"_6-2-grafana安装","link":"#_6-2-grafana安装","children":[]},{"level":2,"title":"6.3 Grafana的使用","slug":"_6-3-grafana的使用","link":"#_6-3-grafana的使用","children":[{"level":3,"title":"6.3.1 添加数据源","slug":"_6-3-1-添加数据源","link":"#_6-3-1-添加数据源","children":[]},{"level":3,"title":"6.3.2 添加仪表盘","slug":"_6-3-2-添加仪表盘","link":"#_6-3-2-添加仪表盘","children":[]},{"level":3,"title":"6.4.3 预警通知设置","slug":"_6-4-3-预警通知设置","link":"#_6-4-3-预警通知设置","children":[]},{"level":3,"title":"6.4.4 仪表盘预警设置","slug":"_6-4-4-仪表盘预警设置","link":"#_6-4-4-仪表盘预警设置","children":[]}]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":15.02,"words":4505},"filePathRelative":"posts/Docker/持续集成与容器管理.md","localizedDate":"2024年10月21日","excerpt":"\\n<p>学习目标：</p>\\n<ul>\\n<li>掌握DockerMaven插件的使用</li>\\n<li>掌握持续集成工具Jenkins的安装与使用</li>\\n<li>掌握容器管理工具Rancher的安装与使用</li>\\n<li>掌握时间序列数据库influxDB的安装与使用</li>\\n<li>掌握容器监控工具cAdvisor的安装与使用</li>\\n<li>掌握图表工具Grafana的使用</li>\\n</ul>\\n<h1>1 DockerMaven插件</h1>\\n<p>微服务部署有两种方法：</p>\\n<p>（1）手动部署：首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</p>","autoDesc":true}');export{c as comp,l as data};
