import{_ as a,c as n,a as i,o as l}from"./app-tJW29Kmg.js";const r={};function p(o,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="jstack等命令的实现原理" tabindex="-1"><a class="header-anchor" href="#jstack等命令的实现原理"><span>jstack等命令的实现原理</span></a></h1><h2 id="_1-实现原理" tabindex="-1"><a class="header-anchor" href="#_1-实现原理"><span>1. 实现原理</span></a></h2><ol><li>jstack等命令会与jvm进程建立socket连接</li><li>发送对应的指令（jstack发送了threaddump执行）</li><li>然后再读取返回的数据</li></ol><h2 id="_2-jstack使用场景" tabindex="-1"><a class="header-anchor" href="#_2-jstack使用场景"><span>2. jstack使用场景</span></a></h2><p>**场景：**Java应用持续占用很高CPU，需要排查一下</p><p>**模拟：**造个场景简单模拟下，没什么实际意义，仅作演示。我启动了100个线程持续访问 <a href="https://chenyongjun.vip/" target="_blank" rel="noopener noreferrer">我的博客</a>，博客部署在Ubuntu 16.04上，是一个简单的Spring Boot应用，以jar包直接运行的。</p><p><code>top</code> 命令查下系统运行情况，进程31951占用CPU 80.6%。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121202982.png" alt="image-20220326145102943" tabindex="0" loading="lazy"><figcaption>image-20220326145102943</figcaption></figure><p><code>jps -l</code> 确认一下，31951就是博客的进程ID，或 <code>cat /proc/31951/cmdline</code> 看下进程的启用命令。</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>root@iZ94dcq8q6jZ:~# jps -l</span></span>
<span class="line"><span>28416 sun.tools.jps.Jps</span></span>
<span class="line"><span>31951 blog.jar</span></span></code></pre></div><p><code>top -Hp 3379</code> 以线程模式查看下进程31951的所有线程情况</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121202028.png" alt="image-20220326145242586" tabindex="0" loading="lazy"><figcaption>image-20220326145242586</figcaption></figure><p>假设想看下第二个线程31998的情况，31998是操作系统的线程ID，先转成16进制。</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">printf</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;%x&#39;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 31998</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> #值为7</span><span style="color:#E06C75;--shiki-dark:#E06C75;">cfe</span></span></code></pre></div><p>获取该线程的信息(匹配7cf3后取20行差不多)</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">jstack</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 31951</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> |</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> grep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> 7</span><span style="color:#E06C75;--shiki-dark:#E06C75;">cfe</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">A</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 20</span></span></code></pre></div><p>其中部分数据如下：</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Tomcat JDBC Pool Cleaner[11483240:1532362388783]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> #</span><span style="color:#D19A66;--shiki-dark:#D19A66;">31</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> daemon</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> os_prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x0a29dc00</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> nid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x7cfe</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">wait</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0xa2a69000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">State</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">TIMED_WAITING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">on</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> object</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> monitor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    at</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">wait</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Native</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Method</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    at</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">util</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">TimerThread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">mainLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Timer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">552</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">    -</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> locked</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0xaadc5a60</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">a</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">util</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">TaskQueue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    at</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">util</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">TimerThread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Timer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">505</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>注意：nid=0x7cfe中的nid指native id，是OS中线程ID，对应上面31998线程的16进制值7cfe；tid为Java中线程的ID。</p><p>至于如何利用jstack的数据分析线程情况，可以看看 <a href="https://www.jianshu.com/p/6690f7e92f27" target="_blank" rel="noopener noreferrer">如何使用jstack分析线程状态</a> 和 <a href="http://www.tianshouzhi.com/api/tutorials/jvm/351" target="_blank" rel="noopener noreferrer">jstack</a>。</p><h2 id="_3-jstack实现原理" tabindex="-1"><a class="header-anchor" href="#_3-jstack实现原理"><span>3. jstack实现原理</span></a></h2><p>先以一段简单代码打印threaddump，和stack命令效果一样，下面的类基本来自 <strong>tools.jar</strong>。</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Test</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> jstack</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#E06C75;--shiki-dark:#E06C75;">throws</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Exception</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    RuntimeMXBean</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> runtimeMXBean</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ManagementFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getRuntimeMXBean</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> pid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> runtimeMXBean</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">split</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;@&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)[</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    VirtualMachine</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> virtualMachine</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> VirtualMachine</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">attach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">pid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    HotSpotVirtualMachine</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> hotSpotVirtualMachine</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">HotSpotVirtualMachine</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E06C75;--shiki-dark:#E06C75;">virtualMachine</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    InputStream</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> inputStream</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> hotSpotVirtualMachine</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">remoteDataDump</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[]{});</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> threadDump</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> IOUtils</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">toString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">inputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;utf8&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// IOUtils from commons-io</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">threadDump</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    virtualMachine</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">detach</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>打印的部分数据如下：</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">Full</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> thread</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> dump</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Java</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> HotSpot</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">TM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#D19A66;--shiki-dark:#D19A66;">64</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Bit</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> Server</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> VM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">25.101</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#E06C75;--shiki-dark:#E06C75;">b13</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> mixed</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> mode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Attach Listener&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> #</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> daemon</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">9</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> os_prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">31</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x00007f816293c800</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> nid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x5b0f</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> waiting</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> on</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> condition</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x0000000000000000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">State</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Service Thread&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> #</span><span style="color:#D19A66;--shiki-dark:#D19A66;">9</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> daemon</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">9</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> os_prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">31</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x00007f8162827000</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> nid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x5303</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> runnable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x0000000000000000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">State</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">&quot;C1 CompilerThread3&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> #</span><span style="color:#D19A66;--shiki-dark:#D19A66;">8</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> daemon</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">9</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> os_prio</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">31</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> tid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x00007f8164834800</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> nid</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x5103</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> waiting</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> on</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> condition</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0x0000000000000000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">   java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">lang</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">State</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">RUNNABLE</span></span></code></pre></div><p>核心的**hotSpotVirtualMachine.remoteDataDump()**代码：</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">public</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> InputStream</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> remoteDataDump</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">... </span><span style="color:#E06C75;--shiki-dark:#E06C75;">var1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E06C75;--shiki-dark:#E06C75;">throws</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">executeCommand</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;threaddump&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">var1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">private</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> InputStream</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> executeCommand</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> var1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">... </span><span style="color:#E06C75;--shiki-dark:#E06C75;">var2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E06C75;--shiki-dark:#E06C75;">throws</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">var1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">var2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">AgentLoadException</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> var4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        throw</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> InternalError</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Should not get here&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">var4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>很多命令都是通过 <strong>executeCommand</strong> 来实现的，例如：datadump、threaddump、dumpheap、inspectheap、jcmd等，而最终的execute()在Mac机器上是由 <a href="https://github.com/frohoff/jdk8u-jdk/blob/master/src/solaris/classes/sun/tools/attach/BsdVirtualMachine.java" target="_blank" rel="noopener noreferrer">BsdVirtualMachine</a> 类来完成。</p><p>为了便于阅读，源码我有较大删减，看看execute()中的原英文注释即可。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Execute the given command in the target VM.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">InputStream</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> cmd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ... </span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#E06C75;--shiki-dark:#E06C75;">throws</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AgentLoadException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // did we detach?</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    synchronized</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">path</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            throw</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> IOException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;Detached from target VM&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // create UNIX socket</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> s</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> socket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // connect to target VM</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    connect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    IOException</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ioe</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // connected - write request</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &lt;ver&gt; &lt;cmd&gt; &lt;args...&gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    writeString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PROTOCOL_VERSION</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    writeString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">cmd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">length</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            writeString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, (</span><span style="color:#E06C75;--shiki-dark:#E06C75;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#E06C75;--shiki-dark:#E06C75;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            writeString</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Create an input stream to read reply</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    SocketInputStream</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sis</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> SocketInputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Read the command completion status</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> completionStatus</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> readInt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">sis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Return the input stream so that the command output can be read</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> sis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码是最好的手册，通过代码可以知道：<strong>jstack等命令会与jvm进程建立socket连接，发送对应的指令(jstack发送了threaddump指令)，然后再读取返回的数据</strong>。</p>`,31)]))}const B=a(r,[["render",p],["__file","java-jvm-optimization-jstack.html.vue"]]),k=JSON.parse('{"path":"/posts/Java/JavaJVM/java-jvm-optimization-jstack.html","title":"jstack等命令的实现原理","lang":"zh-CN","frontmatter":{"aliases":"jstack等命令的实现原理","tags":null,"cssclass":null,"source":null,"created":"2024-02-22 10:47","updated":"2024-03-12 12:02","description":"jstack等命令的实现原理 1. 实现原理 jstack等命令会与jvm进程建立socket连接 发送对应的指令（jstack发送了threaddump执行） 然后再读取返回的数据 2. jstack使用场景 **场景：**Java应用持续占用很高CPU，需要排查一下 **模拟：**造个场景简单模拟下，没什么实际意义，仅作演示。我启动了100个线程持...","head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/JavaJVM/java-jvm-optimization-jstack.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"jstack等命令的实现原理"}],["meta",{"property":"og:description","content":"jstack等命令的实现原理 1. 实现原理 jstack等命令会与jvm进程建立socket连接 发送对应的指令（jstack发送了threaddump执行） 然后再读取返回的数据 2. jstack使用场景 **场景：**Java应用持续占用很高CPU，需要排查一下 **模拟：**造个场景简单模拟下，没什么实际意义，仅作演示。我启动了100个线程持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121202982.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jstack等命令的实现原理\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121202982.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121202028.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 实现原理","slug":"_1-实现原理","link":"#_1-实现原理","children":[]},{"level":2,"title":"2. jstack使用场景","slug":"_2-jstack使用场景","link":"#_2-jstack使用场景","children":[]},{"level":2,"title":"3. jstack实现原理","slug":"_3-jstack实现原理","link":"#_3-jstack实现原理","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.95,"words":884},"filePathRelative":"posts/Java/JavaJVM/java-jvm-optimization-jstack.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 实现原理</h2>\\n<ol>\\n<li>jstack等命令会与jvm进程建立socket连接</li>\\n<li>发送对应的指令（jstack发送了threaddump执行）</li>\\n<li>然后再读取返回的数据</li>\\n</ol>\\n<h2>2. jstack使用场景</h2>\\n<p>**场景：**Java应用持续占用很高CPU，需要排查一下</p>\\n<p>**模拟：**造个场景简单模拟下，没什么实际意义，仅作演示。我启动了100个线程持续访问 <a href=\\"https://chenyongjun.vip/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">我的博客</a>，博客部署在Ubuntu 16.04上，是一个简单的Spring Boot应用，以jar包直接运行的。</p>","autoDesc":true}');export{B as comp,k as data};
