import{_ as t,c as i,a as l,o as n}from"./app-tJW29Kmg.js";const a={};function r(o,e){return n(),i("div",null,e[0]||(e[0]=[l('<h1 id="微服务-看法与思考" tabindex="-1"><a class="header-anchor" href="#微服务-看法与思考"><span>微服务 - 看法与思考</span></a></h1><h2 id="_1-微服务" tabindex="-1"><a class="header-anchor" href="#_1-微服务"><span>1. 微服务</span></a></h2><h3 id="_1-1-为什么使用微服务" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么使用微服务"><span>1.1 为什么使用微服务</span></a></h3><ul><li>大型服务 <ul><li>单例服务如果流量大了就抗不住，微服务可以加机器搞流量</li><li>加机器的地方，最理想的就是：弹性伸缩，流量下去就缩容，流量上来就扩容，能最恰好的使用资源</li><li>传统的巨大单体应用程序在部署和运行时，需要单台服务器具有大量内存和其他资源</li></ul></li><li>规范化 <ul><li>规范化，大家用同一套框架规范，可以沉淀和深入技术，还可以培养技术氛围</li></ul></li><li>业务拆分 <ul><li>业务拆分，解耦业务，各司其职</li></ul></li></ul><blockquote><p>不过如果你是搞个小服务，内部服务，微服务还是太重，甚至 java 都重，可以用其它语言 python node 写几行代码就行</p></blockquote><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://segmentfault.com/a/1190000041223236" target="_blank" rel="noopener noreferrer">为什么要使用微服务</a></p>',7)]))}const c=t(a,[["render",r],["__file","ms-x-view.html.vue"]]),p=JSON.parse('{"path":"/posts/Architect/microservices/ms-x-view.html","title":"微服务 - 看法与思考","lang":"zh-CN","frontmatter":{"order":30,"category":["架构","微服务"],"description":"微服务 - 看法与思考 1. 微服务 1.1 为什么使用微服务 大型服务 单例服务如果流量大了就抗不住，微服务可以加机器搞流量 加机器的地方，最理想的就是：弹性伸缩，流量下去就缩容，流量上来就扩容，能最恰好的使用资源 传统的巨大单体应用程序在部署和运行时，需要单台服务器具有大量内存和其他资源 规范化 规范化，大家用同一套框架规范，可以沉淀和深入技术，还...","head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Architect/microservices/ms-x-view.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"微服务 - 看法与思考"}],["meta",{"property":"og:description","content":"微服务 - 看法与思考 1. 微服务 1.1 为什么使用微服务 大型服务 单例服务如果流量大了就抗不住，微服务可以加机器搞流量 加机器的地方，最理想的就是：弹性伸缩，流量下去就缩容，流量上来就扩容，能最恰好的使用资源 传统的巨大单体应用程序在部署和运行时，需要单台服务器具有大量内存和其他资源 规范化 规范化，大家用同一套框架规范，可以沉淀和深入技术，还..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务 - 看法与思考\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 微服务","slug":"_1-微服务","link":"#_1-微服务","children":[{"level":3,"title":"1.1 为什么使用微服务","slug":"_1-1-为什么使用微服务","link":"#_1-1-为什么使用微服务","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"posts/Architect/microservices/ms-x-view.md","localizedDate":"2024年10月28日","excerpt":"\\n<h2>1. 微服务</h2>\\n<h3>1.1 为什么使用微服务</h3>\\n<ul>\\n<li>大型服务\\n<ul>\\n<li>单例服务如果流量大了就抗不住，微服务可以加机器搞流量</li>\\n<li>加机器的地方，最理想的就是：弹性伸缩，流量下去就缩容，流量上来就扩容，能最恰好的使用资源</li>\\n<li>传统的巨大单体应用程序在部署和运行时，需要单台服务器具有大量内存和其他资源</li>\\n</ul>\\n</li>\\n<li>规范化\\n<ul>\\n<li>规范化，大家用同一套框架规范，可以沉淀和深入技术，还可以培养技术氛围</li>\\n</ul>\\n</li>\\n<li>业务拆分\\n<ul>\\n<li>业务拆分，解耦业务，各司其职</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,p as data};
