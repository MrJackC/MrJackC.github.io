import{_ as a,c as n,a as i,o as e}from"./app-CzniW49G.js";const l={};function r(o,s){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="docker-部署" tabindex="-1"><a class="header-anchor" href="#docker-部署"><span>Docker 部署</span></a></h1><p>本小节，讲解如何将前端 + 后端项目，<strong>使用 Docker 容器</strong>，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/01.png" alt="Docker 部署" tabindex="0" loading="lazy"><figcaption>Docker 部署</figcaption></figure><p>注意：服务器的 IP 地址。</p><ul><li>外网 IP：139.9.196.247</li><li>内网 IP：192.168.0.213</li></ul><p>下属所有涉及到 IP 的配置，需要替换成你自己的。</p><h2 id="_1-安装-docker" tabindex="-1"><a class="header-anchor" href="#_1-安装-docker"><span><a href="https://doc.iocoder.cn/deployment-docker/#_1-%E5%AE%89%E8%A3%85-docker" target="_blank" rel="noopener noreferrer">#</a>1. 安装 Docker</span></a></h2><p>执行如下命令，进行 Docker 的安装。</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## ① 使用 DaoCloud 的 Docker 高速安装脚本。参考 https://get.daocloud.io/#install-docker</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">curl</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -sSL</span><span style="color:#98C379;--shiki-dark:#98C379;"> https://get.daocloud.io/docker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## ② 设置 DaoCloud 的 Docker 镜像中心，加速镜像的下载速度。参考 https://www.daocloud.io/mirror</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">curl</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -sSL</span><span style="color:#98C379;--shiki-dark:#98C379;"> https://get.daocloud.io/daotools/set_mirror.sh</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sh</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -s</span><span style="color:#98C379;--shiki-dark:#98C379;"> http://f1361db2.m.daocloud.io</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## ③ 启动 Docker 服务</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">systemctl</span><span style="color:#98C379;--shiki-dark:#98C379;"> start</span><span style="color:#98C379;--shiki-dark:#98C379;"> docker</span></span></code></pre></div><h2 id="_2-配置-mysql" tabindex="-1"><a class="header-anchor" href="#_2-配置-mysql"><span><a href="https://doc.iocoder.cn/deployment-docker/#_2-%E9%85%8D%E7%BD%AE-mysql" target="_blank" rel="noopener noreferrer">#</a>2. 配置 MySQL</span></a></h2><h3 id="_2-1-安装-mysql-可选" tabindex="-1"><a class="header-anchor" href="#_2-1-安装-mysql-可选"><span><a href="https://doc.iocoder.cn/deployment-docker/#_2-1-%E5%AE%89%E8%A3%85-mysql-%E5%8F%AF%E9%80%89" target="_blank" rel="noopener noreferrer">#</a>2.1 安装 MySQL（可选）</span></a></h3><p>友情提示：使用 Docker 安装 MySQL 是可选步骤，也可以直接安装 MySQL，或者购买 MySQL 云服务。</p><p>① 执行如下命令，使用 Docker 启动 MySQL 容器。</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -v</span><span style="color:#98C379;--shiki-dark:#98C379;"> /work/mysql/:/var/lib/mysql</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-p </span><span style="color:#98C379;--shiki-dark:#98C379;">3306:3306</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -e</span><span style="color:#98C379;--shiki-dark:#98C379;"> MYSQL_ROOT_PASSWORD=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">123456</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--restart=always </span><span style="color:#D19A66;--shiki-dark:#D19A66;">--name</span><span style="color:#98C379;--shiki-dark:#98C379;"> mysql</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#98C379;--shiki-dark:#98C379;"> mysql</span></span></code></pre></div><ul><li>数据库文件，挂载到服务器的的 <code>/work/mysql/</code> 目录下</li><li>端口是 3306，密码是 123456</li></ul><p>② 执行 <code>ls /work/mysql</code> 命令，查看 <code>/work/mysql/</code> 目录的数据库文件。</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/03.png" alt="数据库文件" tabindex="0" loading="lazy"><figcaption>数据库文件</figcaption></figure><h3 id="_2-2-导入-sql-脚本" tabindex="-1"><a class="header-anchor" href="#_2-2-导入-sql-脚本"><span><a href="https://doc.iocoder.cn/deployment-docker/#_2-2-%E5%AF%BC%E5%85%A5-sql-%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener noreferrer">#</a>2.2 导入 SQL 脚本</span></a></h3><p>创建一个名字为 <code>ruoyi-vue-pro</code> 数据库，执行数据库对应的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/tree/master/sql" target="_blank" rel="noopener noreferrer"><code>sql</code> (opens new window)</a>目录下的 SQL 文件，进行初始化。</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/02.png" alt="使用 Navicat 导入 SQL 脚本" tabindex="0" loading="lazy"><figcaption>使用 Navicat 导入 SQL 脚本</figcaption></figure><h2 id="_3-配置-redis" tabindex="-1"><a class="header-anchor" href="#_3-配置-redis"><span><a href="https://doc.iocoder.cn/deployment-docker/#_3-%E9%85%8D%E7%BD%AE-redis" target="_blank" rel="noopener noreferrer">#</a>3. 配置 Redis</span></a></h2><p>友情提示：使用 Docker 安装 Redis 是可选步骤，也可以直接安装 Redis，或者购买 Redis 云服务。</p><p>执行如下命令，使用 Docker 启动 Redis 容器。</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --name</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --restart=always</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> 6379:6379</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis:5.0.14-alpine</span></span></code></pre></div><ul><li>端口是 6379，密码未设置</li></ul><h2 id="_4-部署后端" tabindex="-1"><a class="header-anchor" href="#_4-部署后端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-%E9%83%A8%E7%BD%B2%E5%90%8E%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>4. 部署后端</span></a></h2><h3 id="_4-1-修改配置" tabindex="-1"><a class="header-anchor" href="#_4-1-修改配置"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-1-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>4.1 修改配置</span></a></h3><p>后端 dev 开发环境对应的是 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-dev.yaml" target="_blank" rel="noopener noreferrer"><code>application-dev.yaml</code> (opens new window)</a>配置文件，主要是修改 MySQL 和 Redis 为你的地址。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/03.png" alt=" 配置文件" tabindex="0" loading="lazy"><figcaption> 配置文件</figcaption></figure><h3 id="_4-2-编译后端" tabindex="-1"><a class="header-anchor" href="#_4-2-编译后端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-2-%E7%BC%96%E8%AF%91%E5%90%8E%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>4.2 编译后端</span></a></h3><p>在项目的根目录下，执行 <code>mvn clean package -Dmaven.test.skip=true</code> 命令，编译后端项目，构建出它的 Jar 包。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/02.png" alt="编译后端" tabindex="0" loading="lazy"><figcaption>编译后端</figcaption></figure><p>疑问：-Dmaven.test.skip=true 是什么意思？</p><p>跳过单元测试的执行。如果你项目的单元测试写的不错，建议使用 <code>mvn clean package</code> 命令，执行单元测试，保证交付的质量。</p><h3 id="_4-3-上传-jar-包" tabindex="-1"><a class="header-anchor" href="#_4-3-上传-jar-包"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-3-%E4%B8%8A%E4%BC%A0-jar-%E5%8C%85" target="_blank" rel="noopener noreferrer">#</a>4.3 上传 Jar 包</span></a></h3><p>在 Linux 服务器上创建 <code>/work/projects/yudao-server</code> 目录，使用 <code>scp</code> 命令或者 FTP 工具，将 <code>yudao-server.jar</code> 上传到该目录下。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/04.png" alt="上传 Jar 包" tabindex="0" loading="lazy"><figcaption>上传 Jar 包</figcaption></figure><h3 id="_4-4-构建镜像" tabindex="-1"><a class="header-anchor" href="#_4-4-构建镜像"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-4-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F" target="_blank" rel="noopener noreferrer">#</a>4.4 构建镜像</span></a></h3><p>① 在 <code>/work/projects/yudao-server</code> 目录下，新建 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/Dockerfile" target="_blank" rel="noopener noreferrer">Dockerfile (opens new window)</a>文件，用于制作后端项目的 Docker 镜像。编写内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## AdoptOpenJDK 停止发布 OpenJDK 二进制，而 Eclipse Temurin 是它的延伸，提供更好的稳定性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 感谢复旦核博士的建议！灰子哥，牛皮！</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> eclipse-temurin:8-jre</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 创建目录，并使用它作为工作目录</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> /yudao-server</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">WORKDIR</span><span style="color:#98C379;--shiki-dark:#98C379;"> /yudao-server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 将后端项目的 Jar 文件，复制到镜像中</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">COPY</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server.jar</span><span style="color:#98C379;--shiki-dark:#98C379;"> app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 设置 TZ 时区</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 设置 JAVA_OPTS 环境变量，可通过 docker run -e &quot;JAVA_OPTS=&quot; 进行覆盖</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENV</span><span style="color:#98C379;--shiki-dark:#98C379;"> TZ=Asia/Shanghai</span><span style="color:#98C379;--shiki-dark:#98C379;"> JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 暴露后端项目的 48080 端口</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">EXPOSE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 48080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 启动后端项目</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="color:#98C379;--shiki-dark:#98C379;"> java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> \${</span><span style="color:#E06C75;--shiki-dark:#E06C75;">JAVA_OPTS</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="color:#D19A66;--shiki-dark:#D19A66;">-Djava.security.egd=file:/dev/./urandom</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -jar</span><span style="color:#98C379;--shiki-dark:#98C379;"> app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行如下命令，构建名字为 <code>yudao-server</code> 的 Docker 镜像。</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">cd</span><span style="color:#98C379;--shiki-dark:#98C379;"> /work/projects/yudao-server</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -t</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span></span></code></pre></div><figure><img src="https://doc.iocoder.cn/img/Docker部署/04.png" alt="构建镜像" tabindex="0" loading="lazy"><figcaption>构建镜像</figcaption></figure><p>③ 在 <code>/work/projects/yudao-server</code> 目录下，新建 Shell 脚本 <code>deploy.sh</code>，使用 Docker 启动后端项目。编写内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">set</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 第一步：删除可能启动的老 yudao-server 容器</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;开始删除 yudao-server 容器&quot;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> stop</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> || </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">true</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> rm</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> || </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">true</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;完成删除 yudao-server 容器&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 第二步：启动新的 yudao-server 容器 \\</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;开始启动 yudao-server 容器&quot;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--name </span><span style="color:#98C379;--shiki-dark:#98C379;">yudao-server</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-p </span><span style="color:#98C379;--shiki-dark:#98C379;">48080:48080</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-e </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;SPRING_PROFILES_ACTIVE=dev&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/projects/yudao-server:/root/logs/</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">yudao-server</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;正在启动 yudao-server 容器中，需要等待 60 秒左右&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>应用日志文件，挂载到服务器的的 <code>/work/projects/yudao-server</code> 目录下</li><li>通过 <code>SPRING_PROFILES_ACTIVE</code> 设置为 <code>dev</code> 开发环境</li></ul><h3 id="_4-5-启动后端" tabindex="-1"><a class="header-anchor" href="#_4-5-启动后端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_4-5-%E5%90%AF%E5%8A%A8%E5%90%8E%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>4.5 启动后端</span></a></h3><p>① 执行 <code>sh deploy.sh</code> 命令，使用 Docker 启动后端项目。日志如下：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">开始删除</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#98C379;--shiki-dark:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">yudao-server</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">yudao-server</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">完成删除</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#98C379;--shiki-dark:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">开始启动</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#98C379;--shiki-dark:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">0dfd3dc409a53ae6b5e7c5662602cf5dcb52fd4d7f673bd74af7d21da8ead9d5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">正在启动</span><span style="color:#98C379;--shiki-dark:#98C379;"> yudao-server</span><span style="color:#98C379;--shiki-dark:#98C379;"> 容器中，需要等待</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 60</span><span style="color:#98C379;--shiki-dark:#98C379;"> 秒左右</span></span></code></pre></div><p>② 执行 <code>docker logs yudao-server</code> 命令，查看启动日志。看到如下内容，说明启动完成：</p><p>友情提示：如果日志比较多，可以使用 grep 进行过滤。</p><p>例如说：使用 <code>docker logs yudao-server | grep 48080</code></p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">2022-04-15</span><span style="color:#98C379;--shiki-dark:#98C379;"> 00:34:19.647</span><span style="color:#98C379;--shiki-dark:#98C379;">  INFO</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 8</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> ---</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [main] [TID: N/A] o.s.b.w.embedded.tomcat.TomcatWebServer  </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> Tomcat initialized with port(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">): 48080 (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">http</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h2 id="_5-部署前端" tabindex="-1"><a class="header-anchor" href="#_5-部署前端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_5-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>5. 部署前端</span></a></h2><p>友情提示：</p><p>本小节的内容，和 <a href="https://doc.iocoder.cn/deployment-linux" target="_blank" rel="noopener noreferrer">《开发指南 —— Linux 部署》</a> 的「部署前端」是基本一致的。</p><h3 id="_5-1-修改配置" tabindex="-1"><a class="header-anchor" href="#_5-1-修改配置"><span><a href="https://doc.iocoder.cn/deployment-docker/#_5-1-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>5.1 修改配置</span></a></h3><p>前端 dev 开发环境对应的是 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/.env.dev" target="_blank" rel="noopener noreferrer"><code>.env.dev</code> (opens new window)</a>配置文件，主要是修改 <code>VUE_APP_BASE_API</code> 为你的后端项目的访问地址。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/11.png" alt=" 配置文件" tabindex="0" loading="lazy"><figcaption> 配置文件</figcaption></figure><h3 id="_5-2-编译前端" tabindex="-1"><a class="header-anchor" href="#_5-2-编译前端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_5-2-%E7%BC%96%E8%AF%91%E5%89%8D%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>5.2 编译前端</span></a></h3><p>在 <code>yudao-ui-admin</code> 目录下，执行 <code>npm run build:dev</code> 命令，编译前端项目，构建出它的 <code>dist</code> 文件，里面是 HTML、CSS、JavaScript 等静态文件。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/12.png" alt="编译前端" tabindex="0" loading="lazy"><figcaption>编译前端</figcaption></figure><p>如下想要打包其它环境，可使用如下命令：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">npm</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#98C379;--shiki-dark:#98C379;"> build:prod</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 打包 prod 生产环境</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">npm</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#98C379;--shiki-dark:#98C379;"> build:stage</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 打包 stage 预发布环境</span></span></code></pre></div><p>其它高级参数说明【可暂时不看】：</p><p>① <code>PUBLIC_PATH</code>：静态资源地址，可用于七牛等 CDN 服务回源读取前端的静态文件，提升访问速度，建议 prod 生产环境使用。示例如下：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/16.png" alt=" 参数" tabindex="0" loading="lazy"><figcaption> 参数</figcaption></figure><p>② <code>VUE_APP_APP_NAME</code>：二级部署路径，默认为 <code>/</code> 根目录，一般不用修改。</p><p>③ <code>mode</code>：前端路由的模式，默认采用 <code>history</code> 路由，一般不用修改。可以通过修改 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/router/index.js#L173-L178" target="_blank" rel="noopener noreferrer"><code>router/index.js</code> (opens new window)</a>来设置为 <code>hash</code> 路由，示例如下：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/17.png" alt=" 参数" tabindex="0" loading="lazy"><figcaption> 参数</figcaption></figure><h3 id="_5-3-上传-dist-文件" tabindex="-1"><a class="header-anchor" href="#_5-3-上传-dist-文件"><span><a href="https://doc.iocoder.cn/deployment-docker/#_5-3-%E4%B8%8A%E4%BC%A0-dist-%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>5.3 上传 <code>dist</code> 文件</span></a></h3><p>在 Linux 服务器上创建 <code>/work/projects/yudao-ui-admin</code> 目录，使用 <code>scp</code> 命令或者 FTP 工具，将 <code>dist</code> 上传到 <code>/work/nginx/html</code> 目录下。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/05.png" alt="上传  文件" tabindex="0" loading="lazy"><figcaption>上传 文件</figcaption></figure><h3 id="_5-4-启动前端" tabindex="-1"><a class="header-anchor" href="#_5-4-启动前端"><span><a href="https://doc.iocoder.cn/deployment-docker/#_5-4-%E5%90%AF%E5%8A%A8%E5%89%8D%E7%AB%AF" target="_blank" rel="noopener noreferrer">#</a>5.4 启动前端？</span></a></h3><p>前端无法直接启动，而是通过 Nginx 转发读取 <code>/work/projects/yudao-ui-admin</code> 目录的静态文件。</p><h2 id="_6-配置-nginx" tabindex="-1"><a class="header-anchor" href="#_6-配置-nginx"><span><a href="https://doc.iocoder.cn/deployment-docker/#_6-%E9%85%8D%E7%BD%AE-nginx" target="_blank" rel="noopener noreferrer">#</a>6. 配置 Nginx</span></a></h2><h3 id="_6-1-安装-nginx" tabindex="-1"><a class="header-anchor" href="#_6-1-安装-nginx"><span><a href="https://doc.iocoder.cn/deployment-docker/#_6-1-%E5%AE%89%E8%A3%85-nginx" target="_blank" rel="noopener noreferrer">#</a>6.1 安装 Nginx</span></a></h3><p>Nginx 挂载到服务器的目录：</p><ul><li><code>/work/nginx/conf.d</code> 用于存放配置文件</li><li><code>/work/nginx/html</code> 用于存放网页文件</li><li><code>/work/nginx/logs</code> 用于存放日志</li><li><code>/work/nginx/cert</code> 用于存放 HTTPS 证书</li></ul><p>① 创建 <code>/work/nginx</code> 目录，并在该目录下新建 <code>nginx.conf</code> 文件，避免稍后安装 Nginx 报错。内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#98C379;--shiki-dark:#98C379;">  nginx</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">worker_processes</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">events</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    worker_connections</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  1024</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">error_log</span><span style="color:#98C379;--shiki-dark:#98C379;">  /var/log/nginx/error.log</span><span style="color:#98C379;--shiki-dark:#98C379;"> warn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">pid</span><span style="color:#98C379;--shiki-dark:#98C379;">        /var/run/nginx.pid</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">http</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    include</span><span style="color:#98C379;--shiki-dark:#98C379;">       /etc/nginx/mime.types</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    default_type</span><span style="color:#98C379;--shiki-dark:#98C379;">  application/octet-stream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    sendfile</span><span style="color:#98C379;--shiki-dark:#98C379;">        on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    keepalive_timeout</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  65</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    log_format</span><span style="color:#98C379;--shiki-dark:#98C379;">  main</span><span style="color:#98C379;--shiki-dark:#98C379;">  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip</span><span style="color:#98C379;--shiki-dark:#98C379;"> on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_min_length</span><span style="color:#98C379;--shiki-dark:#98C379;"> 1k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置允许压缩的页面最小字节数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_buffers</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 4</span><span style="color:#98C379;--shiki-dark:#98C379;"> 16k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 用来存储 gzip 的压缩结果</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_http_version</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1.1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 识别 HTTP 协议版本</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_comp_level</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_types</span><span style="color:#98C379;--shiki-dark:#98C379;"> text/plain</span><span style="color:#98C379;--shiki-dark:#98C379;"> application/x-javascript</span><span style="color:#98C379;--shiki-dark:#98C379;"> text/css</span><span style="color:#98C379;--shiki-dark:#98C379;"> application/xml</span><span style="color:#98C379;--shiki-dark:#98C379;"> application/javascript</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定压缩类型</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    gzip_proxied</span><span style="color:#98C379;--shiki-dark:#98C379;"> any</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    include</span><span style="color:#98C379;--shiki-dark:#98C379;"> /etc/nginx/conf.d/</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">*</span><span style="color:#98C379;--shiki-dark:#98C379;">.conf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 加载该目录下的其它 Nginx 配置文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行如下命令，使用 Docker 启动 Nginx 容器。</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -d</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">--name </span><span style="color:#98C379;--shiki-dark:#98C379;">nginx</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --restart</span><span style="color:#98C379;--shiki-dark:#98C379;"> always</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-p </span><span style="color:#98C379;--shiki-dark:#98C379;">80:80</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> 443:443</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-e </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;TZ=Asia/Shanghai&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/nginx/conf.d:/etc/nginx/conf.d</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/nginx/logs:/var/log/nginx</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/nginx/cert:/etc/nginx/cert</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-v </span><span style="color:#98C379;--shiki-dark:#98C379;">/work/nginx/html:/usr/share/nginx/html</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">nginx:alpine</span></span></code></pre></div><p>③ 执行 <code>docker ps</code> 命令，查看到 Nginx 容器的状态是 <code>UP</code> 的。</p><hr><p>下面，来看两种 Nginx 的配置，分别满足服务器 IP、独立域名的不同场景。</p><h3 id="_6-2-方式一-服务器-ip-访问" tabindex="-1"><a class="header-anchor" href="#_6-2-方式一-服务器-ip-访问"><span><a href="https://doc.iocoder.cn/deployment-docker/#_6-2-%E6%96%B9%E5%BC%8F%E4%B8%80-%E6%9C%8D%E5%8A%A1%E5%99%A8-ip-%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener noreferrer">#</a>6.2 方式一：服务器 IP 访问</span></a></h3><p>① 在 <code>/work/nginx/conf.d</code> 目录下，创建 <code>ruoyi-vue-pro.conf</code>，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">server</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    listen</span><span style="color:#D19A66;--shiki-dark:#D19A66;">       80</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    server_name</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  139.9.196.247</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！修改成你的外网 IP/域名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 前端项目</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        root</span><span style="color:#98C379;--shiki-dark:#98C379;">   /usr/share/nginx/html/yudao-admin-ui</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        index</span><span style="color:#98C379;--shiki-dark:#98C379;">  index.html</span><span style="color:#98C379;--shiki-dark:#98C379;"> index.htm</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        try_files</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $uri</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $uri</span><span style="color:#98C379;--shiki-dark:#98C379;">/</span><span style="color:#98C379;--shiki-dark:#98C379;"> /index.html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /admin-api/</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 后端项目 - 管理后台</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="color:#98C379;--shiki-dark:#98C379;"> http://192.168.0.213:48080/admin-api/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> Host</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $http_host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Real-IP</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /app-api/</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 后端项目 - 用户 App</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="color:#98C379;--shiki-dark:#98C379;"> http://192.168.0.213:48080/app-api/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> Host</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $http_host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Real-IP</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>友情提示：</p><p><code>[root]</code> 指令在本地文件时，要使用 Nginx Docker 容器内的路径，即 <code>/usr/share/nginx/html/yudao-admin-ui</code>，否则会报 404 的错误。</p><p>② 执行 <code>docker exec nginx nginx -s reload</code> 命令，重新加载 Nginx 配置。</p><p>友情提示：如果你担心 Nginx 配置不正确，可以执行 docker exec nginx nginx -t 命令。</p><p>③ 执行 <code>curl http://192.168.0.213/admin-api/</code> 命令，成功访问后端项目的内网地址，返回结果如下：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;code&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">401</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;data&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;msg&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;账号未登录&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>执行 <code>curl http://139.9.196.247:48080/admin-api/</code> 命令，成功访问后端项目的外网地址，返回结果一致。</p><p>④ 请求 <a href="http://139.9.196.247:48080/" target="_blank" rel="noopener noreferrer">http://139.9.196.247:48080 (opens new window)</a>地址，成功访问前端项目的外网地址，，返回前端界面如下：</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/06.png" alt="前端界面" tabindex="0" loading="lazy"><figcaption>前端界面</figcaption></figure><h3 id="_6-3-方式二-独立域名访问" tabindex="-1"><a class="header-anchor" href="#_6-3-方式二-独立域名访问"><span><a href="https://doc.iocoder.cn/deployment-docker/#_6-3-%E6%96%B9%E5%BC%8F%E4%BA%8C-%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener noreferrer">#</a>6.3 方式二：独立域名访问</span></a></h3><p>友情提示：在前端项目的编译时，需要把 <code>VUE_APP_BASE_API</code> 修改为后端项目对应的域名。</p><p>例如说，这里使用的是 <code>http://api.iocoder.cn</code></p><p>① 在 <code>/work/nginx/conf.d</code> 目录下，创建 <code>ruoyi-vue-pro2.conf</code>，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">server</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 前端项目</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    listen</span><span style="color:#D19A66;--shiki-dark:#D19A66;">       80</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    server_name</span><span style="color:#98C379;--shiki-dark:#98C379;">  admin.iocoder.cn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！修改成你的前端域名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 前端项目</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        root</span><span style="color:#98C379;--shiki-dark:#98C379;">   /usr/share/nginx/html/yudao-admin-ui</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        index</span><span style="color:#98C379;--shiki-dark:#98C379;">  index.html</span><span style="color:#98C379;--shiki-dark:#98C379;"> index.htm</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        try_files</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $uri</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $uri</span><span style="color:#98C379;--shiki-dark:#98C379;">/</span><span style="color:#98C379;--shiki-dark:#98C379;"> /index.html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">server</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 后端项目</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    listen</span><span style="color:#D19A66;--shiki-dark:#D19A66;">       80</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    server_name</span><span style="color:#98C379;--shiki-dark:#98C379;">  api.iocoder.cn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！修改成你的外网 IP/域名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## 不要使用 location / 转发到后端项目，因为 druid、admin 等监控，不需要外网可访问。或者增加 Nginx IP 白名单限制也可以。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /admin-api/</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 后端项目 - 管理后台</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="color:#98C379;--shiki-dark:#98C379;"> http://192.168.0.213:48080/admin-api/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> Host</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $http_host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Real-IP</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    location</span><span style="color:#98C379;--shiki-dark:#98C379;"> /app-api/</span><span style="color:#98C379;--shiki-dark:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ## 后端项目 - 用户 App</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="color:#98C379;--shiki-dark:#98C379;"> http://192.168.0.213:48080/app-api/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> Host</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $http_host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Real-IP</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;--shiki-dark:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行 <code>docker exec nginx nginx -s reload</code> 命令，重新加载 Nginx 配置。</p><p>③ 请求 <a href="http://api.iocoder.cn/admin-api/" target="_blank" rel="noopener noreferrer">http://api.iocoder.cn/admin-api/ (opens new window)</a>地址，成功访问后端项目，返回结果如下：</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;code&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">401</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;data&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#D19A66;--shiki-dark:#D19A66;">null</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">&quot;msg&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">:</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;账号未登录&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>④ 请求 <a href="http://admin.iocoder.cn/" target="_blank" rel="noopener noreferrer">http://admin.iocoder.cn (opens new window)</a>地址，成功访问前端项目，返回前端界面如下：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/15.png" alt="前端界面" tabindex="0" loading="lazy"><figcaption>前端界面</figcaption></figure><p>上次更新: 2023/03/01, 00:29:36</p>`,109)]))}const d=a(l,[["render",r],["__file","3.Docker 部署.html.vue"]]),c=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/10.%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/3.Docker%20%E9%83%A8%E7%BD%B2.html","title":"Docker 部署","lang":"zh-CN","frontmatter":{"description":"Docker 部署 本小节，讲解如何将前端 + 后端项目，使用 Docker 容器，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示： Docker 部署Docker 部署 注意：服务器的 IP 地址。 外网 IP：139.9.196.247 内网 IP：192.168.0.213 下属所有涉及到 IP 的配置，需要替换成你自己的。 ...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Java/Ruoyi-Vue-Pro/10.%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/3.Docker%20%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Docker 部署"}],["meta",{"property":"og:description","content":"Docker 部署 本小节，讲解如何将前端 + 后端项目，使用 Docker 容器，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示： Docker 部署Docker 部署 注意：服务器的 IP 地址。 外网 IP：139.9.196.247 内网 IP：192.168.0.213 下属所有涉及到 IP 的配置，需要替换成你自己的。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T07:41:53.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-21T07:41:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 部署\\",\\"image\\":[\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/01.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/03.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/02.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/03.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/02.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/04.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/04.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/11.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/12.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/16.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/17.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/05.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/06.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/15.png\\"],\\"dateModified\\":\\"2024-11-21T07:41:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"#1. 安装 Docker","slug":"_1-安装-docker","link":"#_1-安装-docker","children":[]},{"level":2,"title":"#2. 配置 MySQL","slug":"_2-配置-mysql","link":"#_2-配置-mysql","children":[{"level":3,"title":"#2.1 安装 MySQL（可选）","slug":"_2-1-安装-mysql-可选","link":"#_2-1-安装-mysql-可选","children":[]},{"level":3,"title":"#2.2 导入 SQL 脚本","slug":"_2-2-导入-sql-脚本","link":"#_2-2-导入-sql-脚本","children":[]}]},{"level":2,"title":"#3. 配置 Redis","slug":"_3-配置-redis","link":"#_3-配置-redis","children":[]},{"level":2,"title":"#4. 部署后端","slug":"_4-部署后端","link":"#_4-部署后端","children":[{"level":3,"title":"#4.1 修改配置","slug":"_4-1-修改配置","link":"#_4-1-修改配置","children":[]},{"level":3,"title":"#4.2 编译后端","slug":"_4-2-编译后端","link":"#_4-2-编译后端","children":[]},{"level":3,"title":"#4.3 上传 Jar 包","slug":"_4-3-上传-jar-包","link":"#_4-3-上传-jar-包","children":[]},{"level":3,"title":"#4.4 构建镜像","slug":"_4-4-构建镜像","link":"#_4-4-构建镜像","children":[]},{"level":3,"title":"#4.5 启动后端","slug":"_4-5-启动后端","link":"#_4-5-启动后端","children":[]}]},{"level":2,"title":"#5. 部署前端","slug":"_5-部署前端","link":"#_5-部署前端","children":[{"level":3,"title":"#5.1 修改配置","slug":"_5-1-修改配置","link":"#_5-1-修改配置","children":[]},{"level":3,"title":"#5.2 编译前端","slug":"_5-2-编译前端","link":"#_5-2-编译前端","children":[]},{"level":3,"title":"#5.3 上传 dist 文件","slug":"_5-3-上传-dist-文件","link":"#_5-3-上传-dist-文件","children":[]},{"level":3,"title":"#5.4 启动前端？","slug":"_5-4-启动前端","link":"#_5-4-启动前端","children":[]}]},{"level":2,"title":"#6. 配置 Nginx","slug":"_6-配置-nginx","link":"#_6-配置-nginx","children":[{"level":3,"title":"#6.1 安装 Nginx","slug":"_6-1-安装-nginx","link":"#_6-1-安装-nginx","children":[]},{"level":3,"title":"#6.2 方式一：服务器 IP 访问","slug":"_6-2-方式一-服务器-ip-访问","link":"#_6-2-方式一-服务器-ip-访问","children":[]},{"level":3,"title":"#6.3 方式二：独立域名访问","slug":"_6-3-方式二-独立域名访问","link":"#_6-3-方式二-独立域名访问","children":[]}]}],"git":{"createdTime":1732174913000,"updatedTime":1732174913000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":9.55,"words":2865},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/10.运维手册/3.Docker 部署.md","localizedDate":"2024年11月21日","excerpt":"\\n<p>本小节，讲解如何将前端 + 后端项目，<strong>使用 Docker 容器</strong>，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示：</p>\\n<figure><img src=\\"https://doc.iocoder.cn/img/Docker部署/01.png\\" alt=\\"Docker 部署\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Docker 部署</figcaption></figure>\\n<p>注意：服务器的 IP 地址。</p>\\n<ul>\\n<li>外网 IP：139.9.196.247</li>\\n<li>内网 IP：192.168.0.213</li>\\n</ul>","autoDesc":true}');export{d as comp,c as data};
