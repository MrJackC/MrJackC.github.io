import{_ as a,c as i,a as n,o as e}from"./app-CpAF2rca.js";const l={};function p(r,s){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="商城设计-秒杀系统设计" tabindex="-1"><a class="header-anchor" href="#商城设计-秒杀系统设计"><span>商城设计 - 秒杀系统设计？</span></a></h1><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159826.png" alt="image-20221012225218315" tabindex="0" loading="lazy"><figcaption>image-20221012225218315</figcaption></figure><h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言"><span>0. 前言</span></a></h2><p>高并发下如何设计秒杀系统？这是一个高频面试题。这个问题看似简单，但是里面的水很深，它考查的是高并发场景下，从前端到后端多方面的知识。</p><p>秒杀一般出现在商城的<code>促销活动</code>中，指定了一定数量（比如：10个）的商品（比如：手机），以极低的价格（比如：0.1元），让大量用户参与活动，但只有极少数用户能够购买成功。这类活动商家绝大部分是不赚钱的，说白了是找个噱头宣传自己。</p><p>虽说秒杀只是一个促销活动，但对技术要求不低。下面给大家总结一下设计秒杀系统需要注意的9个细节。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159871.png" alt="image-20221012225356461" tabindex="0" loading="lazy"><figcaption>image-20221012225356461</figcaption></figure><h2 id="_1-瞬时高并发" tabindex="-1"><a class="header-anchor" href="#_1-瞬时高并发"><span>1. 瞬时高并发</span></a></h2><p>一般在<code>秒杀时间点</code>（比如：12点）前几分钟，用户并发量才真正突增，达到秒杀时间点时，并发量会达到顶峰。</p><p>但由于这类活动是大量用户抢少量商品的场景，必定会出现<code>狼多肉少</code>的情况，所以其实绝大部分用户秒杀会失败，只有极少部分用户能够成功。</p><p>正常情况下，大部分用户会收到商品已经抢完的提醒，收到该提醒后，他们大概率不会在那个活动页面停留了，如此一来，用户并发量又会急剧下降。所以这个峰值持续的时间其实是非常短的，这样就会出现瞬时高并发的情况，下面用一张图直观的感受一下流量的变化：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159894.png" alt="image-20221012225506588" tabindex="0" loading="lazy"><figcaption>image-20221012225506588</figcaption></figure><p>像这种瞬时高并发的场景，传统的系统很难应对，我们需要设计一套全新的系统。可以从以下几个方面入手：</p><ol><li>页面静态化</li><li>CDN加速</li><li>缓存</li><li>mq异步处理</li><li>限流</li><li>分布式锁</li></ol><h2 id="_2-页面静态化与cdn" tabindex="-1"><a class="header-anchor" href="#_2-页面静态化与cdn"><span>2. 页面静态化与CDN</span></a></h2><p>活动页面是用户流量的第一入口，所以是并发量最大的地方。</p><p>如果这些流量都能直接访问服务端，恐怕服务端会因为承受不住这么大的压力，而直接挂掉。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159915.png" alt="image-20221012225625240" tabindex="0" loading="lazy"><figcaption>image-20221012225625240</figcaption></figure><p>活动页面绝大多数内容是固定的，比如：商品名称、商品描述、图片等。为了减少不必要的服务端请求，通常情况下，会对活动页面做<code>静态化</code>处理。用户浏览商品等常规操作，并不会请求到服务端。只有到了秒杀时间点，并且用户主动点了秒杀按钮才允许访问服务端。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159939.png" alt="image-20221012225738044" tabindex="0" loading="lazy"><figcaption>image-20221012225738044</figcaption></figure><p>这样能过滤大部分无效请求。</p><p>但只做页面静态化还不够，因为用户分布在全国各地，有些人在北京，有些人在成都，有些人在深圳，地域相差很远，网速各不相同。</p><p>如何才能让用户最快访问到活动页面呢？</p><p>这就需要使用CDN，它的全称是Content Delivery Network，即内容分发网络。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159972.png" alt="image-20221012225814094" tabindex="0" loading="lazy"><figcaption>image-20221012225814094</figcaption></figure><p>使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><h2 id="_3-秒杀按钮" tabindex="-1"><a class="header-anchor" href="#_3-秒杀按钮"><span>3. 秒杀按钮</span></a></h2><p>大部分用户怕错过<code>秒杀时间点</code>，一般会提前进入活动页面。此时看到的<code>秒杀按钮</code>是置灰，不可点击的。只有到了秒杀时间点那一时刻，秒杀按钮才会自动点亮，变成可点击的。</p><p>但此时很多用户已经迫不及待了，通过不停刷新页面，争取在第一时间看到秒杀按钮的点亮。</p><p>从前面得知，该活动页面是静态的。那么我们在静态页面中如何控制秒杀按钮，只在秒杀时间点时才点亮呢？</p><p>没错，使用js文件控制。</p><p>为了性能考虑，一般会将css、js和图片等静态资源文件提前缓存到CDN上，让用户能够就近访问秒杀页面。</p><p>看到这里，有些聪明的小伙伴，可能会问：CDN上的js文件是如何更新的？</p><p>秒杀开始之前，js标志为false，还有另外一个随机参数。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159999.png" alt="image-20221012230038760" tabindex="0" loading="lazy"><figcaption>image-20221012230038760</figcaption></figure><p>当秒杀开始的时候系统会生成一个新的js文件，此时标志为true，并且随机参数生成一个新值，然后同步给CDN。由于有了这个随机参数，CDN不会缓存数据，每次都能从CDN中获取最新的js代码。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159024.png" alt="image-20221012230143372" tabindex="0" loading="lazy"><figcaption>image-20221012230143372</figcaption></figure><p>此外，前端还可以加一个定时器，控制比如：10秒之内，只允许发起一次请求。如果用户点击了一次秒杀按钮，则在10秒之内置灰，不允许再次点击，等到过了时间限制，又允许重新点击该按钮。</p><h2 id="_4-读多写少" tabindex="-1"><a class="header-anchor" href="#_4-读多写少"><span>4. 读多写少</span></a></h2><p>在秒杀的过程中，系统一般会先查一下库存是否足够，如果足够才允许下单，写数据库。如果不够，则直接返回该商品已经抢完。</p><p>由于大量用户抢少量商品，只有极少部分用户能够抢成功，所以绝大部分用户在秒杀时，库存其实是不足的，系统会直接返回该商品已经抢完。</p><p>这是非常典型的：<code>读多写少</code> 的场景。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159043.png" alt="image-20221012230258718" tabindex="0" loading="lazy"><figcaption>image-20221012230258718</figcaption></figure><p>如果有数十万的请求过来，同时通过数据库查缓存是否足够，此时数据库可能会挂掉。因为数据库的连接资源非常有限，比如：mysql，无法同时支持这么多的连接。</p><p>而应该改用缓存，比如：redis。</p><p>即便用了redis，也需要部署多个节点。</p><h2 id="_5-缓存问题" tabindex="-1"><a class="header-anchor" href="#_5-缓存问题"><span>5. 缓存问题</span></a></h2><p>通常情况下，我们需要在redis中保存商品信息，里面包含：商品id、商品名称、规格属性、库存等信息，同时数据库中也要有相关信息，毕竟缓存并不完全可靠。</p><p>用户在点击秒杀按钮，请求秒杀接口的过程中，需要传入的商品id参数，然后服务端需要校验该商品是否合法。</p><p>大致流程如下图所示：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159064.png" alt="image-20221012230423178" tabindex="0" loading="lazy"><figcaption>image-20221012230423178</figcaption></figure><p>根据商品id，先从缓存中查询商品，如果商品存在，则参与秒杀。如果不存在，则需要从数据库中查询商品，如果存在，则将商品信息放入缓存，然后参与秒杀。如果商品不存在，则直接提示失败。</p><p>这个过程表面上看起来是OK的，但是如果深入分析一下会发现一些问题。</p><h3 id="_5-1-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_5-1-缓存击穿"><span>5.1 缓存击穿</span></a></h3><p>比如商品A第一次秒杀时，缓存中是没有数据的，但数据库中有。虽说上面有如果从数据库中查到数据，则放入缓存的逻辑。</p><p>然而，在高并发下，同一时刻会有大量的请求，都在秒杀同一件商品，这些请求同时去查缓存中没有数据，然后又同时访问数据库。结果悲剧了，数据库可能扛不住压力，直接挂掉。</p><p>如何解决这个问题呢？</p><p>这就需要加锁，最好使用分布式锁。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159084.png" alt="image-20221012230520478" tabindex="0" loading="lazy"><figcaption>image-20221012230520478</figcaption></figure><p>当然，针对这种情况，最好在项目启动之前，先把缓存进行<code>预热</code>。即事先把所有的商品，同步到缓存中，这样商品基本都能直接从缓存中获取到，就不会出现缓存击穿的问题了。</p><p>是不是上面加锁这一步可以不需要了？</p><p>表面上看起来，确实可以不需要。但如果缓存中设置的过期时间不对，缓存提前过期了，或者缓存被不小心删除了，如果不加速同样可能出现缓存击穿。</p><p>其实这里加锁，相当于买了一份保险。</p><h3 id="_5-2-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_5-2-缓存穿透"><span>5.2 缓存穿透</span></a></h3><p>如果有大量的请求传入的商品id，在缓存中和数据库中都不存在，这些请求不就每次都会穿透过缓存，而直接访问数据库了。</p><p>由于前面已经加了锁，所以即使这里的并发量很大，也不会导致数据库直接挂掉。</p><p>但很显然这些请求的处理性能并不好，有没有更好的解决方案？</p><p>这时可以想到<code>布隆过滤器</code>。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159105.png" alt="image-20221012231033089" tabindex="0" loading="lazy"><figcaption>image-20221012231033089</figcaption></figure><p>先从布隆过滤器中查询该id是否存在，如果存在则允许从缓存中查询数据，如果不存在，则直接返回失败。</p><p>虽说该方案可以解决缓存穿透问题，但是又会引出另外一个问题：布隆过滤器中的数据如何更缓存中的数据保持一致？</p><p>这就要求，如果缓存中数据有更新，则要及时同步到布隆过滤器中。如果数据同步失败了，还需要增加重试机制，而且跨数据源，能保证数据的实时一致性吗？</p><p>显然是不行的。</p><p>所以布隆过滤器绝大部分使用在缓存数据更新很少的场景中。</p><p>如果缓存数据更新非常频繁，又该如何处理呢？</p><p>这时，就需要把不存在的商品id也缓存起来。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159127.png" alt="image-20221012231121809" tabindex="0" loading="lazy"><figcaption>image-20221012231121809</figcaption></figure><p>id的请求过来，则也能从缓存中查到数据，只不过该数据比较特殊，表示商品不存在。需要特别注意的是，这种特殊缓存设置的超时时间应该尽量短一点。</p><h2 id="_6-库存问题" tabindex="-1"><a class="header-anchor" href="#_6-库存问题"><span>6. 库存问题</span></a></h2><p>对于库存问题看似简单，实则里面还是有些东西。</p><p>真正的秒杀商品的场景，不是说扣完库存，就完事了，如果用户在一段时间内，还没完成支付，扣减的库存是要加回去的。</p><p>所以，在这里引出了一个<code>预扣库存</code>的概念，预扣库存的主要流程如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159149.png" alt="image-20221012231220053" tabindex="0" loading="lazy"><figcaption>image-20221012231220053</figcaption></figure><p>扣减库存中除了上面说到的<code>预扣库存</code>和<code>回退库存</code>之外，还需要特别注意的是库存不足和库存超卖问题。</p><h3 id="_6-1-数据库扣减库存" tabindex="-1"><a class="header-anchor" href="#_6-1-数据库扣减库存"><span>6.1 数据库扣减库存</span></a></h3><p>使用数据库扣减库存，是最简单的实现方案了，假设扣减库存的sql如下：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">update</span><span style="color:#98C379;--shiki-dark:#98C379;"> product</span><span style="color:#98C379;--shiki-dark:#98C379;"> set</span><span style="color:#98C379;--shiki-dark:#98C379;"> stock=stock-1</span><span style="color:#98C379;--shiki-dark:#98C379;"> where</span><span style="color:#98C379;--shiki-dark:#98C379;"> id=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">123</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>这种写法对于扣减库存是没有问题的，但如何控制库存不足的情况下，不让用户操作呢？</p><p>这就需要在update之前，先查一下库存是否足够了。</p><p>伪代码如下：</p><div class="language-scss" data-ext="scss" data-title="scss"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">int stock = mapper.getStockById(123);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">if(stock &gt; 0) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  int count = mapper.updateStock(123);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  if(count &gt; 0) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    addOrder(123);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>大家有没有发现这段代码的问题？</p><p>没错，查询操作和更新操作不是原子性的，会导致在并发的场景下，出现库存超卖的情况。</p><p>有人可能会说，这样好办，加把锁，不就搞定了，比如使用synchronized关键字。</p><p>确实，可以，但是性能不够好。</p><p>还有更优雅的处理方案，即基于数据库的乐观锁，这样会少一次数据库查询，而且能够天然的保证数据操作的原子性。</p><p>只需将上面的sql稍微调整一下：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">update</span><span style="color:#98C379;--shiki-dark:#98C379;"> product</span><span style="color:#98C379;--shiki-dark:#98C379;"> set</span><span style="color:#98C379;--shiki-dark:#98C379;"> stock=stock-1</span><span style="color:#98C379;--shiki-dark:#98C379;"> where</span><span style="color:#98C379;--shiki-dark:#98C379;"> id=product</span><span style="color:#98C379;--shiki-dark:#98C379;"> and</span><span style="color:#98C379;--shiki-dark:#98C379;"> stock</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> &gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>在sql最后加上：<code>stock &gt; 0</code>，就能保证不会出现超卖的情况。</p><p>但需要频繁访问数据库，我们都知道数据库连接是非常昂贵的资源。在高并发的场景下，可能会造成系统雪崩。而且，容易出现多个请求，同时竞争行锁的情况，造成相互等待，从而出现死锁的问题。</p><h3 id="_6-2-redis扣减库存" tabindex="-1"><a class="header-anchor" href="#_6-2-redis扣减库存"><span>6.2 redis扣减库存</span></a></h3><p>redis的<code>incr</code>方法是原子性的，可以用该方法扣减库存。伪代码如下：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;"> boolean </span><span style="color:#C678DD;--shiki-dark:#C678DD;">exist</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> redisClient.query(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  if(exist) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    return -1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  int </span><span style="color:#C678DD;--shiki-dark:#C678DD;">stock</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> redisClient.queryStock(productId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  if(stock &lt;=0) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    return 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  redisClient.incrby(productId, -1)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  redisClient.add(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">return 1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>代码流程如下：</p><ol><li>先判断该用户有没有秒杀过该商品，如果已经秒杀过，则直接返回-1。</li><li>查询库存，如果库存小于等于0，则直接返回0，表示库存不足。</li><li>如果库存充足，则扣减库存，然后将本次秒杀记录保存起来。然后返回1，表示成功。</li></ol><p>估计很多小伙伴，一开始都会按这样的思路写代码。但如果仔细想想会发现，这段代码有问题。</p><p>有什么问题呢？</p><p>如果在高并发下，有多个请求同时查询库存，当时都大于0。由于查询库存和更新库存非原则操作，则会出现库存为负数的情况，即<code>库存超卖</code>。</p><p>当然有人可能会说，加个<code>synchronized</code>不就解决问题？</p><p>调整后代码如下：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">   boolean </span><span style="color:#C678DD;--shiki-dark:#C678DD;">exist</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> redisClient.query(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">   if(exist) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">    return -1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">   }</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">   synchronized(this) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       int </span><span style="color:#C678DD;--shiki-dark:#C678DD;">stock</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> redisClient.queryStock(productId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       if(stock &lt;=0) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">         return 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       }</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       redisClient.incrby(productId, -1)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">       redisClient.add(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">return 1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>加<code>synchronized</code>确实能解决库存为负数问题，但是这样会导致接口性能急剧下降，每次查询都需要竞争同一把锁，显然不太合理。</p><p>为了解决上面的问题，代码优化如下：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">boolean </span><span style="color:#C678DD;--shiki-dark:#C678DD;">exist</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> redisClient.query(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">if(exist) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  return -1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">if(redisClient.incrby(productId, -1)&lt;0) {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  return 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">redisClient.add(productId,userId)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">return 1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>该代码主要流程如下：</p><ol><li>先判断该用户有没有秒杀过该商品，如果已经秒杀过，则直接返回-1。</li><li>扣减库存，判断返回值是否小于0，如果小于0，则直接返回0，表示库存不足。</li><li>如果扣减库存后，返回值大于或等于0，则将本次秒杀记录保存起来。然后返回1，表示成功。</li></ol><p>该方案咋一看，好像没问题。</p><p>但如果在高并发场景中，有多个请求同时扣减库存，大多数请求的incrby操作之后，结果都会小于0。</p><p>虽说，库存出现负数，不会出现<code>超卖的问题</code>。但由于这里是预减库存，如果负数值负的太多的话，后面万一要回退库存时，就会导致库存不准。</p><p>那么，有没有更好的方案呢？</p><h3 id="_6-3-lua脚本扣减库存" tabindex="-1"><a class="header-anchor" href="#_6-3-lua脚本扣减库存"><span>6.3 lua脚本扣减库存</span></a></h3><p>我们都知道lua脚本，是能够保证原子性的，它跟redis一起配合使用，能够完美解决上面的问题。</p><p>lua脚本有段非常经典的代码：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  StringBuilder </span><span style="color:#C678DD;--shiki-dark:#C678DD;">lua</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> new StringBuilder()</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;if (redis.call(&#39;exists&#39;, KEYS[1]) == 1) then&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    local stock = tonumber(redis.call(&#39;get&#39;, KEYS[1]));&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    if (stock == -1) then&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;        return 1;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    end;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    if (stock &gt; 0) then&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;        redis.call(&#39;incrby&#39;, KEYS[1], -1);&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;        return stock;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    end;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;    return 0;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;end;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  lua.append(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;return -1;&quot;</span><span style="color:#98C379;--shiki-dark:#98C379;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>该代码的主要流程如下：</p><ol><li>先判断商品id是否存在，如果不存在则直接返回。</li><li>获取该商品id的库存，判断库存如果是-1，则直接返回，表示不限制库存。</li><li>如果库存大于0，则扣减库存。</li><li>如果库存等于0，是直接返回，表示库存不足。</li></ol><h2 id="_7-分布式锁" tabindex="-1"><a class="header-anchor" href="#_7-分布式锁"><span>7. 分布式锁</span></a></h2><p>之前我提到过，在秒杀的时候，需要先从缓存中查商品是否存在，如果不存在，则会从数据库中查商品。如果数据库中，则将该商品放入缓存中，然后返回。如果数据库中没有，则直接返回失败。</p><p>大家试想一下，如果在高并发下，有大量的请求都去查一个缓存中不存在的商品，这些请求都会直接打到数据库。数据库由于承受不住压力，而直接挂掉。</p><p>那么如何解决这个问题呢？</p><p>这就需要用redis分布式锁了。</p><h3 id="_7-1-setnx加锁" tabindex="-1"><a class="header-anchor" href="#_7-1-setnx加锁"><span>7.1 setNx加锁</span></a></h3><p>使用redis的分布式锁，首先想到的是<code>setNx</code>命令。</p><div class="language-scss" data-ext="scss" data-title="scss"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">if (jedis.setnx(lockKey, val) == 1) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   jedis.expire(lockKey, timeout);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>用该命令其实可以加锁，但和后面的设置超时时间是分开的，并非原子操作。</p><p>假如加锁成功了，但是设置超时时间失败了，该lockKey就变成永不失效的了。在高并发场景中，该问题会导致非常严重的后果。</p><p>那么，有没有保证原子性的加锁命令呢？</p><h3 id="_7-2-set加锁" tabindex="-1"><a class="header-anchor" href="#_7-2-set加锁"><span>7.2 set加锁</span></a></h3><p>使用redis的set命令，它可以指定多个参数。</p><div class="language-kotlin" data-ext="kotlin" data-title="kotlin"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">String result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jedis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(lockKey, requestId, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;NX&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;PX&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, expireTime);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;OK&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">equals</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(result)) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>其中：</p><ul><li>lockKey：锁的标识</li><li>requestId：请求id</li><li>NX：只在键不存在时，才对键进行设置操作。</li><li>PX：设置键的过期时间为 millisecond 毫秒。</li><li>expireTime：过期时间</li></ul><p>由于该命令只有一步，所以它是原子操作。</p><h3 id="_7-3-释放锁" tabindex="-1"><a class="header-anchor" href="#_7-3-释放锁"><span>7.3 释放锁</span></a></h3><p>接下来，有些朋友可能会问：在加锁时，既然已经有了lockKey锁标识，为什么要需要记录requestId呢？</p><p>答：requestId是在释放锁的时候用的。</p><div class="language-kotlin" data-ext="kotlin" data-title="kotlin"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (jedis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(lockKey).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">equals</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(requestId)) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    jedis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">del</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(lockKey);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>在释放锁的时候，只能释放自己加的锁，不允许释放别人加的锁。</p><p>这里为什么要用requestId，用userId不行吗？</p><p>答：如果用userId的话，假设本次请求流程走完了，准备删除锁。此时，巧合锁到了过期时间失效了。而另外一个请求，巧合使用的相同userId加锁，会成功。而本次请求删除锁的时候，删除的其实是别人的锁了。</p><p>当然使用lua脚本也能避免该问题：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then </span></span>
<span class="line"><span> return redis.call(&#39;del&#39;, KEYS[1]) </span></span>
<span class="line"><span>else </span></span>
<span class="line"><span>  return 0 </span></span>
<span class="line"><span>end</span></span></code></pre></div><p>它能保证查询锁是否存在和删除锁是原子操作。</p><h3 id="_7-4-自旋锁" tabindex="-1"><a class="header-anchor" href="#_7-4-自旋锁"><span>7.4 自旋锁</span></a></h3><p>上面的加锁方法看起来好像没有问题，但如果你仔细想想，如果有1万的请求同时去竞争那把锁，可能只有一个请求是成功的，其余的9999个请求都会失败。</p><p>在秒杀场景下，会有什么问题？</p><p>答：每1万个请求，有1个成功。再1万个请求，有1个成功。如此下去，直到库存不足。这就变成均匀分布的秒杀了，跟我们想象中的不一样。</p><p>如何解决这个问题呢？</p><p>答：使用自旋锁。</p><div class="language-kotlin line-numbers-mode" data-ext="kotlin" data-title="kotlin"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  Long start </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> System.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      String result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> jedis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(lockKey, requestId, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;NX&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;PX&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, expireTime);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">     if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;OK&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">equals</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(result)) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">     long time </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> System.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> start;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (time</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">timeout) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          Thread.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (InterruptedException e) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          e.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="color:#C678DD;--shiki-dark:#C678DD;">finally</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    unlock</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(lockKey,requestId);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在规定的时间，比如500毫秒内，自旋不断尝试加锁，如果成功则直接返回。如果失败，则休眠50毫秒，再发起新一轮的尝试。如果到了超时时间，还未加锁成功，则直接返回失败。</p><h3 id="_7-5-redisson" tabindex="-1"><a class="header-anchor" href="#_7-5-redisson"><span>7.5 redisson</span></a></h3><p>除了上面的问题之外，使用redis分布式锁，还有锁竞争问题、续期问题、锁重入问题、多个redis实例加锁问题等。</p><p>这些问题使用redisson可以解决，由于篇幅的原因，在这里先保留一点悬念，有疑问的私聊给我。后面会出一个专题介绍分布式锁，敬请期待。</p><h2 id="_8-mq异步处理" tabindex="-1"><a class="header-anchor" href="#_8-mq异步处理"><span>8 mq异步处理</span></a></h2><p>我们都知道在真实的秒杀场景中，有三个核心流程：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159170.png" alt="image-20221012232118189" tabindex="0" loading="lazy"><figcaption>image-20221012232118189</figcaption></figure><p>而这三个核心流程中，真正并发量大的是秒杀功能，下单和支付功能实际并发量很小。所以，我们在设计秒杀系统时，有必要把下单和支付功能从秒杀的主流程中拆分出来，特别是下单功能要做成mq异步处理的。而支付功能，比如支付宝支付，是业务场景本身保证的异步。</p><p>于是，秒杀后下单的流程变成如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159193.png" alt="image-20221012232217797" tabindex="0" loading="lazy"><figcaption>image-20221012232217797</figcaption></figure><p>如果使用mq，需要关注以下几个问题：</p><h3 id="_8-1-消息丢失问题" tabindex="-1"><a class="header-anchor" href="#_8-1-消息丢失问题"><span>8.1 消息丢失问题</span></a></h3><p>秒杀成功了，往mq发送下单消息的时候，有可能会失败。原因有很多，比如：网络问题、broker挂了、mq服务端磁盘问题等。这些情况，都可能会造成消息丢失。</p><p>那么，如何防止消息丢失呢？</p><p>答：加一张消息发送表。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159215.png" alt="image-20221012232255237" tabindex="0" loading="lazy"><figcaption>image-20221012232255237</figcaption></figure><p>在生产者发送mq消息之前，先把该条消息写入消息发送表，初始状态是待处理，然后再发送mq消息。消费者消费消息时，处理完业务逻辑之后，再回调生产者的一个接口，修改消息状态为已处理。</p><p>如果生产者把消息写入消息发送表之后，再发送mq消息到mq服务端的过程中失败了，造成了消息丢失。</p><p>这时候，要如何处理呢？</p><p>答：使用job，增加重试机制。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159236.png" alt="image-20221012232409013" tabindex="0" loading="lazy"><figcaption>image-20221012232409013</figcaption></figure><p>用job每隔一段时间去查询消息发送表中状态为待处理的数据，然后重新发送mq消息。</p><h3 id="_8-2-重复消费问题" tabindex="-1"><a class="header-anchor" href="#_8-2-重复消费问题"><span>8.2 重复消费问题</span></a></h3><p>本来消费者消费消息时，在ack应答的时候，如果网络超时，本身就可能会消费重复的消息。但由于消息发送者增加了重试机制，会导致消费者重复消息的概率增大。</p><p>那么，如何解决重复消息问题呢？</p><p>答：加一张消息处理表。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159260.png" alt="image-20221012232510895" tabindex="0" loading="lazy"><figcaption>image-20221012232510895</figcaption></figure><p>消费者读到消息之后，先判断一下消息处理表，是否存在该消息，如果存在，表示是重复消费，则直接返回。如果不存在，则进行下单操作，接着将该消息写入消息处理表中，再返回。</p><p>有个比较关键的点是：下单和写消息处理表，要放在同一个事务中，保证原子操作。</p><h3 id="_8-3-垃圾消息问题" tabindex="-1"><a class="header-anchor" href="#_8-3-垃圾消息问题"><span>8.3 垃圾消息问题</span></a></h3><p>这套方案表面上看起来没有问题，但如果出现了消息消费失败的情况。比如：由于某些原因，消息消费者下单一直失败，一直不能回调状态变更接口，这样job会不停的重试发消息。最后，会产生大量的垃圾消息。</p><p>那么，如何解决这个问题呢？</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159280.png" alt="image-20221012232629156" tabindex="0" loading="lazy"><figcaption>image-20221012232629156</figcaption></figure><p>每次在job重试时，需要先判断一下消息发送表中该消息的发送次数是否达到最大限制，如果达到了，则直接返回。如果没有达到，则将次数加1，然后发送消息。</p><p>这样如果出现异常，只会产生少量的垃圾消息，不会影响到正常的业务。</p><h3 id="_8-4-延迟消费问题" tabindex="-1"><a class="header-anchor" href="#_8-4-延迟消费问题"><span>8.4 延迟消费问题</span></a></h3><p>通常情况下，如果用户秒杀成功了，下单之后，在15分钟之内还未完成支付的话，该订单会被自动取消，回退库存。</p><p>那么，在15分钟内未完成支付，订单被自动取消的功能，要如何实现呢？</p><p>我们首先想到的可能是job，因为它比较简单。</p><p>但job有个问题，需要每隔一段时间处理一次，实时性不太好。</p><p>还有更好的方案？</p><p>答：使用延迟队列。</p><p>我们都知道rocketmq，自带了延迟队列的功能。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159307.png" alt="image-20221012232742299" tabindex="0" loading="lazy"><figcaption>image-20221012232742299</figcaption></figure><p>下单时消息生产者会先生成订单，此时状态为待支付，然后会向延迟队列中发一条消息。达到了延迟时间，消息消费者读取消息之后，会查询该订单的状态是否为待支付。如果是待支付状态，则会更新订单状态为取消状态。如果不是待支付状态，说明该订单已经支付过了，则直接返回。</p><p>还有个关键点，用户完成支付之后，会修改订单状态为已支付。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159331.png" alt="image-20221012232811544" tabindex="0" loading="lazy"><figcaption>image-20221012232811544</figcaption></figure><h2 id="_9-如何限流" tabindex="-1"><a class="header-anchor" href="#_9-如何限流"><span>9. 如何限流？</span></a></h2><p>通过秒杀活动，如果我们运气爆棚，可能会用非常低的价格买到不错的商品（这种概率堪比买福利彩票中大奖）。</p><p>但有些高手，并不会像我们一样老老实实，通过秒杀页面点击秒杀按钮，抢购商品。他们可能在自己的服务器上，模拟正常用户登录系统，跳过秒杀页面，直接调用秒杀接口。</p><p>如果是我们手动操作，一般情况下，一秒钟只能点击一次秒杀按钮。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159352.png" alt="image-20221012232857313" tabindex="0" loading="lazy"><figcaption>image-20221012232857313</figcaption></figure><p>但是如果是服务器，一秒钟可以请求成上千接口。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159376.png" alt="image-20221012232913511" tabindex="0" loading="lazy"><figcaption>image-20221012232913511</figcaption></figure><p>这种差距实在太明显了，如果不做任何限制，绝大部分商品可能是被机器抢到，而非正常的用户，有点不太公平。</p><p>所以，我们有必要识别这些非法请求，做一些限制。那么，我们该如何现在这些非法请求呢？</p><p>目前有两种常用的限流方式：</p><ol><li>基于nginx限流</li><li>基于redis限流</li></ol><h3 id="_9-1-对同一用户限流" tabindex="-1"><a class="header-anchor" href="#_9-1-对同一用户限流"><span>9.1 对同一用户限流</span></a></h3><p>为了防止某个用户，请求接口次数过于频繁，可以只针对该用户做限制。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159400.png" alt="image-20221012232952088" tabindex="0" loading="lazy"><figcaption>image-20221012232952088</figcaption></figure><p>个用户id，比如每分钟只能请求5次接口。</p><h3 id="_9-2-对同一ip限流" tabindex="-1"><a class="header-anchor" href="#_9-2-对同一ip限流"><span>9.2 对同一ip限流</span></a></h3><p>有时候只对某个用户限流是不够的，有些高手可以模拟多个用户请求，这种nginx就没法识别了。</p><p>这时需要加同一ip限流功能。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159426.png" alt="image-20221012233034189" tabindex="0" loading="lazy"><figcaption>image-20221012233034189</figcaption></figure><p>ip，比如每分钟只能请求5次接口。</p><p>但这种限流方式可能会有误杀的情况，比如同一个公司或网吧的出口ip是相同的，如果里面有多个正常用户同时发起请求，有些用户可能会被限制住。</p><h3 id="_9-3-对接口限流" tabindex="-1"><a class="header-anchor" href="#_9-3-对接口限流"><span>9.3 对接口限流</span></a></h3><p>别以为限制了用户和ip就万事大吉，有些高手甚至可以使用代理，每次都请求都换一个ip。</p><p>这时可以限制请求的接口总次数。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159446.png" alt="image-20221012233124788" tabindex="0" loading="lazy"><figcaption>image-20221012233124788</figcaption></figure><p>在高并发场景下，这种限制对于系统的稳定性是非常有必要的。但可能由于有些非法请求次数太多，达到了该接口的请求上限，而影响其他的正常用户访问该接口。看起来有点得不偿失。</p><h3 id="_9-4-加验证码" tabindex="-1"><a class="header-anchor" href="#_9-4-加验证码"><span>9.4 加验证码</span></a></h3><p>相对于上面三种方式，加验证码的方式可能更精准一些，同样能限制用户的访问频次，但好处是不会存在误杀的情况。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159472.png" alt="image-20221012233211809" tabindex="0" loading="lazy"><figcaption>image-20221012233211809</figcaption></figure><p>通常情况下，用户在请求之前，需要先输入验证码。用户发起请求之后，服务端会去校验该验证码是否正确。只有正确才允许进行下一步操作，否则直接返回，并且提示验证码错误。</p><p>此外，验证码一般是一次性的，同一个验证码只允许使用一次，不允许重复使用。</p><p>普通验证码，由于生成的数字或者图案比较简单，可能会被破解。优点是生成速度比较快，缺点是有安全隐患。</p><p>还有一个验证码叫做：<code>移动滑块</code>，它生成速度比较慢，但比较安全，是目前各大互联网公司的首选。</p><h3 id="_9-5-提高业务门槛" tabindex="-1"><a class="header-anchor" href="#_9-5-提高业务门槛"><span>9.5 提高业务门槛</span></a></h3><p>上面说的加验证码虽然可以限制非法用户请求，但是有些影响用户体验。用户点击秒杀按钮前，还要先输入验证码，流程显得有点繁琐，秒杀功能的流程不是应该越简单越好吗？</p><p>其实，有时候达到某个目的，不一定非要通过技术手段，通过业务手段也一样。</p><p>12306刚开始的时候，全国人民都在同一时刻抢火车票，由于并发量太大，系统经常挂。后来，重构优化之后，将购买周期放长了，可以提前20天购买火车票，并且可以在9点、10、11点、12点等整点购买火车票。调整业务之后（当然技术也有很多调整），将之前集中的请求，分散开了，一下子降低了用户并发量。</p><p>回到这里，我们通过提高业务门槛，比如只有会员才能参与秒杀活动，普通注册用户没有权限。或者，只有等级到达3级以上的普通用户，才有资格参加该活动。</p><p>这样简单的提高一点门槛，即使是黄牛党也束手无策，他们总不可能为了参加一次秒杀活动，还另外花钱充值会员吧？</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://juejin.cn/post/6990307911117307934" target="_blank" rel="noopener noreferrer">面试必考：秒杀系统要如何设计？</a></p>`,248)]))}const o=a(l,[["render",p],["__file","mall-second-kill.html.vue"]]),c=JSON.parse('{"path":"/posts/Architect/mall/mall-second-kill.html","title":"商城设计 - 秒杀系统设计？","lang":"zh-CN","frontmatter":{"order":10,"category":["mall"],"description":"商城设计 - 秒杀系统设计？ image-20221012225218315image-20221012225218315 0. 前言 高并发下如何设计秒杀系统？这是一个高频面试题。这个问题看似简单，但是里面的水很深，它考查的是高并发场景下，从前端到后端多方面的知识。 秒杀一般出现在商城的促销活动中，指定了一定数量（比如：10个）的商品（比如：手机），...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Architect/mall/mall-second-kill.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"商城设计 - 秒杀系统设计？"}],["meta",{"property":"og:description","content":"商城设计 - 秒杀系统设计？ image-20221012225218315image-20221012225218315 0. 前言 高并发下如何设计秒杀系统？这是一个高频面试题。这个问题看似简单，但是里面的水很深，它考查的是高并发场景下，从前端到后端多方面的知识。 秒杀一般出现在商城的促销活动中，指定了一定数量（比如：10个）的商品（比如：手机），..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159826.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"商城设计 - 秒杀系统设计？\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159826.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159871.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159894.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159915.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159939.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159972.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159999.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159024.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159043.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159064.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159084.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159105.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159127.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159149.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159170.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159193.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159215.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159236.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159260.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159280.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159307.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159331.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159352.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159376.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159400.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159426.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159446.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159472.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"0. 前言","slug":"_0-前言","link":"#_0-前言","children":[]},{"level":2,"title":"1. 瞬时高并发","slug":"_1-瞬时高并发","link":"#_1-瞬时高并发","children":[]},{"level":2,"title":"2. 页面静态化与CDN","slug":"_2-页面静态化与cdn","link":"#_2-页面静态化与cdn","children":[]},{"level":2,"title":"3. 秒杀按钮","slug":"_3-秒杀按钮","link":"#_3-秒杀按钮","children":[]},{"level":2,"title":"4. 读多写少","slug":"_4-读多写少","link":"#_4-读多写少","children":[]},{"level":2,"title":"5. 缓存问题","slug":"_5-缓存问题","link":"#_5-缓存问题","children":[{"level":3,"title":"5.1 缓存击穿","slug":"_5-1-缓存击穿","link":"#_5-1-缓存击穿","children":[]},{"level":3,"title":"5.2 缓存穿透","slug":"_5-2-缓存穿透","link":"#_5-2-缓存穿透","children":[]}]},{"level":2,"title":"6. 库存问题","slug":"_6-库存问题","link":"#_6-库存问题","children":[{"level":3,"title":"6.1 数据库扣减库存","slug":"_6-1-数据库扣减库存","link":"#_6-1-数据库扣减库存","children":[]},{"level":3,"title":"6.2 redis扣减库存","slug":"_6-2-redis扣减库存","link":"#_6-2-redis扣减库存","children":[]},{"level":3,"title":"6.3 lua脚本扣减库存","slug":"_6-3-lua脚本扣减库存","link":"#_6-3-lua脚本扣减库存","children":[]}]},{"level":2,"title":"7. 分布式锁","slug":"_7-分布式锁","link":"#_7-分布式锁","children":[{"level":3,"title":"7.1 setNx加锁","slug":"_7-1-setnx加锁","link":"#_7-1-setnx加锁","children":[]},{"level":3,"title":"7.2 set加锁","slug":"_7-2-set加锁","link":"#_7-2-set加锁","children":[]},{"level":3,"title":"7.3 释放锁","slug":"_7-3-释放锁","link":"#_7-3-释放锁","children":[]},{"level":3,"title":"7.4 自旋锁","slug":"_7-4-自旋锁","link":"#_7-4-自旋锁","children":[]},{"level":3,"title":"7.5 redisson","slug":"_7-5-redisson","link":"#_7-5-redisson","children":[]}]},{"level":2,"title":"8 mq异步处理","slug":"_8-mq异步处理","link":"#_8-mq异步处理","children":[{"level":3,"title":"8.1 消息丢失问题","slug":"_8-1-消息丢失问题","link":"#_8-1-消息丢失问题","children":[]},{"level":3,"title":"8.2 重复消费问题","slug":"_8-2-重复消费问题","link":"#_8-2-重复消费问题","children":[]},{"level":3,"title":"8.3 垃圾消息问题","slug":"_8-3-垃圾消息问题","link":"#_8-3-垃圾消息问题","children":[]},{"level":3,"title":"8.4 延迟消费问题","slug":"_8-4-延迟消费问题","link":"#_8-4-延迟消费问题","children":[]}]},{"level":2,"title":"9. 如何限流？","slug":"_9-如何限流","link":"#_9-如何限流","children":[{"level":3,"title":"9.1 对同一用户限流","slug":"_9-1-对同一用户限流","link":"#_9-1-对同一用户限流","children":[]},{"level":3,"title":"9.2 对同一ip限流","slug":"_9-2-对同一ip限流","link":"#_9-2-对同一ip限流","children":[]},{"level":3,"title":"9.3 对接口限流","slug":"_9-3-对接口限流","link":"#_9-3-对接口限流","children":[]},{"level":3,"title":"9.4 加验证码","slug":"_9-4-加验证码","link":"#_9-4-加验证码","children":[]},{"level":3,"title":"9.5 提高业务门槛","slug":"_9-5-提高业务门槛","link":"#_9-5-提高业务门槛","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":23.78,"words":7135},"filePathRelative":"posts/Architect/mall/mall-second-kill.md","localizedDate":"2024年10月28日","excerpt":"\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301159826.png\\" alt=\\"image-20221012225218315\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20221012225218315</figcaption></figure>\\n<h2>0. 前言</h2>\\n<p>高并发下如何设计秒杀系统？这是一个高频面试题。这个问题看似简单，但是里面的水很深，它考查的是高并发场景下，从前端到后端多方面的知识。</p>\\n<p>秒杀一般出现在商城的<code>促销活动</code>中，指定了一定数量（比如：10个）的商品（比如：手机），以极低的价格（比如：0.1元），让大量用户参与活动，但只有极少数用户能够购买成功。这类活动商家绝大部分是不赚钱的，说白了是找个噱头宣传自己。</p>","autoDesc":true}');export{o as comp,c as data};
