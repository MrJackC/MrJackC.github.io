import{_ as a,c as i,a as n,o}from"./app-BQBjlK2G.js";const e={};function l(r,s){return o(),i("div",null,s[0]||(s[0]=[n('<h1 id="mysql-慢查询的12个原因" tabindex="-1"><a class="header-anchor" href="#mysql-慢查询的12个原因"><span>MySQL - 慢查询的12个原因</span></a></h1><h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言"><span>0. 前言</span></a></h2><p>日常开发中，我们经常会遇到<strong>数据库慢查询</strong>。那么导致数据慢查询都有哪些常见的原因呢？今天田螺哥就跟大家聊聊导致MySQL慢查询的12个常见原因，以及对应的解决方法。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934295.png" alt="image-20221204221904146" tabindex="0" loading="lazy"><figcaption>image-20221204221904146</figcaption></figure><h2 id="_1-sql没加索引" tabindex="-1"><a class="header-anchor" href="#_1-sql没加索引"><span>1. SQL没加索引</span></a></h2><p>很多时候，我们的慢查询，都是因为<strong>没有加索引</strong>。如果没有加索引的话，会导致全表扫描的。因此，应考虑在<code>where</code>的条件列，<strong>建立索引</strong>，尽量避免全表扫描。</p><p><strong>反例：</strong></p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_info </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> name</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;捡田螺的小男孩公众号&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> ;</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934337.png" alt="image-20221204222110021" tabindex="0" loading="lazy"><figcaption>image-20221204222110021</figcaption></figure><p><strong>正例：</strong></p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">//添加索引</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">alter</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_info </span><span style="color:#C678DD;--shiki-dark:#C678DD;">add</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_name (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934372.png" alt="image-20221204222139505" tabindex="0" loading="lazy"><figcaption>image-20221204222139505</figcaption></figure><p>你也可以通过命令<code>show create table</code>，整张表的索引情况。</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">show </span><span style="color:#C678DD;--shiki-dark:#C678DD;">create</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> table</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_info;</span></span></code></pre></div><h2 id="_2-sql-索引不生效" tabindex="-1"><a class="header-anchor" href="#_2-sql-索引不生效"><span>2. SQL 索引不生效</span></a></h2><p>有时候我们明明加了索引了，但是索引却不生效。在哪些场景，索引会不生效呢？主要有以下十大经典场景：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934404.png" alt="image-20221204222211038" tabindex="0" loading="lazy"><figcaption>image-20221204222211038</figcaption></figure><h3 id="_2-1-隐式的类型转换-索引失效" tabindex="-1"><a class="header-anchor" href="#_2-1-隐式的类型转换-索引失效"><span>2.1 隐式的类型转换，索引失效</span></a></h3><p>我们创建一个用户user表</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  userId </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">32</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  age  </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">16</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_userid (userId) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p><code>userId</code>字段为<strong>字串类型</strong>，是B+树的普通索引，如果查询条件传了一个<strong>数字</strong>过去，会导致索引失效。如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934442.png" alt="image-20221204222253710" tabindex="0" loading="lazy"><figcaption>image-20221204222253710</figcaption></figure><p>如果给数字加上<code>&#39;&#39;</code>,也就是说，传的是一个字符串呢，<strong>当然是走索引</strong>，如下图：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934468.png" alt="image-20221204222316243" tabindex="0" loading="lazy"><figcaption>image-20221204222316243</figcaption></figure><blockquote><p>为什么第一条语句<strong>未加单引号就不走索引</strong>了呢？这是因为不加单引号时，是字符串跟数字的比较，它们类型不匹配，MySQL会做<strong>隐式的类型转换</strong>，把它们转换为浮点数再做比较。隐式的类型转换，索引会失效。</p></blockquote><h3 id="_2-2-查询条件包含or-可能导致索引失效" tabindex="-1"><a class="header-anchor" href="#_2-2-查询条件包含or-可能导致索引失效"><span>2.2 查询条件包含or，可能导致索引失效</span></a></h3><p>我们还是用这个表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  userId </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">32</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  age  </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">16</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_userid (userId) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>其中<code>userId</code>加了索引，但是<code>age</code>没有加索引的。我们使用了<code>or</code>，以下SQL是不走索引的，如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934498.png" alt="image-20221204222439531" tabindex="0" loading="lazy"><figcaption>image-20221204222439531</figcaption></figure><p>对于<code>or</code>+没有索引的<code>age</code>这种情况，假设它走了<code>userId</code>的索引，但是走到<code>age</code>查询条件时，它还得全表扫描，也就是需要三步过程：<strong>全表扫描+索引扫描+合并</strong>。如果它一开始就走<strong>全表扫描</strong>，直接一遍扫描就完事。Mysql优化器出于效率与成本考虑，遇到<code>or</code>条件，让索引失效，看起来也合情合理嘛。</p><p><strong>注意</strong>：如果<code>or</code>条件的列都加了索引，<strong>索引可能会走也可能不走</strong>，大家可以自己试一试哈。但是平时大家使用的时候，还是要注意一下这个<code>or</code>，学会用<code>explain</code>分析。遇到不走索引的时候，考虑拆开两条SQL。</p><h3 id="_2-3-like通配符可能导致索引失效。" tabindex="-1"><a class="header-anchor" href="#_2-3-like通配符可能导致索引失效。"><span>2.3. like通配符可能导致索引失效。</span></a></h3><p>并不是用了<code>like</code>通配符，索引一定会失效，而是like查询是以<code>%</code>开头，才会导致索引失效。</p><p>like查询以<code>%</code>开头，索引失效</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">explain </span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> userId </span><span style="color:#C678DD;--shiki-dark:#C678DD;">like</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;%123&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934525.png" alt="image-20221204222633501" tabindex="0" loading="lazy"><figcaption>image-20221204222633501</figcaption></figure><p>把<code>%</code>放后面，发现索引还是正常走的，如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">explain </span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> userId </span><span style="color:#C678DD;--shiki-dark:#C678DD;">like</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;123%&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934548.png" alt="image-20221204222658398" tabindex="0" loading="lazy"><figcaption>image-20221204222658398</figcaption></figure><p>既然<code>like</code>查询以<code>%</code>开头，会导致索引失效。我们如何优化呢？</p><ul><li>使用覆盖索引</li><li>把<code>%</code>放后面</li></ul><h3 id="_2-4-查询条件不满足联合索引的最左匹配原则" tabindex="-1"><a class="header-anchor" href="#_2-4-查询条件不满足联合索引的最左匹配原则"><span>2.4 查询条件不满足联合索引的最左匹配原则</span></a></h3><p>MySQl建立联合索引时，会遵循最左前缀匹配的原则，即最左优先。如果你建立一个<code>（a,b,c）</code>的联合索引，相当于建立了<code>(a)、(a,b)、(a,b,c)</code>三个索引。</p><p>假设有以下表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  user_id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">32</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  age  </span><span style="color:#C678DD;--shiki-dark:#C678DD;">varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">16</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_userid_name (user_id,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>有一个联合索引<code>idx_userid_name</code>，我们执行这个SQL，查询条件是<code>name</code>，索引是无效：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>explain select * from user where name =&#39;捡田螺的小男孩&#39;;</span></span></code></pre></div><p>因为查询条件列<code>name</code>不是联合索引<code>idx_userid_name</code>中的第一个列，索引不生效</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934575.png" alt="image-20221204222843874" tabindex="0" loading="lazy"><figcaption>image-20221204222843874</figcaption></figure><p>在联合索引中，查询条件满足<strong>最左匹配原则</strong>时，索引才正常生效。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934604.png" alt="image-20221204222934626" tabindex="0" loading="lazy"><figcaption>image-20221204222934626</figcaption></figure><h3 id="_2-5-在索引列上使用mysql的内置函数" tabindex="-1"><a class="header-anchor" href="#_2-5-在索引列上使用mysql的内置函数"><span>2.5 在索引列上使用mysql的内置函数</span></a></h3><p>表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `userId`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">32</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `login_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_userId`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`userId`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_login_time`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`login_Time`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>虽然<code>login_time</code>加了索引，但是因为使用了<code>mysql</code>的内置函数<code>Date_ADD()</code>，索引直接GG，如图：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934632.png" alt="image-20221204223030874" tabindex="0" loading="lazy"><figcaption>image-20221204223030874</figcaption></figure><p>一般这种情况怎么优化呢？可以把<strong>内置函数的逻辑转移到右边</strong>，如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">explain  </span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> login_time </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> DATE_ADD(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;2022-05-22 00:00:00&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,INTERVAL -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DAY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="_2-6-对索引进行列运算-如-、-、-、-索引不生效" tabindex="-1"><a class="header-anchor" href="#_2-6-对索引进行列运算-如-、-、-、-索引不生效"><span>2.6 对索引进行列运算（如，+、-、*、/）,索引不生效</span></a></h3><p>表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `userId`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">32</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `age`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_age`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`age`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>虽然<code>age</code>加了索引，但是因为它进行运算，索引直接迷路了。。。如图：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934652.png" alt="image-20221204223124501" tabindex="0" loading="lazy"><figcaption>image-20221204223124501</figcaption></figure><p>所以<strong>不可以对索引列进行运算，可以在代码处理好，再传参进去</strong>。</p><h3 id="_2-7-索引字段上使用-或者-索引可能失效" tabindex="-1"><a class="header-anchor" href="#_2-7-索引字段上使用-或者-索引可能失效"><span>2.7 索引字段上使用（！= 或者 &lt; &gt;），索引可能失效</span></a></h3><p>表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `userId`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `age`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_age`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`age`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>虽然<code>age</code>加了索引，但是使用了<code>！= </code>或者<code>&lt; &gt;，not in</code>这些时，索引如同虚设。如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934687.png" alt="image-20221204223223570" tabindex="0" loading="lazy"><figcaption>image-20221204223223570</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934720.png" alt="image-20221204223235494" tabindex="0" loading="lazy"><figcaption>image-20221204223235494</figcaption></figure><p>其实这个也是跟<code>mySQL优化器</code>有关，如果优化器觉得即使走了索引，还是需要扫描很多很多行的哈，它觉得不划算，<strong>不如直接不走索引</strong>。平时我们用<code>！= </code>或者<code>&lt; &gt;，not in</code>的时候，留点心眼哈。</p><h3 id="_2-8-索引字段上使用is-null-is-not-null-索引可能失效" tabindex="-1"><a class="header-anchor" href="#_2-8-索引字段上使用is-null-is-not-null-索引可能失效"><span>2.8 索引字段上使用is null， is not null，索引可能失效</span></a></h3><p>表结构:</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `card`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_card`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`card`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre></div><p>单个<code>name</code>字段加上索引，并查询<code>name</code>为非空的语句，其实会走索引的，如下:</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934752.png" alt="image-20221204223314545" tabindex="0" loading="lazy"><figcaption>image-20221204223314545</figcaption></figure><p>单个<code>card</code>字段加上索引，并查询name为非空的语句，其实会走索引的，如下:</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934779.png" alt="image-20221204223334347" tabindex="0" loading="lazy"><figcaption>image-20221204223334347</figcaption></figure><p>但是它两用or连接起来，索引就失效了，如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934808.png" alt="image-20221204223409620" tabindex="0" loading="lazy"><figcaption>image-20221204223409620</figcaption></figure><p>很多时候，也是因为数据量问题，导致了MySQL优化器放弃走索引。同时，平时我们用explain分析SQL的时候，如果<code>type=range</code>,要注意一下哈，因为这个可能因为数据量问题，导致索引无效。</p><h3 id="_2-9-左右连接-关联的字段编码格式不一样" tabindex="-1"><a class="header-anchor" href="#_2-9-左右连接-关联的字段编码格式不一样"><span>2.9 左右连接，关联的字段编码格式不一样</span></a></h3><p>新建两个表，一个<code>user</code>，一个<code>user_job</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">CHARACTER</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> SET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> utf8mb4 </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `age`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">user_job</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `userId`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `job`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>user</code>表的<code>name</code>字段编码是<code>utf8mb4</code>，而<code>user_job</code>表的<code>name</code>字段编码为<code>utf8</code>。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934837.png" alt="image-20221204223521748" tabindex="0" loading="lazy"><figcaption>image-20221204223521748</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934864.png" alt="image-20221204223533548" tabindex="0" loading="lazy"><figcaption>image-20221204223533548</figcaption></figure><p>执行左外连接查询,<code>user_job</code>表还是走全表扫描，如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934886.png" alt="image-20221204223549208" tabindex="0" loading="lazy"><figcaption>image-20221204223549208</figcaption></figure><p>如果把它们的<code>name</code>字段改为编码一致，相同的SQL，还是会走索引。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934917.png" alt="image-20221204223613432" tabindex="0" loading="lazy"><figcaption>image-20221204223613432</figcaption></figure><p>所以大家在做表关联时，注意一下<strong>关联字段的编码问题</strong>哈。</p><h3 id="_2-10-优化器选错了索引" tabindex="-1"><a class="header-anchor" href="#_2-10-优化器选错了索引"><span>2.10 优化器选错了索引</span></a></h3><p>MySQL 中一张表是可以支持多个索引的。你写<code>SQL</code>语句的时候，没有主动指定使用哪个索引的话，用哪个索引是由<code>MySQL</code>来确定的。</p><p>我们日常开发中，不断地删除历史数据和新增数据的场景，有可能会导致MySQL选错索引。那么有哪些解决方案呢？</p><ul><li>使用<code>force index</code> 强行选择某个索引</li><li>修改你的SQl，引导它使用我们期望的索引</li><li>优化你的业务逻辑</li><li>优化你的索引，新建一个更合适的索引，或者删除误用的索引。</li></ul><h2 id="_3-limit深分页问题" tabindex="-1"><a class="header-anchor" href="#_3-limit深分页问题"><span>3. limit深分页问题</span></a></h2><p>limit深分页问题，会导致慢查询，应该大家都司空见惯了吧。</p><h3 id="_3-1-limit深分页为什么会变慢" tabindex="-1"><a class="header-anchor" href="#_3-1-limit深分页为什么会变慢"><span>3.1 limit深分页为什么会变慢</span></a></h3><p>limit深分页为什么会导致<strong>SQL变慢</strong>呢？假设我们有表结构如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> account</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;主键Id&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;账户名&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  balance </span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;余额&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  create_time </span><span style="color:#C678DD;--shiki-dark:#C678DD;">datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;创建时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  update_time </span><span style="color:#C678DD;--shiki-dark:#C678DD;">datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ON</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> UPDATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;更新时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_name (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> idx_create_time (create_time) //索引</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1570068</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8 ROW_FORMAT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">REDUNDANT COMMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;账户表&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>你知道以下<code>SQL</code>，执行过程是怎样的嘛？</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> id,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,balance </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> account </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> create_time</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;2020-09-19&#39;</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> limit</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 100000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>这个SQL的执行流程：</p><ol><li>通过普通二级索引树<code>idx_create_time</code>，过滤<code>create_time</code>条件，找到满足条件的主键<code>id</code>。</li><li>通过<code>主键id</code>，回到<code>id主键索引树</code>，找到满足记录的行，然后取出需要展示的列（回表过程）</li><li>扫描满足条件的<code>100010</code>行，然后扔掉前<code>100000</code>行，返回。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934950.png" alt="image-20221204224433513" tabindex="0" loading="lazy"><figcaption>image-20221204224433513</figcaption></figure><p><code>limit</code>深分页，导致<code>SQL</code>变慢原因有两个：</p><ul><li><code>limit</code>语句会先扫描<code>offset+n</code>行，然后再丢弃掉前<code>offset</code>行，返回后<code>n</code>行数据。也就是说<code>limit 100000,10</code>，就会扫描<code>100010</code>行，而limit <code>0,10</code>，只扫描<code>10</code>行。</li><li><code>limit 100000,10</code> 扫描更多的行数，也意味着<strong>回表更多的次数</strong>。</li></ul><h3 id="_3-2-如何优化深分页问题" tabindex="-1"><a class="header-anchor" href="#_3-2-如何优化深分页问题"><span>3.2 如何优化深分页问题</span></a></h3><p>我们可以通过减少回表次数来优化。一般有<strong>标签记录法和延迟关联法</strong>。</p><h4 id="_3-2-1-标签记录法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-标签记录法"><span>3.2.1 <strong>标签记录法</strong></span></a></h4><blockquote><p>就是标记一下上次查询到哪一条了，下次再来查的时候，从该条开始往下扫描。就好像看书一样，上次看到哪里了，你就折叠一下或者夹个书签，下次来看的时候，直接就翻到啦。</p></blockquote><p>假设上一次记录到<code>100000</code>，则SQL可以修改为：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select  id,name,balance FROM account where id &gt; 100000 limit 10;</span></span></code></pre></div><p>这样的话，后面无论翻多少页，性能都会不错的，因为命中了<code>id索引</code>。但是这种方式有局限性：需要一种类似连续自增的字段。</p><h4 id="_3-2-2-延迟关联法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-延迟关联法"><span>3.2.2 <strong>延迟关联法</strong></span></a></h4><p>延迟关联法，就是把条件转移到<strong>主键索引树</strong>，然后减少回表。如下：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select  acct1.id,acct1.name,acct1.balance FROM account acct1 INNER JOIN (SELECT a.id FROM account a WHERE a.create_time &gt; &#39;2020-09-19&#39; limit 100000, 10) AS acct2 on acct1.id= acct2.id;</span></span></code></pre></div><p><strong>优化思路</strong>就是，先通过<code>idx_create_time</code>二级索引树查询到满足条件的<code>主键ID</code>，再与原表通过<code>主键ID</code>内连接，这样后面直接走了主键索引了，同时也减少了回表。</p><h2 id="_4-单表数据量太大" tabindex="-1"><a class="header-anchor" href="#_4-单表数据量太大"><span>4. 单表数据量太大</span></a></h2><h3 id="_4-1-单表数据量太大为什么会变慢" tabindex="-1"><a class="header-anchor" href="#_4-1-单表数据量太大为什么会变慢"><span>4.1 单表数据量太大为什么会变慢？</span></a></h3><p>一个表的数据量达到好几千万或者上亿时，加索引的效果没那么明显啦。性能之所以会变差，是因为维护索引的<code>B+</code>树结构层级变得更高了，查询一条数据时，需要经历的磁盘IO变多，因此查询性能变慢。</p><h3 id="_4-2-一棵b-树可以存多少数据量" tabindex="-1"><a class="header-anchor" href="#_4-2-一棵b-树可以存多少数据量"><span>4.2 一棵B+树可以存多少数据量</span></a></h3><p><strong>大家是否还记得，一个B+树大概可以存放多少数据量呢？</strong></p><p>InnoDB存储引擎最小储存单元是页，一页大小就是<code>16k</code>。</p><p>B+树叶子存的是数据，内部节点存的是键值+指针。索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而再去数据页中找到需要的数据；</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934981.png" alt="image-20221204224710967" tabindex="0" loading="lazy"><figcaption>image-20221204224710967</figcaption></figure><p>假设B+树的高度为<code>2</code>的话，即有一个根结点和若干个叶子结点。这棵B+树的存放总记录数为=根结点指针数*单个叶子节点记录行数。</p><ul><li>如果一行记录的数据大小为1k，那么单个叶子节点可以存的记录数 =16k/1k =16.</li><li>非叶子节点内存放多少指针呢？我们假设主键ID为<strong>bigint类型，长度为8字节</strong>(<strong>面试官问你int类型，一个int就是32位，4字节</strong>)，而指针大小在InnoDB源码中设置为6字节，所以就是8+6=14字节，16k/14B =16*1024B/14B = 1170</li></ul><p>因此，一棵高度为2的B+树，能存放<code>1170 * 16=18720</code>条这样的数据记录。同理一棵高度为3的B+树，能存放<code>1170 *1170 *16 =21902400</code>，也就是说，可以存放两千万左右的记录。B+树高度一般为1-3层，已经满足千万级别的数据存储。</p><p>如果B+树想存储更多的数据，那树结构层级就会更高，查询一条数据时，需要经历的磁盘IO变多，因此查询性能变慢。</p><h3 id="_4-3-如何解决单表数据量太大-查询变慢的问题" tabindex="-1"><a class="header-anchor" href="#_4-3-如何解决单表数据量太大-查询变慢的问题"><span>4.3 如何解决单表数据量太大，查询变慢的问题</span></a></h3><p>一般超过千万级别，我们可以考虑<strong>分库分表</strong>了。</p><p>分库分表可能导致的问题：</p><ul><li>事务问题</li><li>跨库问题</li><li>排序问题</li><li>分页问题</li><li>分布式ID</li></ul><p>因此，大家在评估是否分库分表前，先考虑下，是否可以把部分历史数据归档先，如果可以的话，先不要急着<strong>分库分表</strong>。如果真的要分库分表，综合考虑和评估方案。比如可以考虑垂直、水平分库分表。水平分库分表策略的话，<strong>range范围、hash取模、range+hash取模混合</strong>等等。</p><h2 id="_5-join-或者子查询过多" tabindex="-1"><a class="header-anchor" href="#_5-join-或者子查询过多"><span>5. join 或者子查询过多</span></a></h2><p>一般来说，不建议使用子查询，可以把子查询改成<code>join</code>来优化。而数据库有个规范约定就是：<strong>尽量不要有超过3个以上的表连接</strong>。为什么要这么建议呢? 我们来聊聊，<code>join</code>哪些方面可能导致慢查询吧。</p><p>MySQL中，join的执行算法，分别是：<code>Index Nested-Loop Join</code>和<code>Block Nested-Loop Join</code>。</p><ul><li><code>Index Nested-Loop Join</code>：这个join算法，跟我们写程序时的嵌套查询类似，并且可以用上<strong>被驱动表的索引</strong>。</li><li><code>Block Nested-Loop Join</code>：这种join算法，<strong>被驱动表上没有可用的索引</strong>,它会先把驱动表的数据读入线程内存<code>join_buffer</code>中，再扫描被驱动表，把被驱动表的每一行取出来，跟<code>join_buffer</code>中的数据做对比，满足join条件的，作为结果集的一部分返回。</li></ul><p><code>join</code>过多的问题：</p><blockquote><p>一方面，过多的表连接，会大大增加SQL复杂度。另外一方面，如果可以使用被驱动表的<strong>索引</strong>那还好，并且使用<strong>小表来做驱动表</strong>，<strong>查询效率更佳</strong>。如果被驱动表<strong>没有可用的索引</strong>，join是在<code>join_buffer</code>内存做的，如果匹配的数据量比较小或者<code>join_buffer</code>设置的比较大，速度也不会太慢。但是，如果<code>join</code>的数据量比较大时，mysql会采用在硬盘上创建临时表的方式进行多张表的关联匹配，这种显然效率就极低，本来磁盘的 IO 就不快，还要关联。</p></blockquote><p>一般情况下，如果业务需要的话，关联<code>2~3</code>个表是可以接受的，但是<strong>关联的字段需要加索引</strong>哈。如果需要关联更多的表，建议从代码层面进行拆分，在业务层先查询一张表的数据，然后以关联字段作为条件查询关联表形成<code>map</code>，然后在业务层进行数据的拼装。</p><h2 id="_6-in元素过多" tabindex="-1"><a class="header-anchor" href="#_6-in元素过多"><span>6. in元素过多</span></a></h2><p>如果使用了<code>in</code>，即使后面的条件加了索引，还是要注意<code>in</code>后面的元素不要过多哈。<code>in</code>元素一般建议不要超过<code>500</code>个，如果超过了，建议分组，每次<code>500</code>一组进行哈。</p><p><strong>反例：</strong></p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_id,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">...</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1000000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>如果我们对<code>in的条件</code>不做任何限制的话，该查询语句一次性可能会查询出非常多的数据，很容易导致接口超时。尤其有时候，我们是用的子查询，in后面的子查询，你都不知道数量有多少那种，更容易采坑（<strong>所以我把in元素过多抽出来作为一个小节</strong>）。如下这种子查询：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> author_id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> artilce </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> type</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>正例是，<strong>分批进行</strong>，每批500个：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_id,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> user_id </span><span style="color:#C678DD;--shiki-dark:#C678DD;">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">...</span><span style="color:#D19A66;--shiki-dark:#D19A66;">500</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>如果传参的ids太多，还可以做个参数校验什么的</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">userIds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">size</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 500</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    throw</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Exception</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;单次查询的用户Id不能超过500&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h2 id="_7-数据库在刷脏页" tabindex="-1"><a class="header-anchor" href="#_7-数据库在刷脏页"><span>7. 数据库在刷脏页</span></a></h2><h3 id="_7-1-什么是脏页" tabindex="-1"><a class="header-anchor" href="#_7-1-什么是脏页"><span>7.1 什么是脏页</span></a></h3><p>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“<strong>脏页</strong>”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“<strong>干净页</strong>”。一般有更新SQL才可能会导致脏页，我们回忆一下：一条更新语句是如何执行的</p><h3 id="_7-2-一条更新语句是如何执行的" tabindex="-1"><a class="header-anchor" href="#_7-2-一条更新语句是如何执行的"><span>7.2 一条更新语句是如何执行的？</span></a></h3><p>以下的这个更新SQL，如何执行的呢？</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">update</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> t </span><span style="color:#C678DD;--shiki-dark:#C678DD;">set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> c</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">c+</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">666</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><ol><li>对于这条更新SQL，执行器会先找引擎取<code>id=666</code>这一行。如果这行所在的数据页本来就在内存中的话，就直接返回给执行器。如果不在内存，就去磁盘读入内存，再返回。</li><li>执行器拿到引擎给的行数据后，给这一行<code>C</code>的值加一，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到<code>redo log</code>里面，但是此时<code>redo log </code>是处于<code>prepare</code>状态的哈。</li><li>执行器生成这个操作的<code>binlog</code>，并把<code>binlog</code>写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的<code>redo log</code>改成提交（commit）状态，更新完成。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934010.png" alt="image-20221204225312611" tabindex="0" loading="lazy"><figcaption>image-20221204225312611</figcaption></figure><p>InnoDB 在处理更新语句的时候，只做了写日志这一个磁盘操作。这个日志叫作<code>redo log</code>（重做日志）。平时更新SQL执行得很快，其实是因为它只是在写内存和<code>redo log</code>日志，等到空闲的时候，才把<code>redo log</code>日志里的数据同步到磁盘中。</p><blockquote><p>有些小伙伴可能有疑惑，<code>redo log</code>日志不是在磁盘嘛？那为什么不慢？其实是因为写<code>redo log</code>的过程是顺序写磁盘的。<strong>磁盘顺序写</strong>会减少寻道等待时间，速度比随机写要快很多的。</p></blockquote><h3 id="_7-3-为什么会出现脏页呢" tabindex="-1"><a class="header-anchor" href="#_7-3-为什么会出现脏页呢"><span>7.3 为什么会出现脏页呢？</span></a></h3><p>更新SQL只是在写内存和<code>redo log</code>日志，等到空闲的时候，才把<code>redo log</code>日志里的数据同步到磁盘中。这时内存数据页跟磁盘数据页内容不一致,就出现脏页。</p><h3 id="_7-4-什么时候会刷脏页-flush" tabindex="-1"><a class="header-anchor" href="#_7-4-什么时候会刷脏页-flush"><span>7.4 什么时候会刷脏页（flush）？</span></a></h3><p>InnoDB存储引擎的<code>redo log</code>大小是固定，且是环型写入的，如下图（图片来源于MySQL 实战 45 讲）：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934041.png" alt="image-20221204225419282" tabindex="0" loading="lazy"><figcaption>image-20221204225419282</figcaption></figure><p>那什么时候会刷脏页？有几种场景：</p><ol><li><code>redo log</code>写满了，要刷脏页。这种情况要尽量避免的。因为出现这种情况时，整个系统就不能再接受更新啦，即所有的更新都必须堵住。</li><li>内存不够了，需要新的内存页，就要淘汰一些数据页，这时候会刷脏页</li></ol><blockquote><p>InnoDB 用缓冲池（buffer pool）管理内存,而当要读入的数据页没有在内存的时候，就必须到缓冲池中申请一个数据页。这时候只能把最久不使用的数据页从内存中淘汰掉：如果要淘汰的是一个干净页，就直接释放出来复用；但如果是脏页呢，就必须<strong>将脏页先刷到磁盘</strong>，变成干净页后才能复用。</p></blockquote><ol><li>MySQL 认为<strong>系统空闲</strong>的时候，也会刷一些脏页</li><li>MySQL 正常关闭时，会把内存的脏页都 flush 到磁盘上</li></ol><h3 id="_7-5-为什么刷脏页会导致sql变慢呢" tabindex="-1"><a class="header-anchor" href="#_7-5-为什么刷脏页会导致sql变慢呢"><span>7.5 为什么刷脏页会导致SQL变慢呢？</span></a></h3><ol><li><code>redo log</code>写满了，要刷脏页，这时候会导致系统所有的更新堵住，写性能都跌为0了，肯定慢呀。一般要杜绝出现这个情况。</li><li>一个查询要淘汰的脏页个数太多，一样会导致查询的响应时间明显变长。</li></ol><h2 id="_8-order-by-文件排序" tabindex="-1"><a class="header-anchor" href="#_8-order-by-文件排序"><span>8. order by 文件排序</span></a></h2><p><code>order by</code>就一定会导致慢查询吗？<strong>不是这样的哈</strong>，因为<code>order by</code>平时用得多，并且数据量一上来，还是走<strong>文件排序</strong>的话，很容易有慢SQL的。听我娓娓道来，<code>order by</code>哪些时候可能会导致慢SQL哈。</p><h3 id="_8-1-order-by-的-using-filesort文件排序" tabindex="-1"><a class="header-anchor" href="#_8-1-order-by-的-using-filesort文件排序"><span>8.1 order by 的 Using filesort文件排序</span></a></h3><p>我们平时经常需要用到<code>order by</code> ，主要就是用来给某些字段排序的。比如以下SQL:</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select name,age,city from staff where city = &#39;深圳&#39; order by age limit 10;</span></span></code></pre></div><p>它表示的意思就是：<strong>查询前10个，来自深圳员工的姓名、年龄、城市，并且按照年龄小到大排序。</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934068.png" alt="image-20221204225551385" tabindex="0" loading="lazy"><figcaption>image-20221204225551385</figcaption></figure><p>查看<code>explain</code>执行计划的时候，可以看到<code>Extra</code>这一列，有一个<code>Using filesort</code>，它表示用到<strong>文件排序</strong>。</p><h3 id="_8-2-order-by文件排序效率为什么较低" tabindex="-1"><a class="header-anchor" href="#_8-2-order-by文件排序效率为什么较低"><span>8.2 order by文件排序效率为什么较低</span></a></h3><p><code>order by</code>用到文件排序时，为什么查询效率会相对低呢？</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934093.png" alt="image-20221204225626742" tabindex="0" loading="lazy"><figcaption>image-20221204225626742</figcaption></figure><p><code>order by</code>排序，分为全字段排序和rowid排序。它是拿<code>max_length_for_sort_data</code>和结果行数据长度对比，如果结果行数据长度超过<code>max_length_for_sort_data</code>这个值，就会走<strong>rowid排序</strong>，相反，则走<strong>全字段排序</strong>。</p><h4 id="_8-2-1-rowid排序" tabindex="-1"><a class="header-anchor" href="#_8-2-1-rowid排序"><span>8.2.1 rowid排序</span></a></h4><p>rowid排序，一般需要<strong>回表去找满足条件的数据，所以效率会慢一点</strong>。以下这个SQL，使用<code>rowid</code>排序，执行过程是这样：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select name,age,city from staff where city = &#39;深圳&#39; order by age limit 10;</span></span></code></pre></div><ol><li>MySQL 为对应的线程初始化<code>sort_buffer</code>，放入需要排序的<code>age</code>字段，以及<code>主键id</code>；</li><li>从索引树<code>idx_city</code>， 找到第一个满足 <code>city=&#39;深圳’</code>条件的<code>主键id</code>，也就是图中的<code>id=9</code>；</li><li>到<code>主键id索引树</code>拿到<code>id=9</code>的这一行数据， 取<code>age和主键id</code>的值，存到<code>sort_buffer</code>；</li><li>从索引树<code>idx_city</code>拿到下一个记录的<code>主键id</code>，即图中的<code>id=13</code>；</li><li>重复步骤 3、4 直到<code>city</code>的值不等于深圳为止；</li><li>前面5步已经查找到了所有<code>city</code>为深圳的数据，在<code>sort_buffer</code>中，将所有数据根据age进行排序；</li><li>遍历排序结果，取前10行，并按照<code>id</code>的值回到原表中，取出<code>city、name 和 age</code>三个字段返回给客户端。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934118.png" alt="image-20221204225732688" tabindex="0" loading="lazy"><figcaption>image-20221204225732688</figcaption></figure><h4 id="_8-2-2-全字段排序" tabindex="-1"><a class="header-anchor" href="#_8-2-2-全字段排序"><span>8.2.2 全字段排序</span></a></h4><p>同样的SQL，如果是走全字段排序是这样的：</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select name,age,city from staff where city = &#39;深圳&#39; order by age limit 10;</span></span></code></pre></div><ol><li>MySQL 为对应的线程初始化<code>sort_buffer</code>，放入需要查询的<code>name、age、city</code>字段；</li><li>从索引树<code>idx_city</code>， 找到第一个满足 <code>city=&#39;深圳’</code>条件的主键 id，也就是图中的<code>id=9</code>；</li><li>到主键<code>id索引树</code>拿到<code>id=9</code>的这一行数据， 取<code>name、age、city</code>三个字段的值，存到<code>sort_buffer</code>；</li><li>从索引树<code>idx_city </code>拿到下一个记录的主键<code>id</code>，即图中的<code>id=13</code>；</li><li>重复步骤 3、4 直到<code>city</code>的值不等于深圳为止；</li><li>前面5步已经查找到了所有<code>city</code>为深圳的数据，在<code>sort_buffer</code>中，将所有数据根据<code>age</code>进行排序；</li><li>按照排序结果取前10行返回给客户端。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934149.png" alt="image-20221204225800181" tabindex="0" loading="lazy"><figcaption>image-20221204225800181</figcaption></figure><p><code>sort_buffer</code>的大小是由一个参数控制的：<code>sort_buffer_size</code>。</p><ul><li>如果要排序的数据小于<code>sort_buffer_size</code>，排序在<code>sort_buffer</code>内存中完成</li><li>如果要排序的数据大于<code>sort_buffer_size</code>，则借助磁盘文件来进行排序。</li></ul><blockquote><p>借助磁盘文件排序的话，<strong>效率就更慢一点</strong>。因为先把数据放入<code>sort_buffer</code>，当快要满时。会排一下序，然后把<code>sort_buffer</code>中的数据，放到临时磁盘文件，等到所有满足条件数据都查完排完，再用归并算法把磁盘的临时排好序的小文件，合并成一个有序的大文件。</p></blockquote><h3 id="_8-3-如何优化order-by的文件排序" tabindex="-1"><a class="header-anchor" href="#_8-3-如何优化order-by的文件排序"><span>8.3 如何优化order by的文件排序</span></a></h3><p><code>order by</code>使用<strong>文件排序</strong>，效率会低一点。我们怎么优化呢？</p><ul><li>因为数据是无序的，所以就需要排序。如果数据本身是有序的，那就不会再用到文件排序啦。而索引数据本身是有序的，我们通过建立索引来优化<code>order by</code>语句。</li><li>我们还可以通过调整<code>max_length_for_sort_data</code>、<code>sort_buffer_size</code>等参数优化；</li></ul><h2 id="_9-拿不到锁" tabindex="-1"><a class="header-anchor" href="#_9-拿不到锁"><span>9. 拿不到锁</span></a></h2><p>有时候，我们查询一条很简单的SQL，但是却等待很长的时间，不见结果返回。一般这种时候就是表被锁住了，或者要查询的某一行或者几行被锁住了。我们只能慢慢等待锁被释放。</p><blockquote><p>举一个生活的例子哈，你和别人合租了一间房子，这个房子只有一个卫生间的话。假设某一时刻，你们都想去卫生间，但是对方比你早了一点点。那么此时你只能等对方出来后才能进去。</p></blockquote><p>这时候，我们可以用<code>show processlist</code>命令，看看当前语句处于什么状态哈。</p><h2 id="_10-delete-in子查询不走索引" tabindex="-1"><a class="header-anchor" href="#_10-delete-in子查询不走索引"><span>10. delete + in子查询不走索引！</span></a></h2><p>之前见到过一个生产慢SQL问题，当<code>delete</code>遇到<code>in</code>子查询时，即使有索引，也是不走索引的。而对应的<code>select + in</code>子查询，却可以走索引。</p><p>MySQL版本是5.7，假设当前有两张表account和old_account,表结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">old_account</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;主键Id&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;账户名&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `balance`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;余额&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `create_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;创建时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `update_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ON</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> UPDATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;更新时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1570068</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8 ROW_FORMAT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">REDUNDANT COMMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;老的账户表&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">account</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;主键Id&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">255</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;账户名&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `balance`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">DEFAULT</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;余额&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `create_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;创建时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `update_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> datetime</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> NOT NULL</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ON</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> UPDATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;更新时间&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  KEY</span><span style="color:#98C379;--shiki-dark:#98C379;"> `idx_name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">USING</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1570068</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8 ROW_FORMAT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">REDUNDANT COMMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;账户表&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行的SQL如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">delete</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> account </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> old_account</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>查看执行计划，发现不走索引：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934175.png" alt="image-20221204230004584" tabindex="0" loading="lazy"><figcaption>image-20221204230004584</figcaption></figure><p>但是如果把<code>delete</code>换成<code>select</code>，就会走索引。如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934218.png" alt="image-20221204230022294" tabindex="0" loading="lazy"><figcaption>image-20221204230022294</figcaption></figure><p>为什么<code>select + in</code>子查询会走索引，<code>delete + in</code>子查询却不会走索引呢？</p><p>我们执行以下SQL看看：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">explain </span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> * </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> account </span><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> name</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> old_account</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">show WARNINGS; //可以查看优化后,最终执行的sql</span></span></code></pre></div><p>结果如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#98C379;--shiki-dark:#98C379;"> `test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> AS</span><span style="color:#98C379;--shiki-dark:#98C379;"> `id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> AS</span><span style="color:#98C379;--shiki-dark:#98C379;"> `name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`balance`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> AS</span><span style="color:#98C379;--shiki-dark:#98C379;"> `balance`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`create_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> AS</span><span style="color:#98C379;--shiki-dark:#98C379;"> `create_time`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`update_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> AS</span><span style="color:#98C379;--shiki-dark:#98C379;"> `update_time`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> from</span><span style="color:#98C379;--shiki-dark:#98C379;"> `test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">semi </span><span style="color:#C678DD;--shiki-dark:#C678DD;">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`old_account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">where</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> `test2`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`old_account`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#98C379;--shiki-dark:#98C379;">`name`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>可以发现，实际执行的时候，MySQL对<code>select in</code>子查询做了优化，把子查询改成<code>join</code>的方式，所以可以走索引。但是很遗憾，对于<code>delete in</code>子查询，MySQL却没有对它做这个优化。</p><p>日常开发中，大家注意一下这个场景哈，大家有兴趣可以看下这篇文章哈：<a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247495170&amp;idx=1&amp;sn=ce914de3abdb0d887e286b680b25111f&amp;chksm=cf22312bf855b83d31a00da110626747df8e69fca1bc310642c56e39d663b006a8105f9fb1e1&amp;token=1495321435&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">生产问题分析！delete in子查询不走索引？！</a></p><h2 id="_11、group-by使用临时表" tabindex="-1"><a class="header-anchor" href="#_11、group-by使用临时表"><span>11、group by使用临时表</span></a></h2><p><code>group by</code>一般用于分组统计，它表达的逻辑就是根据<strong>一定的规则，进行分组</strong>。日常开发中，我们使用得比较频繁。如果不注意，很容易产生慢SQL。</p><h3 id="_11-1-group-by的执行流程" tabindex="-1"><a class="header-anchor" href="#_11-1-group-by的执行流程"><span>11.1 group by的执行流程</span></a></h3><p>假设有表结构：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">staff</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> bigint</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;主键id&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `id_card`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;身份证号码&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `name`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">64</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;姓名&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `age`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;年龄&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#98C379;--shiki-dark:#98C379;">  `city`</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> varchar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">64</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">NOT NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;城市&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#98C379;--shiki-dark:#98C379;">`id`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">15</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> DEFAULT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">utf8 COMMENT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;员工表&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>我们查看一下这个SQL的执行计划：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">explain </span><span style="color:#C678DD;--shiki-dark:#C678DD;">select</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> city ,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(*) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> num </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> staff </span><span style="color:#C678DD;--shiki-dark:#C678DD;">group by</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> city;</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934254.png" alt="image-20230109210157321" tabindex="0" loading="lazy"><figcaption>image-20230109210157321</figcaption></figure><ul><li>Extra 这个字段的<code>Using temporary</code>表示在执行分组的时候使用了<strong>临时表</strong></li><li>Extra 这个字段的<code>Using filesort</code>表示使用了<strong>文件排序</strong></li></ul><p><code>group by</code>是怎么使用到临时表和排序了呢？我们来看下这个SQL的执行流程</p><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>select city ,count(*) as num from staff group by city;</span></span></code></pre></div><ol><li>创建内存临时表，表里有两个字段<code>city和num</code>；</li><li>全表扫描<code>staff</code>的记录，依次取出<code>city = &#39;X&#39;</code>的记录。</li></ol><ul><li>判断临时表中是否有为 <code>city=&#39;X&#39;</code>的行，没有就插入一个记录<code> (X,1)</code>;</li><li>如果临时表中有<code>city=&#39;X&#39;</code>的行，就将X这一行的num值加 1；</li></ul><ol><li>遍历完成后，再根据字段<code>city</code>做排序，得到结果集返回给客户端。这个流程的执行图如下：</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934283.png" alt="image-20221204230153215" tabindex="0" loading="lazy"><figcaption>image-20221204230153215</figcaption></figure><p><strong>临时表的排序是怎样的呢？</strong></p><p>就是把需要排序的字段，放到sort buffer，排完就返回。在这里注意一点哈，排序分<strong>全字段排序和rowid排序</strong></p><ul><li>如果是全字段排序，需要查询返回的字段，都放入sort buffer，根据排序字段排完，直接返回</li><li>如果是rowid排序，只是需要排序的字段放入sort buffer，然后多一次回表操作，再返回。</li></ul><h3 id="_11-2-group-by可能会慢在哪里" tabindex="-1"><a class="header-anchor" href="#_11-2-group-by可能会慢在哪里"><span>11.2 group by可能会慢在哪里？</span></a></h3><p><code>group by</code>使用不当，很容易就会产生慢SQL 问题。因为它既用到临时表，又默认用到排序。有时候还可能用到磁盘临时表。</p><ul><li>如果执行过程中，会发现<code>内存临时表</code>大小到达了上限（控制这个上限的参数就是tmp_table_size），会把内存临时表转成磁盘临时表。</li><li>如果数据量很大，很可能这个查询需要的磁盘临时表，就会占用大量的磁盘空间。</li></ul><h3 id="_11-3-如何优化group-by呢" tabindex="-1"><a class="header-anchor" href="#_11-3-如何优化group-by呢"><span>11.3 如何优化group by呢？</span></a></h3><p>从哪些方向去优化呢？</p><ul><li>方向1：既然它默认会排序，我们不给它排是不是就行啦。</li><li>方向2：既然临时表是影响<code>group by</code>性能的X因素，我们是不是可以不用临时表？</li></ul><p>我们一起来想下，执行<code>group by</code>语句为什么需要临时表呢？<code>group by</code>的语义逻辑，就是统计不同的值出现的个数。如果这个这些值一开始就是有序的，我们是不是直接往下扫描统计就好了，就不用临时表来记录并统计结果啦?</p><p>可以有这些优化方案：</p><ul><li>group by 后面的字段加索引</li><li>order by null 不用排序</li><li>尽量只使用内存临时表</li><li>使用SQL_BIG_RESULT</li></ul><h2 id="_12-系统硬件或网络资源" tabindex="-1"><a class="header-anchor" href="#_12-系统硬件或网络资源"><span>12. 系统硬件或网络资源</span></a></h2><ul><li>如果数据库服务器内存、硬件资源，或者网络资源配置不是很好，就会慢一些哈。这时候可以升级配置。这就好比你的计算机有时候很卡，你可以加个内存条什么的一个道理。</li><li>如果数据库压力本身很大，比如高并发场景下，大量请求到数据库来，数据库服务器<code>CPU</code>占用很高或者<code>IO利用率</code>很高，这种情况下所有语句的执行都有可能变慢的哈。</li></ul><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>如果测试环境数据库的一些参数配置，和生产环境参数配置不一致的话，也容易产生慢SQL哈。之前见过一个慢SQL的生产案例，就是测试环境用了<code>index merge</code>，所以查看explain执行计划时，是可以走索引的，但是到了生产，却全表扫描，最后排查发现是生产环境配置把<code>index merge</code>关闭了。大家是否还遇到其他场景的慢SQL呢？如果有的话，欢迎评论区留言交流哈</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;mid=2247499624&amp;idx=1&amp;sn=561b9cb7fe831ca7cb2d9fd65691e85e&amp;chksm=cf222041f855a957ac50c0a53baaec6d26be32427259b2974450620f33a8c834419fe535e83d&amp;token=1921274367&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">盘点MySQL慢查询的12个原因</a></p><p><a href="https://mp.weixin.qq.com/s/ARMelvGnqxeWs8wCeV2r7A" target="_blank" rel="noopener noreferrer">从11s到170ms！看看人家的接口优化技巧，那叫一个优雅</a></p>',258)]))}const B=a(e,[["render",l],["__file","mysql-x-optimize-slow02.html.vue"]]),c=JSON.parse('{"path":"/posts/Database/MySQL/mysql-x-optimize-slow02.html","title":"MySQL - 慢查询的12个原因","lang":"zh-CN","frontmatter":{"aliases":"MySQL - 慢查询的12个原因","tags":null,"cssclass":null,"source":null,"order":211,"category":["Mysql","数据库"],"created":"2024-02-22 10:49","updated":"2024-03-13 09:37","description":"MySQL - 慢查询的12个原因 0. 前言 日常开发中，我们经常会遇到数据库慢查询。那么导致数据慢查询都有哪些常见的原因呢？今天田螺哥就跟大家聊聊导致MySQL慢查询的12个常见原因，以及对应的解决方法。 image-20221204221904146image-20221204221904146 1. SQL没加索引 很多时候，我们的慢查询，都是...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Database/MySQL/mysql-x-optimize-slow02.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"MySQL - 慢查询的12个原因"}],["meta",{"property":"og:description","content":"MySQL - 慢查询的12个原因 0. 前言 日常开发中，我们经常会遇到数据库慢查询。那么导致数据慢查询都有哪些常见的原因呢？今天田螺哥就跟大家聊聊导致MySQL慢查询的12个常见原因，以及对应的解决方法。 image-20221204221904146image-20221204221904146 1. SQL没加索引 很多时候，我们的慢查询，都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934295.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL - 慢查询的12个原因\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934295.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934337.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934372.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934404.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934442.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934468.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934498.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934525.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934548.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934575.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934604.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934632.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934652.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934687.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934720.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934752.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934779.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934808.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934837.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934864.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934886.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934917.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934950.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934981.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934010.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934041.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934068.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934093.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934118.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934149.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934175.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934218.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934254.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934283.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"0. 前言","slug":"_0-前言","link":"#_0-前言","children":[]},{"level":2,"title":"1. SQL没加索引","slug":"_1-sql没加索引","link":"#_1-sql没加索引","children":[]},{"level":2,"title":"2. SQL 索引不生效","slug":"_2-sql-索引不生效","link":"#_2-sql-索引不生效","children":[{"level":3,"title":"2.1 隐式的类型转换，索引失效","slug":"_2-1-隐式的类型转换-索引失效","link":"#_2-1-隐式的类型转换-索引失效","children":[]},{"level":3,"title":"2.2 查询条件包含or，可能导致索引失效","slug":"_2-2-查询条件包含or-可能导致索引失效","link":"#_2-2-查询条件包含or-可能导致索引失效","children":[]},{"level":3,"title":"2.3. like通配符可能导致索引失效。","slug":"_2-3-like通配符可能导致索引失效。","link":"#_2-3-like通配符可能导致索引失效。","children":[]},{"level":3,"title":"2.4 查询条件不满足联合索引的最左匹配原则","slug":"_2-4-查询条件不满足联合索引的最左匹配原则","link":"#_2-4-查询条件不满足联合索引的最左匹配原则","children":[]},{"level":3,"title":"2.5 在索引列上使用mysql的内置函数","slug":"_2-5-在索引列上使用mysql的内置函数","link":"#_2-5-在索引列上使用mysql的内置函数","children":[]},{"level":3,"title":"2.6 对索引进行列运算（如，+、-、*、/）,索引不生效","slug":"_2-6-对索引进行列运算-如-、-、-、-索引不生效","link":"#_2-6-对索引进行列运算-如-、-、-、-索引不生效","children":[]},{"level":3,"title":"2.7 索引字段上使用（！= 或者 < >），索引可能失效","slug":"_2-7-索引字段上使用-或者-索引可能失效","link":"#_2-7-索引字段上使用-或者-索引可能失效","children":[]},{"level":3,"title":"2.8 索引字段上使用is null， is not null，索引可能失效","slug":"_2-8-索引字段上使用is-null-is-not-null-索引可能失效","link":"#_2-8-索引字段上使用is-null-is-not-null-索引可能失效","children":[]},{"level":3,"title":"2.9 左右连接，关联的字段编码格式不一样","slug":"_2-9-左右连接-关联的字段编码格式不一样","link":"#_2-9-左右连接-关联的字段编码格式不一样","children":[]},{"level":3,"title":"2.10 优化器选错了索引","slug":"_2-10-优化器选错了索引","link":"#_2-10-优化器选错了索引","children":[]}]},{"level":2,"title":"3. limit深分页问题","slug":"_3-limit深分页问题","link":"#_3-limit深分页问题","children":[{"level":3,"title":"3.1 limit深分页为什么会变慢","slug":"_3-1-limit深分页为什么会变慢","link":"#_3-1-limit深分页为什么会变慢","children":[]},{"level":3,"title":"3.2 如何优化深分页问题","slug":"_3-2-如何优化深分页问题","link":"#_3-2-如何优化深分页问题","children":[]}]},{"level":2,"title":"4. 单表数据量太大","slug":"_4-单表数据量太大","link":"#_4-单表数据量太大","children":[{"level":3,"title":"4.1 单表数据量太大为什么会变慢？","slug":"_4-1-单表数据量太大为什么会变慢","link":"#_4-1-单表数据量太大为什么会变慢","children":[]},{"level":3,"title":"4.2 一棵B+树可以存多少数据量","slug":"_4-2-一棵b-树可以存多少数据量","link":"#_4-2-一棵b-树可以存多少数据量","children":[]},{"level":3,"title":"4.3 如何解决单表数据量太大，查询变慢的问题","slug":"_4-3-如何解决单表数据量太大-查询变慢的问题","link":"#_4-3-如何解决单表数据量太大-查询变慢的问题","children":[]}]},{"level":2,"title":"5. join 或者子查询过多","slug":"_5-join-或者子查询过多","link":"#_5-join-或者子查询过多","children":[]},{"level":2,"title":"6. in元素过多","slug":"_6-in元素过多","link":"#_6-in元素过多","children":[]},{"level":2,"title":"7. 数据库在刷脏页","slug":"_7-数据库在刷脏页","link":"#_7-数据库在刷脏页","children":[{"level":3,"title":"7.1 什么是脏页","slug":"_7-1-什么是脏页","link":"#_7-1-什么是脏页","children":[]},{"level":3,"title":"7.2 一条更新语句是如何执行的？","slug":"_7-2-一条更新语句是如何执行的","link":"#_7-2-一条更新语句是如何执行的","children":[]},{"level":3,"title":"7.3 为什么会出现脏页呢？","slug":"_7-3-为什么会出现脏页呢","link":"#_7-3-为什么会出现脏页呢","children":[]},{"level":3,"title":"7.4 什么时候会刷脏页（flush）？","slug":"_7-4-什么时候会刷脏页-flush","link":"#_7-4-什么时候会刷脏页-flush","children":[]},{"level":3,"title":"7.5 为什么刷脏页会导致SQL变慢呢？","slug":"_7-5-为什么刷脏页会导致sql变慢呢","link":"#_7-5-为什么刷脏页会导致sql变慢呢","children":[]}]},{"level":2,"title":"8. order by 文件排序","slug":"_8-order-by-文件排序","link":"#_8-order-by-文件排序","children":[{"level":3,"title":"8.1 order by 的 Using filesort文件排序","slug":"_8-1-order-by-的-using-filesort文件排序","link":"#_8-1-order-by-的-using-filesort文件排序","children":[]},{"level":3,"title":"8.2 order by文件排序效率为什么较低","slug":"_8-2-order-by文件排序效率为什么较低","link":"#_8-2-order-by文件排序效率为什么较低","children":[]},{"level":3,"title":"8.3 如何优化order by的文件排序","slug":"_8-3-如何优化order-by的文件排序","link":"#_8-3-如何优化order-by的文件排序","children":[]}]},{"level":2,"title":"9. 拿不到锁","slug":"_9-拿不到锁","link":"#_9-拿不到锁","children":[]},{"level":2,"title":"10. delete + in子查询不走索引！","slug":"_10-delete-in子查询不走索引","link":"#_10-delete-in子查询不走索引","children":[]},{"level":2,"title":"11、group by使用临时表","slug":"_11、group-by使用临时表","link":"#_11、group-by使用临时表","children":[{"level":3,"title":"11.1 group by的执行流程","slug":"_11-1-group-by的执行流程","link":"#_11-1-group-by的执行流程","children":[]},{"level":3,"title":"11.2 group by可能会慢在哪里？","slug":"_11-2-group-by可能会慢在哪里","link":"#_11-2-group-by可能会慢在哪里","children":[]},{"level":3,"title":"11.3 如何优化group by呢？","slug":"_11-3-如何优化group-by呢","link":"#_11-3-如何优化group-by呢","children":[]}]},{"level":2,"title":"12. 系统硬件或网络资源","slug":"_12-系统硬件或网络资源","link":"#_12-系统硬件或网络资源","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":27.27,"words":8182},"filePathRelative":"posts/Database/MySQL/mysql-x-optimize-slow02.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>0. 前言</h2>\\n<p>日常开发中，我们经常会遇到<strong>数据库慢查询</strong>。那么导致数据慢查询都有哪些常见的原因呢？今天田螺哥就跟大家聊聊导致MySQL慢查询的12个常见原因，以及对应的解决方法。</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403130934295.png\\" alt=\\"image-20221204221904146\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20221204221904146</figcaption></figure>","autoDesc":true}');export{B as comp,c as data};
