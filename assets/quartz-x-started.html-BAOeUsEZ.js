import{_ as a,c as i,a as n,o as l}from"./app-D7jLEV6q.js";const r={};function e(o,s){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="定时任务-quartz定时器入门" tabindex="-1"><a class="header-anchor" href="#定时任务-quartz定时器入门"><span>定时任务 - quartz定时器入门</span></a></h1><h2 id="_0-cron表达式" tabindex="-1"><a class="header-anchor" href="#_0-cron表达式"><span>0. Cron表达式</span></a></h2><p><a href="http://cron.qqe2.com/" target="_blank" rel="noopener noreferrer">在线生成Cron表达式的工具</a></p><h2 id="_1-qaurtz简介" tabindex="-1"><a class="header-anchor" href="#_1-qaurtz简介"><span>1. Qaurtz简介</span></a></h2><p>Quartz是一个完全由java编写的任务调度框架。<br> 那么什么是任务调度呢？很多时候你可能会收到某个需求，要求程序 “ 隔某个特定的时间段 在某个特定的时间 做某个特定的事情 ”，比如：</p><ul><li>每个月的9号自动还款蚂蚁花呗</li><li>每年12月1日0点发送生日祝福给你的朋友</li><li>在某些视频网站中，购买会员后，每月会给会员送一些优惠券。</li><li>定时生成报表、邮件</li><li>一些需要定时清理数据的任务</li><li>在保证最终一致性的场景中，往往利用定时任务调度进行一些对比工作</li></ul><p>这些都是定时任务。而<strong>Quartz就是可以方便你创建各种任务定时执行的一个框架</strong>，而且触发这些任务的时间点可以设计的非常复杂，几乎都能完美匹配你的要求。</p><h2 id="_2-核心概念" tabindex="-1"><a class="header-anchor" href="#_2-核心概念"><span>2. 核心概念</span></a></h2><h3 id="_2-1-任务job" tabindex="-1"><a class="header-anchor" href="#_2-1-任务job"><span>2.1 任务Job</span></a></h3><p>Qaurtz 提供的定时任务的接口，我们需要实现该接口做具体的操作。如定时发送邮件Job，重启机器Job</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219496.png" alt="image-20211027203631278" tabindex="0" loading="lazy"><figcaption>image-20211027203631278</figcaption></figure><h3 id="_2-2-触发器trigger" tabindex="-1"><a class="header-anchor" href="#_2-2-触发器trigger"><span>2.2 触发器Trigger</span></a></h3><p>有了任务之后，还需要一个能够实现触发任务去执行的触发器，触发器Trigger最基本的功能是指定Job的执行时间，执行间隔，运行次数等。</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219546.png" alt="image-20211027203739489" tabindex="0" loading="lazy"><figcaption>image-20211027203739489</figcaption></figure><h3 id="_2-3-调度器-schedule" tabindex="-1"><a class="header-anchor" href="#_2-3-调度器-schedule"><span>2.3 调度器 Schedule</span></a></h3><p>有了Job和Trigger后，怎么样将两者结合起来呢？即怎样指定Trigger去执行指定的Job呢？这时需要一个Schedule，来负责这个功能的实现。</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219576.png" alt="image-20211027203820564" tabindex="0" loading="lazy"><figcaption>image-20211027203820564</figcaption></figure><p>上面三个部分就是Quartz的基本组成部分：</p><ul><li>调度器：Scheduler</li><li>任务：JobDetail</li><li>触发器：Trigger，包括SimpleTrigger和CronTrigger</li></ul><h2 id="_3-主要api" tabindex="-1"><a class="header-anchor" href="#_3-主要api"><span>3. 主要API</span></a></h2><ul><li>Scheduler - 与调度器交互的主要API。</li><li>Job - 需要被调度器调度的任务必须实现的接口。</li><li>JobDetail - 用于定义任务的实例。</li><li>Trigger - 用于定义调度器何时调度任务执行的组件。</li><li>JobBuilder - 用于定义或创建JobDetail的实例 。</li><li>TriggerBuilder - 用于定义或创建触发器实例。</li></ul><h2 id="_4-实例介绍" tabindex="-1"><a class="header-anchor" href="#_4-实例介绍"><span>4. 实例介绍</span></a></h2><h3 id="_4-1-实现job接口" tabindex="-1"><a class="header-anchor" href="#_4-1-实现job接口"><span>4.1 实现job接口</span></a></h3><p>实现Job接口，接口中的execute()，这里写你要定时执行的代码</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyJob</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Job</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JobExecutionContext</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> jobExecutionContext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JobExecutionException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;当前时间：&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;: 定时器工作...&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_4-2-创建schedule-执行任务" tabindex="-1"><a class="header-anchor" href="#_4-2-创建schedule-执行任务"><span>4.2 创建Schedule，执行任务：</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyScheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SchedulerException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1、创建调度器Scheduler</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        SchedulerFactory</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> schedulerFactory</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> StdSchedulerFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Scheduler</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> scheduler</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> schedulerFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getScheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2、创建JobDetail实例，并与PrintWordsJob类绑定(Job执行内容)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        JobDetail</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> jobDetail</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JobBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MyJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;job1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;group1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 3、构建Trigger实例,每隔1s执行一次</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Trigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> trigger</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> TriggerBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newTrigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;triggerGroup1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startNow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//立即生效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SimpleScheduleBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">simpleSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIntervalInSeconds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//每隔1s执行一次</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">repeatForever</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//一直执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //4、执行</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">scheduleJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(jobDetail, trigger);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;--------scheduler start ! ------------&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //睡眠</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        TimeUnit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">MINUTES</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">shutdown</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;--------scheduler shutdown ! ------------&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-运行测试" tabindex="-1"><a class="header-anchor" href="#_4-3-运行测试"><span>4.3 运行测试</span></a></h3><p>运行程序，可以看到程序每隔1s会打印出内容，且在一分钟后结束：</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219600.png" alt="image-20211027203158947" tabindex="0" loading="lazy"><figcaption>image-20211027203158947</figcaption></figure><h2 id="_5-job-详解" tabindex="-1"><a class="header-anchor" href="#_5-job-详解"><span>5. Job 详解</span></a></h2><h3 id="_5-1-job" tabindex="-1"><a class="header-anchor" href="#_5-1-job"><span>5.1 Job</span></a></h3><p>Job是Quartz中的一个接口，接口下只有execute方法，在这个方法中编写业务逻辑。<br> 接口中的源码：</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219629.png" alt="image-20211027204136389" tabindex="0" loading="lazy"><figcaption>image-20211027204136389</figcaption></figure><h3 id="_5-2-jobdetail" tabindex="-1"><a class="header-anchor" href="#_5-2-jobdetail"><span>5.2 JobDetail</span></a></h3><p>JobDetail用来绑定Job，为Job实例提供许多属性：</p><ul><li>name</li><li>group</li><li>jobClass</li><li>jobDataMap</li></ul><p>JobDetail绑定指定的Job，每次Scheduler调度执行一个Job的时候，首先会拿到对应的Job，然后创建该Job实例，再去执行Job中的execute()的内容，任务执行结束后，关联的Job对象实例会被释放，且会被JVM GC清除。</p><h4 id="_5-2-1-为什么设计成jobdetail-job-不直接使用job" tabindex="-1"><a class="header-anchor" href="#_5-2-1-为什么设计成jobdetail-job-不直接使用job"><span>5.2.1 为什么设计成JobDetail + Job，不直接使用Job</span></a></h4><p>JobDetail定义的是任务数据，而真正的执行逻辑是在Job中。<br> 这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，Sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</p><h3 id="_5-3-jobexecutioncontext" tabindex="-1"><a class="header-anchor" href="#_5-3-jobexecutioncontext"><span>5.3 JobExecutionContext</span></a></h3><p>JobExecutionContext中包含了Quartz运行时的环境以及Job本身的详细数据信息。<br> 当Schedule调度执行一个Job的时候，就会将JobExecutionContext传递给该Job的execute()中，Job就可以通过JobExecutionContext对象获取信息。<br> 主要信息有：<br><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219654.png" alt="image-20211027204531035" loading="lazy"></p><h3 id="_5-4-jobdatamap" tabindex="-1"><a class="header-anchor" href="#_5-4-jobdatamap"><span>5.4 JobDataMap</span></a></h3><p>JobDataMap实现了JDK的Map接口，可以以Key-Value的形式存储数据。<br> JobDetail、Trigger都可以使用JobDataMap来设置一些参数或信息，<br> Job执行execute()方法的时候，JobExecutionContext可以获取到JobExecutionContext中的信息：<br> 如：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JobDetail</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> jobDetail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JobBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PrintWordsJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                        .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">usingJobData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jobDetail1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这个Job用来测试的&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                  .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;job1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;group1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Trigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> trigger </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> TriggerBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newTrigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;triggerGroup1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">usingJobData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这是jobDetail1的trigger&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startNow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//立即生效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SimpleScheduleBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">simpleSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIntervalInSeconds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//每隔1s执行一次</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">repeatForever</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//一直执行</span></span></code></pre></div><p>Job执行的时候，可以获取到这些参数信息：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> execute</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">JobExecutionContext</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> jobExecutionContext) throws JobExecutionException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">jobExecutionContext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getJobDetail</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getJobDataMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jobDetail1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">jobExecutionContext</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getTrigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getJobDataMap</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        String</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> printTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> SimpleDateFormat</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;yy-MM-dd HH-mm-ss&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;PrintWordsJob start at:&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> printTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;, prints: Hello Job-&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Random</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">nextInt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span></code></pre></div><h2 id="_6-trigger-详解" tabindex="-1"><a class="header-anchor" href="#_6-trigger-详解"><span>6. Trigger 详解</span></a></h2><p>Trigger、SimpleTrigger、CronTrigger</p><h3 id="_6-1-trigger" tabindex="-1"><a class="header-anchor" href="#_6-1-trigger"><span>6.1 Trigger</span></a></h3><p>Trigger是Quartz的触发器，会去通知Scheduler何时去执行对应Job。</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Trigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#E06C75;--shiki-dark:#E06C75;">表示触发器首次被触发的时间</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Trigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">endAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#E06C75;--shiki-dark:#E06C75;">表示触发器结束触发的时间</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h3 id="_6-2-simpletrigger" tabindex="-1"><a class="header-anchor" href="#_6-2-simpletrigger"><span>6.2 <strong>SimpleTrigger</strong></span></a></h3><p>SimpleTrigger可以实现在一个指定时间段内执行一次作业任务或一个时间段内多次执行作业任务。<br> 下面的程序就实现了程序运行5s后开始执行Job，执行Job 5s后结束执行：</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> startDate </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> endDate </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> endDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Trigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> trigger </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> TriggerBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newTrigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;triggerGroup1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">usingJobData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这是jobDetail1的trigger&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startNow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//立即生效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(startDate)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">endAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(endDate)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">SimpleScheduleBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">simpleSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIntervalInSeconds</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//每隔1s执行一次</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">repeatForever</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//一直执行</span></span></code></pre></div><h3 id="_6-3-crontrigger" tabindex="-1"><a class="header-anchor" href="#_6-3-crontrigger"><span>6.3 CronTrigger</span></a></h3><p>CronTrigger功能非常强大，是基于日历的作业调度，而SimpleTrigger是精准指定间隔，所以相比SimpleTrigger，CroTrigger更加常用。CroTrigger是基于Cron表达式的，先了解下Cron表达式：<br> 由7个子表达式组成字符串的，格式如下：</p><p>[秒] [分] [小时] [日] [月] [周] [年]</p><p>Cron表达式的语法比较复杂，<br> 如：* 30 10 ? * 1/5 *<br> 表示（从后往前看）<br> [指定年份] 的[ 周一到周五][指定月][不指定日][上午10时][30分][指定秒]</p><p>又如：00 00 00 ？ * 10,11,12 1#5 2018<br> 表示2018年10、11、12月的第一周的星期五这一天的0时0分0秒去执行任务。</p><p>下面是给的一个例子：</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219684.png" alt="image-20211027205941975" tabindex="0" loading="lazy"><figcaption>image-20211027205941975</figcaption></figure><p>可通过在线生成Cron表达式的工具：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener noreferrer">http://cron.qqe2.com/</a> 来生成自己想要的表达式。</p><figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219713.png" alt="image-20211027210001186" tabindex="0" loading="lazy"><figcaption>image-20211027210001186</figcaption></figure><p>下面的代码就实现了每周一到周五上午10:30执行定时任务</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> MyScheduler2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> SchedulerException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1、创建调度器Scheduler</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        SchedulerFactory</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> schedulerFactory</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> StdSchedulerFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Scheduler</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> scheduler</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> schedulerFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getScheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2、创建JobDetail实例，并与PrintWordsJob类绑定(Job执行内容)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        JobDetail</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> jobDetail</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> JobBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">PrintWordsJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">usingJobData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;jobDetail1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这个Job用来测试的&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;job1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;group1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 3、构建Trigger实例,每隔1s执行一次</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> startDate</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        Date</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> endDate</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Date</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        endDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">setTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">startDate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">getTime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        CronTrigger</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> cronTrigger</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> TriggerBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">newTrigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withIdentity</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;triggerGroup1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">usingJobData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;trigger1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;这是jobDetail1的trigger&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startNow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//立即生效</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">startAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(startDate)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">endAt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(endDate)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">withSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">CronScheduleBuilder</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">cronSchedule</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;* 30 10 ? * 1/5 2018&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                .</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //4、执行</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">scheduleJob</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(jobDetail, cronTrigger);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;--------scheduler start ! ------------&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        scheduler</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;--------scheduler shutdown ! ------------&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://blog.csdn.net/noaman_wgs/article/details/80984873" target="_blank" rel="noopener noreferrer">定时任务框架Quartz-(一)Quartz入门与Demo搭建</a></p><p><a href="https://segmentfault.com/a/1190000015885177" target="_blank" rel="noopener noreferrer">Quartz使用介紹</a></p>`,69)]))}const p=a(r,[["render",e],["__file","quartz-x-started.html.vue"]]),t=JSON.parse('{"path":"/posts/Java/Java%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BE%9D%E8%B5%96/timer/quartz-x-started.html","title":"定时任务 - quartz定时器入门","lang":"zh-CN","frontmatter":{"aliases":"定时任务 - quartz定时器入门","tags":null,"cssclass":null,"source":null,"order":51,"category":["定时任务"],"created":"2024-04-23 20:40","updated":"2024-04-23 22:20","description":"定时任务 - quartz定时器入门 0. Cron表达式 在线生成Cron表达式的工具 1. Qaurtz简介 Quartz是一个完全由java编写的任务调度框架。 那么什么是任务调度呢？很多时候你可能会收到某个需求，要求程序 “ 隔某个特定的时间段 在某个特定的时间 做某个特定的事情 ”，比如： 每个月的9号自动还款蚂蚁花呗 每年12月1日0点发送...","head":[["meta",{"property":"og:url","content":"https://mrjason.me/posts/Java/Java%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BE%9D%E8%B5%96/timer/quartz-x-started.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"定时任务 - quartz定时器入门"}],["meta",{"property":"og:description","content":"定时任务 - quartz定时器入门 0. Cron表达式 在线生成Cron表达式的工具 1. Qaurtz简介 Quartz是一个完全由java编写的任务调度框架。 那么什么是任务调度呢？很多时候你可能会收到某个需求，要求程序 “ 隔某个特定的时间段 在某个特定的时间 做某个特定的事情 ”，比如： 每个月的9号自动还款蚂蚁花呗 每年12月1日0点发送..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219496.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定时任务 - quartz定时器入门\\",\\"image\\":[\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219496.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219546.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219576.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219600.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219629.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219654.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219684.png\\",\\"https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202404232219713.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjason.me\\"}]}"]]},"headers":[{"level":2,"title":"0. Cron表达式","slug":"_0-cron表达式","link":"#_0-cron表达式","children":[]},{"level":2,"title":"1. Qaurtz简介","slug":"_1-qaurtz简介","link":"#_1-qaurtz简介","children":[]},{"level":2,"title":"2. 核心概念","slug":"_2-核心概念","link":"#_2-核心概念","children":[{"level":3,"title":"2.1 任务Job","slug":"_2-1-任务job","link":"#_2-1-任务job","children":[]},{"level":3,"title":"2.2 触发器Trigger","slug":"_2-2-触发器trigger","link":"#_2-2-触发器trigger","children":[]},{"level":3,"title":"2.3 调度器 Schedule","slug":"_2-3-调度器-schedule","link":"#_2-3-调度器-schedule","children":[]}]},{"level":2,"title":"3. 主要API","slug":"_3-主要api","link":"#_3-主要api","children":[]},{"level":2,"title":"4. 实例介绍","slug":"_4-实例介绍","link":"#_4-实例介绍","children":[{"level":3,"title":"4.1 实现job接口","slug":"_4-1-实现job接口","link":"#_4-1-实现job接口","children":[]},{"level":3,"title":"4.2 创建Schedule，执行任务：","slug":"_4-2-创建schedule-执行任务","link":"#_4-2-创建schedule-执行任务","children":[]},{"level":3,"title":"4.3 运行测试","slug":"_4-3-运行测试","link":"#_4-3-运行测试","children":[]}]},{"level":2,"title":"5. Job 详解","slug":"_5-job-详解","link":"#_5-job-详解","children":[{"level":3,"title":"5.1 Job","slug":"_5-1-job","link":"#_5-1-job","children":[]},{"level":3,"title":"5.2 JobDetail","slug":"_5-2-jobdetail","link":"#_5-2-jobdetail","children":[]},{"level":3,"title":"5.3 JobExecutionContext","slug":"_5-3-jobexecutioncontext","link":"#_5-3-jobexecutioncontext","children":[]},{"level":3,"title":"5.4 JobDataMap","slug":"_5-4-jobdatamap","link":"#_5-4-jobdatamap","children":[]}]},{"level":2,"title":"6. Trigger 详解","slug":"_6-trigger-详解","link":"#_6-trigger-详解","children":[{"level":3,"title":"6.1 Trigger","slug":"_6-1-trigger","link":"#_6-1-trigger","children":[]},{"level":3,"title":"6.2 SimpleTrigger","slug":"_6-2-simpletrigger","link":"#_6-2-simpletrigger","children":[]},{"level":3,"title":"6.3 CronTrigger","slug":"_6-3-crontrigger","link":"#_6-3-crontrigger","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":6.4,"words":1920},"filePathRelative":"posts/Java/Java第三方依赖/timer/quartz-x-started.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>0. Cron表达式</h2>\\n<p><a href=\\"http://cron.qqe2.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">在线生成Cron表达式的工具</a></p>\\n<h2>1. Qaurtz简介</h2>\\n<p>Quartz是一个完全由java编写的任务调度框架。<br>\\n那么什么是任务调度呢？很多时候你可能会收到某个需求，要求程序 “ 隔某个特定的时间段 在某个特定的时间 做某个特定的事情 ”，比如：</p>\\n<ul>\\n<li>每个月的9号自动还款蚂蚁花呗</li>\\n<li>每年12月1日0点发送生日祝福给你的朋友</li>\\n<li>在某些视频网站中，购买会员后，每月会给会员送一些优惠券。</li>\\n<li>定时生成报表、邮件</li>\\n<li>一些需要定时清理数据的任务</li>\\n<li>在保证最终一致性的场景中，往往利用定时任务调度进行一些对比工作</li>\\n</ul>","autoDesc":true}');export{p as comp,t as data};
