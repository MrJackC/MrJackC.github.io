import{_ as t,c as a,a as l,o}from"./app-W9QyTiMU.js";const i={};function r(s,e){return o(),a("div",null,e[0]||(e[0]=[l('<h1 id="分布式系统-理论基础及一致性算法" tabindex="-1"><a class="header-anchor" href="#分布式系统-理论基础及一致性算法"><span>分布式系统-理论基础及一致性算法</span></a></h1><h2 id="_1-什么是分布式系统" tabindex="-1"><a class="header-anchor" href="#_1-什么是分布式系统"><span>1. 什么是分布式系统？</span></a></h2><blockquote><p>一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。</p></blockquote><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。简单来说就是<strong>一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样</strong>。分布式意味着可以采用更多的普通计算机（相对于昂贵的大型机）组成分布式集群对外提供服务。计算机越多，CPU、内存、存储资源等也就越多，能够处理的并发访问量也就越大。</p><p>从分布式系统的概念中我们知道，各个主机之间通信和协调主要通过网络进行，所以分布式系统中的计算机在空间上几乎没有任何限制，这些计算机可能被放在不同的机柜上，也可能被部署在不同的机房中，还可能在不同的城市中，对于大型的网站甚至可能分布在不同的国家和地区。</p><h3 id="_1-1-分布式系统的主要特征" tabindex="-1"><a class="header-anchor" href="#_1-1-分布式系统的主要特征"><span>1.1 分布式系统的主要特征</span></a></h3><blockquote><p>无论空间上如何分布，一个标准的分布式系统应该具有以下几个主要特征</p></blockquote><ul><li><strong>分布性</strong></li></ul><p>分布式系统中的多台计算机之间在空间位置上可以随意分布，同时，机器的分布情况也会随时变动。</p><ul><li><strong>对等性</strong></li></ul><p>分布式系统中的计算机没有主／从之分，即没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。副本（Replica）是分布式系统最常见的概念之一，指的是分布式系统对数据和服务提供的一种冗余方式。在常见的分布式系统中，为了对外提供高可用的服务，我们往往会对数据和服务进行副本处理。数据副本是指在不同节点上持久化同一份数据，当某一个节点上存储的数据丢失时，可以从副本上读取该数据，这是解决分布式系统数据丢失问题最为有效的手段。另一类副本是服务副本，指多个节点提供同样的服务，每个节点都有能力接收来自外部的请求并进行相应的处理。</p><ul><li><strong>自治性</strong></li></ul><p>分布式系统中的各个节点都包含自己的处理机和内存，各自具有独立的处理数据的功能。通常，彼此在地位上是平等的，无主次之分，既能自治地进行工作，又能利用共享的通信线路来传送信息，协调任务处理。</p><ul><li><strong>并发性</strong></li></ul><p>在一个计算机网络中，程序运行过程的并发性操作是非常常见的行为。例如同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战之一。</p><h3 id="_1-2-分布式系统面临的问题" tabindex="-1"><a class="header-anchor" href="#_1-2-分布式系统面临的问题"><span>1.2 . 分布式系统面临的问题</span></a></h3><blockquote><p>分布式系统面临的问题有哪些？</p></blockquote><ul><li><strong>缺乏全局时钟</strong></li></ul><p>在分布式系统中，很难定义两个事件究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。</p><ul><li><strong>机器宕机</strong></li></ul><p>机器宕机是最常见的异常之一。在大型集群中每日宕机发生的概率为千分之一左右，在实践中，一台宕机的机器恢复的时间通常认为是24 小时，一般需要人工介入重启机器。</p><ul><li><strong>网络异常</strong></li></ul><p>消息丢失，两片节点之间彼此完全无法通信，即出现了“网络分化”；消息乱序，有一定的概率不是按照发送时的顺序依次到达目的节点，考虑使用序列号等机制处理网络消息的乱序问题，使得无效的、过期的网络消息不影响系统的正确性；数据错误；不可靠的TCP，TCP 协议为应用层提供了可靠的、面向连接的传输服务，但在分布式系统的协议设计中不能认为所有网络通信都基于TCP 协议则通信就是可靠的。TCP协议只能保证同一个TCP 链接内的网络消息不乱序，TCP 链接之间的网络消息顺序则无法保证。</p><ul><li><strong>分布式三态</strong></li></ul><p>如果某个节点向另一个节点发起RPC(Remote procedure call)调用，即某个节点A 向另一个节点B 发送一个消息，节点B 根据收到的消息内容完成某些操作，并将操作的结果通过另一个消息返回给节点A，那么这个RPC 执行的结果有三种状态：“成功”、“失败”、“超时（未知）”，称之为分布式系统的三态。</p><ul><li><strong>存储数据丢失</strong></li></ul><p>对于有状态节点来说，数据丢失意味着状态丢失，通常只能从其他节点读取、恢复存储的状态。 <em>异常处理原则</em>：被大量工程实践所检验过的异常处理黄金原则是：任何在设计阶段考虑到的异常情况一定会在系统实际运行中发生，但在系统实际运行遇到的异常却很有可能在设计时未能考虑，所以，除非需求指标允许，在系统设计时不能放过任何异常情况。</p><h3 id="_1-3-衡量分布式系统的指标" tabindex="-1"><a class="header-anchor" href="#_1-3-衡量分布式系统的指标"><span>1.3 衡量分布式系统的指标</span></a></h3><blockquote><p>衡量分布式系统的指标有哪些？</p></blockquote><ul><li><p><strong>性能</strong></p><ul><li>系统的吞吐能力，指系统在某一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；</li><li>系统的响应延迟，指系统完成某一功能需要使用的时间；</li><li>系统的并发能力，指系统可以同时完成某一功能的能力，通常也用QPS(query per second)来衡量。</li></ul><p>上述三个性能指标往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间较长时，也很难提高QPS。</p></li><li><p><strong>可用性</strong></p></li></ul><p>系统的可用性(availability)指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现。</p><ul><li><strong>可扩展性</strong></li></ul><p>系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。好的分布式系统总在追求“线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。</p><ul><li><strong>一致性</strong></li></ul><p>分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。越是强的一致的性模型，对于用户使用来说使用起来越简单。</p><h2 id="_2-分布式理论基础" tabindex="-1"><a class="header-anchor" href="#_2-分布式理论基础"><span>2. 分布式理论基础</span></a></h2><blockquote><p>主要包含CAP理论和BASE理论。</p></blockquote><h3 id="_2-1-cap理论" tabindex="-1"><a class="header-anchor" href="#_2-1-cap理论"><span>2.1 CAP理论</span></a></h3><blockquote><p>CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220615223816600.png" alt="image-20220615223816600" tabindex="0" loading="lazy"><figcaption>image-20220615223816600</figcaption></figure><h3 id="_2-2-base理论" tabindex="-1"><a class="header-anchor" href="#_2-2-base理论"><span>2.2 BASE理论</span></a></h3><blockquote><p>BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220615223858440.png" alt="image-20220615223858440" tabindex="0" loading="lazy"><figcaption>image-20220615223858440</figcaption></figure><h2 id="_3-分布式一致性算法" tabindex="-1"><a class="header-anchor" href="#_3-分布式一致性算法"><span>3. 分布式一致性算法</span></a></h2><p>只要脱离了单机系统，就会存在多机之间不一致的问题。**多个节点保证具有相同的数据，解决这个问题，就需要一致性算法。**一致性从强到弱分类为：线性一致性、顺序一致性、因果一致性、单调一致性、最终一致性。</p><blockquote><p>一致性算法的目的是保证在分布式系统中，多数据副本节点数据一致性。主要包含一致性Hash算法，Paxos算法，Raft算法，ZAB算法等。</p></blockquote><h3 id="_3-1-一致性hash算法" tabindex="-1"><a class="header-anchor" href="#_3-1-一致性hash算法"><span>3.1 一致性Hash算法</span></a></h3><ul><li>分布式算法 - 一致性Hash算法 <ul><li>一致性Hash算法是个经典算法，Hash环的引入是为解决<code>单调性(Monotonicity)</code>的问题；虚拟节点的引入是为了解决<code>平衡性(Balance)</code>问题</li></ul></li></ul><h3 id="_3-2-paxos算法" tabindex="-1"><a class="header-anchor" href="#_3-2-paxos算法"><span>3.2 Paxos算法</span></a></h3><ul><li>分布式算法 - Paxos算法 <ul><li>Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法，使其获得2013年图灵奖。自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性, 很多分布式一致性算法都由Paxos演变而来</li></ul></li></ul><blockquote><p>包含三个角色：Proposer, Acceptor, Learner</p><ol><li><p>Prepare 阶段， Proposer 向 Acceptors 发出 Prepare 请求，Acceptors 进行 Promise 承诺；</p></li><li><p>Accept 阶段， Proposer 收到多数 Acceptors 承诺的 Promise 后，向 Acceptors 发出 Propose 请求，进行 accept 处理；</p></li><li><p>Learn 阶段，Proposer 在收到多数 Acceptors 的 accept 之后，表示本次 accept 成功，决议形成，将决议发送给所有 Learners;</p></li></ol></blockquote><h3 id="_3-3-raft算法" tabindex="-1"><a class="header-anchor" href="#_3-3-raft算法"><span>3.3 Raft算法</span></a></h3><ul><li>分布式算法 - Raft算法 <ul><li>Paxos是出了名的难懂，而Raft正是为了探索一种更易于理解的一致性算法而产生的。它的首要设计目的就是易于理解，所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案</li></ul></li></ul><blockquote><p>多数派投票选举算法, 包含角色：Leader, Candidate, Follower</p></blockquote><h3 id="_3-4-zab算法" tabindex="-1"><a class="header-anchor" href="#_3-4-zab算法"><span>3.4 ZAB算法</span></a></h3><ul><li>分布式算法 - ZAB算法 <ul><li>ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）, 它应该是所有一致性协议中生产环境中应用最多的了。为什么呢？因为他是为 Zookeeper 设计的分布式一致性协议！</li></ul></li></ul><blockquote><p>具有优先级的民主投票，包含角色：Leader, Follower, Observer</p></blockquote><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://pdai.tech/md/arch/arch-z-theory.html" target="_blank" rel="noopener noreferrer">分布式系统 - 理论基础,理论及一致性算法</a></p>',59)]))}const p=t(i,[["render",r],["__file","distributed-theoretical-basis.html.vue"]]),c=JSON.parse('{"path":"/posts/Architect/distributed/theory/distributed-theoretical-basis.html","title":"分布式系统-理论基础及一致性算法","lang":"zh-CN","frontmatter":{"order":10,"category":["架构"],"description":"分布式系统-理论基础及一致性算法 1. 什么是分布式系统？ 一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。 分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。简单来说就是一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Architect/distributed/theory/distributed-theoretical-basis.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"分布式系统-理论基础及一致性算法"}],["meta",{"property":"og:description","content":"分布式系统-理论基础及一致性算法 1. 什么是分布式系统？ 一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。 分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。简单来说就是一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220615223816600.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式系统-理论基础及一致性算法\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220615223816600.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220615223858440.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是分布式系统？","slug":"_1-什么是分布式系统","link":"#_1-什么是分布式系统","children":[{"level":3,"title":"1.1  分布式系统的主要特征","slug":"_1-1-分布式系统的主要特征","link":"#_1-1-分布式系统的主要特征","children":[]},{"level":3,"title":"1.2 . 分布式系统面临的问题","slug":"_1-2-分布式系统面临的问题","link":"#_1-2-分布式系统面临的问题","children":[]},{"level":3,"title":"1.3 衡量分布式系统的指标","slug":"_1-3-衡量分布式系统的指标","link":"#_1-3-衡量分布式系统的指标","children":[]}]},{"level":2,"title":"2. 分布式理论基础","slug":"_2-分布式理论基础","link":"#_2-分布式理论基础","children":[{"level":3,"title":"2.1 CAP理论","slug":"_2-1-cap理论","link":"#_2-1-cap理论","children":[]},{"level":3,"title":"2.2 BASE理论","slug":"_2-2-base理论","link":"#_2-2-base理论","children":[]}]},{"level":2,"title":"3. 分布式一致性算法","slug":"_3-分布式一致性算法","link":"#_3-分布式一致性算法","children":[{"level":3,"title":"3.1 一致性Hash算法","slug":"_3-1-一致性hash算法","link":"#_3-1-一致性hash算法","children":[]},{"level":3,"title":"3.2 Paxos算法","slug":"_3-2-paxos算法","link":"#_3-2-paxos算法","children":[]},{"level":3,"title":"3.3 Raft算法","slug":"_3-3-raft算法","link":"#_3-3-raft算法","children":[]},{"level":3,"title":"3.4 ZAB算法","slug":"_3-4-zab算法","link":"#_3-4-zab算法","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":9.22,"words":2765},"filePathRelative":"posts/Architect/distributed/theory/distributed-theoretical-basis.md","localizedDate":"2024年10月28日","excerpt":"\\n<h2>1. 什么是分布式系统？</h2>\\n<blockquote>\\n<p>一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。</p>\\n</blockquote>\\n<p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。简单来说就是<strong>一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样</strong>。分布式意味着可以采用更多的普通计算机（相对于昂贵的大型机）组成分布式集群对外提供服务。计算机越多，CPU、内存、存储资源等也就越多，能够处理的并发访问量也就越大。</p>","autoDesc":true}');export{p as comp,c as data};
