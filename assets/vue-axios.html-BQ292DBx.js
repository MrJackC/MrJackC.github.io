import{_ as n,c as a,a as e,o as i}from"./app-BQBjlK2G.js";const p={};function l(c,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="axios网络请求封装" tabindex="-1"><a class="header-anchor" href="#axios网络请求封装"><span>axios网络请求封装</span></a></h1><h2 id="_1-axios封装" tabindex="-1"><a class="header-anchor" href="#_1-axios封装"><span>1. axios封装</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>/**axios封装</span></span>
<span class="line"><span> * 请求拦截、相应拦截、错误统一处理</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>import axios from &#39;axios&#39;;</span></span>
<span class="line"><span>// import QS from &#39;qs&#39;;</span></span>
<span class="line"><span>import { Toast } from &#39;vant&#39;;</span></span>
<span class="line"><span>import store from &#39;../store/index&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 环境的切换</span></span>
<span class="line"><span>if (process.env.NODE_ENV == &#39;development&#39;) {    </span></span>
<span class="line"><span>    axios.defaults.baseURL = &#39;/api&#39;;</span></span>
<span class="line"><span>} else if (process.env.NODE_ENV == &#39;debug&#39;) {    </span></span>
<span class="line"><span>    axios.defaults.baseURL = &#39;&#39;;</span></span>
<span class="line"><span>} else if (process.env.NODE_ENV == &#39;production&#39;) {    </span></span>
<span class="line"><span>    axios.defaults.baseURL = &#39;http://api.123dailu.com/&#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 请求超时时间</span></span>
<span class="line"><span>axios.defaults.timeout = 10000;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// post请求头</span></span>
<span class="line"><span>axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded;charset=UTF-8&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 请求拦截器</span></span>
<span class="line"><span>axios.interceptors.request.use(    </span></span>
<span class="line"><span>    config =&gt; {</span></span>
<span class="line"><span>        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span>
<span class="line"><span>        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span>
<span class="line"><span>        // const token = store.state.token;        </span></span>
<span class="line"><span>        // token &amp;&amp; (config.headers.Authorization = token);        </span></span>
<span class="line"><span>        return config;    </span></span>
<span class="line"><span>    },    </span></span>
<span class="line"><span>    error =&gt; {        </span></span>
<span class="line"><span>        return Promise.error(error);    </span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 响应拦截器</span></span>
<span class="line"><span>axios.interceptors.response.use(    </span></span>
<span class="line"><span>    response =&gt; {       </span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>        if (response.status === 200) {          </span></span>
<span class="line"><span>           return Promise.resolve(response);</span></span>
<span class="line"><span>        } else {      </span></span>
<span class="line"><span>            return Promise.reject(response);        </span></span>
<span class="line"><span>        }    </span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // 服务器状态码不是200的情况    </span></span>
<span class="line"><span>    error =&gt; {        </span></span>
<span class="line"><span>        if (error.response.status) {            </span></span>
<span class="line"><span>            switch (error.response.status) {                </span></span>
<span class="line"><span>                // 401: 未登录                </span></span>
<span class="line"><span>                // 未登录则跳转登录页面，并携带当前页面的路径                </span></span>
<span class="line"><span>                // 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span>
<span class="line"><span>                case 401:                    </span></span>
<span class="line"><span>                    router.replace({                        </span></span>
<span class="line"><span>                        path: &#39;/login&#39;,                        </span></span>
<span class="line"><span>                        query: { redirect: router.currentRoute.fullPath } </span></span>
<span class="line"><span>                    });</span></span>
<span class="line"><span>                    break;</span></span>
<span class="line"><span>                // 403 token过期                </span></span>
<span class="line"><span>                // 登录过期对用户进行提示                </span></span>
<span class="line"><span>                // 清除本地token和清空vuex中token对象                </span></span>
<span class="line"><span>                // 跳转登录页面                </span></span>
<span class="line"><span>                case 403:                     </span></span>
<span class="line"><span>                    Toast({                        </span></span>
<span class="line"><span>                        message: &#39;登录过期，请重新登录&#39;,                        </span></span>
<span class="line"><span>                        duration: 1000,                        </span></span>
<span class="line"><span>                        forbidClick: true                    </span></span>
<span class="line"><span>                    });                    </span></span>
<span class="line"><span>                    // 清除token                    </span></span>
<span class="line"><span>                    localStorage.removeItem(&#39;token&#39;);                    </span></span>
<span class="line"><span>                    store.commit(&#39;loginSuccess&#39;, null);                    </span></span>
<span class="line"><span>                    // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span>
<span class="line"><span>                    setTimeout(() =&gt; {                        </span></span>
<span class="line"><span>                        router.replace({                            </span></span>
<span class="line"><span>                            path: &#39;/login&#39;,                            </span></span>
<span class="line"><span>                            query: { </span></span>
<span class="line"><span>                                redirect: router.currentRoute.fullPath </span></span>
<span class="line"><span>                            }                        </span></span>
<span class="line"><span>                        });                    </span></span>
<span class="line"><span>                    }, 1000);                    </span></span>
<span class="line"><span>                    break; </span></span>
<span class="line"><span>                // 404请求不存在                </span></span>
<span class="line"><span>                case 404:                    </span></span>
<span class="line"><span>                    Toast({                        </span></span>
<span class="line"><span>                        message: &#39;网络请求不存在&#39;,                        </span></span>
<span class="line"><span>                        duration: 1500,                        </span></span>
<span class="line"><span>                        forbidClick: true                    </span></span>
<span class="line"><span>                    });                    </span></span>
<span class="line"><span>                break;                </span></span>
<span class="line"><span>                // 其他错误，直接抛出错误提示                </span></span>
<span class="line"><span>                default:                    </span></span>
<span class="line"><span>                    Toast({                        </span></span>
<span class="line"><span>                        message: error.response.data.message,                        </span></span>
<span class="line"><span>                        duration: 1500,                        </span></span>
<span class="line"><span>                        forbidClick: true                    </span></span>
<span class="line"><span>                    });            </span></span>
<span class="line"><span>            }            </span></span>
<span class="line"><span>            return Promise.reject(error.response);        </span></span>
<span class="line"><span>        }       </span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>/** </span></span>
<span class="line"><span> * get方法，对应get请求 </span></span>
<span class="line"><span> * @param {String} url [请求的url地址] </span></span>
<span class="line"><span> * @param {Object} params [请求时携带的参数] </span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>export function get(url, params){    </span></span>
<span class="line"><span>    return new Promise((resolve, reject) =&gt;{        </span></span>
<span class="line"><span>        axios.get(url, {            </span></span>
<span class="line"><span>            params: params        </span></span>
<span class="line"><span>        })        </span></span>
<span class="line"><span>        .then(res =&gt; {            </span></span>
<span class="line"><span>            resolve(res.data);        </span></span>
<span class="line"><span>        })        </span></span>
<span class="line"><span>        .catch(err =&gt; {            </span></span>
<span class="line"><span>            reject(err.data)        </span></span>
<span class="line"><span>        })    </span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/** </span></span>
<span class="line"><span> * post方法，对应post请求 </span></span>
<span class="line"><span> * @param {String} url [请求的url地址] </span></span>
<span class="line"><span> * @param {Object} params [请求时携带的参数] </span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>export function post(url, params) {    </span></span>
<span class="line"><span>    return new Promise((resolve, reject) =&gt; {         </span></span>
<span class="line"><span>        axios.post(url, params)        </span></span>
<span class="line"><span>        .then(res =&gt; {            </span></span>
<span class="line"><span>            resolve(res.data);        </span></span>
<span class="line"><span>        })        </span></span>
<span class="line"><span>        .catch(err =&gt; {  </span></span>
<span class="line"><span>            reject(err.data)        </span></span>
<span class="line"><span>        })    </span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/** </span></span>
<span class="line"><span> * post方法，对应post请求  FORM表单形式</span></span>
<span class="line"><span> * @param {String} url [请求的url地址] </span></span>
<span class="line"><span> * @param {Object} params [请求时携带的参数] </span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>export function postForm(url, params) {    </span></span>
<span class="line"><span>  return new Promise((resolve, reject) =&gt; {         </span></span>
<span class="line"><span>      axios.post(url, tansParams(params))        </span></span>
<span class="line"><span>      .then(res =&gt; {            </span></span>
<span class="line"><span>          resolve(res.data);        </span></span>
<span class="line"><span>      })        </span></span>
<span class="line"><span>      .catch(err =&gt; {  </span></span>
<span class="line"><span>          reject(err.data)        </span></span>
<span class="line"><span>      })    </span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function tansParams(params) {</span></span>
<span class="line"><span>  let result = &#39;&#39;</span></span>
<span class="line"><span>  Object.keys(params).forEach((key) =&gt; {</span></span>
<span class="line"><span>    if (!Object.is(params[key], undefined) &amp;&amp; !Object.is(params[key], null)) {</span></span>
<span class="line"><span>      result += encodeURIComponent(key) + &#39;=&#39; + encodeURIComponent(params[key]) + &#39;&amp;&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  return result</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-api-请求类-根据实际业务" tabindex="-1"><a class="header-anchor" href="#_2-api-请求类-根据实际业务"><span>2. APi 请求类（根据实际业务）</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>import { get, post,postForm } from &#39;@/utils/request&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>let api={</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 对应的请求</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    getList (params) {</span></span>
<span class="line"><span>        return postForm(&quot;/getList.do&quot;, params);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default api;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-对应页面做请求" tabindex="-1"><a class="header-anchor" href="#_3-对应页面做请求"><span>3. 对应页面做请求</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>import api from &quot;@/api/api&quot;;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  mounted() {</span></span>
<span class="line"><span>    this.getList();</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  methods: {</span></span>
<span class="line"><span>    // 经验汇编</span></span>
<span class="line"><span>    getList() {</span></span>
<span class="line"><span>       let that = this;</span></span>
<span class="line"><span>      let params = {</span></span>
<span class="line"><span>        page: 1,</span></span>
<span class="line"><span>        pageSize: 100,</span></span>
<span class="line"><span>      };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      api.getList(params).then((res) =&gt; {</span></span>
<span class="line"><span>        if (res.code == 0) {</span></span>
<span class="line"><span>          that.caseCodeList = res.resultDatas.list;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      });</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://juejin.im/post/6844903652881072141" target="_blank" rel="noopener noreferrer">vue中Axios的封装和API接口的管理</a></p>`,9)]))}const d=n(p,[["render",l],["__file","vue-axios.html.vue"]]),v=JSON.parse(`{"path":"/posts/Web/frontend-vue/vue-axios.html","title":"axios网络请求封装","lang":"zh-CN","frontmatter":{"description":"axios网络请求封装 1. axios封装 2. APi 请求类（根据实际业务） 3. 对应页面做请求 参考文章 vue中Axios的封装和API接口的管理","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Web/frontend-vue/vue-axios.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"axios网络请求封装"}],["meta",{"property":"og:description","content":"axios网络请求封装 1. axios封装 2. APi 请求类（根据实际业务） 3. 对应页面做请求 参考文章 vue中Axios的封装和API接口的管理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"axios网络请求封装\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. axios封装","slug":"_1-axios封装","link":"#_1-axios封装","children":[]},{"level":2,"title":"2. APi 请求类（根据实际业务）","slug":"_2-api-请求类-根据实际业务","link":"#_2-api-请求类-根据实际业务","children":[]},{"level":2,"title":"3. 对应页面做请求","slug":"_3-对应页面做请求","link":"#_3-对应页面做请求","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.42,"words":727},"filePathRelative":"posts/Web/frontend-vue/vue-axios.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. axios封装</h2>\\n<div class=\\"language- line-numbers-mode\\" data-ext=\\"\\" data-title=\\"\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span>/**axios封装</span></span>\\n<span class=\\"line\\"><span> * 请求拦截、相应拦截、错误统一处理</span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span>import axios from 'axios';</span></span>\\n<span class=\\"line\\"><span>// import QS from 'qs';</span></span>\\n<span class=\\"line\\"><span>import { Toast } from 'vant';</span></span>\\n<span class=\\"line\\"><span>import store from '../store/index'</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 环境的切换</span></span>\\n<span class=\\"line\\"><span>if (process.env.NODE_ENV == 'development') {    </span></span>\\n<span class=\\"line\\"><span>    axios.defaults.baseURL = '/api';</span></span>\\n<span class=\\"line\\"><span>} else if (process.env.NODE_ENV == 'debug') {    </span></span>\\n<span class=\\"line\\"><span>    axios.defaults.baseURL = '';</span></span>\\n<span class=\\"line\\"><span>} else if (process.env.NODE_ENV == 'production') {    </span></span>\\n<span class=\\"line\\"><span>    axios.defaults.baseURL = 'http://api.123dailu.com/';</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 请求超时时间</span></span>\\n<span class=\\"line\\"><span>axios.defaults.timeout = 10000;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// post请求头</span></span>\\n<span class=\\"line\\"><span>axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 请求拦截器</span></span>\\n<span class=\\"line\\"><span>axios.interceptors.request.use(    </span></span>\\n<span class=\\"line\\"><span>    config =&gt; {</span></span>\\n<span class=\\"line\\"><span>        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span>\\n<span class=\\"line\\"><span>        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span>\\n<span class=\\"line\\"><span>        // const token = store.state.token;        </span></span>\\n<span class=\\"line\\"><span>        // token &amp;&amp; (config.headers.Authorization = token);        </span></span>\\n<span class=\\"line\\"><span>        return config;    </span></span>\\n<span class=\\"line\\"><span>    },    </span></span>\\n<span class=\\"line\\"><span>    error =&gt; {        </span></span>\\n<span class=\\"line\\"><span>        return Promise.error(error);    </span></span>\\n<span class=\\"line\\"><span>    })</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 响应拦截器</span></span>\\n<span class=\\"line\\"><span>axios.interceptors.response.use(    </span></span>\\n<span class=\\"line\\"><span>    response =&gt; {       </span></span>\\n<span class=\\"line\\"><span>       </span></span>\\n<span class=\\"line\\"><span>        if (response.status === 200) {          </span></span>\\n<span class=\\"line\\"><span>           return Promise.resolve(response);</span></span>\\n<span class=\\"line\\"><span>        } else {      </span></span>\\n<span class=\\"line\\"><span>            return Promise.reject(response);        </span></span>\\n<span class=\\"line\\"><span>        }    </span></span>\\n<span class=\\"line\\"><span>    },</span></span>\\n<span class=\\"line\\"><span>    // 服务器状态码不是200的情况    </span></span>\\n<span class=\\"line\\"><span>    error =&gt; {        </span></span>\\n<span class=\\"line\\"><span>        if (error.response.status) {            </span></span>\\n<span class=\\"line\\"><span>            switch (error.response.status) {                </span></span>\\n<span class=\\"line\\"><span>                // 401: 未登录                </span></span>\\n<span class=\\"line\\"><span>                // 未登录则跳转登录页面，并携带当前页面的路径                </span></span>\\n<span class=\\"line\\"><span>                // 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span>\\n<span class=\\"line\\"><span>                case 401:                    </span></span>\\n<span class=\\"line\\"><span>                    router.replace({                        </span></span>\\n<span class=\\"line\\"><span>                        path: '/login',                        </span></span>\\n<span class=\\"line\\"><span>                        query: { redirect: router.currentRoute.fullPath } </span></span>\\n<span class=\\"line\\"><span>                    });</span></span>\\n<span class=\\"line\\"><span>                    break;</span></span>\\n<span class=\\"line\\"><span>                // 403 token过期                </span></span>\\n<span class=\\"line\\"><span>                // 登录过期对用户进行提示                </span></span>\\n<span class=\\"line\\"><span>                // 清除本地token和清空vuex中token对象                </span></span>\\n<span class=\\"line\\"><span>                // 跳转登录页面                </span></span>\\n<span class=\\"line\\"><span>                case 403:                     </span></span>\\n<span class=\\"line\\"><span>                    Toast({                        </span></span>\\n<span class=\\"line\\"><span>                        message: '登录过期，请重新登录',                        </span></span>\\n<span class=\\"line\\"><span>                        duration: 1000,                        </span></span>\\n<span class=\\"line\\"><span>                        forbidClick: true                    </span></span>\\n<span class=\\"line\\"><span>                    });                    </span></span>\\n<span class=\\"line\\"><span>                    // 清除token                    </span></span>\\n<span class=\\"line\\"><span>                    localStorage.removeItem('token');                    </span></span>\\n<span class=\\"line\\"><span>                    store.commit('loginSuccess', null);                    </span></span>\\n<span class=\\"line\\"><span>                    // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span>\\n<span class=\\"line\\"><span>                    setTimeout(() =&gt; {                        </span></span>\\n<span class=\\"line\\"><span>                        router.replace({                            </span></span>\\n<span class=\\"line\\"><span>                            path: '/login',                            </span></span>\\n<span class=\\"line\\"><span>                            query: { </span></span>\\n<span class=\\"line\\"><span>                                redirect: router.currentRoute.fullPath </span></span>\\n<span class=\\"line\\"><span>                            }                        </span></span>\\n<span class=\\"line\\"><span>                        });                    </span></span>\\n<span class=\\"line\\"><span>                    }, 1000);                    </span></span>\\n<span class=\\"line\\"><span>                    break; </span></span>\\n<span class=\\"line\\"><span>                // 404请求不存在                </span></span>\\n<span class=\\"line\\"><span>                case 404:                    </span></span>\\n<span class=\\"line\\"><span>                    Toast({                        </span></span>\\n<span class=\\"line\\"><span>                        message: '网络请求不存在',                        </span></span>\\n<span class=\\"line\\"><span>                        duration: 1500,                        </span></span>\\n<span class=\\"line\\"><span>                        forbidClick: true                    </span></span>\\n<span class=\\"line\\"><span>                    });                    </span></span>\\n<span class=\\"line\\"><span>                break;                </span></span>\\n<span class=\\"line\\"><span>                // 其他错误，直接抛出错误提示                </span></span>\\n<span class=\\"line\\"><span>                default:                    </span></span>\\n<span class=\\"line\\"><span>                    Toast({                        </span></span>\\n<span class=\\"line\\"><span>                        message: error.response.data.message,                        </span></span>\\n<span class=\\"line\\"><span>                        duration: 1500,                        </span></span>\\n<span class=\\"line\\"><span>                        forbidClick: true                    </span></span>\\n<span class=\\"line\\"><span>                    });            </span></span>\\n<span class=\\"line\\"><span>            }            </span></span>\\n<span class=\\"line\\"><span>            return Promise.reject(error.response);        </span></span>\\n<span class=\\"line\\"><span>        }       </span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>);</span></span>\\n<span class=\\"line\\"><span>/** </span></span>\\n<span class=\\"line\\"><span> * get方法，对应get请求 </span></span>\\n<span class=\\"line\\"><span> * @param {String} url [请求的url地址] </span></span>\\n<span class=\\"line\\"><span> * @param {Object} params [请求时携带的参数] </span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span>export function get(url, params){    </span></span>\\n<span class=\\"line\\"><span>    return new Promise((resolve, reject) =&gt;{        </span></span>\\n<span class=\\"line\\"><span>        axios.get(url, {            </span></span>\\n<span class=\\"line\\"><span>            params: params        </span></span>\\n<span class=\\"line\\"><span>        })        </span></span>\\n<span class=\\"line\\"><span>        .then(res =&gt; {            </span></span>\\n<span class=\\"line\\"><span>            resolve(res.data);        </span></span>\\n<span class=\\"line\\"><span>        })        </span></span>\\n<span class=\\"line\\"><span>        .catch(err =&gt; {            </span></span>\\n<span class=\\"line\\"><span>            reject(err.data)        </span></span>\\n<span class=\\"line\\"><span>        })    </span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span>/** </span></span>\\n<span class=\\"line\\"><span> * post方法，对应post请求 </span></span>\\n<span class=\\"line\\"><span> * @param {String} url [请求的url地址] </span></span>\\n<span class=\\"line\\"><span> * @param {Object} params [请求时携带的参数] </span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span>export function post(url, params) {    </span></span>\\n<span class=\\"line\\"><span>    return new Promise((resolve, reject) =&gt; {         </span></span>\\n<span class=\\"line\\"><span>        axios.post(url, params)        </span></span>\\n<span class=\\"line\\"><span>        .then(res =&gt; {            </span></span>\\n<span class=\\"line\\"><span>            resolve(res.data);        </span></span>\\n<span class=\\"line\\"><span>        })        </span></span>\\n<span class=\\"line\\"><span>        .catch(err =&gt; {  </span></span>\\n<span class=\\"line\\"><span>            reject(err.data)        </span></span>\\n<span class=\\"line\\"><span>        })    </span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>/** </span></span>\\n<span class=\\"line\\"><span> * post方法，对应post请求  FORM表单形式</span></span>\\n<span class=\\"line\\"><span> * @param {String} url [请求的url地址] </span></span>\\n<span class=\\"line\\"><span> * @param {Object} params [请求时携带的参数] </span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span>export function postForm(url, params) {    </span></span>\\n<span class=\\"line\\"><span>  return new Promise((resolve, reject) =&gt; {         </span></span>\\n<span class=\\"line\\"><span>      axios.post(url, tansParams(params))        </span></span>\\n<span class=\\"line\\"><span>      .then(res =&gt; {            </span></span>\\n<span class=\\"line\\"><span>          resolve(res.data);        </span></span>\\n<span class=\\"line\\"><span>      })        </span></span>\\n<span class=\\"line\\"><span>      .catch(err =&gt; {  </span></span>\\n<span class=\\"line\\"><span>          reject(err.data)        </span></span>\\n<span class=\\"line\\"><span>      })    </span></span>\\n<span class=\\"line\\"><span>  });</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>function tansParams(params) {</span></span>\\n<span class=\\"line\\"><span>  let result = ''</span></span>\\n<span class=\\"line\\"><span>  Object.keys(params).forEach((key) =&gt; {</span></span>\\n<span class=\\"line\\"><span>    if (!Object.is(params[key], undefined) &amp;&amp; !Object.is(params[key], null)) {</span></span>\\n<span class=\\"line\\"><span>      result += encodeURIComponent(key) + '=' + encodeURIComponent(params[key]) + '&amp;'</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>  })</span></span>\\n<span class=\\"line\\"><span>  return result</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,v as data};
