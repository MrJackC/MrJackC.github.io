import{_ as t,c as a,a as o,o as n}from"./app-fWubcX7c.js";const i={};function c(r,e){return n(),a("div",null,e[0]||(e[0]=[o('<h1 id="商城设计要点-七-mysql读写分离带来的数据不一致问题" tabindex="-1"><a class="header-anchor" href="#商城设计要点-七-mysql读写分离带来的数据不一致问题"><span>商城设计要点(七)-MySQL读写分离带来的数据不一致问题</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>互联网业务大部分都是 <code>读多写少</code>，为了提升数据库集群的吞吐性能，我们通常会采用 <code>主从架构</code>、<code>读写分离</code></p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141112.png" alt="image-20220326211746699" tabindex="0" loading="lazy"><figcaption>image-20220326211746699</figcaption></figure><p>部署一个主库实例，客户端请求<code>所有写操作</code>全部写到主库，然后借助 MySQL 自带的 <code>主从同步</code> 功能，做一些简单配置，可以近乎实时的将主库的数据同步给 <code>多个从库实例</code>，主从延迟非常小，一般<strong>不超过 1 毫秒</strong>。</p><p>客户端请求的<code>所有读操作</code>全部打到 <code>从库</code>，借助多实例集群提升<code>读请求</code>的整体处理能力。</p><p>这个方案看似天衣无缝，但实际有个 <strong>副作用</strong></p><p>主从同步虽然近乎实时，但还是有个 <code>时间差</code> ，主库数据刚更新完，但数据还没来得及同步到从库，后续<code>读请求</code>直接访问了从库，看到的还是旧数据，影响用户体验。</p><p>任何事情都不是完美的，从主同步也是一样，没有完美的解决方案，我们要找到其中的平衡取舍点。</p><p>我们以电商为例，看看如何从 <code>产品层面</code> 来化解这个问题</p><h2 id="_2-复现场景" tabindex="-1"><a class="header-anchor" href="#_2-复现场景"><span>2. 复现场景</span></a></h2><ol><li>在下单确认页面，点击购买按钮，进入了支付页面</li></ol><p>​ <img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141155.png" alt="image-20220326212046726" loading="lazy"></p><ol start="2"><li>输入支付宝支付密码，进入<strong>支付成功页面</strong>，页面有查看订单详情的入口。</li></ol><p>​ <img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141180.png" alt="image-20220326212106205" loading="lazy"></p><ol start="3"><li><p>点击 <code>查看交易详情</code> ，才跳到真正的 订单详情页，可以查看订单的支付状态（订单数据取自从库）</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141202.png" alt="image-20220326212128598" tabindex="0" loading="lazy"><figcaption>image-20220326212128598</figcaption></figure></li></ol><h2 id="_3-方案解析" tabindex="-1"><a class="header-anchor" href="#_3-方案解析"><span>3. 方案解析</span></a></h2><p>我们在支付成功后，并没有立即跳到 <code>订单详情页</code>，而是增加了一个 无关紧要的 <code>中间页（支付成功页）</code>，一是告诉你支付的结果是成功的，钱没丢，不要担心；另外也可以增加一些推荐商品，引流提升网站的GMV。最重要的，增加了一个缓冲期，为 <code>订单的主从库数据同步</code> 争取了更多的时间。</p><p>可谓一举多得，其他互联网业务也是类似道理。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://mp.weixin.qq.com/s/BgVr0jEBJwQI5UW_ele08A" target="_blank" rel="noopener noreferrer">聊聊电商系统中常见的9大坑！库存超卖、重复下单、物流单ABA</a></p>',21)]))}const p=t(i,[["render",c],["__file","mall-key-points-data-inconsistent.html.vue"]]),l=JSON.parse('{"path":"/posts/Architect/mall/mall-key-points-data-inconsistent.html","title":"商城设计要点(七)-MySQL读写分离带来的数据不一致问题","lang":"zh-CN","frontmatter":{"description":"商城设计要点(七)-MySQL读写分离带来的数据不一致问题 1. 简介 互联网业务大部分都是 读多写少，为了提升数据库集群的吞吐性能，我们通常会采用 主从架构、读写分离 image-20220326211746699image-20220326211746699 部署一个主库实例，客户端请求所有写操作全部写到主库，然后借助 MySQL 自带的 主从同步...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Architect/mall/mall-key-points-data-inconsistent.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"商城设计要点(七)-MySQL读写分离带来的数据不一致问题"}],["meta",{"property":"og:description","content":"商城设计要点(七)-MySQL读写分离带来的数据不一致问题 1. 简介 互联网业务大部分都是 读多写少，为了提升数据库集群的吞吐性能，我们通常会采用 主从架构、读写分离 image-20220326211746699image-20220326211746699 部署一个主库实例，客户端请求所有写操作全部写到主库，然后借助 MySQL 自带的 主从同步..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141112.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T01:58:08.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-28T01:58:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"商城设计要点(七)-MySQL读写分离带来的数据不一致问题\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141112.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141155.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141180.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141202.png\\"],\\"dateModified\\":\\"2024-10-28T01:58:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 复现场景","slug":"_2-复现场景","link":"#_2-复现场景","children":[]},{"level":2,"title":"3. 方案解析","slug":"_3-方案解析","link":"#_3-方案解析","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1730080688000,"updatedTime":1730080688000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":2.04,"words":611},"filePathRelative":"posts/Architect/mall/mall-key-points-data-inconsistent.md","localizedDate":"2024年10月28日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>互联网业务大部分都是 <code>读多写少</code>，为了提升数据库集群的吞吐性能，我们通常会采用 <code>主从架构</code>、<code>读写分离</code></p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404301141112.png\\" alt=\\"image-20220326211746699\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220326211746699</figcaption></figure>","autoDesc":true}');export{p as comp,l as data};
