import{_ as a,c as n,a as e,o as i}from"./app-BfIe-EZg.js";const l={};function r(o,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="菜单路由" tabindex="-1"><a class="header-anchor" href="#菜单路由"><span>菜单路由</span></a></h1><p>前端项目基于 element-ui-admin 实现，它的 <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/router-and-nav.html#%E9%85%8D%E7%BD%AE%E9%A1%B9" target="_blank" rel="noopener noreferrer">路由和侧边栏 (opens new window)</a>是组织起一个后台应用的关键骨架。</p><p>侧边栏和路由是绑定在一起的，所以你只有在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/router/index.js" target="_blank" rel="noopener noreferrer">@/router/index.js (opens new window)</a>下面配置对应的路由，侧边栏就能动态的生成了，大大减轻了手动重复编辑侧边栏的工作量。</p><p>当然，这样就需要在配置路由的时候，遵循一些约定的规则。</p><h2 id="_1-路由配置" tabindex="-1"><a class="header-anchor" href="#_1-路由配置"><span><a href="https://doc.iocoder.cn/vue2/route/#_1-%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>1. 路由配置</span></a></h2><p>首先，我们了解一下本项目配置路由时，提供了哪些配置项：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当设置 true 的时候该路由不会在侧边栏出现 如 401，login 等页面，或者如一些编辑页面 /edit/1</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">hidden</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // (默认 false)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当设置 noRedirect 的时候该路由在面包屑导航中不可被点击</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">redirect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;noRedirect&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 当你一个路由下面的 children 声明的路由大于 1 个时，自动会变成嵌套的模式。例如说，组件页面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 只有一个时，会将那个子路由当做根路由显示在侧边栏。例如说，如引导页面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 若你想不管路由下面的 children 声明的个数都显示你的根路由，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 你可以设置 alwaysShow: true，这样它就会忽略之前定义的规则，一直显示根路由</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">alwaysShow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;router-name&#39;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设定路由的名字，一定要填写不然使用 &lt;keep-alive&gt; 时会出现各种问题</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">meta</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  roles</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;editor&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置该路由进入的权限，支持多个权限叠加</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;title&#39;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置该路由在侧边栏和面包屑中展示的名字</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  icon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;svg-name&#39;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置该路由的图标，支持 svg-class，也支持 el-icon-x element-ui 的 icon</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  noCache</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果设置为 true，则不会被 &lt;keep-alive&gt; 缓存(默认 false)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  breadcrumb</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //  如果设置为 false，则不会在breadcrumb面包屑中显示(默认 true)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  affix</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果设置为 true，它则会固定在 tags-view 中(默认 false)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 当路由设置了该属性，则会高亮相对应的侧边栏。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 这在某些场景非常有用，比如：一个文章的列表页路由为：/article/list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 点击文章进入文章详情页，这时候路由为 /article/1，但你想在侧边栏高亮文章列表的路由，就可以进行如下设置</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  activeMenu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;/article/list&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通示例</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;/system/test&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  component</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">Layout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  redirect</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;noRedirect&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  hidden</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  alwaysShow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  meta</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: { </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;系统管理&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">icon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;system&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  children</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: [{</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">    path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;index&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">    component</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">(resolve)</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;"> =&gt;</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;"> require(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;@/views/index&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">], </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">resolve),</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">    name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;Test&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">    meta</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">      title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;测试管理&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">      icon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;user&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外链示例</p><div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;https:</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//www.iocoder.cn&#39;,</span></span>
<span class="line"><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">  meta:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">&#39;芋道源码&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF;">icon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;guide&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由"><span><a href="https://doc.iocoder.cn/vue2/route/#_2-%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener noreferrer">#</a>2. 路由</span></a></h2><p>项目的路由分为两种：静态路由、动态路由。</p><h3 id="_2-1-静态路由" tabindex="-1"><a class="header-anchor" href="#_2-1-静态路由"><span><a href="https://doc.iocoder.cn/vue2/route/#_2-1-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener noreferrer">#</a>2.1 静态路由</span></a></h3><p>静态路由，代表那些不需要动态判断权限的路由，如登录页、404、个人中心等通用页面。</p><p>在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/router/index.js" target="_blank" rel="noopener noreferrer">@/router/index.js (opens new window)</a>的 <code>constantRoutes</code>，就是配置对应的公共路由。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/01.png" alt="静态路由" tabindex="0" loading="lazy"><figcaption>静态路由</figcaption></figure><h3 id="_2-2-动态路由" tabindex="-1"><a class="header-anchor" href="#_2-2-动态路由"><span><a href="https://doc.iocoder.cn/vue2/route/#_2-2-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener noreferrer">#</a>2.2 动态路由</span></a></h3><p>动态路由，代表那些需要根据用户动态判断权限，并通过 <a href="https://router.vuejs.org/guide/advanced/dynamic-routing.html#adding-routes" target="_blank" rel="noopener noreferrer">addRoutes (opens new window)</a>动态添加的页面，如用户管理、角色管理等功能页面。</p><p>在用户登录成功后，会触发 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/store/modules/permission.js#L29" target="_blank" rel="noopener noreferrer"><code>@/store/modules/permission.js</code> (opens new window)</a>请求后端的菜单 RESTful API 接口，获取用户<strong>有权限</strong>的菜单列表，并转化添加到路由中。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/02.png" alt="动态路由" tabindex="0" loading="lazy"><figcaption>动态路由</figcaption></figure><p>友情提示：</p><ol><li>动态路由可以在 [系统管理 -&gt; 菜单管理] 进行新增和修改操作，请求的后端 RESTful API 接口是 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/controller/admin/auth/AuthController.java#L83-L93" target="_blank" rel="noopener noreferrer"><code>/admin-api/system/list-menus</code>(opens new window)</a></li><li>动态路由在生产环境下会默认使用路由懒加载，实现方式参考 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/store/modules/permission.js#L108-L110" target="_blank" rel="noopener noreferrer">loadView (opens new window)</a>方法的判断</li></ol><h3 id="_2-3-路由跳转" tabindex="-1"><a class="header-anchor" href="#_2-3-路由跳转"><span><a href="https://doc.iocoder.cn/vue2/route/#_2-3-%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC" target="_blank" rel="noopener noreferrer">#</a>2.3 路由跳转</span></a></h3><p>使用 <code>router.push</code> 方法，可以实现跳转到不同的页面。</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简单跳转</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">$router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/system/user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 跳转页面并设置请求参数，使用 \`query\` 属性</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">$router</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/system/user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">query</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span><span style="color:#E06C75;--shiki-dark:#E06C75;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;芋道&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} });</span></span></code></pre></div><h2 id="_3-菜单管理" tabindex="-1"><a class="header-anchor" href="#_3-菜单管理"><span><a href="https://doc.iocoder.cn/vue2/route/#_3-%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86" target="_blank" rel="noopener noreferrer">#</a>3. 菜单管理</span></a></h2><p>项目的菜单在 [系统管理 -&gt; 菜单管理] 进行管理，支持<strong>无限</strong>层级，提供目录、菜单、按钮三种类型。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/03.png" alt="系统管理 -&gt; 菜单管理" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 菜单管理</figcaption></figure><p>菜单可在 [系统管理 -&gt; 角色管理] 被分配给角色。如下图所示：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/04.png" alt="系统管理 -&gt; 角色管理" tabindex="0" loading="lazy"><figcaption>系统管理 -&gt; 角色管理</figcaption></figure><h3 id="_3-1-新增目录" tabindex="-1"><a class="header-anchor" href="#_3-1-新增目录"><span><a href="https://doc.iocoder.cn/vue2/route/#_3-1-%E6%96%B0%E5%A2%9E%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener noreferrer">#</a>3.1 新增目录</span></a></h3><p>① 大多数情况下，目录是作为菜单的【分类】：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/05.png" alt="新增目录 —— 菜单的分类" tabindex="0" loading="lazy"><figcaption>新增目录 —— 菜单的分类</figcaption></figure><p>② 目录也提供实现【外链】的能力：</p><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/06.png" alt="新增目录 —— 外链" tabindex="0" loading="lazy"><figcaption>新增目录 —— 外链</figcaption></figure><h3 id="_3-2-新增菜单" tabindex="-1"><a class="header-anchor" href="#_3-2-新增菜单"><span><a href="https://doc.iocoder.cn/vue2/route/#_3-2-%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%8D%95" target="_blank" rel="noopener noreferrer">#</a>3.2 新增菜单</span></a></h3><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/07.png" alt="新增菜单" tabindex="0" loading="lazy"><figcaption>新增菜单</figcaption></figure><h3 id="_3-3-新增按钮" tabindex="-1"><a class="header-anchor" href="#_3-3-新增按钮"><span><a href="https://doc.iocoder.cn/vue2/route/#_3-3-%E6%96%B0%E5%A2%9E%E6%8C%89%E9%92%AE" target="_blank" rel="noopener noreferrer">#</a>3.3 新增按钮</span></a></h3><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/08.png" alt="新增按钮" tabindex="0" loading="lazy"><figcaption>新增按钮</figcaption></figure><h2 id="_4-权限控制" tabindex="-1"><a class="header-anchor" href="#_4-权限控制"><span><a href="https://doc.iocoder.cn/vue2/route/#_4-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener noreferrer">#</a>4. 权限控制</span></a></h2><p>前端通过权限控制，隐藏用户没有权限的按钮等，实现功能级别的权限。</p><p>友情提示：前端的权限控制，主要是提升用户体验，避免操作后发现没有权限。</p><p>最终在请求到后端时，还是会进行一次权限的校验。</p><h3 id="_4-1-v-haspermi-指令" tabindex="-1"><a class="header-anchor" href="#_4-1-v-haspermi-指令"><span><a href="https://doc.iocoder.cn/vue2/route/#_4-1-v-haspermi-%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>4.1 v-hasPermi 指令</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/directive/permission/hasPermi.js" target="_blank" rel="noopener noreferrer"><code>v-hasPermi</code> (opens new window)</a>指令，基于权限字符，进行权限的控制。</p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 单个 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-hasPermi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;[&#39;system:user:create&#39;]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;存在权限字符串才能看到&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 多个，满足任一一个即可 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-hasPermi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;[&#39;system:user:create&#39;, &#39;system:user:update&#39;]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;包含权限字符串才能看到&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_4-2-v-hasrole-指令" tabindex="-1"><a class="header-anchor" href="#_4-2-v-hasrole-指令"><span><a href="https://doc.iocoder.cn/vue2/route/#_4-2-v-hasrole-%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>4.2 v-hasRole 指令</span></a></h3><p><a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/directive/permission/hasRole.js" target="_blank" rel="noopener noreferrer"><code>v-hasRole</code> (opens new window)</a>指令，基于角色标识，机进行的控制。</p><div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 单个 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-hasRole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;[&#39;admin&#39;]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;管理员才能看到&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 多个，满足任一一个即可 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-hasRole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;[&#39;role1&#39;, &#39;role2&#39;]&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;包含角色才能看到&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-button</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_4-3-结合-v-if-指令" tabindex="-1"><a class="header-anchor" href="#_4-3-结合-v-if-指令"><span><a href="https://doc.iocoder.cn/vue2/route/#_4-3-%E7%BB%93%E5%90%88-v-if-%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>4.3 结合 v-if 指令</span></a></h3><p>在某些情况下，它是不适合使用 <code>v-hasPermi</code> 或 <code>v-hasRole</code> 指令，如元素标签组件。此时，只能通过手动设置 <code>v-if</code>，通过使用全局权限判断函数，用法是基本一致的。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tabs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;checkPermi([&#39;system:user:create&#39;])&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;用户管理&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;用户管理&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;checkPermi([&#39;system:user:create&#39;, &#39;system:user:update&#39;])&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;参数管理&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;menu&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;参数管理&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;checkRole([&#39;admin&#39;])&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;角色管理&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;role&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;角色管理&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;checkRole([&#39;admin&#39;,&#39;common&#39;])&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> label</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;定时任务&quot;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;job&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;定时任务&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tab-pane</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">el-tabs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">checkPermi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">checkRole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">from</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;@/utils/permission&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 权限判断函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">export</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> default</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">   methods</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    checkPermi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    checkRole</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-页面缓存" tabindex="-1"><a class="header-anchor" href="#_5-页面缓存"><span><a href="https://doc.iocoder.cn/vue2/route/#_5-%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">#</a>5. 页面缓存</span></a></h2><p>由于目前 <code>keep-alive</code> 和 <code>router-view</code> 是强耦合的，而且查看 Vue 的文档和源码不难发现 <code>keep-alive</code> 的 <code>include</code> 默认是优先匹配组件的 <code>name</code> ，所以在编写路由 <code>router</code> 和路由对应的 view component 的时候一定要确保两者的 name 是完全一致的。</p><p>注意，切记 view component 的 <code>name</code> 命名时候尽量保证唯一性，切记不要和某些组件的命名重复了，不然会递归引用最后内存溢出等问题。</p><p>友情提示：页面缓存是什么？</p><p>简单来说，Tab 切换时，开启页面缓存的 Tab 保持原本的状态，不进行刷新（不请求数据）。</p><p>详细可见 <a href="https://vuejs.org/guide/built-ins/keep-alive.html" target="_blank" rel="noopener noreferrer">Vue 文档 —— KeepAlive(opens new window)</a></p><h3 id="_5-1-静态路由的示例" tabindex="-1"><a class="header-anchor" href="#_5-1-静态路由的示例"><span><a href="https://doc.iocoder.cn/vue2/route/#_5-1-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E7%9A%84%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>5.1 静态路由的示例</span></a></h3><p>① router 路由的 <code>name</code> 声明如下：</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;create-form&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  component</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: ()</span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;@/views/form/create&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;createForm&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  meta</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;createForm&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">icon</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;table&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>② view component 的 <code>name</code> 声明如下：</p><div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">export</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> default</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">&#39;createForm&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>一定要保证两者的名字相同，切记写重或者写错。默认如果不写 <code>name</code> 就不会被缓存，详情见 <a href="https://github.com/vuejs/vue/issues/6938#issuecomment-345728620" target="_blank" rel="noopener noreferrer">issue (opens new window)</a>。</p><h3 id="_5-2-动态路由的示例" tabindex="-1"><a class="header-anchor" href="#_5-2-动态路由的示例"><span><a href="https://doc.iocoder.cn/vue2/route/#_5-2-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E7%9A%84%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>5.2 动态路由的示例</span></a></h3><figure><img src="https://doc.iocoder.cn/img/Vue2/菜单路由/09.png" alt="示例" tabindex="0" loading="lazy"><figcaption>示例</figcaption></figure><p>上次更新: 2023/03/01, 00:29:36</p>`,68)]))}const p=a(l,[["render",r],["__file","2.菜单路由.html.vue"]]),c=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/11.%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%8C%20Vue%202/2.%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1.html","title":"菜单路由","lang":"zh-CN","frontmatter":{"description":"菜单路由 前端项目基于 element-ui-admin 实现，它的 路由和侧边栏 (opens new window)是组织起一个后台应用的关键骨架。 侧边栏和路由是绑定在一起的，所以你只有在 @/router/index.js (opens new window)下面配置对应的路由，侧边栏就能动态的生成了，大大减轻了手动重复编辑侧边栏的工作量。 当...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Ruoyi-Vue-Pro/11.%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%8C%20Vue%202/2.%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"菜单路由"}],["meta",{"property":"og:description","content":"菜单路由 前端项目基于 element-ui-admin 实现，它的 路由和侧边栏 (opens new window)是组织起一个后台应用的关键骨架。 侧边栏和路由是绑定在一起的，所以你只有在 @/router/index.js (opens new window)下面配置对应的路由，侧边栏就能动态的生成了，大大减轻了手动重复编辑侧边栏的工作量。 当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T05:58:00.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-24T05:58:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"菜单路由\\",\\"image\\":[\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/01.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/02.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/03.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/04.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/05.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/06.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/07.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/08.png\\",\\"https://doc.iocoder.cn/img/Vue2/%E8%8F%9C%E5%8D%95%E8%B7%AF%E7%94%B1/09.png\\"],\\"dateModified\\":\\"2024-11-24T05:58:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"#1. 路由配置","slug":"_1-路由配置","link":"#_1-路由配置","children":[]},{"level":2,"title":"#2. 路由","slug":"_2-路由","link":"#_2-路由","children":[{"level":3,"title":"#2.1 静态路由","slug":"_2-1-静态路由","link":"#_2-1-静态路由","children":[]},{"level":3,"title":"#2.2 动态路由","slug":"_2-2-动态路由","link":"#_2-2-动态路由","children":[]},{"level":3,"title":"#2.3 路由跳转","slug":"_2-3-路由跳转","link":"#_2-3-路由跳转","children":[]}]},{"level":2,"title":"#3. 菜单管理","slug":"_3-菜单管理","link":"#_3-菜单管理","children":[{"level":3,"title":"#3.1 新增目录","slug":"_3-1-新增目录","link":"#_3-1-新增目录","children":[]},{"level":3,"title":"#3.2 新增菜单","slug":"_3-2-新增菜单","link":"#_3-2-新增菜单","children":[]},{"level":3,"title":"#3.3 新增按钮","slug":"_3-3-新增按钮","link":"#_3-3-新增按钮","children":[]}]},{"level":2,"title":"#4. 权限控制","slug":"_4-权限控制","link":"#_4-权限控制","children":[{"level":3,"title":"#4.1 v-hasPermi 指令","slug":"_4-1-v-haspermi-指令","link":"#_4-1-v-haspermi-指令","children":[]},{"level":3,"title":"#4.2 v-hasRole 指令","slug":"_4-2-v-hasrole-指令","link":"#_4-2-v-hasrole-指令","children":[]},{"level":3,"title":"#4.3 结合 v-if 指令","slug":"_4-3-结合-v-if-指令","link":"#_4-3-结合-v-if-指令","children":[]}]},{"level":2,"title":"#5. 页面缓存","slug":"_5-页面缓存","link":"#_5-页面缓存","children":[{"level":3,"title":"#5.1 静态路由的示例","slug":"_5-1-静态路由的示例","link":"#_5-1-静态路由的示例","children":[]},{"level":3,"title":"#5.2 动态路由的示例","slug":"_5-2-动态路由的示例","link":"#_5-2-动态路由的示例","children":[]}]}],"git":{"createdTime":1732174913000,"updatedTime":1732427880000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":7.29,"words":2186},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/11.前端手册 Vue 2/2.菜单路由.md","localizedDate":"2024年11月21日","excerpt":"\\n<p>前端项目基于 element-ui-admin 实现，它的 <a href=\\"https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/router-and-nav.html#%E9%85%8D%E7%BD%AE%E9%A1%B9\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">路由和侧边栏 (opens new window)</a>是组织起一个后台应用的关键骨架。</p>\\n<p>侧边栏和路由是绑定在一起的，所以你只有在 <a href=\\"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-ui-admin/src/router/index.js\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">@/router/index.js (opens new window)</a>下面配置对应的路由，侧边栏就能动态的生成了，大大减轻了手动重复编辑侧边栏的工作量。</p>","autoDesc":true}');export{p as comp,c as data};
