import{_ as s,c as e,a as i,o as n}from"./app-DQS7qcOs.js";const o={};function r(l,a){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="docker基础-dockerfile详解" tabindex="-1"><a class="header-anchor" href="#docker基础-dockerfile详解"><span>Docker基础 - Dockerfile详解</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</p><h2 id="_2-命令组成" tabindex="-1"><a class="header-anchor" href="#_2-命令组成"><span>2. 命令组成</span></a></h2><table><thead><tr><th>部分</th><th>命令</th></tr></thead><tbody><tr><td>基础镜像信息</td><td>FROM</td></tr><tr><td>维护者信息</td><td>MAINTAINER、LABEL</td></tr><tr><td>镜像操作指令</td><td>RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME等</td></tr><tr><td>容器启动时执行指令</td><td>CMD、ENTRYPOINT</td></tr></tbody></table><h2 id="_3-基础镜像信息-命令" tabindex="-1"><a class="header-anchor" href="#_3-基础镜像信息-命令"><span>3.基础镜像信息 命令</span></a></h2><h3 id="_3-1-from" tabindex="-1"><a class="header-anchor" href="#_3-1-from"><span>3.1 FROM</span></a></h3><p>指定哪种镜像作为新镜像的基础镜像，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> ubuntu:14.04</span></span></code></pre></div><h2 id="_4-维护者信息" tabindex="-1"><a class="header-anchor" href="#_4-维护者信息"><span>4.维护者信息</span></a></h2><h3 id="_4-1-maintainer" tabindex="-1"><a class="header-anchor" href="#_4-1-maintainer"><span>4.1 MAINTAINER</span></a></h3><p>指明该镜像的作者和其电子邮件，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">MAINTAINER</span><span style="color:#98C379;--shiki-dark:#98C379;"> zsz</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;xxxxxxx@qq.com&quot;</span></span></code></pre></div><h3 id="_4-2-label" tabindex="-1"><a class="header-anchor" href="#_4-2-label"><span>4.2 LABEL</span></a></h3><p>功能是为镜像指定标签。也可以使用<code>LABEL</code>来指定镜像作者</p><h2 id="_5-镜像操作指令" tabindex="-1"><a class="header-anchor" href="#_5-镜像操作指令"><span>5. 镜像操作指令</span></a></h2><h3 id="_5-1-run-重点" tabindex="-1"><a class="header-anchor" href="#_5-1-run-重点"><span>5.1 RUN(重点)</span></a></h3><p>在新镜像内部执行的命令，比如安装一些软件、配置一些基础环境，可使用\\来换行，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;hello docker!&#39;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &gt; </span><span style="color:#98C379;--shiki-dark:#98C379;">/usr/local/file.txt</span></span></code></pre></div><p>也可以使用exec格式<code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>的命令，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;apt-get&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;install&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;-y&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;nginx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>要注意的是，<strong><code>executable</code>是命令，后面的param是参数</strong></p><h4 id="_5-1-1-减少不必要层级" tabindex="-1"><a class="header-anchor" href="#_5-1-1-减少不必要层级"><span>5.1.1 减少不必要层级</span></a></h4><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> centos</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> yum</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -y</span><span style="color:#98C379;--shiki-dark:#98C379;"> install</span><span style="color:#98C379;--shiki-dark:#98C379;"> wget</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> wget</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -O</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis.tar.gz</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> tar</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -xvf</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis.tar.gz</span></span></code></pre></div><p>以上执行会创建 3 层镜像。可简化为以下格式：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> centos</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> yum</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -y</span><span style="color:#98C379;--shiki-dark:#98C379;"> install</span><span style="color:#98C379;--shiki-dark:#98C379;"> wget</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &amp;&amp; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">wget</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -O</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis.tar.gz</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    &amp;&amp; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">tar</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -xvf</span><span style="color:#98C379;--shiki-dark:#98C379;"> redis.tar.gz</span></span></code></pre></div><p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h3 id="_5-2-copy" tabindex="-1"><a class="header-anchor" href="#_5-2-copy"><span>5.2 COPY</span></a></h3><p>将主机的文件复制到镜像内，如果目的位置不存在，Docker会自动创建所有需要的目录结构，但是它只是单纯的复制，并不会去做文件提取和解压工作。如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">COPY</span><span style="color:#98C379;--shiki-dark:#98C379;"> application.yml</span><span style="color:#98C379;--shiki-dark:#98C379;"> /etc/springboot/hello-service/src/resources</span></span></code></pre></div><p><strong>注意：需要复制的目录一定要放在Dockerfile文件的同级目录下</strong></p><p>原因：</p><blockquote><p>因为构建环境将会上传到Docker守护进程，而复制是在Docker守护进程中进行的。任何位于构建环境之外的东西都是不可用的。COPY指令的目的的位置则必须是容器内部的一个绝对路径。<br> ---《THE DOCKER BOOK》</p></blockquote><h3 id="_5-3-add" tabindex="-1"><a class="header-anchor" href="#_5-3-add"><span>5.3 ADD</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>	ADD &lt;src&gt;... &lt;dest&gt;</span></span></code></pre></div><p>将主机的文件复制到镜像中，跟COPY一样，限制条件和使用方式都一样，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ADD</span><span style="color:#98C379;--shiki-dark:#98C379;"> application.yml</span><span style="color:#98C379;--shiki-dark:#98C379;"> /etc/springboot/hello-service/src/resources</span></span></code></pre></div><p>但是ADD会对压缩文件（tar, gzip, bzip2, etc）做提取和解压操作。</p><p>src 可以是一个本地文件，还可以是一个<code>url</code>。然后自动下载和解压</p><h3 id="_5-4-expose" tabindex="-1"><a class="header-anchor" href="#_5-4-expose"><span>5.4 EXPOSE</span></a></h3><p>暴露镜像的端口供主机做映射，启动镜像时，使用-P参数来讲镜像端口与宿主机的随机端口做映射。使用方式（可指定多个）：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">EXPOSE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 8080</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">EXPOSE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 8081</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span></code></pre></div><h3 id="_5-5-workdir" tabindex="-1"><a class="header-anchor" href="#_5-5-workdir"><span>5.5 WORKDIR</span></a></h3><p>在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录。如</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">WORKDIR</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">WORKDIR</span><span style="color:#98C379;--shiki-dark:#98C379;"> webservice</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> echo</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;hello docker&#39;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379;">text.txt</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span></code></pre></div><p>最终会在<code>/usr/local/webservice/</code>目录下生成text.txt文件</p><h3 id="_5-6-env" tabindex="-1"><a class="header-anchor" href="#_5-6-env"><span>5.6 ENV</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>ENV &lt;key&gt;=&lt;value&gt; ...</span></span></code></pre></div><p>设置容器内环境变量</p><h3 id="_5-7-volume" tabindex="-1"><a class="header-anchor" href="#_5-7-volume"><span>5.7 VOLUME</span></a></h3><p>用来向基于镜像创建的容器添加卷。比如你可以将mongodb镜像中存储数据的data文件指定为主机的某个文件。(容器内部建议不要存储任何数据)<br> 如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">VOLUME</span><span style="color:#98C379;--shiki-dark:#98C379;"> /data/db</span><span style="color:#98C379;--shiki-dark:#98C379;"> /data/configdb</span></span></code></pre></div><p>注意:<code>VOLUME 主机目录 容器目录</code></p><h3 id="_5-8-onbuild" tabindex="-1"><a class="header-anchor" href="#_5-8-onbuild"><span>5.8 ONBUILD</span></a></h3><p>当一个包含ONBUILD命令的镜像被用作其他镜像的基础镜像时(比如用户的镜像需要从某为准备好的位置添加源代码，或者用户需要执行特定于构建镜像的环境的构建脚本)，该命令就会执行。<br> 如创建镜像image-A</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> ubuntu</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ONBUILD</span><span style="color:#98C379;--shiki-dark:#98C379;"> ADD</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span><span style="color:#98C379;--shiki-dark:#98C379;"> /var/www</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span></code></pre></div><p>然后创建镜像image-B，指定image-A为基础镜像，如</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> image-A</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span></code></pre></div><p>然后在构建image-B的时候，日志上显示如下:</p><div class="language-log" data-ext="log" data-title="log"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Step </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : FROM image-A</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"># Execting </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> build triggers</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">Step onbuild-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : ADD . /var/www</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">...</span></span></code></pre></div><h3 id="_5-9-user" tabindex="-1"><a class="header-anchor" href="#_5-9-user"><span>5.9 USER</span></a></h3><p>指定该镜像以什么样的用户去执行，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">USER</span><span style="color:#98C379;--shiki-dark:#98C379;"> mongo</span></span></code></pre></div><h2 id="_6-容器启动时执行指令" tabindex="-1"><a class="header-anchor" href="#_6-容器启动时执行指令"><span>6. 容器启动时执行指令</span></a></h2><h3 id="_6-1-cmd" tabindex="-1"><a class="header-anchor" href="#_6-1-cmd"><span>6.1 CMD</span></a></h3><p>容器启动时需要执行的命令，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CMD</span><span style="color:#98C379;--shiki-dark:#98C379;"> /bin/bash</span></span></code></pre></div><p>同样可以使用exec语法，如</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CMD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/bin/bash&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>当有多个CMD的时候，只有最后一个生效。</p><h3 id="_6-2-entrypoint" tabindex="-1"><a class="header-anchor" href="#_6-2-entrypoint"><span>6.2 ENTRYPOINT</span></a></h3><p>作用和用法和CMD一模一样</p><h3 id="_6-3-cmd和entrypoint的区别" tabindex="-1"><a class="header-anchor" href="#_6-3-cmd和entrypoint的区别"><span>6.3 CMD和ENTRYPOINT的区别</span></a></h3><p>敲黑板！！！非常重要<br><strong>一定要注意！</strong></p><p><strong>一定要注意！</strong></p><p><strong>一定要注意！</strong></p><p>CMD和ENTRYPOINT同样作为容器启动时执行的命令，区别有以下几点：</p><h4 id="_6-3-1-cmd的命令会被-docker-run-的命令覆盖而entrypoint不会" tabindex="-1"><a class="header-anchor" href="#_6-3-1-cmd的命令会被-docker-run-的命令覆盖而entrypoint不会"><span>6.3.1 CMD的命令会被 docker run 的命令覆盖而ENTRYPOINT不会</span></a></h4><p>如使用<code>CMD [&quot;/bin/bash&quot;]</code>或<code>ENTRYPOINT [&quot;/bin/bash&quot;]</code>后，再使用<code>docker run -ti image</code>启动容器，它会自动进入容器内部的交互终端，如同使用<br><code>docker run -ti image /bin/bash</code>。</p><p>但是如果启动镜像的命令为<code>docker run -ti image /bin/ps</code>，使用CMD后面的命令就会被覆盖转而执行<code>bin/ps</code>命令，而<em>ENTRYPOINT的则不会，而是会把docker run 后面的命令当做ENTRYPOINT执行命令的参数</em>。<br> 以下例子比较容易理解<br> Dockerfile中为</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/user/sbin/nginx&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>然后通过启动build之后的容器</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -ti</span><span style="color:#98C379;--shiki-dark:#98C379;"> image</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -g</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;daemon off&quot;</span></span></code></pre></div><p>此时<code>-g &quot;daemon off&quot;</code>会被当成参数传递给ENTRYPOINT，最终的命令变成了</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">/user/sbin/nginx</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -g</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;daemon off&quot;</span></span></code></pre></div><h4 id="_6-3-2-cmd和entrypoint都存在时" tabindex="-1"><a class="header-anchor" href="#_6-3-2-cmd和entrypoint都存在时"><span>6.3.2 CMD和ENTRYPOINT都存在时</span></a></h4><p>CMD和ENTRYPOINT都存在时，CMD的指令变成了ENTRYPOINT的参数，并且此CMD提供的参数会被 docker run 后面的命令覆盖，如：</p><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;i am&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CMD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;docker&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>之后启动构建之后的容器</p><ul><li><p>使用<code>docker run -ti image</code></p><p>输出“hello i am docker”</p></li><li><p>使用<code>docker run -ti image world</code></p><p>输出“hello i am world”</p></li></ul><p>指令比较多，可以通过分类(如开头的表格)的办法去记忆</p><h2 id="_7-构建镜像" tabindex="-1"><a class="header-anchor" href="#_7-构建镜像"><span>7. 构建镜像</span></a></h2><p><code>Dockerfile</code>文件编写好以后，真正构建镜像时需要通过<code>docker build</code>命令。</p><p><code>docker build</code>命令用于使用<code>Dockerfile</code>创建镜像。</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用当前目录的 Dockerfile 创建镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -t</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos:7</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过 -f Dockerfile 文件的位置创建镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -f</span><span style="color:#98C379;--shiki-dark:#98C379;"> /home/ruoyi/docker/Dockerfile</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -t</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos:7</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span></span></code></pre></div><ul><li>-f：指定要使用的 Dockerfile 路径；</li><li>--tag, -t：镜像的名字及标签，可以在一次构建中为一个镜像设置多个标签。</li></ul><h2 id="_8-示例" tabindex="-1"><a class="header-anchor" href="#_8-示例"><span>8. 示例</span></a></h2><p>接下来我们通过基础镜像<code>centos:7</code>，在该镜像中安装<code>jdk</code>和<code>tomcat</code>以后将其制作为一个新的镜像<code>mycentos:7</code></p><p>创建目录，编写<code>Dockerfile</code>文件</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/\`</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">dockerfile</span><span style="color:#98C379;--shiki-dark:#98C379;">\`</span></span></code></pre></div><p>执行命令：<code>vi Dockerfile</code>，写入信息。</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指明构建的新镜像是来自于\`centos:7\`基础镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">FROM</span><span style="color:#98C379;--shiki-dark:#98C379;"> centos:7</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过镜像标签声明了作者信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">LABEL</span><span style="color:#98C379;--shiki-dark:#98C379;"> maintainer=&quot;ruoyi.vip&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置工作目录</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">WORKDIR</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新镜像构建成功以后创建指定目录</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">RUN</span><span style="color:#98C379;--shiki-dark:#98C379;"> mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/java</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/tomcat</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拷贝文件到镜像中并解压</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ADD</span><span style="color:#98C379;--shiki-dark:#98C379;"> jdk-8u111-linux-x64.tar.gz</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/java</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ADD</span><span style="color:#98C379;--shiki-dark:#98C379;"> apache-tomcat-8.5.27.tar.gz</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/tomcat</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暴露容器运行时的 8080 监听端口给外部</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">EXPOSE</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 8080</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置容器内 JAVA_HOME 环境变量</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENV</span><span style="color:#98C379;--shiki-dark:#98C379;"> JAVA_HOME</span><span style="color:#98C379;--shiki-dark:#98C379;"> /usr/local/java/jdk1.8.0_111</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">ENV</span><span style="color:#98C379;--shiki-dark:#98C379;"> PATH</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> $PATH</span><span style="color:#98C379;--shiki-dark:#98C379;">:</span><span style="color:#E06C75;--shiki-dark:#E06C75;">$JAVA_HOME</span><span style="color:#98C379;--shiki-dark:#98C379;">/bin</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动容器时启动 tomcat</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">CMD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;/usr/local/tomcat/apache-tomcat-8.5.27/bin/catalina.sh&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;run&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -f</span><span style="color:#98C379;--shiki-dark:#98C379;"> /home/ruoyi/docker/Dockerfile</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -t</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos:test</span><span style="color:#98C379;--shiki-dark:#98C379;"> .</span></span></code></pre></div><p>启动镜像</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -di</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> --name</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -p</span><span style="color:#98C379;--shiki-dark:#98C379;"> 8080:8080</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos:test</span></span></code></pre></div><p>进入容器</p><div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">docker</span><span style="color:#98C379;--shiki-dark:#98C379;"> exec</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> -it</span><span style="color:#98C379;--shiki-dark:#98C379;"> mycentos7</span><span style="color:#98C379;--shiki-dark:#98C379;"> /bin/bash</span></span></code></pre></div><h2 id="_9-镜像构建历史" tabindex="-1"><a class="header-anchor" href="#_9-镜像构建历史"><span>9. 镜像构建历史</span></a></h2><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>docker history 镜像名称:标签|ID</span></span>
<span class="line"><span>docker history mycentos:7</span></span></code></pre></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://www.jianshu.com/p/10ed530766af" target="_blank" rel="noopener noreferrer">学习Docker之Dockerfile的命令</a></p><p><a href="https://www.jianshu.com/p/cbce69c7a52f" target="_blank" rel="noopener noreferrer">使用Dockerfile构建Docker镜像</a></p><p><a href="http://doc.ruoyi.vip/ruoyi-cloud/cloud/dokcer.html#%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F" target="_blank" rel="noopener noreferrer">若依文档-Dockerfile</a></p>`,115)]))}const d=s(o,[["render",r],["__file","docker-file-overview.html.vue"]]),t=JSON.parse('{"path":"/posts/Docker/docker-file-overview.html","title":"Docker基础 - Dockerfile详解","lang":"zh-CN","frontmatter":{"description":"Docker基础 - Dockerfile详解 1. 简介 Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明 2. 命令组成 3.基础镜像信息 命令 3.1 FROM 指定哪种镜像作为新镜像的基础镜像，如： 4.维护者信息 4.1 MAINTAINER 指明该镜像的作者和其电子邮件，如： 4.2 LABE...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Docker/docker-file-overview.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Docker基础 - Dockerfile详解"}],["meta",{"property":"og:description","content":"Docker基础 - Dockerfile详解 1. 简介 Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明 2. 命令组成 3.基础镜像信息 命令 3.1 FROM 指定哪种镜像作为新镜像的基础镜像，如： 4.维护者信息 4.1 MAINTAINER 指明该镜像的作者和其电子邮件，如： 4.2 LABE..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker基础 - Dockerfile详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 命令组成","slug":"_2-命令组成","link":"#_2-命令组成","children":[]},{"level":2,"title":"3.基础镜像信息 命令","slug":"_3-基础镜像信息-命令","link":"#_3-基础镜像信息-命令","children":[{"level":3,"title":"3.1 FROM","slug":"_3-1-from","link":"#_3-1-from","children":[]}]},{"level":2,"title":"4.维护者信息","slug":"_4-维护者信息","link":"#_4-维护者信息","children":[{"level":3,"title":"4.1 MAINTAINER","slug":"_4-1-maintainer","link":"#_4-1-maintainer","children":[]},{"level":3,"title":"4.2 LABEL","slug":"_4-2-label","link":"#_4-2-label","children":[]}]},{"level":2,"title":"5. 镜像操作指令","slug":"_5-镜像操作指令","link":"#_5-镜像操作指令","children":[{"level":3,"title":"5.1 RUN(重点)","slug":"_5-1-run-重点","link":"#_5-1-run-重点","children":[]},{"level":3,"title":"5.2 COPY","slug":"_5-2-copy","link":"#_5-2-copy","children":[]},{"level":3,"title":"5.3 ADD","slug":"_5-3-add","link":"#_5-3-add","children":[]},{"level":3,"title":"5.4 EXPOSE","slug":"_5-4-expose","link":"#_5-4-expose","children":[]},{"level":3,"title":"5.5 WORKDIR","slug":"_5-5-workdir","link":"#_5-5-workdir","children":[]},{"level":3,"title":"5.6 ENV","slug":"_5-6-env","link":"#_5-6-env","children":[]},{"level":3,"title":"5.7 VOLUME","slug":"_5-7-volume","link":"#_5-7-volume","children":[]},{"level":3,"title":"5.8 ONBUILD","slug":"_5-8-onbuild","link":"#_5-8-onbuild","children":[]},{"level":3,"title":"5.9 USER","slug":"_5-9-user","link":"#_5-9-user","children":[]}]},{"level":2,"title":"6. 容器启动时执行指令","slug":"_6-容器启动时执行指令","link":"#_6-容器启动时执行指令","children":[{"level":3,"title":"6.1 CMD","slug":"_6-1-cmd","link":"#_6-1-cmd","children":[]},{"level":3,"title":"6.2 ENTRYPOINT","slug":"_6-2-entrypoint","link":"#_6-2-entrypoint","children":[]},{"level":3,"title":"6.3 CMD和ENTRYPOINT的区别","slug":"_6-3-cmd和entrypoint的区别","link":"#_6-3-cmd和entrypoint的区别","children":[]}]},{"level":2,"title":"7. 构建镜像","slug":"_7-构建镜像","link":"#_7-构建镜像","children":[]},{"level":2,"title":"8. 示例","slug":"_8-示例","link":"#_8-示例","children":[]},{"level":2,"title":"9. 镜像构建历史","slug":"_9-镜像构建历史","link":"#_9-镜像构建历史","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":6.3,"words":1891},"filePathRelative":"posts/Docker/docker-file-overview.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</p>\\n<h2>2. 命令组成</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>部分</th>\\n<th>命令</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>基础镜像信息</td>\\n<td>FROM</td>\\n</tr>\\n<tr>\\n<td>维护者信息</td>\\n<td>MAINTAINER、LABEL</td>\\n</tr>\\n<tr>\\n<td>镜像操作指令</td>\\n<td>RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME等</td>\\n</tr>\\n<tr>\\n<td>容器启动时执行指令</td>\\n<td>CMD、ENTRYPOINT</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{d as comp,t as data};
