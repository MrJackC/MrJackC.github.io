import{_ as a,c as n,a as i,o as l}from"./app-DQS7qcOs.js";const e={};function p(r,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="redis进阶-事件-redis事件机制详解" tabindex="-1"><a class="header-anchor" href="#redis进阶-事件-redis事件机制详解"><span>Redis进阶 - 事件：Redis事件机制详解</span></a></h1><blockquote><p>Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event</p></blockquote><h2 id="_1-事件机制" tabindex="-1"><a class="header-anchor" href="#_1-事件机制"><span>1. 事件机制</span></a></h2><blockquote><p>Redis中的事件驱动库只关注网络IO，以及定时器。</p></blockquote><p>该事件库处理下面两类事件：</p><ul><li><strong>文件事件</strong>(file event)：用于处理 Redis 服务器和客户端之间的网络IO。</li><li><strong>时间事件</strong>(time eveat)：Redis 服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是处理这类定时操作的。</li></ul><p>事件驱动库的代码主要是在<code>src/ae.c</code>中实现的，其示意图如下所示。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018659.png" alt="image-20220624203703513" tabindex="0" loading="lazy"><figcaption>image-20220624203703513</figcaption></figure><p><code>aeEventLoop</code>是整个事件驱动的核心，它管理着文件事件表和时间事件列表，不断地循环处理着就绪的文件事件和到期的时间事件。</p><h3 id="_1-1-文件事件" tabindex="-1"><a class="header-anchor" href="#_1-1-文件事件"><span>1.1 文件事件</span></a></h3><blockquote><p>Redis基于<strong>Reactor模式</strong>开发了自己的网络事件处理器，也就是文件事件处理器。文件事件处理器使用<strong>IO多路复用技术</strong>（建议先看下 <a href="https://pdai.tech/md/java/io/java-io-nio-select-epoll.html" target="_blank" rel="noopener noreferrer">Java IO多路复用详解</a> ），同时监听多个套接字，并为套接字关联不同的事件处理函数。当套接字的可读或者可写事件触发时，就会调用相应的事件处理函数。</p></blockquote><h4 id="_1-1-1-为什么单线程的-redis-能那么快" tabindex="-1"><a class="header-anchor" href="#_1-1-1-为什么单线程的-redis-能那么快"><span>1.1.1 为什么单线程的 Redis 能那么快？</span></a></h4><p>Redis的瓶颈主要在IO而不是CPU，所以为了省开发量，在6.0版本前是单线程模型；其次，Redis 是单线程主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的</strong>，这也是 Redis 对外提供键值存储服务的主要流程。（但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的）。</p><p>Redis 采用了多路复用机制使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。</p><h4 id="_1-1-2-redis事件响应框架ae-event及文件事件处理器" tabindex="-1"><a class="header-anchor" href="#_1-1-2-redis事件响应框架ae-event及文件事件处理器"><span>1.1.2. Redis事件响应框架ae_event及文件事件处理器</span></a></h4><blockquote><p>Redis并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event。</p></blockquote><p>Redis 使用的IO多路复用技术主要有：<code>select</code>、<code>epoll</code>、<code>evport</code>和<code>kqueue</code>等。每个IO多路复用函数库在 Redis 源码中都对应一个单独的文件，比如<code>ae_select.c</code>，<code>ae_epoll.c</code>， <code>ae_kqueue.c</code>等。Redis 会根据不同的操作系统，按照不同的优先级选择多路复用技术。事件响应框架一般都采用该架构，比如 netty 和 libevent。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018722.png" alt="image-20220624204444366" tabindex="0" loading="lazy"><figcaption>image-20220624204444366</figcaption></figure><p>如下图所示，文件事件处理器有四个组成部分，它们分别是套接字、I/O多路复用程序、文件事件分派器以及事件处理器。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018748.png" alt="image-20220624204549096" tabindex="0" loading="lazy"><figcaption>image-20220624204549096</figcaption></figure><ol><li>文件事件是对套接字操作的抽象，每当一个套接字准备好执行 <code>accept</code>、<code>read</code>、<code>write</code>和 <code>close</code> 等操作时，就会产生一个文件事件。因为 Redis 通常会连接多个套接字，所以多个文件事件有可能并发的出现。</li><li>I/O多路复用程序负责监听多个套接字，并向文件事件派发器传递那些产生了事件的套接字。</li><li>尽管多个文件事件可能会并发地出现，但I/O多路复用程序总是会将所有产生的套接字都放到同一个队列(也就是后文中描述的aeEventLoop的fired就绪事件表)里边，然后文件事件处理器会以有序、同步、单个套接字的方式处理该队列中的套接字，也就是处理就绪的文件事件。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018788.png" alt="image-20220624205014871" tabindex="0" loading="lazy"><figcaption>image-20220624205014871</figcaption></figure><p>所以，一次 Redis 客户端与服务器进行连接并且发送命令的过程如上图所示。</p><ul><li>客户端向服务端发起<strong>建立 socket 连接的请求</strong>，那么监听套接字将产生 AE_READABLE 事件，触发连接应答处理器执行。处理器会对客户端的连接请求</li><li>进行<strong>应答</strong>，然后创建客户端套接字，以及客户端状态，并将客户端套接字的 AE_READABLE 事件与命令请求处理器关联。</li><li>客户端建立连接后，向服务器<strong>发送命令</strong>，那么客户端套接字将产生 AE_READABLE 事件，触发命令请求处理器执行，处理器读取客户端命令，然后传递给相关程序去执行。</li><li><strong>执行命令获得相应的命令回复</strong>，为了将命令回复传递给客户端，服务器将客户端套接字的 AE_WRITEABLE 事件与命令回复处理器关联。当客户端试图读取命令回复时，客户端套接字产生 AE_WRITEABLE 事件，触发命令回复处理器将命令回复全部写入到套接字中。</li></ul><h4 id="_1-1-3-redis-io多路复用模型" tabindex="-1"><a class="header-anchor" href="#_1-1-3-redis-io多路复用模型"><span>1.1.3 Redis IO多路复用模型</span></a></h4><blockquote><p>PS：了解处理流程后，我们有必要深入看下Redis IO多路复用的模型，正好我看到极客时间中《Redis核心技术与实战》中相关内容讲的挺容易理解的，就转过来了</p></blockquote><p>在 Redis 只运行单线程的情况下，<strong>该机制允许内核中，同时存在多个监听套接字和已连接套接字</strong>。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</p><p>下图就是基于多路复用的 Redis IO 模型。图中的多个 FD 就是刚才所说的多个套接字。Redis 网络框架调用 epoll 机制，让内核监听这些套接字。此时，Redis 线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018824.png" alt="image-20220624205452379" tabindex="0" loading="lazy"><figcaption>image-20220624205452379</figcaption></figure><p>基于多路复用的Redis高性能IO模型为了在请求到达时能通知到 Redis 线程，select/epoll 提供了基于事件的回调机制，即针对不同事件的发生，调用相应的处理函数。那么，回调机制是怎么工作的呢？</p><p>其实，select/epoll 一旦监测到 FD 上有请求到达时，就会触发相应的事件。这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升 Redis 的响应性能。</p><p>为了方便你理解，我再以连接请求和读数据请求为例，具体解释一下。</p><p>这两个请求分别对应 Accept 事件和 Read 事件，Redis 分别对这两个事件注册 accept 和 get 回调函数。当 Linux 内核监听到有连接请求或读数据请求时，就会触发 Accept 事件和 Read 事件，此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。</p><blockquote><p>这就像病人去医院瞧病。在医生实际诊断前，每个病人（等同于请求）都需要先分诊、测体温、登记等。如果这些工作都由医生来完成，医生的工作效率就会很低。所以，医院都设置了分诊台，分诊台会一直处理这些诊断前的工作（类似于 Linux 内核监听请求），然后再转交给医生做实际诊断。这样即使一个医生（相当于 Redis 单线程），效率也能提升。</p></blockquote><h3 id="_1-2-时间事件" tabindex="-1"><a class="header-anchor" href="#_1-2-时间事件"><span>1.2 时间事件</span></a></h3><blockquote><p>Redis 的时间事件分为以下两类：</p></blockquote><ul><li><strong>定时事件</strong>：让一段程序在指定的时间之后执行一次。</li><li><strong>周期性事件</strong>：让一段程序每隔指定时间就执行一次。</li></ul><p>Redis 的时间事件的具体定义结构如下所示。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">typedef</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> aeTimeEvent {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 全局唯一ID */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    long</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> id;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* time event identifier. */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 秒精确的UNIX时间戳，记录时间事件到达的时间*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> when_sec;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* seconds */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 毫秒精确的UNIX时间戳，记录时间事件到达的时间*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> when_ms;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* milliseconds */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 时间处理器 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    aeTimeProc </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">timeProc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 事件结束回调函数，析构一些资源*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    aeEventFinalizerProc </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">finalizerProc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 私有数据 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    void</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> *</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">clientData;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 前驱节点 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> aeTimeEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">prev;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 后继节点 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> aeTimeEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">next;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">} aeTimeEvent;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个时间事件是定时事件还是周期性事件取决于时间处理器的返回值：</p><ul><li>如果返回值是 <code>AE_NOMORE</code>，那么这个事件是一个定时事件，该事件在达到后删除，之后不会再重复。</li><li>如果返回值是非 <code>AE_NOMORE</code> 的值，那么这个事件为周期性事件，当一个时间事件到达后，服务器会根据时间处理器的返回值，对时间事件的 when 属性进行更新，让这个事件在一段时间后再次达到。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018865.png" alt="image-20220624210057150" tabindex="0" loading="lazy"><figcaption>image-20220624210057150</figcaption></figure><p>服务器所有的时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就遍历整个链表，查找所有已到达的时间事件，并调用相应的事件处理器。正常模式下的Redis服务器只使用serverCron一个时间事件，而在benchmark模式下，服务器也只使用两个时间事件，所以不影响事件执行的性能。</p><h2 id="_3-aeeventloop的具体实现" tabindex="-1"><a class="header-anchor" href="#_3-aeeventloop的具体实现"><span>3. aeEventLoop的具体实现</span></a></h2><blockquote><p>介绍完文件事件和时间事件，我们接下来看一下 aeEventLoop的具体实现; 强烈建议先看下 <a href="https://pdai.tech/md/java/io/java-io-nio-select-epoll.html" target="_blank" rel="noopener noreferrer">Java IO多路复用详解</a>，再来理解。</p></blockquote><h3 id="_3-1-创建事件管理器" tabindex="-1"><a class="header-anchor" href="#_3-1-创建事件管理器"><span>3.1 创建事件管理器</span></a></h3><p>Redis 服务端在其初始化函数 initServer中，会创建事件管理器aeEventLoop对象。</p><p>函数aeCreateEventLoop将创建一个事件管理器，主要是初始化 aeEventLoop的各个属性值，比如events、fired、timeEventHead和apidata：</p><ul><li>首先创建aeEventLoop对象。</li><li>初始化未就绪文件事件表、就绪文件事件表。events指针指向未就绪文件事件表、fired指针指向就绪文件事件表。表的内容在后面添加具体事件时进行初变更。</li><li>初始化时间事件列表，设置timeEventHead和timeEventNextId属性。</li><li>调用aeApiCreate 函数创建epoll实例，并初始化 apidata。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">aeCreateEventLoop</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> setsize) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 创建事件状态结构 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> ((eventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop))) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 创建未就绪事件表、就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(aeFileEvent)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(aeFiredEvent)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 设置数组大小 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">setsize </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 初始化执行最近一次执行时间 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">lastTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> time</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(NULL)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 初始化时间事件结构 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeEventHead </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeEventNextId </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">stop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">maxfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">beforesleep </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aftersleep </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 将多路复用io与事件管理器关联起来 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">aeApiCreate</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(eventLoop) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 初始化监听事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">++</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events[i]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">mask</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AE_NONE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">err</span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">   .....</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>aeApiCreate 函数首先创建了aeApiState对象，初始化了epoll就绪事件表；然后调用epoll_create创建了epoll实例，最后将该aeApiState赋值给apidata属性。</p><p>aeApiState对象中epfd存储epoll的标识，events是一个epoll就绪事件数组，当有epoll事件发生时，所有发生的epoll事件和其描述符将存储在这个数组中。这个就绪事件数组由应用层开辟空间、内核负责把所有发生的事件填充到该数组。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeApiCreate</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    aeApiState </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(aeApiState))</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 初始化epoll就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    state</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(struct epoll_event)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(state)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 创建 epoll 实例 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    state</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">epfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> epoll_create</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1024</span><span style="color:#E06C75;--shiki-dark:#E06C75;">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* 1024 is just a hint for the kernel */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (state</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">epfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(state</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(state)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 事件管理器与epoll关联 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">apidata </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">typedef struct aeApiState {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* epoll_event 实例描述符*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 存储epoll就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    struct epoll_event </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">} aeApiState</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-创建文件事件" tabindex="-1"><a class="header-anchor" href="#_3-2-创建文件事件"><span>3.2 创建文件事件</span></a></h3><p>aeFileEvent是文件事件结构，对于每一个具体的事件，都有读处理函数和写处理函数等。Redis 调用aeCreateFileEvent函数针对不同的套接字的读写事件注册对应的文件事件。</p><div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">typedef struct aeFileEvent {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 监听事件类型掩码,值可以是 AE_READABLE 或 AE_WRITABLE */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 读事件处理器 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    aeFileProc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 写事件处理器 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    aeFileProc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">wfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 多路复用库的私有数据 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    void</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">} aeFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 使用typedef定义的处理器函数的函数类型 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">typedef </span><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeFileProc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(struct aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> mask)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>比如说，Redis 进行主从复制时，从服务器需要主服务器建立连接，它会发起一个 socekt连接，然后调用aeCreateFileEvent函数针对发起的socket的读写事件注册了对应的事件处理器，也就是syncWithMaster函数。</p><div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">aeCreateFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">server.el</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">AE_READABLE</span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span><span style="color:#E06C75;--shiki-dark:#E06C75;">AE_WRITABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;">syncWithMaster</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#D19A66;--shiki-dark:#D19A66;">NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 符合aeFileProc的函数定义 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> syncWithMaster</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">el</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">privdata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {....}</span></span></code></pre></div><p>aeCreateFileEvent的参数fd指的是具体的socket套接字，proc指fd产生事件时，具体的处理函数，clientData则是回调处理函数时需要传入的数据。</p><p>aeCreateFileEvent主要做了三件事情：</p><ul><li>以fd为索引，在events未就绪事件表中找到对应事件。</li><li>调用aeApiAddEvent函数，该事件注册到具体的底层 I/O 多路复用中，本例为epoll。</li><li>填充事件的回调、参数、事件类型等参数。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeCreateFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                       aeFileProc </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">proc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 取出 fd 对应的文件事件结构, fd 代表具体的 socket 套接字 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    aeFileEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">fe </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[fd];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 监听指定 fd 的指定事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">aeApiAddEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop, fd, mask) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">==</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_ERR;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 置文件事件类型，以及事件的处理器 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_READABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">rfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> proc;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> proc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 私有数据 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> clientData;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (fd </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">maxfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">        eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">maxfd</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fd;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_OK;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上文所说，<strong>Redis 基于的底层 I/O 多路复用库有多套</strong>，所以aeApiAddEvent也有多套实现，下面的源码是epoll下的实现。其核心操作就是调用epoll的epoll_ctl函数来向epoll注册响应事件。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeApiAddEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    aeApiState </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">state </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">apidata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> epoll_event ee </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* avoid valgrind warning */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 如果 fd 没有关联任何事件，那么这是一个 ADD 操作。如果已经关联了某个/某些事件，那么这是一个 MOD 操作。 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> op </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[fd].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> ==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_NONE </span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            EPOLL_CTL_ADD </span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLL_CTL_MOD;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 注册事件到 epoll */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[fd].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* Merge old events */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_READABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fd;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 调用epoll_ctl 系统调用，将事件加入epoll中 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">epoll_ctl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,op,fd,</span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">ee) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">==</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">return</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-事件处理" tabindex="-1"><a class="header-anchor" href="#_3-3-事件处理"><span>3.3 事件处理</span></a></h3><p>因为 Redis 中同时存在文件事件和时间事件两个事件类型，所以服务器必须对这两个事件进行调度，决定何时处理文件事件，何时处理时间事件，以及如何调度它们。</p><p>aeMain函数以一个无限循环不断地调用aeProcessEvents函数来处理所有的事件。</p><div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeMain</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">stop</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">stop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 如果有需要在事件处理前执行的函数，那么执行它 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">beforesleep</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> !=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">beforesleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 开始处理事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        aeProcessEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop, AE_ALL_EVENTS</span><span style="color:#C678DD;--shiki-dark:#C678DD;">|</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">AE_CALL_AFTER_SLEEP);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>下面是aeProcessEvents的伪代码，它会首先计算距离当前时间最近的时间事件，以此计算一个超时时间；然后调用aeApiPoll函数去等待底层的I/O多路复用事件就绪；aeApiPoll函数返回之后，会处理所有已经产生文件事件和已经达到的时间事件。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 伪代码 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeProcessEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> flags</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 获取到达时间距离当前时间最接近的时间事件*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    time_event </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeSearchNearestTimer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 计算最接近的时间事件距离到达还有多少毫秒*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> time_event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> -</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> unix_ts_now</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 如果事件已经到达，那么remaind_ms为负数，将其设置为0 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 根据 remaind_ms 的值，创建 timeval 结构*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    timeval </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> create_timeval_with_ms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(remaind_ms);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 结构决定，如果remaind_ms 的值为0，则aeApiPoll 调用后立刻返回，不阻塞*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* aeApiPoll调用epoll_wait函数，等待I/O事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    aeApiPoll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(timeval);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 处理所有已经产生的文件事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    processFileEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 处理所有已经到达的时间事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">    processTimeEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与aeApiAddEvent类似，aeApiPoll也有多套实现，它其实就做了两件事情，调用epoll_wait阻塞等待epoll的事件就绪，超时时间就是之前根据最快达到时间事件计算而来的超时时间；然后将就绪的epoll事件转换到fired就绪事件。aeApiPoll就是上文所说的I/O多路复用程序。具体过程如下图所示。</p><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624210951908.png" alt="image-20220624210951908" tabindex="0" loading="lazy"><figcaption>image-20220624210951908</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> aeApiPoll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> timeval </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    aeApiState </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">state </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">apidata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> retval, numevents </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用epoll_wait函数，等待时间为最近达到时间事件的时间计算而来。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    retval </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> epoll_wait</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            tvp </span><span style="color:#C678DD;--shiki-dark:#C678DD;">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">tv_sec</span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1000</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">tv_usec</span><span style="color:#C678DD;--shiki-dark:#C678DD;">/</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">:</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 有至少一个事件就绪？</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (retval </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> j;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /*为已就绪事件设置相应的模式，并加入到 eventLoop 的 fired 数组中*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        numevents </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> retval;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (j </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; j </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> numevents; j</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> epoll_event </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">e </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">j;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLIN)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_READABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLOUT)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLERR) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> EPOLLHUP)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            /* 设置就绪事件表元素 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 返回已就绪事件个数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> numevents;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>processFileEvent是处理就绪文件事件的伪代码，也是上文所述的文件事件分派器，它其实就是遍历fired就绪事件表，然后根据对应的事件类型来调用事件中注册的不同处理器，读事件调用rfileProc，而写事件调用wfileProc。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> processFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> numevents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (j </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; j </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> numevents; j</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            /* 从已就绪数组中获取事件 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            aeFileEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD;">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">fe </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fd </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75;">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> fired </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> invert </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_BARRIER;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            /* 读事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">invert </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_READABLE) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                /* 调用读处理函数 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                fired</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            /* 写事件. */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_WRITABLE) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> !=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">wfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    fired</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (invert </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> AE_READABLE) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> !=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">                    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                    fired</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            processed</span><span style="color:#C678DD;--shiki-dark:#C678DD;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而processTimeEvents是处理时间事件的函数，它会遍历aeEventLoop的事件事件列表，如果时间事件到达就执行其timeProc函数，并根据函数的返回值是否等于AE_NOMORE来决定该时间事件是否是周期性事件，并修改器到达时间。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">static</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> processTimeEvents</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">eventLoop) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> processed </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    aeTimeEvent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">te</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    long</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> long</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> maxId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    time_t now </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> time</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(NULL)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    ....</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">lastTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> now</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeEventHead</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    maxId </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeEventNextId</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* 遍历时间事件链表 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(te) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        long</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> now_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> now_ms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        long</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> long</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 删除需要删除的时间事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AE_DELETED_EVENT_ID) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            aeTimeEvent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prev)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prev</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            else</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeEventHead </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prev </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">finalizerProc)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">finalizerProc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">            zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(te)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            continue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* id 大于最大maxId,是该循环周期生成的时间事件，不处理 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> maxId) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            continue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        aeGetTime</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">now_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> &amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">now_ms)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 事件已经到达，调用其timeProc函数*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (now_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            (now_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> now_ms </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when_ms))</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            int</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> retval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            retval </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">timeProc</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">clientData)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            processed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            /* 如果返回值不等于 AE_NOMORE,表示是一个周期性事件，修改其when_sec和when_ms属性*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> (retval </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AE_NOMORE) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">                aeAddMillisecondsToNow</span><span style="color:#E06C75;--shiki-dark:#E06C75;">(retval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">when_ms)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                /* 一次性事件，标记为需删除，下次遍历时会删除*/</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> AE_DELETED_EVENT_ID</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> processed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-删除事件" tabindex="-1"><a class="header-anchor" href="#_3-4-删除事件"><span>3.4 删除事件</span></a></h3><p>当不在需要某个事件时，需要把事件删除掉。例如: 如果fd同时监听读事件、写事件。当不在需要监听写事件时，可以把该fd的写事件删除。</p><p>aeDeleteEventLoop函数的执行过程总结为以下几个步骤</p><ul><li>根据fd在未就绪表中查找到事件</li><li>取消该fd对应的相应事件标识符</li><li>调用aeApiFree函数，内核会将epoll监听红黑树上的相应事件监听取消。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-event.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 事件：Redis事件机制详解</strong></a></p>`,83)]))}const k=a(e,[["render",p],["__file","db-redis-x-event.html.vue"]]),t=JSON.parse('{"path":"/posts/Redis/db-redis-x-event.html","title":"Redis进阶 - 事件：Redis事件机制详解","lang":"zh-CN","frontmatter":{"aliases":"Redis进阶 - 事件：Redis事件机制详解","tags":null,"cssclass":null,"source":null,"order":160,"category":["数据库","Redis"],"created":"2024-02-22 10:49","updated":"2024-03-13 10:19","description":"Redis进阶 - 事件：Redis事件机制详解 Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event 1. 事件机制 Redis中的事件驱动库只关注网络IO，以及定时器。 该事件库处理下面两类事件： 文件事件(file event...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Redis/db-redis-x-event.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Redis进阶 - 事件：Redis事件机制详解"}],["meta",{"property":"og:description","content":"Redis进阶 - 事件：Redis事件机制详解 Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event 1. 事件机制 Redis中的事件驱动库只关注网络IO，以及定时器。 该事件库处理下面两类事件： 文件事件(file event..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018659.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis进阶 - 事件：Redis事件机制详解\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018659.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018722.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018748.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018788.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018824.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018865.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624210951908.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 事件机制","slug":"_1-事件机制","link":"#_1-事件机制","children":[{"level":3,"title":"1.1 文件事件","slug":"_1-1-文件事件","link":"#_1-1-文件事件","children":[]},{"level":3,"title":"1.2 时间事件","slug":"_1-2-时间事件","link":"#_1-2-时间事件","children":[]}]},{"level":2,"title":"3. aeEventLoop的具体实现","slug":"_3-aeeventloop的具体实现","link":"#_3-aeeventloop的具体实现","children":[{"level":3,"title":"3.1 创建事件管理器","slug":"_3-1-创建事件管理器","link":"#_3-1-创建事件管理器","children":[]},{"level":3,"title":"3.2 创建文件事件","slug":"_3-2-创建文件事件","link":"#_3-2-创建文件事件","children":[]},{"level":3,"title":"3.3 事件处理","slug":"_3-3-事件处理","link":"#_3-3-事件处理","children":[]},{"level":3,"title":"3.4 删除事件","slug":"_3-4-删除事件","link":"#_3-4-删除事件","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":17.54,"words":5263},"filePathRelative":"posts/Redis/db-redis-x-event.md","localizedDate":"2024年10月21日","excerpt":"\\n<blockquote>\\n<p>Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event</p>\\n</blockquote>\\n<h2>1. 事件机制</h2>\\n<blockquote>\\n<p>Redis中的事件驱动库只关注网络IO，以及定时器。</p>\\n</blockquote>\\n<p>该事件库处理下面两类事件：</p>\\n<ul>\\n<li><strong>文件事件</strong>(file event)：用于处理 Redis 服务器和客户端之间的网络IO。</li>\\n<li><strong>时间事件</strong>(time eveat)：Redis 服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是处理这类定时操作的。</li>\\n</ul>","autoDesc":true}');export{k as comp,t as data};
