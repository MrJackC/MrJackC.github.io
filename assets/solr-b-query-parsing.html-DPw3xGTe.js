import{_ as t,c as r,a,o as s}from"./app-DP7tPpgD.js";const o={};function l(d,e){return s(),r("div",null,e[0]||(e[0]=[a('<h1 id="solr查询解析器" tabindex="-1"><a class="header-anchor" href="#solr查询解析器"><span>Solr查询解析器</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>查询解析器用于将查询语句（q参数）解析成搜索语法。</p><h2 id="_2-常用的三种解析器" tabindex="-1"><a class="header-anchor" href="#_2-常用的三种解析器"><span>2. 常用的三种解析器</span></a></h2><h3 id="_2-1-默认解析器-lucene" tabindex="-1"><a class="header-anchor" href="#_2-1-默认解析器-lucene"><span>2.1 默认解析器：lucene</span></a></h3><p>Solr在查询的时候，用到了QueryParser对用户输入做解析，solr默认使用的解析器是lucene，被称之为Standard Query Parser。Standard Query Parser支持原生的查询语法，使你可以方便地构造结构化查询语句。当然，它还有不好的，就是容错比较差，总是把错误抛出来，而不是像dismax一样消化掉。</p><h3 id="_2-2-dismax解析器" tabindex="-1"><a class="header-anchor" href="#_2-2-dismax解析器"><span>2.2 DisMax解析器</span></a></h3><h4 id="_2-2-1-简介" tabindex="-1"><a class="header-anchor" href="#_2-2-1-简介"><span>2.2.1 简介</span></a></h4><p>Dismax查询只是由子查询生成的文档的并集，并对由子查询生成的每个文档打分。 一般来说，DisMax查询解析器的接口更像是Google的接口，而不是标准的Solr请求处理程序的接口。 这种相似性使得DisMax成为许多消费者应用程序的适当的查询解析器。</p><p>说人话区别</p><ol><li>方便为每个域添加权重，影响评分</li><li>接口更想是google 的接口，而不是solr/lucene</li><li>很少抛出异常给用户</li></ol><h4 id="_2-2-2-dismax-参数" tabindex="-1"><a class="header-anchor" href="#_2-2-2-dismax-参数"><span>2.2.2 DisMax 参数</span></a></h4><p>除了通用的查询参数，DisMax还有一些自有的查询参数，你可以在solrconfig.xml中配置这些参数，或者在查询的时候指定，这样会覆盖之前配置的值。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>q</td><td>查询参数q</td></tr><tr><td>q.alt</td><td>如果参数q没有指定，就使用standard query parser并代替参数q</td></tr><tr><td><strong>qf</strong></td><td><strong>Query Fields：在哪些字段上去检索数据。如果不指定的话，使用df</strong></td></tr><tr><td><strong>mm</strong></td><td><strong>Minimum Match：指定最小匹配因子</strong></td></tr><tr><td><strong>pf</strong></td><td><strong>Phrase Fields：增加文档的得分如果q参数值离的很近</strong></td></tr><tr><td>ps</td><td>Phrase Slop：指定q参数中两个词可以距离多远</td></tr><tr><td>qs</td><td>Query Phrase Slop：指定q参数中两个词可以距离多远，与qf搭配使用</td></tr><tr><td>tie</td><td>Tie Breaker：使用一个0到1之间的浮点数</td></tr><tr><td><strong>bq</strong></td><td><strong>Boost Query：指定一个额外因素来增加匹配到的文档的得分</strong></td></tr><tr><td><strong>bf</strong></td><td><strong>Boost Functions:指定boosts使用的函数</strong></td></tr></tbody></table><h4 id="_2-2-3-dismax-query-parser使用举例" tabindex="-1"><a class="header-anchor" href="#_2-2-3-dismax-query-parser使用举例"><span>2.2.3 DisMax Query Parser使用举例</span></a></h4><ul><li><p>使用StandardRequestHandler查询&quot;video&quot;<br><a href="http://localhost:8983/solr/select?q=video&amp;fl=name+score" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?q=video&amp;fl=name+score</a></p></li><li><p>已经配置了查询字段：text、features、name、id、manu、cat。而且匹配上name和cat会有更高的得分<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=video" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=video</a></p></li><li><p>可以将score显示出来，看一下各个文档的得分<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;fl=*,score" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;fl=*,score</a></p></li><li><p>现在想设置features有更高的得分，而text有较低的得分<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;qf=features%5E20.0+text%5E0.3" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;qf=features^20.0+text^0.3</a></p></li><li><p>现在希望某一字段在满足某一情况下有更高的得分<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;bq=cat:electronics%5E5.0" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;bq=cat:electronics^5.0</a></p></li><li><p>现在想使用有另外一个为instock的handler，它配置了一个过滤器：inStock:true<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;qt=instock&amp;fl=name,score,inStock" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=video&amp;qt=instock&amp;fl=name,score,inStock</a></p></li><li><p>如果查询短语的单词是一个或者两个，原则上返回的结果中必须包含全部单词，但是你的查询短语很长，solr允许有单词不匹配。你可以通过mm参数设置最多有多少单词不匹配。<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=belkin+ipod+gibberish" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=belkin+ipod+gibberish</a></p></li><li><p>可以通过调试功能验证你的想法。<br><a href="http://localhost:8983/solr/select?defType=dismax&amp;q=belkin+ipod+gibberish&amp;debugQuery=true" target="_blank" rel="noopener noreferrer">http://localhost:8983/solr/select?defType=dismax&amp;q=belkin+ipod+gibberish&amp;debugQuery=true</a></p></li></ul><h3 id="_2-3-edismax" tabindex="-1"><a class="header-anchor" href="#_2-3-edismax"><span>2.3 eDisMax</span></a></h3><p>Extended DisMax</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>mm.autoRelax</td><td>如果设置为true,可以使mm参数暂时失效：比如stopwords和fq可能会使查询结果为空</td></tr><tr><td>boost</td><td>对于匹配的文档，越多的字符串匹配将会取得更高的得分</td></tr><tr><td>lowercaseOperators</td><td>这个参数可以用来指示是否把or和and当做OR和AND处理</td></tr><tr><td>ps</td><td>短语查询时，默认的溢出量amount of slop，用来影响boosting</td></tr><tr><td>pf2</td><td>指定多值的字段可选的权重</td></tr><tr><td>ps2</td><td>与pf2搭配使用，没有指定的话，使用ps</td></tr><tr><td>pf3</td><td>指定多值的字段可选的权重</td></tr><tr><td>ps3</td><td>与pf3搭配使用，没有指定的话，使用ps</td></tr><tr><td>stopwords</td><td>布尔值，设置是否StopFilterFactory生效，设为false，则stopwords停词不起作用</td></tr><tr><td>uf</td><td>设置用户可以使用那些字段检索，默认是所有字段，也就是uf=<em>；设置为uf=title,就是只让查询title字段；设置为uf=</em>-title，就是禁止查询title字段；设置为uf=-*屏蔽所有字段的检索</td></tr></tbody></table><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://codeantenna.com/a/liB2jbkEqX" target="_blank" rel="noopener noreferrer">solr 查询解析器</a></p><p><a href="https://blog.csdn.net/boonya/article/details/55000047" target="_blank" rel="noopener noreferrer">Solr Dismax示例</a></p><p><a href="https://www.w3cschool.cn/solr_doc/solr_doc-vpyf2gn1.html" target="_blank" rel="noopener noreferrer">Solr查询：DisMax查询解析器</a></p>',23)]))}const p=t(o,[["render",l],["__file","solr-b-query-parsing.html.vue"]]),i=JSON.parse('{"path":"/posts/Database/SOLR/solr-b-query-parsing.html","title":"Solr查询解析器","lang":"zh-CN","frontmatter":{"aliases":"Solr查询解析器","tags":null,"cssclass":null,"source":null,"created":"2024-02-22 10:49","updated":"2024-03-13 10:50","description":"Solr查询解析器 1. 简介 查询解析器用于将查询语句（q参数）解析成搜索语法。 2. 常用的三种解析器 2.1 默认解析器：lucene Solr在查询的时候，用到了QueryParser对用户输入做解析，solr默认使用的解析器是lucene，被称之为Standard Query Parser。Standard Query Parser支持原生的...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Database/SOLR/solr-b-query-parsing.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Solr查询解析器"}],["meta",{"property":"og:description","content":"Solr查询解析器 1. 简介 查询解析器用于将查询语句（q参数）解析成搜索语法。 2. 常用的三种解析器 2.1 默认解析器：lucene Solr在查询的时候，用到了QueryParser对用户输入做解析，solr默认使用的解析器是lucene，被称之为Standard Query Parser。Standard Query Parser支持原生的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Solr查询解析器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 常用的三种解析器","slug":"_2-常用的三种解析器","link":"#_2-常用的三种解析器","children":[{"level":3,"title":"2.1 默认解析器：lucene","slug":"_2-1-默认解析器-lucene","link":"#_2-1-默认解析器-lucene","children":[]},{"level":3,"title":"2.2 DisMax解析器","slug":"_2-2-dismax解析器","link":"#_2-2-dismax解析器","children":[]},{"level":3,"title":"2.3 eDisMax","slug":"_2-3-edismax","link":"#_2-3-edismax","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":3.78,"words":1134},"filePathRelative":"posts/Database/SOLR/solr-b-query-parsing.md","localizedDate":"2024年10月21日","excerpt":"\\n<h2>1. 简介</h2>\\n<p>查询解析器用于将查询语句（q参数）解析成搜索语法。</p>\\n<h2>2. 常用的三种解析器</h2>\\n<h3>2.1 默认解析器：lucene</h3>\\n<p>Solr在查询的时候，用到了QueryParser对用户输入做解析，solr默认使用的解析器是lucene，被称之为Standard Query Parser。Standard Query Parser支持原生的查询语法，使你可以方便地构造结构化查询语句。当然，它还有不好的，就是容错比较差，总是把错误抛出来，而不是像dismax一样消化掉。</p>\\n<h3>2.2 DisMax解析器</h3>\\n<h4>2.2.1 简介</h4>","autoDesc":true}');export{p as comp,i as data};
