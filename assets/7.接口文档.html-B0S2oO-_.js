import{_ as o,c as i,a,o as r}from"./app-BfIe-EZg.js";const n={};function t(p,e){return r(),i("div",null,e[0]||(e[0]=[a('<h1 id="接口文档" tabindex="-1"><a class="header-anchor" href="#接口文档"><span>接口文档</span></a></h1><p>项目使用 Swagger 实现 RESTful API 的接口文档，提供两种解决方案：</p><p>*【推荐】 <a href="http://mtw.so/62me9n" target="_blank" rel="noopener noreferrer">Apifox (opens new window)</a>：强大的 API 工具，支持 API 文档、API 调试、API Mock、API 自动化测试</p><ul><li>Knife4j：简易的 API 工具，仅支持 API 文档、API 调试</li></ul><p>为什么选择 Swagger 呢？</p><p>Swagger 通过 Java 注解实现 API 接口文档的编写。相比使用 Java 注释的方式，注解提供更加规范的接口定义方式，开发体验更好。</p><p>如果你没有学习 Swagger，可以阅读 <a href="https://www.iocoder.cn/Spring-Boot/Swagger/?yudao" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot API 接口文档 Swagger 入门 》 (opens new window)</a>文章。</p><h2 id="_1-apifox-使用" tabindex="-1"><a class="header-anchor" href="#_1-apifox-使用"><span><a href="https://doc.iocoder.cn/api-doc/#_1-apifox-%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>1. Apifox 使用</span></a></h2><p>本小节，我们来将项目中的 API 接口，一键导入到 Apifox 中，并使用它发起一次 API 的调用。</p><h3 id="_1-1-下载工具" tabindex="-1"><a class="header-anchor" href="#_1-1-下载工具"><span><a href="https://doc.iocoder.cn/api-doc/#_1-1-%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener noreferrer">#</a>1.1 下载工具</span></a></h3><p>点击 <a href="http://mtw.so/62me9n" target="_blank" rel="noopener noreferrer">Apifox (opens new window)</a>首页，下载对应的 Apifox 桌面版。如下图所示：</p><p>为什么要下载 Apifox 桌面版？</p><p>艿艿已经卸载 Postman，使用 Apifox 进行替代。国产软件，yyds 永远滴神！</p><p>国内很多互联网公司，包括百度、阿里、腾讯、字节跳动等等在内，都在使用 Apifox 作为 API 工具。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/01.png" alt="Apifox 下载" tabindex="0" loading="lazy"><figcaption>Apifox 下载</figcaption></figure><p>解压后，双击进行安装即可。黑色界面，非常酷炫。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/02.png" alt="Apifox 界面" tabindex="0" loading="lazy"><figcaption>Apifox 界面</figcaption></figure><h3 id="_1-2-api-导入" tabindex="-1"><a class="header-anchor" href="#_1-2-api-导入"><span><a href="https://doc.iocoder.cn/api-doc/#_1-2-api-%E5%AF%BC%E5%85%A5" target="_blank" rel="noopener noreferrer">#</a>1.2 API 导入</span></a></h3><p>① 先点击「示例项目」，再点击「+」按钮，选择「导入」选项。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/03.png" alt="Apifox 界面 —— 导入" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 导入</figcaption></figure><p>② 先选择「URL 导入」按钮，填写 Swagger 数据 URL 为 <code>http://127.0.0.1:48080/v3/api-docs</code>。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/04.png" alt="Apifox 界面 —— Swagger" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— Swagger</figcaption></figure><p>③ 先点击「提交」按钮，再点击「确认导入」按钮，完成 API 接口的导入。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/05.png" alt="Apifox 界面 —— Swagger" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— Swagger</figcaption></figure><p>④ 导入完成后，点击「接口管理」按钮，可以查看到 API 列表。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/06.png" alt="Apifox 界面 —— 接口管理" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 接口管理</figcaption></figure><h3 id="_1-3-api-调试" tabindex="-1"><a class="header-anchor" href="#_1-3-api-调试"><span><a href="https://doc.iocoder.cn/api-doc/#_1-3-api-%E8%B0%83%E8%AF%95" target="_blank" rel="noopener noreferrer">#</a>1.3 API 调试</span></a></h3><p>① 先点击右上角「请选择环境」，再点击「管理环境」选项，填写测试环境的地址为 <code>http://127.0.0.1:48080</code>，并进行保存。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/07.png" alt="Apifox 界面 —— 管理环境" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 管理环境</figcaption></figure><p>② 点击「管理后台 —— 认证」的「使用账号密码登录」接口，查看该 API 接口的定义。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/08.png" alt="Apifox 界面 —— 认证" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 认证</figcaption></figure><p>③ 点击「运行」按钮，填写 Headers 的 <code>tenant-id</code> 为 1，再点击 Body 的「自动生成」按钮，最后点击「发送」按钮。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/09.png" alt="Apifox 界面 —— 认证" tabindex="0" loading="lazy"><figcaption>Apifox 界面 —— 认证</figcaption></figure><h2 id="_2-knife4j-使用" tabindex="-1"><a class="header-anchor" href="#_2-knife4j-使用"><span><a href="https://doc.iocoder.cn/api-doc/#_2-knife4j-%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>2. Knife4j 使用</span></a></h2><p>浏览器访问 <a href="http://127.0.0.1:48080/doc.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:48080/doc.html (opens new window)</a>地址，使用 Knife4j 查看 API 接口文档。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/21.png" alt="Knife4j 界面" tabindex="0" loading="lazy"><figcaption>Knife4j 界面</figcaption></figure><p>① 点击任意一个接口，进行接口的调用测试。这里，使用「管理后台 - 用户个中心」的“获得登录用户信息”举例子。</p><p>② 点击左侧「调试」按钮，并将请求头部的 <code>header-id</code> 和 <code>Authorization</code> 勾选上。</p><p>其中，<code>header-id</code> 为租户编号，<code>Authorization</code> 的 <code>&quot;Bearer test&quot;</code> 后面为用户编号（模拟哪个用户操作）。</p><p>③ 点击「发送」按钮，即可发起一次 API 的调用。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/Knife4j调用.png" alt="Knife4j 调试" tabindex="0" loading="lazy"><figcaption>Knife4j 调试</figcaption></figure><h2 id="_3-swagger-技术组件" tabindex="-1"><a class="header-anchor" href="#_3-swagger-技术组件"><span><a href="https://doc.iocoder.cn/api-doc/#_3-swagger-%E6%8A%80%E6%9C%AF%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>3. Swagger 技术组件</span></a></h2><p>① 在 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-web/pom.xml" target="_blank" rel="noopener noreferrer"><code>yudao-spring-boot-starter-web</code> (opens new window)</a>技术组件的 <a href="https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/swagger/package-info.java" target="_blank" rel="noopener noreferrer"><code>swagger</code> (opens new window)</a>包，实现了对 Swagger 的封装。</p><p>② 如果想要禁用 Swagger 功能，可通过 <code>springdoc.api-docs.enable</code> 配置项为 <code>false</code>。一般情况下，建议 prod 生产环境进行禁用，避免发生安全问题。</p><figure><img src="https://doc.iocoder.cn/img/接口文档/Swagger关闭.png" alt="Swagger 关闭" tabindex="0" loading="lazy"><figcaption>Swagger 关闭</figcaption></figure>',45)]))}const g=o(n,[["render",t],["__file","7.接口文档.html.vue"]]),d=JSON.parse('{"path":"/posts/Java/Ruoyi-Vue-Pro/1.%E8%90%8C%E6%96%B0%E5%BF%85%E8%AF%BB/7.%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.html","title":"接口文档","lang":"zh-CN","frontmatter":{"description":"接口文档 项目使用 Swagger 实现 RESTful API 的接口文档，提供两种解决方案： *【推荐】 Apifox (opens new window)：强大的 API 工具，支持 API 文档、API 调试、API Mock、API 自动化测试 Knife4j：简易的 API 工具，仅支持 API 文档、API 调试 为什么选择 Swagge...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://springg.us.kg/posts/Java/Ruoyi-Vue-Pro/1.%E8%90%8C%E6%96%B0%E5%BF%85%E8%AF%BB/7.%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"接口文档"}],["meta",{"property":"og:description","content":"接口文档 项目使用 Swagger 实现 RESTful API 的接口文档，提供两种解决方案： *【推荐】 Apifox (opens new window)：强大的 API 工具，支持 API 文档、API 调试、API Mock、API 自动化测试 Knife4j：简易的 API 工具，仅支持 API 文档、API 调试 为什么选择 Swagge..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T05:58:00.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-11-24T05:58:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口文档\\",\\"image\\":[\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/01.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/02.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/03.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/04.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/05.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/06.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/07.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/08.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/09.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/21.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/Knife4j%E8%B0%83%E7%94%A8.png\\",\\"https://doc.iocoder.cn/img/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/Swagger%E5%85%B3%E9%97%AD.png\\"],\\"dateModified\\":\\"2024-11-24T05:58:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://springg.us.kg\\"}]}"]]},"headers":[{"level":2,"title":"#1. Apifox 使用","slug":"_1-apifox-使用","link":"#_1-apifox-使用","children":[{"level":3,"title":"#1.1 下载工具","slug":"_1-1-下载工具","link":"#_1-1-下载工具","children":[]},{"level":3,"title":"#1.2 API 导入","slug":"_1-2-api-导入","link":"#_1-2-api-导入","children":[]},{"level":3,"title":"#1.3 API 调试","slug":"_1-3-api-调试","link":"#_1-3-api-调试","children":[]}]},{"level":2,"title":"#2. Knife4j 使用","slug":"_2-knife4j-使用","link":"#_2-knife4j-使用","children":[]},{"level":2,"title":"#3. Swagger 技术组件","slug":"_3-swagger-技术组件","link":"#_3-swagger-技术组件","children":[]}],"git":{"createdTime":1732174913000,"updatedTime":1732427880000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":3.38,"words":1014},"filePathRelative":"posts/Java/Ruoyi-Vue-Pro/1.萌新必读/7.接口文档.md","localizedDate":"2024年11月21日","excerpt":"\\n<p>项目使用 Swagger 实现 RESTful API 的接口文档，提供两种解决方案：</p>\\n<p>*【推荐】 <a href=\\"http://mtw.so/62me9n\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Apifox (opens new window)</a>：强大的 API 工具，支持 API 文档、API 调试、API Mock、API 自动化测试</p>\\n<ul>\\n<li>Knife4j：简易的 API 工具，仅支持 API 文档、API 调试</li>\\n</ul>\\n<p>为什么选择 Swagger 呢？</p>\\n<p>Swagger 通过 Java 注解实现 API 接口文档的编写。相比使用 Java 注释的方式，注解提供更加规范的接口定义方式，开发体验更好。</p>","autoDesc":true}');export{g as comp,d as data};
