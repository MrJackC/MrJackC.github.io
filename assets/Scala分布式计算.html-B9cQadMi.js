import{_ as a,c as n,a as i,o as l}from"./app-CzniW49G.js";const e={};function r(p,s){return l(),n("div",null,s[0]||(s[0]=[i(`<h1 id="分布式计算应用" tabindex="-1"><a class="header-anchor" href="#分布式计算应用"><span>分布式计算应用</span></a></h1><hr><h2 id="_1-需求" tabindex="-1"><a class="header-anchor" href="#_1-需求"><span>1.需求</span></a></h2><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 一个发送端向多个接收端发送数据，接收端接收数据以后并进行处理，最后将数据返回给发送端，发送端将计算结果收回并打印在控制台。</span></span></code></pre></div><h2 id="_2-需求分析" tabindex="-1"><a class="header-anchor" href="#_2-需求分析"><span>2.需求分析</span></a></h2><h3 id="_2-1-搭建模型" tabindex="-1"><a class="header-anchor" href="#_2-1-搭建模型"><span>2.1 搭建模型</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 一个发送端连接多个接收端，然后分别进行发送数据，此时存在的问题：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 当服务器接收到数据以后，计算需要很长一段时间时，如果客户端一直等着服务器返回数据，这是不合理的。</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425865.png" alt="image-20200601215250678" tabindex="0" loading="lazy"><figcaption>image-20200601215250678</figcaption></figure><h3 id="_2-2-优化1" tabindex="-1"><a class="header-anchor" href="#_2-2-优化1"><span>2.2 优化1</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 客户端发送数据给服务端以后，断开连接，等服务器计算数据完成以后，服务器去连接客户端，将计算完成以后的结果返回</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425917.png" alt="image-20200601215841564" tabindex="0" loading="lazy"><figcaption>image-20200601215841564</figcaption></figure><h3 id="_2-3-优化2" tabindex="-1"><a class="header-anchor" href="#_2-3-优化2"><span>2.3 优化2</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>因为分布式计算的台数是根据实际的数据量来定的，数据量大，那我们就多一些服务器来进行计算，如果数量少一些，那么服务器就少一些，所以创建一个资源管理的中心，客户端需要多少资源就告诉资源管理中心，然后资源管理中心就创建多少个服务器来进行运算。</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425963.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-需要考虑的问题" tabindex="-1"><a class="header-anchor" href="#_3-需要考虑的问题"><span>3.需要考虑的问题</span></a></h2><h3 id="_3-1-数据如何进行切分" tabindex="-1"><a class="header-anchor" href="#_3-1-数据如何进行切分"><span>3.1 数据如何进行切分</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 暂时不传数据，只传任务和数据处理的逻辑</span></span></code></pre></div><h3 id="_3-2-客户端如何告诉资源管理中创建服务器的台数" tabindex="-1"><a class="header-anchor" href="#_3-2-客户端如何告诉资源管理中创建服务器的台数"><span>3.2 客户端如何告诉资源管理中创建服务器的台数</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--客户端和资源管理中心建立网络连接，客户端将自己的端口号、地址和需要的服务器台数发送给资源管理中心</span></span></code></pre></div><h3 id="_3-3-资源管理中心如何创建服务器" tabindex="-1"><a class="header-anchor" href="#_3-3-资源管理中心如何创建服务器"><span>3.3 资源管理中心如何创建服务器</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 资源管理中心根据客户端发来的端口号和地址就可以创建服务器，使用一个循环来创建服务器台数</span></span></code></pre></div><h3 id="_3-4-服务器如何接收到来自客户端的数据" tabindex="-1"><a class="header-anchor" href="#_3-4-服务器如何接收到来自客户端的数据"><span>3.4 服务器如何接收到来自客户端的数据</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 在服务器类中，声明一个方法，方法中声明输入流，计算，输出流，并把结果输出等代码</span></span></code></pre></div><h3 id="_3-5-客户端如何获取服务器端发来的计算结果" tabindex="-1"><a class="header-anchor" href="#_3-5-客户端如何获取服务器端发来的计算结果"><span>3.5 客户端如何获取服务器端发来的计算结果</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 在客户端处，创建发送数据的线程中，接收来自执行器的数据</span></span></code></pre></div><h3 id="_3-6-客户端如何收集整合不同服务器端发来的数据" tabindex="-1"><a class="header-anchor" href="#_3-6-客户端如何收集整合不同服务器端发来的数据"><span>3.6 客户端如何收集整合不同服务器端发来的数据</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--因为在客户端，会收集来自不同服务器端的数据，那么相当于使用多个线程对同一个结果集进行操作，存在线程安全问题，那么需要使用一个容器来接收结果数据。</span></span></code></pre></div><h2 id="_4-功能模块" tabindex="-1"><a class="header-anchor" href="#_4-功能模块"><span>4.功能模块</span></a></h2><h3 id="_4-1-驱动器" tabindex="-1"><a class="header-anchor" href="#_4-1-驱动器"><span>4.1 驱动器</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 将driver的host、port、执行器的数量信息传递给资源中心，关闭与资源中心的连接</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建一个serversocket，并获取输出流</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建线程，用于driver将任务发送给执行器和接收执行器返回的计算结果，在线程内：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       a、将需要输出的任务发送给执行器；</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       b、关闭输出流</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       c、获取输入流</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">       d、使用一个集合来接收执行器返回的数据</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">. 创建另外一个线程，用于判定是否所有的执行器已经返回结果，并打印所有执行器的计算结果</span></span></code></pre></div><h3 id="_4-2-资源中心" tabindex="-1"><a class="header-anchor" href="#_4-2-资源中心"><span>4.2 资源中心</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.  获取driver的host、port、exerutorsNum</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.  根据exerutorsNum，创建对应数量的executor</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.  并将driver的host、port传递给executor</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66;">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.  前三步在一个线程里面执行</span></span></code></pre></div><h3 id="_4-3信息" tabindex="-1"><a class="header-anchor" href="#_4-3信息"><span>4.3信息</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 将driver的host、port、执行器的数据封装成一个样例类。</span></span></code></pre></div><h3 id="_4-4-执行器" tabindex="-1"><a class="header-anchor" href="#_4-4-执行器"><span>4.4 执行器</span></a></h3><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>1. 通过资源中心传入的参数，获取driver的host、port以及执行器的id</span></span>
<span class="line"><span>2. 创建一个方法，在方法内： </span></span>
<span class="line"><span>       a、创建一个socket，并获取输入流</span></span>
<span class="line"><span>       b、获取driver的数据</span></span>
<span class="line"><span>       c、进行数据处理，并创建输出流</span></span>
<span class="line"><span>       d、将结果和执行器id返回给driver</span></span></code></pre></div><h3 id="_4-5任务" tabindex="-1"><a class="header-anchor" href="#_4-5任务"><span>4.5任务</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 将数据处理的逻辑封装成一个普通类</span></span></code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425040.png" alt="image-20200602015033371" tabindex="0" loading="lazy"><figcaption>image-20200602015033371</figcaption></figure><h2 id="_5-代码实现" tabindex="-1"><a class="header-anchor" href="#_5-代码实现"><span>5.代码实现</span></a></h2><h3 id="_5-1-驱动器" tabindex="-1"><a class="header-anchor" href="#_5-1-驱动器"><span>5.1 驱动器</span></a></h3><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Driver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //1. 与resourceCenter进行连接，并将驱动类的端口号、ip、和需要的服务台的台数的消息发送给资源中心</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //1.1 数据准备阶段，将发送的消息封装成一个样例类</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> executorNum</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 5</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverPort</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 9999</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverHost</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;localhost&quot;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> message</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">s</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;executorNum=</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">executorNum</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&amp;driverHost=</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">driverHost</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&amp;driverPort=</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">driverPort</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1.2  与resourceCenter连接,并将准备的数据发送给资源中心</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> socket</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Socket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#D19A66;--shiki-dark:#D19A66;">6666</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> out</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectOutputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(socket.getOutputStream)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    out.writeObject(message)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    out.flush()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    socket.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. 创建一个服务器，任务传输给执行器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> receiver</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ServerSocket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(driverPort)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // TODO 接收Executor端的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 线程安全问题</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> start</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.currentTimeMillis()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> results</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.fill(executorNum)(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // TODO 统计结果的线程</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> flg</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (flg) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (results.contains(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">              Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.sleep(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            } </span><span style="color:#C678DD;--shiki-dark:#C678DD;">else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // TODO 所有的线程都已经计算完毕</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">              val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> end</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.currentTimeMillis()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              println(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;计算完毕，结果为 &quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> results.sum </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;,耗时:&quot;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (end </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> start) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="color:#98C379;--shiki-dark:#98C379;"> &quot;ms&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">              flg </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">              System</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.exit(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    ).start()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> executorRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Socket</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> receiver.accept()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 2.1 发送任务给到执行器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> exerutorOutputStream</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectOutputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(executorRef.getOutputStream)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> task</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Task</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          task.func </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          exerutorOutputStream.writeObject(task)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          exerutorOutputStream.flush()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          exerutorOutputStream.close()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          executorRef.shutdownInput()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //2.2 获取执行器的返回的结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // TODO 获取Executor端计算结果</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> executorRefIn</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectInputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(executorRef.getInputStream)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Message</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> executorRefIn.readObject().</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">asInstanceOf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> datas</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> message.m.split(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;=|&amp;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // executorId=\${id}&amp;result=$i</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // executorId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // id</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // result</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // i</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          results(datas(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).toInt</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> datas(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).toInt</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //println(&quot;获取计算结果 = &quot; + result)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }).start()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-资源中心" tabindex="-1"><a class="header-anchor" href="#_5-2-资源中心"><span>5.2 资源中心</span></a></h3><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">object</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ResourceCenter</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 与driver进行连接，获取driver的端口号，ip、需要的服务器的台数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> socket</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ServerSocket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">6666</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D19A66;--shiki-dark:#D19A66;">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driver</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Socket</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> socket.accept()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">      new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        override</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(): </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Unit</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectInputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(driver.getInputStream)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> unit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">AnyRef</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> in.readObject()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> unit.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">asInstanceOf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">].m.split(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;=|&amp;&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          //&quot;executorNum,5,driverHost,localhost,driverPort,1234&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          println(message.mkString(</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> exerutorCount</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> message(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).toInt</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverHost</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> message(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverPort</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">  =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> message(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">).toInt</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//           2.创建服务器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">          for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;-</span><span style="color:#D19A66;--shiki-dark:#D19A66;">  1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> to exerutorCount) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">            val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> executor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Executor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(id,driverPort.toInt, driverHost)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">            executor.start()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }).start()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-信息" tabindex="-1"><a class="header-anchor" href="#_5-3-信息"><span>5.3 信息</span></a></h3><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">package</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> com.atguigu.Scala_chapter01.scala_distributeCom</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">case</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> : </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_5-4-执行器" tabindex="-1"><a class="header-anchor" href="#_5-4-执行器"><span>5.4 执行器</span></a></h3><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Executor</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverPort</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#C678DD;--shiki-dark:#C678DD;">val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverHost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建一个客户端</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverRef</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Socket</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(driverHost, driverPort)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> driverRefIn</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectInputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(driverRef.getInputStream)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> task</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Task</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> driverRefIn.readObject().</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">asInstanceOf</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Task</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    task.num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> id</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> task.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Com</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    driverRef.shutdownInput()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建一个输出流</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> executorOut</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> ObjectOutputStream</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(driverRef.getOutputStream)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    executorOut.writeObject(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Message</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#C678DD;--shiki-dark:#C678DD;">s</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;exerutor=</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">id</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&amp;result=</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">i</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    executorOut.flush()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    driverRef.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-任务" tabindex="-1"><a class="header-anchor" href="#_5-5-任务"><span>5.5 任务</span></a></h3><div class="language-scala" data-ext="scala" data-title="scala"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Task</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> num</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  var</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Int</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> _</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> Com</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    func(num)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,50)]))}const t=a(e,[["render",r],["__file","Scala分布式计算.html.vue"]]),c=JSON.parse('{"path":"/posts/BigData/07_Scala%E6%80%BB%E7%BB%93/Scala%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97.html","title":"分布式计算应用","lang":"zh-CN","frontmatter":{"description":"分布式计算应用 1.需求 2.需求分析 2.1 搭建模型 image-20200601215250678image-20200601215250678 2.2 优化1 image-20200601215841564image-20200601215841564 2.3 优化2 imgimg 3.需要考虑的问题 3.1 数据如何进行切分 3.2 客户端如...","watermark":true,"head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/BigData/07_Scala%E6%80%BB%E7%BB%93/Scala%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"分布式计算应用"}],["meta",{"property":"og:description","content":"分布式计算应用 1.需求 2.需求分析 2.1 搭建模型 image-20200601215250678image-20200601215250678 2.2 优化1 image-20200601215841564image-20200601215841564 2.3 优化2 imgimg 3.需要考虑的问题 3.1 数据如何进行切分 3.2 客户端如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425865.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T09:59:23.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2025-03-28T09:59:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式计算应用\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425865.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425917.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425963.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202503281425040.png\\"],\\"dateModified\\":\\"2025-03-28T09:59:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.需求","slug":"_1-需求","link":"#_1-需求","children":[]},{"level":2,"title":"2.需求分析","slug":"_2-需求分析","link":"#_2-需求分析","children":[{"level":3,"title":"2.1 搭建模型","slug":"_2-1-搭建模型","link":"#_2-1-搭建模型","children":[]},{"level":3,"title":"2.2 优化1","slug":"_2-2-优化1","link":"#_2-2-优化1","children":[]},{"level":3,"title":"2.3 优化2","slug":"_2-3-优化2","link":"#_2-3-优化2","children":[]}]},{"level":2,"title":"3.需要考虑的问题","slug":"_3-需要考虑的问题","link":"#_3-需要考虑的问题","children":[{"level":3,"title":"3.1 数据如何进行切分","slug":"_3-1-数据如何进行切分","link":"#_3-1-数据如何进行切分","children":[]},{"level":3,"title":"3.2 客户端如何告诉资源管理中创建服务器的台数","slug":"_3-2-客户端如何告诉资源管理中创建服务器的台数","link":"#_3-2-客户端如何告诉资源管理中创建服务器的台数","children":[]},{"level":3,"title":"3.3 资源管理中心如何创建服务器","slug":"_3-3-资源管理中心如何创建服务器","link":"#_3-3-资源管理中心如何创建服务器","children":[]},{"level":3,"title":"3.4  服务器如何接收到来自客户端的数据","slug":"_3-4-服务器如何接收到来自客户端的数据","link":"#_3-4-服务器如何接收到来自客户端的数据","children":[]},{"level":3,"title":"3.5  客户端如何获取服务器端发来的计算结果","slug":"_3-5-客户端如何获取服务器端发来的计算结果","link":"#_3-5-客户端如何获取服务器端发来的计算结果","children":[]},{"level":3,"title":"3.6 客户端如何收集整合不同服务器端发来的数据","slug":"_3-6-客户端如何收集整合不同服务器端发来的数据","link":"#_3-6-客户端如何收集整合不同服务器端发来的数据","children":[]}]},{"level":2,"title":"4.功能模块","slug":"_4-功能模块","link":"#_4-功能模块","children":[{"level":3,"title":"4.1 驱动器","slug":"_4-1-驱动器","link":"#_4-1-驱动器","children":[]},{"level":3,"title":"4.2  资源中心","slug":"_4-2-资源中心","link":"#_4-2-资源中心","children":[]},{"level":3,"title":"4.3信息","slug":"_4-3信息","link":"#_4-3信息","children":[]},{"level":3,"title":"4.4 执行器","slug":"_4-4-执行器","link":"#_4-4-执行器","children":[]},{"level":3,"title":"4.5任务","slug":"_4-5任务","link":"#_4-5任务","children":[]}]},{"level":2,"title":"5.代码实现","slug":"_5-代码实现","link":"#_5-代码实现","children":[{"level":3,"title":"5.1 驱动器","slug":"_5-1-驱动器","link":"#_5-1-驱动器","children":[]},{"level":3,"title":"5.2 资源中心","slug":"_5-2-资源中心","link":"#_5-2-资源中心","children":[]},{"level":3,"title":"5.3 信息","slug":"_5-3-信息","link":"#_5-3-信息","children":[]},{"level":3,"title":"5.4 执行器","slug":"_5-4-执行器","link":"#_5-4-执行器","children":[]},{"level":3,"title":"5.5 任务","slug":"_5-5-任务","link":"#_5-5-任务","children":[]}]}],"git":{"createdTime":1730080688000,"updatedTime":1743155963000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":2}]},"readingTime":{"minutes":5.35,"words":1606},"filePathRelative":"posts/BigData/07_Scala总结/Scala分布式计算.md","localizedDate":"2024年10月28日","excerpt":"\\n<hr>\\n<h2>1.需求</h2>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\" style=\\"background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">-- 一个发送端向多个接收端发送数据，接收端接收数据以后并进行处理，最后将数据返回给发送端，发送端将计算结果收回并打印在控制台。</span></span></code></pre>\\n</div>","autoDesc":true}');export{t as comp,c as data};
