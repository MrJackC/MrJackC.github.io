import{_ as a,c as t,a as i,o as l}from"./app-BQBjlK2G.js";const o={};function n(r,e){return l(),t("div",null,e[0]||(e[0]=[i('<h1 id="shallow-heap和retained-heap" tabindex="-1"><a class="header-anchor" href="#shallow-heap和retained-heap"><span>Shallow heap和Retained heap</span></a></h1><p>所有包含Heap Proflin 功能的工具（MAT，TPTP等）都会使用到两个名词，一个是Shallow Size，另一个是Retained Size</p><h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>1 概念</span></a></h2><h3 id="_1-1-shallow-size" tabindex="-1"><a class="header-anchor" href="#_1-1-shallow-size"><span>1.1 Shallow Size</span></a></h3><p><strong>对象自身占用的内存大小，不包括他引用的对象</strong></p><p>针对非数组类型的对象，它的大小就是对象与他所有的成员变量大小的总和。当然这里面还会包括一些java语言特性的数据存储单元。<br> 针对数组类型的对象，它的大小是数组元素对象的大小总和。</p><h3 id="_1-2-retained-size" tabindex="-1"><a class="header-anchor" href="#_1-2-retained-size"><span>1.2 Retained Size</span></a></h3><p>Retained Size= <strong>当前对象大小+当前对象可直接或间接引用到的对象的大小总和</strong>(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)</p><p>换句话说，Retained Size 就是当前对象被GC后，从Heap 上总共能释放掉的内存，从Heap 上总共能释放掉的内存</p><p>不过，释放的时候还要排除被GC Roots直接或间接引用的对象。他们暂时不会被被当做Garbage。</p><h2 id="_2-看图理解retained-size" tabindex="-1"><a class="header-anchor" href="#_2-看图理解retained-size"><span>2. 看图理解Retained Size</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121205594.png" alt="image-20200107223438176" tabindex="0" loading="lazy"><figcaption>image-20200107223438176</figcaption></figure><p>上图中，GC Roots直接引用了A和B 两个对象</p><ul><li><p>A对象的Retained Size = A对象Shallow Size</p></li><li><p>B对象的Reatined Size = B 对象的Shallow Size + C对象的Shallow Size</p><p>ps:这里不包含D对象，因为D对象被GCroot直接引用了</p></li></ul><h3 id="如果gc-roots不引用d对象" tabindex="-1"><a class="header-anchor" href="#如果gc-roots不引用d对象"><span>如果GC Roots不引用D对象？</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121205641.png" alt="image-20200107223805147" tabindex="0" loading="lazy"><figcaption>image-20200107223805147</figcaption></figure><p>此时，B对象的Retained Size=B对象的Shallow Size + C对象的Shallow Size + D对象的Shallow Size</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://www.iteye.com/blog/bjyzxxds-1532937" target="_blank" rel="noopener noreferrer">Shallow heap &amp; Retained heap</a></p>',19)]))}const h=a(o,[["render",n],["__file","java-jvm-tools-mat-shallow.html.vue"]]),p=JSON.parse('{"path":"/posts/Java/JavaJVM/java-jvm-tools-mat-shallow.html","title":"Shallow heap和Retained heap","lang":"zh-CN","frontmatter":{"aliases":"Shallow heap和Retained heap","tags":null,"cssclass":null,"source":null,"category":["Java","JVM"],"created":"2024-02-22 10:47","updated":"2024-03-12 12:06","description":"Shallow heap和Retained heap 所有包含Heap Proflin 功能的工具（MAT，TPTP等）都会使用到两个名词，一个是Shallow Size，另一个是Retained Size 1 概念 1.1 Shallow Size 对象自身占用的内存大小，不包括他引用的对象 针对非数组类型的对象，它的大小就是对象与他所有的成员变量大...","head":[["meta",{"property":"og:url","content":"https://mrjackc.github.io/posts/Java/JavaJVM/java-jvm-tools-mat-shallow.html"}],["meta",{"property":"og:site_name","content":"mrjason’s Blog"}],["meta",{"property":"og:title","content":"Shallow heap和Retained heap"}],["meta",{"property":"og:description","content":"Shallow heap和Retained heap 所有包含Heap Proflin 功能的工具（MAT，TPTP等）都会使用到两个名词，一个是Shallow Size，另一个是Retained Size 1 概念 1.1 Shallow Size 对象自身占用的内存大小，不包括他引用的对象 针对非数组类型的对象，它的大小就是对象与他所有的成员变量大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121205594.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-21T07:03:09.000Z"}],["meta",{"property":"article:author","content":"MrJason"}],["meta",{"property":"article:modified_time","content":"2024-10-21T07:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shallow heap和Retained heap\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121205594.png\\",\\"https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403121205641.png\\"],\\"dateModified\\":\\"2024-10-21T07:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MrJason\\",\\"url\\":\\"https://mrjackc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1 概念","slug":"_1-概念","link":"#_1-概念","children":[{"level":3,"title":"1.1 Shallow Size","slug":"_1-1-shallow-size","link":"#_1-1-shallow-size","children":[]},{"level":3,"title":"1.2 Retained Size","slug":"_1-2-retained-size","link":"#_1-2-retained-size","children":[]}]},{"level":2,"title":"2. 看图理解Retained Size","slug":"_2-看图理解retained-size","link":"#_2-看图理解retained-size","children":[{"level":3,"title":"如果GC Roots不引用D对象？","slug":"如果gc-roots不引用d对象","link":"#如果gc-roots不引用d对象","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1729494189000,"updatedTime":1729494189000,"contributors":[{"name":"MrJason","email":"845886914@qq.com","commits":1}]},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"posts/Java/JavaJVM/java-jvm-tools-mat-shallow.md","localizedDate":"2024年10月21日","excerpt":"\\n<p>所有包含Heap Proflin 功能的工具（MAT，TPTP等）都会使用到两个名词，一个是Shallow Size，另一个是Retained Size</p>\\n<h2>1 概念</h2>\\n<h3>1.1 Shallow Size</h3>\\n<p><strong>对象自身占用的内存大小，不包括他引用的对象</strong></p>\\n<p>针对非数组类型的对象，它的大小就是对象与他所有的成员变量大小的总和。当然这里面还会包括一些java语言特性的数据存储单元。<br>\\n针对数组类型的对象，它的大小是数组元素对象的大小总和。</p>\\n<h3>1.2 Retained Size</h3>\\n<p>Retained Size= <strong>当前对象大小+当前对象可直接或间接引用到的对象的大小总和</strong>(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)</p>","autoDesc":true}');export{h as comp,p as data};
