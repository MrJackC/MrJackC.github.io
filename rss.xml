<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://mrjackc.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://mrjackc.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>mrjason’s Blog</title>
    <link>https://mrjackc.github.io/</link>
    <description>春鸽鸽的博客</description>
    <language>zh-CN</language>
    <pubDate>Fri, 25 Oct 2024 09:22:41 GMT</pubDate>
    <lastBuildDate>Fri, 25 Oct 2024 09:22:41 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Blog</category>
    <category>About</category>
    <category>使用指南</category>
    <category>收藏</category>
    <category>Linux</category>
    <category>数据库</category>
    <category>Redis</category>
    <item>
      <title>网站常见问题</title>
      <link>https://mrjackc.github.io/site/Q_A.html</link>
      <guid>https://mrjackc.github.io/site/Q_A.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">网站常见问题</source>
      <description>网站常见问题 waline 评论插件 leancloud waline vercel 评论管理 docsearch 搜索插件 docsearch 爬虫问题解决 爬虫问题解决algolia官网说明 爬虫问题解决docsearch官网说明 github page github action</description>
      <pubDate>Tue, 22 Oct 2024 00:28:44 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>waline 评论插件</h2>
<p><a href="https://console.leancloud.app/apps/fLyHyR8wWAOUpdgZuZmGadUd-MdYXbMMI/settings/keys" target="_blank" rel="noopener noreferrer">leancloud</a></p>
<p><a href="https://waline.js.org/guide/features/reaction.html" target="_blank" rel="noopener noreferrer">waline</a></p>
<p><a href="https://vercel.com/mrjackcs-projects/blog-comments/T9cGMYsinmTAShJyMXyVtqZQG1dX" target="_blank" rel="noopener noreferrer">vercel</a></p>
<p><a href="https://blog-comments-31kqr5pt2-mrjackcs-projects.vercel.app/ui/profile" target="_blank" rel="noopener noreferrer">评论管理</a></p>
<h2>docsearch 搜索插件</h2>
<p><a href="https://docsearch.algolia.com/apply/" target="_blank" rel="noopener noreferrer">docsearch</a></p>
<p><a href="https://theme-hope.vuejs.press/zh/guide/feature/search.html" target="_blank" rel="noopener noreferrer">爬虫问题解决</a></p>
<p><a href="https://support.algolia.com/hc/en-us/articles/14876674614289-Why-my-DocSearch-index-is-not-populated-with-crawler-data" target="_blank" rel="noopener noreferrer">爬虫问题解决algolia官网说明</a></p>
<p><a href="https://docsearch.algolia.com/docs/record-extractor" target="_blank" rel="noopener noreferrer">爬虫问题解决docsearch官网说明</a></p>
<h2>github page</h2>
<p><a href="https://juejin.cn/post/7245980207315861562" target="_blank" rel="noopener noreferrer">github</a></p>
<p><a href="https://juejin.cn/post/7241226276253433916" target="_blank" rel="noopener noreferrer">action</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>关于本站</title>
      <link>https://mrjackc.github.io/about.html</link>
      <guid>https://mrjackc.github.io/about.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">关于本站</source>
      <description>关于本站 ✨📒 详细记录一下此次建站过程 开始 之前的博客是基于jekyll打造的，要添加和定制化的东西都只能基于html+js+css完成，有些麻烦，所以一直有想更换引擎的想法 直到偶然间发现vuepress，首先是被vue3+typescript+vite吸引，然后看到默认主题属实有点不合符我的期待，自己动手成本又太高，也没有太急着去折腾，直到无...</description>
      <category>Blog</category>
      <pubDate>Tue, 14 Mar 2023 21:45:45 GMT</pubDate>
      <content:encoded><![CDATA[
<div class="hint-container info">
<p class="hint-container-title">✨📒</p>
<p>详细记录一下此次建站过程</p>
</div>
<h2>开始</h2>
<p>之前的博客是基于jekyll打造的，要添加和定制化的东西都只能基于html+js+css完成，有些麻烦，所以一直有想更换引擎的想法<br>
直到偶然间发现vuepress，首先是被<code>vue3</code>+<code>typescript</code>+<code>vite</code>吸引，然后看到默认主题属实有点不合符我的期待，自己动手成本又太高，也没有太急着去折腾，直到无意中发现了<br>
<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a>，漂亮的外观一下子就吸引到我了，然后去官网深入研究了一番，发现二次开发的成本并不高，对于我来说比较友好，基本都是基于选项的配置型，和一小部分的定制开发，也可以基于vue来写，这让我觉得很合适。所以，一步步折腾了起来……</p>
<h2>Markdown增强</h2>
<p>hope主题的markdown效果是出乎意料的好，而且支持了很多普通markdown不支持的东西，如自定义容器、带tab的代码块，最方便的是可以直接写流程图了，可选高亮主题（本站代码高亮基于shikiPlugin,虽不如默认的prismjs轻量高效，但能提供更准确的语法高亮）具体效果看这里☞<a href="/demo/markdown.html" target="_blank">Markdown展示</a></p>
<h2>目录结构</h2>
<div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> .github</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> ISSUE_TEMPLATE</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # issus 模版</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> bug-report.yml</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> workflows</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">       └──</span><span style="color:#98C379;--shiki-dark:#98C379"> deploy-docs.yml</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 推送脚本</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> CNAME</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> LICENSE</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> api</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> proxy.js</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 跨域代理</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> env.d.ts</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> package.json</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> pnpm-lock.yaml</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> script</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> requirements.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> submit.py</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # Github Actions 推送URL使用脚本</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> src</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> .vuepress</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> client.ts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 客户端配置文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> components</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> MyCoverLink.vue</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 友链组件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> Mylink.vue</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 卡片组件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> config.ts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # vuepress配置文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> data</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 数据</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> navbar</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> plugins</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> vuepress-plugin-canvas</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> vuepress-plugin-gradient-cover</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> vuepress-plugin-hitokoto</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> vuepress-plugin-live2DAssist</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> vuepress-plugin-popper</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> public</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> assets</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 资源</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> sidebar</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> styles</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> theme</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> api</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> bing.ts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # bing 每日壁纸</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> components</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #自定义组件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> index.ts</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> layouts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 自定义布局</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> utils</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">       ├──</span><span style="color:#98C379;--shiki-dark:#98C379"> busuanzi.pure.js</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 不蒜子统计</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">       └──</span><span style="color:#98C379;--shiki-dark:#98C379"> time.ts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #运行时间</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   │</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> theme.ts</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 主题配置文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">│</span><span style="color:#98C379;--shiki-dark:#98C379">   └──</span><span style="color:#98C379;--shiki-dark:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">├──</span><span style="color:#98C379;--shiki-dark:#98C379"> tsconfig.json</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">└──</span><span style="color:#98C379;--shiki-dark:#98C379"> vercel.json</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # vercel 配置文件</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>框架支持</h2>
<p><a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">vuepress2.x</a></p>
<h2>主题支持</h2>
<p><a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a></p>
<h2>自定义内容</h2>
<p>基于原主题进行了继承，个性化内容如下，主要自定义内容分为</p>
<ol>
<li>
<p><strong>自定义布局</strong></p>
<ul>
<li>NotFound.vue</li>
<li>Layout.vue(增加打赏组件)</li>
<li>News.vue(说说列表布局)</li>
</ul>
</li>
<li>
<p><strong>自定义组件</strong></p>
<ul>
<li>BlogHero.vue</li>
<li>PageFooter.vue</li>
<li>Sponsor.vue（打赏组件）</li>
<li>NewsList.vue （说说列表）</li>
<li>NewsItem.vue （说说item）</li>
</ul>
</li>
<li>
<p><strong>本地插件开发</strong></p>
<ul>
<li>vuepress-plugin-canvas（支持彩虹背景和动态几何图形两种）</li>
<li>vuepress-plugin-gradient-cover （遮罩背景）</li>
<li>vuepress-plugin-hitokoto （一言插件）</li>
<li>vuepress-plugin-live2DAssist （看板娘辅助，由于子页有sidebar，看板娘会挡住，所以写了一个子页隐藏的小东西）</li>
<li>vuepress-plugin-popper （鼠标特效，基于<a href="https://github.com/moefyit/moefy-canvas" target="_blank" rel="noopener noreferrer">@moefy-canvas/theme-popper</a>）</li>
</ul>
</li>
<li>
<p><strong>引用外部内容</strong></p>
<ul>
<li>
<p><a href="https://github.com/oh-my-live2d/vuepress-plugin-oh-my-live2d" target="_blank" rel="noopener noreferrer">vuepress-plugin-oh-my-live2d</a> 看板娘插件</p>
</li>
<li>
<p>不蒜子统计</p>
</li>
<li>
<p><a href="https://github.com/moefyit/moefy-canvas" target="_blank" rel="noopener noreferrer">@moefy-canvas/theme-popper</a>原有插件只支持vuepress1.x，自己基于moefy-canvas进行了支持vuepress2.x的本地化插件开发</p>
</li>
<li>
<p><a href="https://v2.vuepress.vuejs.org/zh/reference/plugin/google-analytics.html" target="_blank" rel="noopener noreferrer">@vuepress/plugin-google-analytics</a> 支持Google Analytics 4 正好看到通知原来的UA也要被强制转换了，所以更换了G4</p>
</li>
</ul>
</li>
<li>
<p><strong>配置内容</strong></p>
<ul>
<li>navbar</li>
<li>sidebar</li>
<li>评论基于 <a href="https://waline.js.org/" target="_blank" rel="noopener noreferrer">Waline</a></li>
<li>搜索基于<a href="https://www.algolia.com/developers/?utm_content=powered_by&amp;utm_source=localhost&amp;utm_medium=referral&amp;utm_campaign=docsearch" target="_blank" rel="noopener noreferrer">algolia</a></li>
<li>启用 copyright 版权信息插件</li>
<li>feed rss插件</li>
<li>增加文章类型-说说，为说说markdown图片添加预览选择器</li>
</ul>
</li>
<li>
<p><strong>零碎</strong></p>
<ul>
<li>运行时间统计</li>
<li>CSS 样式美化</li>
<li>引入字体，品如手写体，夏行楷体</li>
<li>wanlie 增加自定义emoji，并修改展示样式</li>
<li>个性log</li>
<li>自动推送新文章url到搜索引擎（百度、Bing、Google）👉<a href="/platform/github/github-action">详细配置</a></li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>关于我</title>
      <link>https://mrjackc.github.io/intro.html</link>
      <guid>https://mrjackc.github.io/intro.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">关于我</source>
      <description>关于我 Profile Exploration &amp; geek enthusiast, full-stack front-end engineer, UX Designer | Currently focusing on cross-platform development with main directions in iOS, ReactNative...</description>
      <category>About</category>
      <pubDate>Sun, 12 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[

<h2>Profile</h2>
<p><em>Exploration &amp; geek enthusiast, full-stack front-end engineer, UX Designer | Currently focusing on cross-platform development with main directions in iOS, ReactNative, Flutter, and Vue | Discovering a bigger world together with you.</em></p>
<div class="hint-container tip">
<p class="hint-container-title">Profile</p>
<p>探索 &amp; 极客 爱好者，大前端工程师，用户体验设计师 |目前主要研究方向在跨平台开发上，iOS、ReactNative、Flutter、Vue是主要方向| 期待与你一起发现更大的世界</p>
</div>
<h2>Skills</h2>
<h3>Languages</h3>
<img src="https://skillicons.dev/icons?i=c,cs,swift,javascript,ts,dart,python,html,css,java,regex,md,sass,bash&amp;theme=dark&amp;&amp;perline=10" alt="Skills">
<h3>Frameworks</h3>
<img src="https://skillicons.dev/icons?i=flutter,vue,nodejs,react,reactivex,redux,dotnet&amp;theme=dark&amp;&amp;perline=10" alt="Skills">
<h3>Databases</h3>
<img src="https://skillicons.dev/icons?i=sqlite,mysql,redis&amp;theme=dark&amp;&amp;perline=10" alt="Skills">
<h3>Hardwares</h3>
<img src="https://skillicons.dev/icons?i=raspberrypi&amp;theme=dark&amp;&amp;perline=10" alt="Skills">
<h3>Others</h3>
<img src="https://skillicons.dev/icons?i=vim,visualstudio,vscode,androidstudio,aws,figma,gradle,gcp,git,github,gitlab,idea,jenkins,linux,postman,powershell,linkedin,stackoverflow,svg,tensorflow,twitter&amp;theme=dark&amp;&amp;perline=10" alt="Skills">
<h2>Github Summary</h2>
<img src="https://github-trophies.vercel.app/?username=oragekk&amp;theme=radical&amp;margin-w=25" alt="Github Summary">
<img src="https://github-readme-stats.vercel.app/api/top-langs/?username=oragekk&amp;theme=radical&amp;layout=compact&amp;bg_color=30,ef475d,904e95&amp;title_color=fff&amp;text_color=fff">
<img src="https://github-readme-stats.vercel.app/api?username=oragekk&amp;count_private=true&amp;show_icons=true&amp;theme=radical&amp;bg_color=30,ef475d,904e95&amp;title_color=fff&amp;text_color=fff">
<h2>Preview</h2>
<figure><img src="https://count.getloli.com/get/@:oragekk?theme=gelbooru-h" alt=":Augenestern-creator" tabindex="0" loading="lazy"><figcaption>:Augenestern-creator</figcaption></figure>
<h2>Activity Graph</h2>
<figure><a href="https://github.com/OrageKK/github-readme-activity-graph" target="_blank" rel="noopener noreferrer"><img src="https://github-readme-activity-graph-sandy.vercel.app/graph?username=oragekk&amp;theme=dracula" alt="Ashutosh's github activity graph" tabindex="0" loading="lazy"></a><figcaption>Ashutosh's github activity graph</figcaption></figure>
<h2>关于本站</h2>
<p><a href="/about">传送门</a></p>
]]></content:encoded>
      <enclosure url="https://count.getloli.com/get/@:oragekk?theme=gelbooru-h" type="image/"/>
    </item>
    <item>
      <title>如何利用GitHub Action提交URL到搜索引擎</title>
      <link>https://mrjackc.github.io/blog/auto-push.html</link>
      <guid>https://mrjackc.github.io/blog/auto-push.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">如何利用GitHub Action提交URL到搜索引擎</source>
      <description>相关信息 这是一个GitHub Actions的配置文件，整体思路是，获取本次更新的url （通过对比两次提交的sitemap.xml文件），所以触发条件是deploy分支有推送并修改了sitemap.xml文件，再利用python脚本进行url推送到百度、Bing、Google 脚本代码请看这里👉提交URL到搜索引擎（百度、Bing、Google）</description>
      <category>Blog</category>
      <pubDate>Mon, 17 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>这是一个<code>GitHub Actions</code>的配置文件，整体思路是，获取本次更新的url<br>
（通过对比两次提交的sitemap.xml文件），所以触发条件是deploy分支有推送并修改了<code>sitemap.xml</code>文件，再利用python脚本进行url推送到百度、Bing、Google</p>
<p>脚本代码请看这里👉<a href="/posts/Python/submit-url">提交URL到搜索引擎（百度、Bing、Google）</a></p>
</div>
<!-- more -->
<p>前些天不是写了Bing的提交脚本吗，但是每次都要自己手动跑脚本也很麻烦，但我又没有服务器，所以用上了GitHub Actions了嘛<br>
总的来说做了以下事情：</p>
<ol>
<li>提交代码并修改sitemap.xml 后触发工作流</li>
<li>比对上一次提交和本次提交的新增URL</li>
<li>将URL分别提交给百度站长、Bing、Google 供搜索引擎快速收录</li>
<li></li>
</ol>
<h2>流程解读</h2>
]]></content:encoded>
      <enclosure url="https://w.wallhaven.cc/full/l3/wallhaven-l3xk6q.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>评论系统从多说迁移到disqus指南</title>
      <link>https://mrjackc.github.io/blog/disqus.html</link>
      <guid>https://mrjackc.github.io/blog/disqus.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">评论系统从多说迁移到disqus指南</source>
      <description>由于多说评论系统将于 6 月 1 日下线，所以准备迁移至disqus，相比较的话对于国内环境还是多说好用一点，毕竟加载快，支持各大媒体的分享，也不用小伙伴们翻墙；而 disqus 分享也只支持 Facebook 和 twitter。。PS:貌似现在又被墙了，以后有时间再换吧，目前就先这样，国内据说畅言还不错 迁移过程 1.首先为了不丢失原有评论，导出多...</description>
      <category>Blog</category>
      <pubDate>Fri, 14 Apr 2017 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>由于多说评论系统将于 6 月 1 日下线，所以准备迁移至<a href="https://disqus.com/" target="_blank" rel="noopener noreferrer">disqus</a>，相比较的话对于国内环境还是多说好用一点，毕竟加载快，支持各大媒体的分享，也不用小伙伴们翻墙；而 disqus 分享也只支持 Facebook 和 twitter。。PS:貌似现在又被墙了，以后有时间再换吧，目前就先这样，国内据说<a href="http://changyan.kuaizhan.com/static/help/" target="_blank" rel="noopener noreferrer">畅言</a>还不错</p>
</blockquote>
<h2>迁移过程</h2>
<h3>1.首先为了不丢失原有评论，导出多说评论</h3>
<figure><img src="http://i2.muimg.com/567571/f0d7b62ff410decf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>2.文件转换</h3>
<ul>
<li>由于 disqus 不支持多说导出的.json 文件，所以需要进行转换为 xml 文件，此处使用 github 上的轮子<a href="https://github.com/JamesPan/duoshuo-migrator" target="_blank" rel="noopener noreferrer">JamesPan/duoshuo-migrator</a></li>
<li>使用步骤
<ol>
<li>下载<a href="https://github.com/JamesPan/duoshuo-migrator/blob/master/duoshuo-migrator.py?raw=true" target="_blank" rel="noopener noreferrer">duoshuo-migrator.py</a>并安装依赖<br>
<img src="http://i2.muimg.com/567571/f98e1281fec1cdd7.png" alt="" loading="lazy"></li>
<li>执行 <code>python duoshuo-migrator.py -i ~/Desktop/export.json  -o disqus.xml</code>命令<br>
<img src="http://i2.muimg.com/567571/8e27bcddc31c29b2.png" alt="" loading="lazy"></li>
<li>将转换完成文件导入<br>
<img src="http://i2.muimg.com/567571/213761ad8cf62886.png" alt="" loading="lazy"></li>
</ol>
</li>
</ul>
]]></content:encoded>
      <enclosure url="http://i2.muimg.com/567571/f0d7b62ff410decf.png" type="image/png"/>
    </item>
    <item>
      <title>Jekyll旧站回忆</title>
      <link>https://mrjackc.github.io/blog/jekyll.html</link>
      <guid>https://mrjackc.github.io/blog/jekyll.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Jekyll旧站回忆</source>
      <description>“Yeah It&amp;apos;s on. ” 前言 Oragekk 的 Blog 就这么开通了。 跳过废话，直接看技术实现 2016 年，11 月 总算有个地方可以好好写点东西了。 作为一个程序员， 看多了别人的 Blog 这种轮子都是酷炫的不要不要的，自己其实一种想搞一个，前两天发现了 GitHub Pages +Jekyll 的技术方案，一下子就上瘾了。 终于...</description>
      <category>Blog</category>
      <pubDate>Thu, 03 Nov 2016 12:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>“Yeah It's on. ”</p>
</blockquote>
<h2>前言</h2>
<p>Oragekk 的 Blog 就这么开通了。</p>
<p><a href="#build">跳过废话，直接看技术实现 </a></p>
<p>2016 年，11 月 总算有个地方可以好好写点东西了。</p>
<p>作为一个程序员， 看多了别人的 Blog 这种轮子都是酷炫的不要不要的，自己其实一种想搞一个，前两天发现了 GitHub Pages +Jekyll 的技术方案，一下子就上瘾了。</p>
<p>终于可以有自己的自留地了，之前一直在简书上写一些技术类的文章，这次可以有个自己的地盘，想怎么写就怎么写。😝 哈哈。不过这些前端的东西对我也是一种挑战，似懂非懂的看着模板，和一堆 js+css+html 的代码。。一顿头大。。对照着效果，一步步自己改。改好了之后也是蛮有成就感的嘛</p>
<h2><p id="build"></p></h2>
<h2>正文</h2>
<p>接下来说说搭建这个博客的技术细节。</p>
<p>正好之前就有关注过 <a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">GitHub Pages</a> + <a href="http://jekyllrb.com/" target="_blank" rel="noopener noreferrer">Jekyll</a> 快速 Building Blog 的技术方案，非常轻松时尚。</p>
<p>其优点非常明显：</p>
<ul>
<li><strong>Markdown</strong> 带来的优雅写作体验</li>
<li>非常熟悉的 Git workflow ，<strong>Git Commit 即 Blog Post</strong></li>
<li>利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
<ul>
<li>如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了</li>
</ul>
</li>
<li>Jekyll 的自定制非常容易，基本就是个模版引擎</li>
<li>Jekyll 的安装倒是不难，难的是安装它之前的一堆安装</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>评论插件 Waline 之邮件通知配置</title>
      <link>https://mrjackc.github.io/blog/waline-mail.html</link>
      <guid>https://mrjackc.github.io/blog/waline-mail.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">评论插件 Waline 之邮件通知配置</source>
      <description>评论插件 Waline 之邮件通知配置 ✨ 陆续优化中……这次到了评论的邮件通知，由于 waline 带后端，可以开启评论通知，我是部署在 Vercel 上的，配置一下就可以了，模版要感谢小波同学 前置注意点 1.邮件要注意每日发信限制，短时密集评论会导致直接被封，禁止发信 2.最好不要使用自己平常使用的邮箱，使用一个单独的邮箱来操作 3.有服务器的同...</description>
      <category>Blog</category>
      <pubDate>Wed, 29 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<div class="hint-container info">
<p class="hint-container-title">✨</p>
<p>陆续优化中……这次到了评论的邮件通知，由于 waline 带后端，可以开启评论通知，我是部署在 Vercel 上的，配置一下就可以了，模版要感谢<a href="https://blog.ganxb2.com/" target="_blank" rel="noopener noreferrer">小波同学</a></p>
<p>前置注意点</p>
<p>1.邮件要注意每日发信限制，短时密集评论会导致直接被封，禁止发信</p>
<p>2.最好不要使用自己平常使用的邮箱，使用一个单独的邮箱来操作</p>
<p>3.有服务器的同学，自己部署SMTP服务可以不受限制</p>
</div>
<p>老规矩先放效果图:</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/29/8958076dc393c8df.png" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure>
<h2><a class="header-anchor" href="#_1-waline-官方邮件通知环境变量说明"><span>1. waline 官方邮件通知环境变量说明<sup class="footnote-ref"></sup></span></a><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></h2>
<h3>1.1 waline 邮件通知必填环境变量</h3>
<p><code>SMTP_SERVICE: SMTP</code> 邮件发送服务提供商。例如 163 在受支持的运营商列表可以直接填写 163</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>你可以在 <a href="https://github.com/nodemailer/nodemailer/blob/master/lib/well-known/services.json" target="_blank" rel="noopener noreferrer">这里</a> 查看所有支持的运营商。</p>
<p>如果你的运营商不受支持，你必须填写 <code>SMTP_HOST 和 SMTP_PORT</code>。</p>
<ul>
<li>
<p><code>SMTP_HOST</code>: SMTP 服务器地址，一般可以在邮箱的设置中找到。</p>
</li>
<li>
<p><code>SMTP_PORT</code>: SMTP 服务器端口，一般可以在邮箱的设置中找到。</p>
</li>
</ul>
</div>
<p><code>SMTP_USER</code>: SMTP 邮件发送服务的用户名，一般为登录邮箱【切记要完整填写xxx@xxx.xx】。</p>
<p><code>SMTP_PASS</code>: SMTP 邮件发送服务的密码，一般为邮箱登录密码，部分邮箱(例如 163)是单独的 SMTP 密码。 <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><a class="footnote-anchor" id="footnote-ref2">
<p><code>SMTP_SECURE</code>: 是否使用 SSL 连接 SMTP。</p>
<p><code>SITE_NAME</code>: 网站名称，用于在消息中显示。</p>
<p><code>SITE_URL</code>: 网站地址，用于在消息中显示。</p>
<p><code>AUTHOR_EMAIL</code>: 博主邮箱，用来接收新评论通知。如果是博主发布的评论则不进行提醒通知。</p>
<div class="hint-container tip">
<p class="hint-container-title">注意</p>
<p>其中<code>SITE_NAME</code>如果有类似 <code>xxxx's Blog</code> 这种的网站名称，在 Vercel 中配置的时候，可以使用<code>xxxx Blog</code> 格式<br>
因为<code>'</code>单引号会在模版中被转义为<code>&amp;#39;s</code></p>
</div>
</a><h3><a class="footnote-anchor" id="footnote-ref2"></a><a class="header-anchor" href="#_1-2-waline-邮件通知选填环境变量"><span>1.2 waline 邮件通知选填环境变量</span></a></h3>
<p><code>SENDER_NAME</code>: 自定义发送邮件的发件人</p>
<p><code>SENDER_EMAIL</code>: 自定义发送邮件的发件地址</p>
<div class="hint-container tip">
<p class="hint-container-title">注意</p>
<p>其中<code>SENDER_NAME</code>和<code>SENDER_EMAIL</code> 要成对出现</p>
</div>
<h3>1.3 waline 邮件通知模版环境变量</h3>
<p><code>MAIL_SUBJECT</code>: 自定义评论回复邮件标题</p>
<p><code>MAIL_TEMPLATE</code>: 自定义评论回复邮件内容</p>
<p><code>MAIL_SUBJECT_ADMIN</code>: 自定义新评论通知邮件标题</p>
<p><code>MAIL_TEMPLATE_ADMIN</code>: 自定义新评论通知邮件内容</p>
<h3>1.4 waline邮件通知模版index.js服务端配置参数</h3>
<ul>
<li>
<p><code>mailSubject</code> 类型: string</p>
<p>评论回复邮件标题自定义，等同于环境变量 <code>MAIL_SUBJECT</code>。</p>
</li>
<li>
<p><code>mailTemplate</code> 类型: string</p>
<p>评论回复邮件内容自定义，等同于环境变量 <code>MAIL_TEMPLATE</code>。</p>
</li>
<li>
<p><code>mailSubjectAdmin</code> 类型: string</p>
<p>新评论通知邮件标题自定义，等同于环境变量 <code>MAIL_SUBJECT_ADMIN</code>。</p>
</li>
<li>
<p><code>mailTemplateAdmin</code> 类型: string</p>
<p>新评论通知邮件内容自定义，等同于环境变量 <code>MAIL_TEMPLATE_ADMIN</code>。</p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>自此以下配置都是关于邮件模版的，1.3和1.4二选一配置即可，1.1是必填配置，自行填写即可。</p>
</div>
<h2>2.根据部署方式选择合适的邮件模版修改方法</h2>
<h3>2.1 vercel</h3>
<ul>
<li>环境变量<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></li><a class="footnote-anchor" id="footnote-ref3">
<li>私有walie仓库index.js文件【推荐】</li>
</a></ul><a class="footnote-anchor" id="footnote-ref3">
</a><h3><a class="footnote-anchor" id="footnote-ref3"></a><a class="header-anchor" href="#_2-2-独立部署"><span>2.2 独立部署</span></a></h3>
<ul>
<li>修改服务端入口文件index.js</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>如果你使用模板，请额外注意你需要自行保存这些配置，因为它们会在拉取官方最新模板时被覆盖。</p>
<p>建议将官方最新模板上传到自己的仓库，并进行修改。</p>
</div>
<h2>3.开始配置</h2>
<h3>3.1 设置完毕1.1中Vercel配置必须的环境变量</h3>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/29/ab416544129053c3.png" alt="1.1" tabindex="0" loading="lazy"><figcaption>1.1</figcaption></figure>
<h3>3.2 继续使用环境变量设置模版</h3>
<p><code>MAIL_SUBJECT_ADMIN</code></p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">{{site.name | safe}}</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 上有新评论了</span></span></code></pre>
</div><p><code>MAIL_TEMPLATE_ADMIN</code></p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background: url(https://tva3.sinaimg.cn/large/c56b8822ly1h62npb7s1ej201y01y0lh.jpg);padding:40px 0px 20px;margin:0px;background-color:#FFCDCE;width:100%;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">style</span><span style="color:#D19A66;--shiki-dark:#D19A66"> type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text/css"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span><span style="color:#C678DD;--shiki-dark:#C678DD">@media</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> screen </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (max-width:</span><span style="color:#D19A66;--shiki-dark:#D19A66">600</span><span style="color:#E06C75;--shiki-dark:#E06C75">px</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">){</span><span style="color:#D19A66;--shiki-dark:#D19A66">.afterimg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;--shiki-dark:#D19A66">.beforeimg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{display:</span><span style="color:#D19A66;--shiki-dark:#D19A66">none</span><span style="color:#C678DD;--shiki-dark:#C678DD">!important</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"border-radius: 10px 10px 10px 10px;font-size:14px;color: #555555;width: 530px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;max-width:100%;background: ##ffffff;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"beforeimg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:530px;height:317px;pointer-events:none"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;overflow:hidden;pointer-events:none;margin-top: -120px;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;background:#f8d1ce;color:#9d2850;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;background: url(https://tva2.sinaimg.cn/large/c56b8822ly1h61tb7tagcj20ii01u3yc.jpg) left top no-repeat;display: flex;justify-content: center;flex-direction: column;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"font-size:16px;font-weight: bold;text-align:center;word-break:break-all;margin:0;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		您在&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-decoration:none;color: #9d2850;"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"{{site.url}}"</span><span style="color:#D19A66;--shiki-dark:#D19A66">target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"_blank"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{site.name}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;上的文章有了新的评论&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"formmain"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background:#fff;width:100%;max-width:800px;margin:auto auto;overflow:hidden;margin-bottom: -155px;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"margin:40px auto;width:90%;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">strong</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{self.nick}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">strong</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; 回复说：&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{self.comment | safe}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-align:center;position: relative;z-index: 99;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;您可以点击&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-decoration:none;color:#cf5c83"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"{{site.postUrl}}"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"_blank"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;查看回复的完整內容&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;margin:25px auto 5px auto;display:block;pointer-events:none"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"bottomhr"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"font-size:12px;text-align:center;color:#999"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;春鸽鸽(oragekk)博客竭诚为您服务！&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"afterimg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:535px;height:317px;z-index:100;margin-left: -3px;"</span><span style="color:#D19A66;--shiki-dark:#D19A66">src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MAIL_SUBJECT</code></p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">{{parent.nick | safe}}</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">，『</span><span style="color:#E06C75;--shiki-dark:#E06C75">{{site.name | safe}}</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">』上的评论收到了回复</span></span></code></pre>
</div><p><code>MAIL_TEMPLATE</code></p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background: url(https://tva3.sinaimg.cn/large/c56b8822ly1h62npb7s1ej201y01y0lh.jpg);padding:40px 0px 20px;margin:0px;background-color:#FFCDCE;width:100%;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">style</span><span style="color:#D19A66;--shiki-dark:#D19A66"> type</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text/css"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span><span style="color:#C678DD;--shiki-dark:#C678DD">@media</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> screen </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">and</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (max-width:</span><span style="color:#D19A66;--shiki-dark:#D19A66">600</span><span style="color:#E06C75;--shiki-dark:#E06C75">px</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">){</span><span style="color:#D19A66;--shiki-dark:#D19A66">.afterimg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;--shiki-dark:#D19A66">.beforeimg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{display:</span><span style="color:#D19A66;--shiki-dark:#D19A66">none</span><span style="color:#C678DD;--shiki-dark:#C678DD">!important</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"border-radius: 10px 10px 10px 10px;font-size:14px;color: #555555;width: 530px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;max-width:100%;background: ##ffffff;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"beforeimg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:530px;height:317px;z-index:-100;pointer-events:none"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;overflow:hidden;pointer-events:none;margin-top: -120px;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;background:#f8d1ce;color:#9d2850;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;background: url(https://tva2.sinaimg.cn/large/c56b8822ly1h61tb7tagcj20ii01u3yc.jpg) left top no-repeat;display: flex;justify-content: center;flex-direction: column;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"font-size:16px;font-weight: bold;text-align:center;word-break:break-all;margin:0;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		您在&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-decoration:none;color: #9d2850;"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"{{site.url}}"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;『{{site.name | safe}}』&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;上的留言有新回复啦！&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"formmain"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background:#fff;width:100%;max-width:800px;margin:auto auto;overflow:hidden;margin-bottom: -155px;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"margin:40px auto;width:90%;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;😊Hi，{{parent.nick}}，您曾在文章上发表评论：&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{parent.comment | safe}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">strong</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{self.nick}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">strong</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; 给您的回复如下：&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;{{self.comment | safe}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;您可以点击&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-decoration:none; color:#cf5c83"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"{{site.postUrl}}"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"_blank"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; 查看回复的完整內容 &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;，欢迎再次光临&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"text-decoration:none; color:#cf5c83"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"{{site.url}}"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> target</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"_blank"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; {{site.name}} &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;。&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">hr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"font-size:14px;color:#b7adad;text-align:center;position: relative;z-index: 99;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;本邮件为系统自动发送，请勿直接回复邮件哦，可到博文内容回复。&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">br</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /&gt;{{site.url}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:100%;margin:25px auto 5px auto;display:block;pointer-events:none"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"bottomhr"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"font-size:12px;text-align:center;color:#999"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;春鸽鸽(oragekk)博客竭诚为您服务！&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">			&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">		&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"afterimg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> style</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"width:535px;height:317px;z-index:100;margin-left: -3px;"</span><span style="color:#D19A66;--shiki-dark:#D19A66">src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.3 使用服务端入口文件index.js变量设置模版</h3>
<p>文件初始内容为:</p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> Application</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> require</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'@waline/vercel'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">module</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">exports</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Application</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    async</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> postSave</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">comment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // do what ever you want after save comment</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">});</span></span></code></pre>
</div><div class="hint-container caution">
<p class="hint-container-title">注意!!!</p>
<p>在我查阅资料的过程中，发现很多教程中填写index.js的方式都是错误的，如下:</p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> Application</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> require</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'@waline/vercel'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">module</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">exports</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Application</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    async</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> postSave</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">comment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // do what ever you want after save comment</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        mailSubjectAdmin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'{{site.name | safe}} 上有新评论了'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ……</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">});</span></span></code></pre>
</div><p>这就是导致很多人index.js配置不成功的原因，把模版配置写在了postSave这个钩子函数里边,在Vercel部署的过程中就会直接报错，语法不正确</p>
</div>
<p>正确使用姿势:</p>
<div class="language-js line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> Application</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> require</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'@waline/vercel'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">module</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">exports</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Application</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">({</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    async</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> postSave</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">comment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // do what ever you want after save comment</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    },</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    mailSubjectAdmin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'{{site.name | safe}} 上有新评论了'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    mailTemplateAdmin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">`&lt;div style="background: url(https://tva3.sinaimg.cn/large/c56b8822ly1h62npb7s1ej201y01y0lh.jpg);padding:40px 0px 20px;margin:0px;background-color:#FFCDCE;width:100%;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;style type="text/css"&gt;@media screen and (max-width:600px){.afterimg,.beforeimg{display:none!important}}&lt;/style&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;div style="border-radius: 10px 10px 10px 10px;font-size:14px;color: #555555;width: 530px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;max-width:100%;background: ##ffffff;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img class="beforeimg" style="width:530px;height:317px;pointer-events:none" src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg" style="width:100%;overflow:hidden;pointer-events:none;margin-top: -120px;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;div style="width:100%;background:#f8d1ce;color:#9d2850;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;background: url(https://tva2.sinaimg.cn/large/c56b8822ly1h61tb7tagcj20ii01u3yc.jpg) left top no-repeat;display: flex;justify-content: center;flex-direction: column;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;p style="font-size:16px;font-weight: bold;text-align:center;word-break:break-all;margin:0;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		您在&lt;a style="text-decoration:none;color: #9d2850;" href="{{site.url}}"target="_blank"&gt;{{site.name}}&lt;/a&gt;上的文章有了新的评论&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;div class="formmain" style="background:#fff;width:100%;max-width:800px;margin:auto auto;overflow:hidden;margin-bottom: -155px;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;div style="margin:40px auto;width:90%;"&gt;&lt;p&gt;&lt;strong&gt;{{self.nick}}&lt;/strong&gt; 回复说：&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"&gt;{{self.comment | safe}}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p style="text-align:center;position: relative;z-index: 99;"&gt;您可以点击&lt;a style="text-decoration:none;color:#cf5c83" href="{{site.postUrl}}" target="_blank"&gt;查看回复的完整內容&lt;/a&gt;&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;img src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png" style="width:100%;margin:25px auto 5px auto;display:block;pointer-events:none"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p class="bottomhr" style="font-size:12px;text-align:center;color:#999"&gt;春鸽鸽(oragekk)博客竭诚为您服务！&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img class="afterimg" style="width:535px;height:317px;z-index:100;margin-left: -3px;"src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/div&gt;`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    mailSubject</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'{{parent.nick}}，您在『{{site.name}}』上发表的评论收到了来自 {{self.nick}} 的回复'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    mailTemplate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">`&lt;div style="background: url(https://tva3.sinaimg.cn/large/c56b8822ly1h62npb7s1ej201y01y0lh.jpg);padding:40px 0px 20px;margin:0px;background-color:#FFCDCE;width:100%;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;style type="text/css"&gt;@media screen and (max-width:600px){.afterimg,.beforeimg{display:none!important}}&lt;/style&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;div style="border-radius: 10px 10px 10px 10px;font-size:14px;color: #555555;width: 530px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;max-width:100%;background: ##ffffff;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img class="beforeimg" style="width:530px;height:317px;z-index:-100;pointer-events:none" src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg" style="width:100%;overflow:hidden;pointer-events:none;margin-top: -120px;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;div style="width:100%;background:#f8d1ce;color:#9d2850;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;background: url(https://tva2.sinaimg.cn/large/c56b8822ly1h61tb7tagcj20ii01u3yc.jpg) left top no-repeat;display: flex;justify-content: center;flex-direction: column;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;p style="font-size:16px;font-weight: bold;text-align:center;word-break:break-all;margin:0;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		您在&lt;a style="text-decoration:none;color: #9d2850;" href="{{site.url}}"&gt;『{{site.name | safe}}』&lt;/a&gt;上的留言有新回复啦！&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;div class="formmain" style="background:#fff;width:100%;max-width:800px;margin:auto auto;overflow:hidden;margin-bottom: -155px;"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;div style="margin:40px auto;width:90%;"&gt;&lt;p&gt;😊Hi，{{parent.nick}}，您曾在文章上发表评论：&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"&gt;{{parent.comment | safe}}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p&gt;&lt;strong&gt;{{self.nick}}&lt;/strong&gt; 给您的回复如下：&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;div style="background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:15px;color:#555555;"&gt;{{self.comment | safe}}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p&gt;您可以点击&lt;a style="text-decoration:none; color:#cf5c83" href="{{site.postUrl}}" target="_blank"&gt; 查看回复的完整內容 &lt;/a&gt;，欢迎再次光临&lt;a style="text-decoration:none; color:#cf5c83" href="{{site.url}}" target="_blank"&gt; {{site.name}} &lt;/a&gt;。&lt;hr /&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p style="font-size:14px;color:#b7adad;text-align:center;position: relative;z-index: 99;"&gt;本邮件为系统自动发送，请勿直接回复邮件哦，可到博文内容回复。&lt;br /&gt;{{site.url}}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;img src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png" style="width:100%;margin:25px auto 5px auto;display:block;pointer-events:none"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;p class="bottomhr" style="font-size:12px;text-align:center;color:#999"&gt;春鸽鸽(oragekk)博客竭诚为您服务！&lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">			&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">		&lt;img class="afterimg" style="width:535px;height:317px;z-index:100;margin-left: -3px;"src="https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/div&gt;`</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">});</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4. 结语</h3>
<p>至此，大功告成，所有的注意点我都写在上边了</p>
<p>此模版来自SaraKale<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup><a class="footnote-anchor" id="footnote-ref4">，经</a><a href="https://blog.ganxb2.com/" target="_blank" rel="noopener noreferrer">小波同学</a>修改美化<br>
其他模版同理，可以去SaraKale这里看看</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://waline.js.org/guide/features/notification.html" target="_blank" rel="noopener noreferrer">https://waline.js.org/guide/features/notification.html</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p>如 163 的 SMTP 授权码只生成一次，要复制存下来，如果丢失，后续不会再显示，只能重新生成 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote3" class="footnote-item"><p>Vercel 的环境变量大小限制为 4KB ，所以如果您的模板很长，请使用代码配置， <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote4" class="footnote-item"><p><a href="https://www.sarakale.top/blog/posts/537344b2.html" target="_blank" rel="noopener noreferrer">waline 邮件通知模板样式一览</a> <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
      <enclosure url="https://s3.bmp.ovh/imgs/2023/03/29/8958076dc393c8df.png" type="image/png"/>
    </item>
    <item>
      <title>Markdown 展示</title>
      <link>https://mrjackc.github.io/demo/markdown.html</link>
      <guid>https://mrjackc.github.io/demo/markdown.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Markdown 展示</source>
      <description>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。 你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</description>
      <category>使用指南</category>
      <pubDate>Sat, 11 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>
<!-- more -->
<h2>Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<h2>Markdown 配置</h2>
<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2>Markdown 扩展</h2>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a> 。</p>
<h3>VuePress 扩展</h3>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h3>主题扩展</h3>
<p>通过 [<code>vuepress-plugin-md-enhance</code>][md-enhance]，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>
<h4>自定义容器</h4>
<div v-pre="">
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 <a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8">链接</a>。</p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> a</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
</div></div>
<div class="hint-container tip">
<p class="hint-container-title">自定义标题</p>
<p>提示容器</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">自定义标题</p>
<p>警告容器</p>
</div>
<div class="hint-container caution">
<p class="hint-container-title">自定义标题</p>
<p>危险容器</p>
</div>
<details class="hint-container details"><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>代码块</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>上下角标</h4>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>自定义对齐</h4>
<div style="text-align:center">
<p>我是居中的</p>
</div>
<div style="text-align:right">
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>Attrs</h4>
<p>一个拥有 ID 的 <strong id="word">单词</strong>。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/attrs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>脚注</h4>
<p>此文字有脚注<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">.</a></p><a class="footnote-anchor" id="footnote-ref1">
</a><ul><a class="footnote-anchor" id="footnote-ref1">
</a><li><a class="footnote-anchor" id="footnote-ref1"></a><a href="https://theme-hope.vuejs.press/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>标记</h4>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>任务列表</h4>
<ul class="task-list-container">
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 计划 1</label></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 计划 2</label></p>
</li>
<li>
<p><a href="https://theme-hope.vuejs.press/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3>图片增强</h3>
<p>支持为图片设置颜色模式和大小</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>图表</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>Echarts</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/echarts.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>流程图</h4>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>Mermaid</h4>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p>这是脚注内容 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://mrjackc.github.io/demo/slides.html</link>
      <guid>https://mrjackc.github.io/demo/slides.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">幻灯片页</source>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- markdownlint-disable MD024 MD033 MD051 -->
]]></content:encoded>
      <enclosure url="https://mrjackc.github.io/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>一人一句宋词</title>
      <link>https://mrjackc.github.io/private/%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8F%A5%E5%AE%8B%E8%AF%8D.html</link>
      <guid>https://mrjackc.github.io/private/%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8F%A5%E5%AE%8B%E8%AF%8D.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">一人一句宋词</source>
      <description>Bing 每日壁纸Bing 每日壁纸 写来留待日后慢慢欣赏 😜 苏轼 十年生死两茫茫， 不思量，自难忘。 陆游 红酥手，黄藤酒， 满城春色宫墙柳。 李清照 此情无计可消除， 才下眉头，却上心头。 辛弃疾 众里寻他千百度。 蓦然回首，那人却在，灯火阑珊处。 柳永 多情自古伤离别， 更那堪冷落清秋节！ 范仲淹 羌管悠悠霜满地， 人不寐，将军白发征夫泪。 ...</description>
      <pubDate>Mon, 16 Jan 2017 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<figure><img src="https://file.mo7.cc/api/public/bz?idx=1" alt="Bing 每日壁纸" tabindex="0" loading="lazy"><figcaption>Bing 每日壁纸</figcaption></figure>
<blockquote>
<p>写来留待日后慢慢欣赏 😜</p>
</blockquote>
<h3>苏轼</h3>
<p>十年生死两茫茫，<br>
不思量，自难忘。</p>
<h3>陆游</h3>
<p>红酥手，黄藤酒，<br>
满城春色宫墙柳。</p>
<h3>李清照</h3>
<p>此情无计可消除，<br>
才下眉头，却上心头。</p>
<h3>辛弃疾</h3>
<p>众里寻他千百度。<br>
蓦然回首，那人却在，灯火阑珊处。</p>
<h3>柳永</h3>
<p>多情自古伤离别，<br>
更那堪冷落清秋节！</p>
<h3>范仲淹</h3>
<p>羌管悠悠霜满地，<br>
人不寐，将军白发征夫泪。</p>
<h3>晏殊</h3>
<p>无可奈何花落去，<br>
似曾相识燕归来。</p>
<h3>岳飞</h3>
<p>三十功名尘与土，八千里路云和月。<br>
莫等闲、白了少年头，空悲切！</p>
<h3>秦观</h3>
<p>两情若是久长时，<br>
又岂在朝朝暮暮。</p>
<h3>李之仪</h3>
<p>只愿君心似我心，<br>
定不负相思意。</p>
<h3>欧阳修</h3>
<p>人生自是有情痴，<br>
此恨不关风与月。</p>
<h3>唐婉</h3>
<p>世情薄，人情恶，<br>
雨送黄昏花易落。</p>
<h3>姜夔</h3>
<p>二十四桥仍在，<br>
波心荡、冷月无声。</p>
<h3>晏几道</h3>
<p>琵琶弦上说相思。<br>
当时明月在，曾照彩云归。</p>
<h3>李冠</h3>
<p>一寸相思千万绪。<br>
人间没个安排处。</p>
<h3>宋祁</h3>
<p>绿杨烟外晓寒轻，<br>
红杏枝头春意闹。</p>
<h3>周彦邦</h3>
<p>执手霜风吹鬓影，<br>
去意徊徨，别语愁难听。</p>
<h3>万俟咏</h3>
<p>短长亭，古今情。<br>
楼外凉蟾一晕生，雨余秋更清。</p>
<h3>蒋捷</h3>
<p>流光容易把人抛，<br>
红了樱桃，绿了芭蕉。</p>
<h3>吴潜</h3>
<p>老去惜花心，相对花无语。</p>
<h3>刘著</h3>
<p>江南几度梅花发，<br>
人在天涯鬓已斑。</p>
<h3>贺铸</h3>
<p>试问闲情都几许。<br>
一川烟草，满城风絮。梅子黄时雨。</p>
<h3>严蕊</h3>
<p>不是爱风尘，似被前缘误。<br>
花落花开自有时，总赖东君主。</p>
<h3>黄庭坚</h3>
<p>若有人知春去处。<br>
唤取归来同住。</p>
<h3>张先</h3>
<p>天不老，情难绝。<br>
心似双丝网，中有千千结。</p>
<h3>晁补之</h3>
<p>人生无奈别离何。<br>
夜长嫌梦短，泪少怕愁多。</p>
<h3>乐婉</h3>
<p>若是前生未有缘，<br>
待重结、来生愿。</p>
<h3>朱淑真</h3>
<p>把酒送春春不语。黄昏却下潇潇雨。</p>
<blockquote>
<p>看完了，跪安吧。╮(╯_╰)╭</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://file.mo7.cc/api/public/bz?idx=1" type="image/"/>
    </item>
    <item>
      <title>素材设计</title>
      <link>https://mrjackc.github.io/site/design.html</link>
      <guid>https://mrjackc.github.io/site/design.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">素材设计</source>
      <description>相关信息 素材、设计相关好用的网站 工具类</description>
      <category>收藏</category>
      <pubDate>Tue, 11 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>素材、设计相关好用的网站</p>
</div>
<h2>工具类</h2>
]]></content:encoded>
    </item>
    <item>
      <title>公开API</title>
      <link>https://mrjackc.github.io/site/public-api.html</link>
      <guid>https://mrjackc.github.io/site/public-api.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">公开API</source>
      <description>相关信息 免费公开的API网站，提供多种公共接口服务</description>
      <category>收藏</category>
      <pubDate>Tue, 28 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>免费公开的API网站，提供多种公共接口服务</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Docker基础 - 一个web应用实例1</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-03-basic-web-app.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-03-basic-web-app.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - 一个web应用实例1</source>
      <description>Docker基础 - 一个web应用实例1 1. 一个web 应用运行和访问 1.1 运行一个 web 应用 我们只需要找一个webapp的镜像即可，无需自己再写个程序啥的。接下来让我们尝试使用 docker 构建一个 web 应用程序。 这里找了一个training/webapp，它是将在docker容器中运行一个 Python Flask web应...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 一个web 应用运行和访问</h2>
<h3>1.1 运行一个 web 应用</h3>
<blockquote>
<p>我们只需要找一个webapp的镜像即可，无需自己再写个程序啥的。接下来让我们尝试使用 docker 构建一个 web 应用程序。</p>
</blockquote>
<p>这里找了一个<code>training/webapp</code>，它是将在docker容器中运行一个 Python Flask web应用。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker pull training/webapp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Using</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> tag:</span><span style="color:#98C379;--shiki-dark:#98C379"> latest</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">latest:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pulling</span><span style="color:#98C379;--shiki-dark:#98C379"> from</span><span style="color:#98C379;--shiki-dark:#98C379"> training/webapp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Image</span><span style="color:#98C379;--shiki-dark:#98C379"> docker.io/training/webapp:latest</span><span style="color:#98C379;--shiki-dark:#98C379"> uses</span><span style="color:#98C379;--shiki-dark:#98C379"> outdated</span><span style="color:#98C379;--shiki-dark:#98C379"> schema1</span><span style="color:#98C379;--shiki-dark:#98C379"> manifest</span><span style="color:#98C379;--shiki-dark:#98C379"> format.</span><span style="color:#98C379;--shiki-dark:#98C379"> Please</span><span style="color:#98C379;--shiki-dark:#98C379"> upgrade</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> schema2</span><span style="color:#98C379;--shiki-dark:#98C379"> image</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> better</span><span style="color:#98C379;--shiki-dark:#98C379"> future</span><span style="color:#98C379;--shiki-dark:#98C379"> compatibility.</span><span style="color:#98C379;--shiki-dark:#98C379"> More</span><span style="color:#98C379;--shiki-dark:#98C379"> information</span><span style="color:#98C379;--shiki-dark:#98C379"> at</span><span style="color:#98C379;--shiki-dark:#98C379"> https://docs.docker.com/registry/spec/deprecated-schema-v1/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">e190868d63f8:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">909cd34c6fd7:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">0b9bfabab7c1:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">a3ed95caeb02:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10bbbc0fc0ff:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">fca59b508e9f:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">e7ae2541b15b:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">9dd97ef58ce9:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">a4c1b0cb7af7:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Digest:</span><span style="color:#98C379;--shiki-dark:#98C379"> sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Status:</span><span style="color:#98C379;--shiki-dark:#98C379"> Downloaded</span><span style="color:#98C379;--shiki-dark:#98C379"> newer</span><span style="color:#98C379;--shiki-dark:#98C379"> image</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> training/webapp:latest</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker.io/training/webapp:latest</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker images | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> webapp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">     latest</span><span style="color:#98C379;--shiki-dark:#98C379">              6fae60ef3446</span><span style="color:#D19A66;--shiki-dark:#D19A66">        4</span><span style="color:#98C379;--shiki-dark:#98C379"> years</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">         349MB</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们启动这个webapp</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d -P training/webapp python app.py</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae218494d5aa5902c1ca4435733567b5e81319f02e5d2509d45cbc25da</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">             CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">                     NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae2184</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">     "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">     18</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 17</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">       0.0.0.0:32768</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">   gifted_agnesi</span></span></code></pre>
</div><p>参数说明:</p>
<ul>
<li><code>-d</code>:让容器在后台运行。</li>
<li><code>-P</code>:将容器内部使用的网络端口映射到我们使用的主机上。</li>
</ul>
<h3>1.2 访问webapp</h3>
<blockquote>
<p>我们注意看上述PORTS部分为0.0.0.0:32769-&gt;5000/tcp</p>
</blockquote>
<p>Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32768 上。</p>
<ul>
<li><strong>从主机上看</strong>，它应该暴露了<strong>端口32768</strong></li>
</ul>
<p>所以我们来验证下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# netstat | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 32768</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# netstat -nltp | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 32768</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tcp6</span><span style="color:#D19A66;--shiki-dark:#D19A66">       0</span><span style="color:#D19A66;--shiki-dark:#D19A66">      0</span><span style="color:#98C379;--shiki-dark:#98C379"> :::32768</span><span style="color:#98C379;--shiki-dark:#98C379">                :::</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span><span style="color:#98C379;--shiki-dark:#98C379">                    LISTEN</span><span style="color:#98C379;--shiki-dark:#98C379">      2227/docker-proxy</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# curl localhost:32768</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Hello</span><span style="color:#98C379;--shiki-dark:#98C379"> world!</span></span></code></pre>
</div><p>这意味着，你浏览器你可以输入<code>localhost:32768</code>访问这个页面。</p>
<ul>
<li><strong>从容器内部看</strong>，它应该有一个<strong>端口5000</strong></li>
</ul>
<p>我们再进容器验证下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker exec -it ec3eb9ae2184 /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@ec3eb9ae2184:/opt/webapp#</span><span style="color:#98C379;--shiki-dark:#98C379"> netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nltp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Active</span><span style="color:#98C379;--shiki-dark:#98C379"> Internet</span><span style="color:#98C379;--shiki-dark:#98C379"> connections</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (only </span><span style="color:#98C379;--shiki-dark:#98C379">servers</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Proto</span><span style="color:#98C379;--shiki-dark:#98C379"> Recv-Q</span><span style="color:#98C379;--shiki-dark:#98C379"> Send-Q</span><span style="color:#98C379;--shiki-dark:#98C379"> Local</span><span style="color:#98C379;--shiki-dark:#98C379"> Address</span><span style="color:#98C379;--shiki-dark:#98C379">           Foreign</span><span style="color:#98C379;--shiki-dark:#98C379"> Address</span><span style="color:#98C379;--shiki-dark:#98C379">         State</span><span style="color:#98C379;--shiki-dark:#98C379">       PID/Program</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tcp</span><span style="color:#D19A66;--shiki-dark:#D19A66">        0</span><span style="color:#D19A66;--shiki-dark:#D19A66">      0</span><span style="color:#98C379;--shiki-dark:#98C379"> 0.0.0.0:5000</span><span style="color:#98C379;--shiki-dark:#98C379">            0.0.0.0:</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span><span style="color:#98C379;--shiki-dark:#98C379">               LISTEN</span><span style="color:#98C379;--shiki-dark:#98C379">      1/python</span></span></code></pre>
</div><p>所以我们的理解是对的。</p>
<h3>1.3 设置自定义映射端口</h3>
<blockquote>
<p>我们发现，通过 <code>-P</code>参数映射到主机上的端口是随机，能否自定义端口呢？</p>
</blockquote>
<p>我们可以通过 -p 参数来设置不一样的端口；为了对比，我们再起一个容器实例：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d -p 5001:5000 training/webapp python app.py</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">             CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">                     NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5da3588d5bc4</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">     "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">     33</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 31</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">       0.0.0.0:5001</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">    hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae2184</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">     "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">     22</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379">       0.0.0.0:32768</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">   gifted_agnesi</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# netstat -nltp | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5001</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tcp6</span><span style="color:#D19A66;--shiki-dark:#D19A66">       0</span><span style="color:#D19A66;--shiki-dark:#D19A66">      0</span><span style="color:#98C379;--shiki-dark:#98C379"> :::5001</span><span style="color:#98C379;--shiki-dark:#98C379">                 :::</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span><span style="color:#98C379;--shiki-dark:#98C379">                    LISTEN</span><span style="color:#98C379;--shiki-dark:#98C379">      2591/docker-proxy</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# curl localhost:5001</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Hello</span><span style="color:#98C379;--shiki-dark:#98C379"> world!</span></span></code></pre>
</div><p>所以你看到跑了两个内部端口都是5000的web实例，新的容器内部的 5000 端口映射到我们本地主机的 5001 端口上。</p>
<h2>2. 其它常用功能</h2>
<h3>2.1 查看web 应用网络端口</h3>
<blockquote>
<p>通过 docker ps 命令可以查看到容器的端口映射，docker 还提供了另一个快捷方式 docker port，使用 docker port 可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号。</p>
</blockquote>
<p>上面我们创建的 web 应用容器 ID 为 5da3588d5bc4 名字为 hopeful_bardeen。</p>
<p>我可以这样查看容器端口的映射情况：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker port 5da3588d5bc4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5000/tcp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> -&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">0.0.0.0:5001</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker port hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5000/tcp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> -&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">0.0.0.0:5001</span></span></code></pre>
</div><h3>2.2 查看 WEB 应用程序日志</h3>
<blockquote>
<p>docker logs [ID或者名字] 可以查看容器内部的标准输出。</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker port hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5000/tcp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> -&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">0.0.0.0:5001</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker logs -f hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> Running</span><span style="color:#98C379;--shiki-dark:#98C379"> on</span><span style="color:#98C379;--shiki-dark:#98C379"> http://0.0.0.0:5000/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (Press </span><span style="color:#98C379;--shiki-dark:#98C379">CTRL+C</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> quit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">172.17.0.1</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [18/Feb/2020 </span><span style="color:#98C379;--shiki-dark:#98C379">09:08:31]</span><span style="color:#98C379;--shiki-dark:#98C379"> "GET / HTTP/1.1"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">^C</span></span></code></pre>
</div><p>参数说明：</p>
<ul>
<li><code>-f</code>: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</li>
</ul>
<p>从上面，我们可以看到应用程序使用的是 5000 端口并且能够查看到应用程序的访问日志。</p>
<h3>2.3 查看WEB应用程序容器的进程</h3>
<p>我们还可以使用 docker top 来查看容器内部运行的进程</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker top hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">UID</span><span style="color:#98C379;--shiki-dark:#98C379">                 PID</span><span style="color:#98C379;--shiki-dark:#98C379">                 PPID</span><span style="color:#98C379;--shiki-dark:#98C379">                C</span><span style="color:#98C379;--shiki-dark:#98C379">                   STIME</span><span style="color:#98C379;--shiki-dark:#98C379">               TTY</span><span style="color:#98C379;--shiki-dark:#98C379">                 TIME</span><span style="color:#98C379;--shiki-dark:#98C379">                CMD</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#D19A66;--shiki-dark:#D19A66">                2614</span><span style="color:#D19A66;--shiki-dark:#D19A66">                2597</span><span style="color:#D19A66;--shiki-dark:#D19A66">                0</span><span style="color:#98C379;--shiki-dark:#98C379">                   17:07</span><span style="color:#98C379;--shiki-dark:#98C379">               ?</span><span style="color:#98C379;--shiki-dark:#98C379">                   00:00:00</span><span style="color:#98C379;--shiki-dark:#98C379">            python</span><span style="color:#98C379;--shiki-dark:#98C379"> app.py</span></span></code></pre>
</div><h3>2.4 检查 WEB 应用程序</h3>
<p>使用 docker inspect 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker inspect hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Id"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Created"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"2020-02-18T09:07:32.827193286Z"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Path"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"python"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Args"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "app.py"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "State"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Status"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"running"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Running"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Paused"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Restarting"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "OOMKilled"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Dead"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Pid"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 2614,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ExitCode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Error"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "StartedAt"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"2020-02-18T09:07:33.374368448Z"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "FinishedAt"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"0001-01-01T00:00:00Z"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Image"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"sha256:6fae60ef344644649a39240b94d73b8ba9c67f898ede85cf8e947a887b3e6557"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ResolvConfPath"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/containers/5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a/resolv.conf"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "HostnamePath"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/containers/5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a/hostname"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "HostsPath"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/containers/5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a/hosts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "LogPath"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/containers/5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a/5da3588d5bc43a9ed3aa61fb87f98220c9719d2879b616404d443aaae6cee77a-json.log"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/hopeful_bardeen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "RestartCount"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"overlay2"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Platform"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"linux"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "MountLabel"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ProcessLabel"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "AppArmorProfile"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ExecIDs"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "HostConfig"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Binds"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ContainerIDFile"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "LogConfig"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Type"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"json-file"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Config"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "NetworkMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"default"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "PortBindings"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "5000/tcp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                        "HostIp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                        "HostPort"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"5001"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "RestartPolicy"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"no"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "MaximumRetryCount"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "AutoRemove"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "VolumeDriver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "VolumesFrom"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CapAdd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CapDrop"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Capabilities"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Dns"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "DnsOptions"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "DnsSearch"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ExtraHosts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "GroupAdd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IpcMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"private"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Cgroup"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Links"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "OomScoreAdj"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "PidMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Privileged"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "PublishAllPorts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ReadonlyRootfs"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "SecurityOpt"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "UTSMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "UsernsMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ShmSize"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 67108864,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Runtime"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"runc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ConsoleSize"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                0,</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">                0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Isolation"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuShares"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Memory"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "NanoCpus"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CgroupParent"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioWeight"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioWeightDevice"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioDeviceReadBps"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioDeviceWriteBps"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioDeviceReadIOps"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "BlkioDeviceWriteIOps"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuPeriod"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuQuota"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuRealtimePeriod"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuRealtimeRuntime"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpusetCpus"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpusetMems"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Devices"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "DeviceCgroupRules"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "DeviceRequests"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "KernelMemory"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "KernelMemoryTCP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "MemoryReservation"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "MemorySwap"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "MemorySwappiness"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "OomKillDisable"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "PidsLimit"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Ulimits"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuCount"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "CpuPercent"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IOMaximumIOps"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IOMaximumBandwidth"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "MaskedPaths"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/asound"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/acpi"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/kcore"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/keys"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/latency_stats"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/timer_list"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/timer_stats"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/sched_debug"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/scsi"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/sys/firmware"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ReadonlyPaths"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/bus"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/fs"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/irq"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/sys"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "/proc/sysrq-trigger"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "GraphDriver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Data"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "LowerDir"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/overlay2/c6594e5b70feca02eb4b90ac75aba711f36378d5cb9853ffca1ec92f9d0c3e14-init/diff:/var/lib/docker/overlay2/d4690a06236a3857a2a51ab84c61992e50ea3e1a613f4793334916604ea0dfa0/diff:/var/lib/docker/overlay2/c45d0215cd2076174f38fea5003c3ff11a5ba2df2141d9d069f4bf32dac9a22a/diff:/var/lib/docker/overlay2/1cf63068912234a1f4c861f58f155423c87193c6e438948db493687d4da4f0a0/diff:/var/lib/docker/overlay2/55e4ecb04b1ff8d048bc75bb8698c782c813d45caa6f0d82ac6c49adec24bead/diff:/var/lib/docker/overlay2/27fa0dc314b851b8d2f0386d230a725f57117f9f1ccdb49ca27f5ad424cb4a90/diff:/var/lib/docker/overlay2/65a5a082188d9e0b9aaf09c2e9c3b3f8141f74c781996680dfaca63d81672cdf/diff:/var/lib/docker/overlay2/658a33c92cf114ee4cbc10f117207a0c813e39a908acc014fbce1783a28bc654/diff:/var/lib/docker/overlay2/e5b5c9e0abc43ff2750dcd33decc65d90d733b18f2626b91c500d803d7fe189b/diff:/var/lib/docker/overlay2/0b5181e429a89f6ab291e090b972e11718e4f63158ed60af1fce18095d0352a6/diff:/var/lib/docker/overlay2/f7c0405739bb58fdfa9af402a72507b78bc2a48b0d74356dad59495906b6e0e5/diff:/var/lib/docker/overlay2/073c45ae4a6ff27950a1dd969a675d3dcdc18392bb205ddde5913fcc10a751ef/diff:/var/lib/docker/overlay2/f92534844c8cc5b950ea36369b8e4a7dd7f7749e73483908e5d129bf5c26442f/diff:/var/lib/docker/overlay2/477378381d03c4b347d7b9224c4c9023b5dfbfde32022c7eb8af32e7a01b88b2/diff"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "MergedDir"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/overlay2/c6594e5b70feca02eb4b90ac75aba711f36378d5cb9853ffca1ec92f9d0c3e14/merged"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "UpperDir"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/overlay2/c6594e5b70feca02eb4b90ac75aba711f36378d5cb9853ffca1ec92f9d0c3e14/diff"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "WorkDir"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/lib/docker/overlay2/c6594e5b70feca02eb4b90ac75aba711f36378d5cb9853ffca1ec92f9d0c3e14/work"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"overlay2"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Mounts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Config"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Hostname"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"5da3588d5bc4"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Domainname"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "User"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "AttachStdin"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "AttachStdout"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "AttachStderr"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "ExposedPorts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "5000/tcp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Tty"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "OpenStdin"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "StdinOnce"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Env"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Cmd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "python"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "app.py"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ],</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Image"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"training/webapp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Volumes"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "WorkingDir"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/opt/webapp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Entrypoint"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "OnBuild"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Labels"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "NetworkSettings"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "SandboxID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"66e1f111a5d7acca71f0e9e24516a6945bca428f55ac1eab1576c99bde16190c"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "HairpinMode"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "LinkLocalIPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "LinkLocalIPv6PrefixLen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Ports"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "5000/tcp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                        "HostIp"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                        "HostPort"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"5001"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "SandboxKey"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"/var/run/docker/netns/66e1f111a5d7"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "SecondaryIPAddresses"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "SecondaryIPv6Addresses"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "EndpointID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"794d5e97cd3bbb62c8a7a850f125404d174ecc45df4e704dbee403b1be7a2835"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "GlobalIPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "GlobalIPv6PrefixLen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IPAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.3"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IPPrefixLen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 16,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "IPv6Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "MacAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"02:42:ac:11:00:03"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Networks"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "IPAMConfig"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Links"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Aliases"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "NetworkID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "EndpointID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"794d5e97cd3bbb62c8a7a850f125404d174ecc45df4e704dbee403b1be7a2835"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "IPAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.3"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "IPPrefixLen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 16,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "IPv6Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "GlobalIPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "GlobalIPv6PrefixLen"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: 0,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "MacAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"02:42:ac:11:00:03"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "DriverOpts"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.5 停止 WEB 应用容器</h3>
<p>再复习下docker的停止</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker stop hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> 'hopeful_bardeen'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5da3588d5bc4</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">      "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">      13</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Exited</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (137) 12 seconds ago                             hopeful_bardeen</span></span></code></pre>
</div><h3>2.6 重启WEB应用容器</h3>
<p>已经停止的容器，我们可以使用命令 docker start 或者docker restart 来启动。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker restart hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5da3588d5bc4</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">      "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">      14</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">            0.0.0.0:5001</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">    hopeful_bardeen</span></span></code></pre>
</div><h3>2.7 移除WEB应用容器</h3>
<p>我们可以使用 docker rm 命令来删除不需要的容器</p>
<p>我们上文也讲过，如果是启动着的docker实例，需要加-f，强制（force）删除。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5da3588d5bc4</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">      "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">      14</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">            0.0.0.0:5001</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">    hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker rm -f hopeful_bardeen</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> hopeful_bardeen</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]#</span></span></code></pre>
</div><h2>3. 与其它容器（DB容器）互联</h2>
<blockquote>
<p>上述是一个web单一容器通过端口映射，可以通过主机端口访问容器；那么如果需要访问数据库，就涉及到容器互联。</p>
</blockquote>
<h3>3.1 与数据库容器互联</h3>
<ul>
<li>先停止上述的web容器, 且清理所有不用的容器</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">                COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">              CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">                    PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">                     NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae2184</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">      "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">      18</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 18</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379">               0.0.0.0:32768</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">   gifted_agnesi</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11de9755a084</span><span style="color:#98C379;--shiki-dark:#98C379">        pdai/ubuntu:v2.0.2</span><span style="color:#98C379;--shiki-dark:#98C379">   "/bin/bash"</span><span style="color:#D19A66;--shiki-dark:#D19A66">          24</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Exited</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0) 24 hours ago                             pdai-ubuntu-202</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">57bd797570b6</span><span style="color:#98C379;--shiki-dark:#98C379">        pdai/ubuntu:v2.0.2</span><span style="color:#98C379;--shiki-dark:#98C379">   "--name pdai-test"</span><span style="color:#D19A66;--shiki-dark:#D19A66">   24</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Created</span><span style="color:#98C379;--shiki-dark:#98C379">                                             sharp_brahmagupta</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker stop ec3eb9ae2184</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae2184</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">                COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">              CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">                        PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">               NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae2184</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">      "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">      18</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Exited</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (137) 29 seconds ago                       gifted_agnesi</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11de9755a084</span><span style="color:#98C379;--shiki-dark:#98C379">        pdai/ubuntu:v2.0.2</span><span style="color:#98C379;--shiki-dark:#98C379">   "/bin/bash"</span><span style="color:#D19A66;--shiki-dark:#D19A66">          24</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Exited</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0) 24 hours ago                           pdai-ubuntu-202</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">57bd797570b6</span><span style="color:#98C379;--shiki-dark:#98C379">        pdai/ubuntu:v2.0.2</span><span style="color:#98C379;--shiki-dark:#98C379">   "--name pdai-test"</span><span style="color:#D19A66;--shiki-dark:#D19A66">   24</span><span style="color:#98C379;--shiki-dark:#98C379"> hours</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">        Created</span><span style="color:#98C379;--shiki-dark:#98C379">                                           sharp_brahmagupta</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker container prune</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">WARNING!</span><span style="color:#98C379;--shiki-dark:#98C379"> This</span><span style="color:#98C379;--shiki-dark:#98C379"> will</span><span style="color:#98C379;--shiki-dark:#98C379"> remove</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> stopped</span><span style="color:#98C379;--shiki-dark:#98C379"> containers.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Are</span><span style="color:#98C379;--shiki-dark:#98C379"> you</span><span style="color:#98C379;--shiki-dark:#98C379"> sure</span><span style="color:#98C379;--shiki-dark:#98C379"> you</span><span style="color:#98C379;--shiki-dark:#98C379"> want</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> continue?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [y/N] y</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Deleted</span><span style="color:#98C379;--shiki-dark:#98C379"> Containers:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ec3eb9ae218494d5aa5902c1ca4435733567b5e81319f02e5d2509d45cbc25da</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11de9755a08402d963d263a559a7daf48f4a2188398f258641240b5eb50fbc89</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">57bd797570b68b6587b16809889e6e8f710ec7a934229aa6391add02f758e036</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Total</span><span style="color:#98C379;--shiki-dark:#98C379"> reclaimed</span><span style="color:#98C379;--shiki-dark:#98C379"> space:</span><span style="color:#98C379;--shiki-dark:#98C379"> 89B</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]#</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>创建一个新的数据库容器。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d --name db training/postgres</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Unable</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> image</span><span style="color:#98C379;--shiki-dark:#98C379"> 'training/postgres:latest'</span><span style="color:#98C379;--shiki-dark:#98C379"> locally</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">latest:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pulling</span><span style="color:#98C379;--shiki-dark:#98C379"> from</span><span style="color:#98C379;--shiki-dark:#98C379"> training/postgres</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Image</span><span style="color:#98C379;--shiki-dark:#98C379"> docker.io/training/postgres:latest</span><span style="color:#98C379;--shiki-dark:#98C379"> uses</span><span style="color:#98C379;--shiki-dark:#98C379"> outdated</span><span style="color:#98C379;--shiki-dark:#98C379"> schema1</span><span style="color:#98C379;--shiki-dark:#98C379"> manifest</span><span style="color:#98C379;--shiki-dark:#98C379"> format.</span><span style="color:#98C379;--shiki-dark:#98C379"> Please</span><span style="color:#98C379;--shiki-dark:#98C379"> upgrade</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> schema2</span><span style="color:#98C379;--shiki-dark:#98C379"> image</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> better</span><span style="color:#98C379;--shiki-dark:#98C379"> future</span><span style="color:#98C379;--shiki-dark:#98C379"> compatibility.</span><span style="color:#98C379;--shiki-dark:#98C379"> More</span><span style="color:#98C379;--shiki-dark:#98C379"> information</span><span style="color:#98C379;--shiki-dark:#98C379"> at</span><span style="color:#98C379;--shiki-dark:#98C379"> https://docs.docker.com/registry/spec/deprecated-schema-v1/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">a3ed95caeb02:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">6e71c809542e:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2978d9af87ba:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">e1bca35b062f:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">500b6decf741:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">74b14ef2151f:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">7afd5ed3826e:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3c69bb244f5e:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d86f9ec5aedf:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">010fabf20157:</span><span style="color:#98C379;--shiki-dark:#98C379"> Pull</span><span style="color:#98C379;--shiki-dark:#98C379"> complete</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Digest:</span><span style="color:#98C379;--shiki-dark:#98C379"> sha256:a945dc6dcfbc8d009c3d972931608344b76c2870ce796da00a827bd50791907e</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Status:</span><span style="color:#98C379;--shiki-dark:#98C379"> Downloaded</span><span style="color:#98C379;--shiki-dark:#98C379"> newer</span><span style="color:#98C379;--shiki-dark:#98C379"> image</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> training/postgres:latest</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d992e3c761e00649eb436b88c737adc54093b76119af0fb7878596b523f743ca</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">                  CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">               NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d992e3c761e0</span><span style="color:#98C379;--shiki-dark:#98C379">        training/postgres</span><span style="color:#98C379;--shiki-dark:#98C379">   "su postgres -c '/us…"</span><span style="color:#D19A66;--shiki-dark:#D19A66">   9</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">       Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">        5432/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">            db</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>db 容器和 web 容器建立互联关系</li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d -p 5001:5000 --name web --link db:db training/webapp python app.py</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1cbc9aeba2a8a826d460ecb49de17ddf8ac336e150c752a3c762fd38a3e15254</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">                  CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">                    NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1cbc9aeba2a8</span><span style="color:#98C379;--shiki-dark:#98C379">        training/webapp</span><span style="color:#98C379;--shiki-dark:#98C379">     "python app.py"</span><span style="color:#D19A66;--shiki-dark:#D19A66">          5</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">       Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds</span><span style="color:#98C379;--shiki-dark:#98C379">        0.0.0.0:5001</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#98C379;--shiki-dark:#98C379">5000/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">   web</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d992e3c761e0</span><span style="color:#98C379;--shiki-dark:#98C379">        training/postgres</span><span style="color:#98C379;--shiki-dark:#98C379">   "su postgres -c '/us…"</span><span style="color:#D19A66;--shiki-dark:#D19A66">   7</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">       Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379">        5432/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">                 db</span></span></code></pre>
</div><p>--link 参数的格式为 --link name:alias，其中 name 是要链接的容器的名称，alias 是这个连接的别名。</p>
<blockquote>
<p>Docker 在两个互联的容器之间创建了一个安全隧道，而且不用映射它们的端口到宿主主机上。在启动 db 容器的时候并没有使用 -p 和 -P 标记，从而避免了暴露数据库端口到外部网络上。</p>
</blockquote>
<h3>3.2容器公开的连接信息</h3>
<p>Docker 通过 2 种方式为容器公开连接信息：</p>
<ul>
<li>环境变量</li>
<li>更新 /etc/hosts 文件</li>
</ul>
<h4>3.2.1环境变量</h4>
<p>使用 env 命令来查看 web 容器的环境变量</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker exec -it web /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@1cbc9aeba2a8:/opt/webapp#</span><span style="color:#98C379;--shiki-dark:#98C379"> env</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">HOSTNAME</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">1cbc9aeba2a8</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_NAME</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">/web/db</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_PORT_5432_TCP_ADDR</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">172.17.0.2</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_PORT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">tcp://172.17.0.2:5432</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_PORT_5432_TCP</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">tcp://172.17.0.2:5432</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">PATH</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">PWD</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">/opt/webapp</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_PORT_5432_TCP_PORT</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">5432</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">SHLVL</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">1</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">HOME</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">/root</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_PORT_5432_TCP_PROTO</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">tcp</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">DB_ENV_PG_VERSION</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">9.3</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">_</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">/usr/bin/env</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名。</p>
<h4>3.2.2 hosts 文件</h4>
<p>除了环境变量，Docker 还添加 host 信息到父容器的 /etc/hosts 的文件。下面是父容器 web 的 hosts 文件</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@1cbc9aeba2a8:/opt/webapp#</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/hosts</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1</span><span style="color:#98C379;--shiki-dark:#98C379">       localhost</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">:</span><span style="color:#98C379;--shiki-dark:#98C379">:1</span><span style="color:#98C379;--shiki-dark:#98C379">     localhost</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-localhost</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-loopback</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">fe00::0</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-localnet</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ff00::0</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-mcastprefix</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ff02::1</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-allnodes</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ff02::2</span><span style="color:#98C379;--shiki-dark:#98C379"> ip6-allrouters</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">172.17.0.2</span><span style="color:#98C379;--shiki-dark:#98C379">      db</span><span style="color:#98C379;--shiki-dark:#98C379"> d992e3c761e0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">172.17.0.3</span><span style="color:#98C379;--shiki-dark:#98C379">      1cbc9aeba2a8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@1cbc9aeba2a8:/opt/webapp#</span></span></code></pre>
</div><p>这里有 2 个 hosts:</p>
<ul>
<li>第一个, <code>172.17.0.2 db d992e3c761e0</code> 表示 db 容器的 ip, ID和Name</li>
<li>第二个，<code>172.17.0.3 1cbc9aeba2a8</code> 表示 web 容器的 ip, ID</li>
</ul>
<p>可以在 web 容器中安装 ping 命令来测试跟db容器的连通。</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>root@1cbc9aeba2a8:/opt/webapp# apt-get install -yqq inetutils-ping</span></span>
<span class="line"><span>(Reading database ... 18233 files and directories currently installed.)</span></span>
<span class="line"><span>Removing ubuntu-minimal (1.325) ...</span></span>
<span class="line"><span>Removing iputils-ping (3:20121221-4ubuntu1.1) ...</span></span>
<span class="line"><span>Selecting previously unselected package inetutils-ping.</span></span>
<span class="line"><span>(Reading database ... 18221 files and directories currently installed.)</span></span>
<span class="line"><span>Preparing to unpack .../inetutils-ping_2%3a1.9.2-1_amd64.deb ...</span></span>
<span class="line"><span>Unpacking inetutils-ping (2:1.9.2-1) ...</span></span>
<span class="line"><span>Setting up inetutils-ping (2:1.9.2-1) ...</span></span>
<span class="line"><span>root@1cbc9aeba2a8:/opt/webapp# ping db</span></span>
<span class="line"><span>PING db (172.17.0.2): 56 data bytes</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=0 ttl=64 time=0.110 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.092 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.094 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.104 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.111 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.093 ms</span></span>
<span class="line"><span>64 bytes from 172.17.0.2: icmp_seq=6 ttl=64 time=0.095 ms</span></span>
<span class="line"><span>^C</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker基础 - Docker数据卷和数据管理</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-06-data.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-06-data.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - Docker数据卷和数据管理</source>
      <description>Docker基础 - Docker数据卷和数据管理 Docker 容器的数据放哪里呢？ 本文带你理解如何在 Docker 内部以及容器之间管理数据 1. Docker 数据管理简介 实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Docker 容器的数据放哪里呢？ 本文带你理解如何在 Docker 内部以及容器之间管理数据</p>
</blockquote>
<h2>1. Docker 数据管理简介</h2>
<blockquote>
<p>实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数据怎么办呢？容器运行的时候我们可以进容器去查看，容器一旦删除就什么都没有了。</p>
</blockquote>
<p>所以数据卷就是来解决这个问题的，是<strong>用来将数据持久化到我们宿主机上，与容器间实现数据共享，简单的说就是将宿主机的目录映射到容器中的目录</strong>，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存储到我们宿主机上的真实磁盘中。</p>
<h3>1.1 数据卷(Data Volume)</h3>
<p>数据卷(Data Volume)是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li>数据卷可以在容器之间共享和重用</li>
<li>对数据卷的修改会立马生效</li>
<li>对数据卷的更新，不会影响镜像</li>
<li>卷会一直存在，直到没有容器使用</li>
</ul>
<h4>1.1.1 建一个数据卷</h4>
<blockquote>
<p>在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。</p>
</blockquote>
<p>下面创建一个 web 容器，并加载一个数据卷到容器的 /webapp-data 目录。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d -P --name web -v /webapp-data training/webapp python app.py</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">e331e83e59486a131919cba8698b24eaee051a947838bb1c15c03df8b3464b97</span></span></code></pre>
</div><p>我们看下容器内部是否生成/webapp-data目录</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker exec -it web /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@e331e83e5948:/opt/webapp#</span><span style="color:#98C379;--shiki-dark:#98C379"> cd</span><span style="color:#98C379;--shiki-dark:#98C379"> /webapp-data</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@e331e83e5948:/webapp-data#</span><span style="color:#98C379;--shiki-dark:#98C379"> ll</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">total</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">drwxr-xr-x</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4096</span><span style="color:#98C379;--shiki-dark:#98C379"> Feb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#98C379;--shiki-dark:#98C379"> 01:24</span><span style="color:#98C379;--shiki-dark:#98C379"> ./</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">drwxr-xr-x</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4096</span><span style="color:#98C379;--shiki-dark:#98C379"> Feb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#98C379;--shiki-dark:#98C379"> 01:24</span><span style="color:#98C379;--shiki-dark:#98C379"> ../</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@e331e83e5948:/webapp-data#</span></span></code></pre>
</div><p>注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。</p>
<h4>1.1.2 挂载一个主机目录作为数据卷</h4>
<blockquote>
<p>使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker rm -f web</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">web</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai opt]# docker run -d --name web -v /opt/webapp-data5:/opt/webapp2 training/webapp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">fce27f6ea9ce9699864644a48aed6db8b772c96be36f46bee6154d2e2c9915b9</span></span></code></pre>
</div><p>我们验证下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai opt]# docker exec -it web /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@fce27f6ea9ce:/opt/webapp#</span><span style="color:#98C379;--shiki-dark:#98C379"> cd</span><span style="color:#98C379;--shiki-dark:#98C379"> ..</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@fce27f6ea9ce:/opt#</span><span style="color:#98C379;--shiki-dark:#98C379"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">webapp</span><span style="color:#98C379;--shiki-dark:#98C379">  webapp2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@fce27f6ea9ce:/opt#</span><span style="color:#98C379;--shiki-dark:#98C379"> cd</span><span style="color:#98C379;--shiki-dark:#98C379"> webapp2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@fce27f6ea9ce:/opt/webapp2#</span><span style="color:#98C379;--shiki-dark:#98C379"> mkdir</span><span style="color:#98C379;--shiki-dark:#98C379"> test</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@fce27f6ea9ce:/opt/webapp2#</span><span style="color:#98C379;--shiki-dark:#98C379"> exit</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">exit</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai opt]# cd webapp-data5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai webapp-data5]# ll</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">total</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">drwxr-xr-x</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4096</span><span style="color:#98C379;--shiki-dark:#98C379"> Feb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#98C379;--shiki-dark:#98C379"> 10:12</span><span style="color:#98C379;--shiki-dark:#98C379"> test</span></span></code></pre>
</div><p>上面的命令加载主机的 /opt/webapp-data5 目录到容器的 /opt/webapp2 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。<strong>本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它</strong>。</p>
<p>*注意：Dockerfile 显然是不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的, 因为不同操作系统的路径格式不一样，所以目前还不能支持。</p>
<p>我们删除容器，看主机上数据是否会被删除</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai opt]# docker rm -f web</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">web</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai opt]# cd /opt/webapp-data5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai webapp-data5]# ll</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">total</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">drwxr-xr-x</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4096</span><span style="color:#98C379;--shiki-dark:#98C379"> Feb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#98C379;--shiki-dark:#98C379"> 10:12</span><span style="color:#98C379;--shiki-dark:#98C379"> test</span></span></code></pre>
</div><p>很明显，没有被删除</p>
<h4>1.1.3 挂载一个本地主机文件作为数据卷</h4>
<blockquote>
<p>-v 标记也可以从主机挂载单个文件到容器中</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@79eca07938db:/#</span><span style="color:#98C379;--shiki-dark:#98C379"> ll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> .bash_history</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-rw</span></span></code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Docker基础 - Docker四种网络模式</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-07-network.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-07-network.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - Docker四种网络模式</source>
      <description>Docker基础 - Docker四种网络模式 1. Docker网络原理 当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。 同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918 中定义）中的一个地址给...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Docker网络原理</h2>
<p>当 Docker 启动时，<strong>会自动在主机上创建一个 <code>docker0</code> 虚拟网桥</strong>，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>
<p>同时，<strong>Docker 随机分配一个本地未占用的私有网段</strong>（在 <a href="https://datatracker.ietf.org/doc/html/rfc1918" target="_blank" rel="noopener noreferrer">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>
<p>当<strong>创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口</strong>（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。<strong>这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）</strong>。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231013435.png" alt="image-20220615173424184" tabindex="0" loading="lazy"><figcaption>image-20220615173424184</figcaption></figure>
<h3>1.1 Docker 默认网桥原理</h3>
<p>在你安装Docker 服务<strong>默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络</strong>。</p>
<p>我们可用 docker network ls 命令查看：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> network</span><span style="color:#98C379;--shiki-dark:#98C379"> ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NETWORK</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">          NAME</span><span style="color:#98C379;--shiki-dark:#98C379">                DRIVER</span><span style="color:#98C379;--shiki-dark:#98C379">              SCOPE</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">b8c5abdb0bec</span><span style="color:#98C379;--shiki-dark:#98C379">        bridge</span><span style="color:#98C379;--shiki-dark:#98C379">              bridge</span><span style="color:#98C379;--shiki-dark:#98C379">              local</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">84e86bc93121</span><span style="color:#98C379;--shiki-dark:#98C379">        host</span><span style="color:#98C379;--shiki-dark:#98C379">                host</span><span style="color:#98C379;--shiki-dark:#98C379">                local</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">8e521527a897</span><span style="color:#98C379;--shiki-dark:#98C379">        none</span><span style="color:#98C379;--shiki-dark:#98C379">                null</span><span style="color:#98C379;--shiki-dark:#98C379">                local</span></span></code></pre>
</div><p>Docker 安装时会自动在 host 上创建三个网络：none，host，和bridge。</p>
<h4>1.1.1 查看docker0 网桥</h4>
<p>我们看下docker0 网桥：(brctl可以通过yum install bridge-utils安装)</p>
<p>主要命令如下</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>brctl show</span></span>
<span class="line"><span>ip a</span></span>
<span class="line"><span>ip route</span></span></code></pre>
</div><p>执行详情如下</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# brctl show</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span><span style="color:#98C379;--shiki-dark:#98C379">     bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> id</span><span style="color:#98C379;--shiki-dark:#98C379">               STP</span><span style="color:#98C379;--shiki-dark:#98C379"> enabled</span><span style="color:#98C379;--shiki-dark:#98C379">     interfaces</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker0</span><span style="color:#98C379;--shiki-dark:#98C379">         8000.0242703f9d02</span><span style="color:#98C379;--shiki-dark:#98C379">       no</span><span style="color:#98C379;--shiki-dark:#98C379">              veth0004826</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                                                        veth4ad3278</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# ip a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1:</span><span style="color:#98C379;--shiki-dark:#98C379"> lo:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">LOOPBACK,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 65536</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UNKNOWN</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> qlen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/loopback</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1/8</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> host</span><span style="color:#98C379;--shiki-dark:#98C379"> lo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2:</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> pfifo_fast</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> qlen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:16:3e:08:c1:ea</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 172.31.165.194/20</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.31.175.255</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> global</span><span style="color:#98C379;--shiki-dark:#98C379"> dynamic</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> 310072401sec</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> 310072401sec</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3:</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 02:42:70:3f:9d:02</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 172.17.0.1/16</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.17.255.255</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> global</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">45:</span><span style="color:#98C379;--shiki-dark:#98C379"> veth4ad3278@if44:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> c2:77:e4:ea:f1:33</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span><span style="color:#98C379;--shiki-dark:#98C379"> link-netnsid</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">49:</span><span style="color:#98C379;--shiki-dark:#98C379"> veth0004826@if48:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 6e:c9:1a:7c:18:b1</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span><span style="color:#98C379;--shiki-dark:#98C379"> link-netnsid</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# ip route</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">default</span><span style="color:#98C379;--shiki-dark:#98C379"> via</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.31.175.253</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">169.254.0.0/16</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> link</span><span style="color:#98C379;--shiki-dark:#98C379"> metric</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1002</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">172.17.0.0/16</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span><span style="color:#98C379;--shiki-dark:#98C379"> proto</span><span style="color:#98C379;--shiki-dark:#98C379"> kernel</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> link</span><span style="color:#98C379;--shiki-dark:#98C379"> src</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.17.0.1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">172.31.160.0/20</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span><span style="color:#98C379;--shiki-dark:#98C379"> proto</span><span style="color:#98C379;--shiki-dark:#98C379"> kernel</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> link</span><span style="color:#98C379;--shiki-dark:#98C379"> src</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.31.165.194</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>1.1.2 查看bridge网络</h4>
<p>再用docker network inspect指令查看bridge网络：其Gateway就是网卡/接口docker0的IP地址：172.17.0.1。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker network inspect bridge</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Id"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Created"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"2020-02-17T14:10:10.424119543+08:00"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Scope"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"local"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "EnableIPv6"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "IPAM"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"default"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Config"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Subnet"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.0/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.1"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Internal"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Attachable"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Ingress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigFrom"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Network"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigOnly"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Containers"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "1cbc9aeba2a8a826d460ecb49de17ddf8ac336e150c752a3c762fd38a3e15254"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"web"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "EndpointID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"adb47ed0c60c6b80a442c71a5f35d63378cecca9598e0cef8409a6719552f4c2"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "MacAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"02:42:ac:11:00:03"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv4Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.3/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "d992e3c761e00649eb436b88c737adc54093b76119af0fb7878596b523f743ca"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"db"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "EndpointID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"6a3dab5c545dd26e0ca6e36d928a32fd0a6197c8dbf4eeb718a4560e219575ed"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "MacAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"02:42:ac:11:00:02"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv4Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.2/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.default_bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_icc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_ip_masquerade"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.host_binding_ipv4"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"docker0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.driver.mtu"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"1500"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Labels"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面你可以看到bridge的配置信息和容器信息。</p>
<h3>1.2 理解容器创建时的IP分配</h3>
<blockquote>
<p>为了理解容器创建时的IP分配，这里需要清理所有已经启动的环境，然后再启动容器，看前后对比</p>
</blockquote>
<h4>1.2.1 空容器情况</h4>
<ul>
<li>我们<strong>清理所有容器</strong>实例，下面展示的就是docker安装之后的, 注意和上面的对比下：</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">             CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">               NAMES</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker network ls</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NETWORK</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">          NAME</span><span style="color:#98C379;--shiki-dark:#98C379">                DRIVER</span><span style="color:#98C379;--shiki-dark:#98C379">              SCOPE</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">b8c5abdb0bec</span><span style="color:#98C379;--shiki-dark:#98C379">        bridge</span><span style="color:#98C379;--shiki-dark:#98C379">              bridge</span><span style="color:#98C379;--shiki-dark:#98C379">              local</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">84e86bc93121</span><span style="color:#98C379;--shiki-dark:#98C379">        host</span><span style="color:#98C379;--shiki-dark:#98C379">                host</span><span style="color:#98C379;--shiki-dark:#98C379">                local</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">8e521527a897</span><span style="color:#98C379;--shiki-dark:#98C379">        none</span><span style="color:#98C379;--shiki-dark:#98C379">                null</span><span style="color:#98C379;--shiki-dark:#98C379">                local</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker network inspect bridge</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Id"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Created"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"2020-02-17T14:10:10.424119543+08:00"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Scope"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"local"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "EnableIPv6"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "IPAM"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"default"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Config"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Subnet"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.0/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.1"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Internal"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Attachable"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Ingress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigFrom"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Network"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigOnly"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Containers"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {},</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.default_bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_icc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_ip_masquerade"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.host_binding_ipv4"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"docker0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.driver.mtu"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"1500"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Labels"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# ip a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1:</span><span style="color:#98C379;--shiki-dark:#98C379"> lo:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">LOOPBACK,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 65536</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UNKNOWN</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> qlen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/loopback</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1/8</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> host</span><span style="color:#98C379;--shiki-dark:#98C379"> lo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2:</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> pfifo_fast</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> qlen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:16:3e:08:c1:ea</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 172.31.165.194/20</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.31.175.255</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> global</span><span style="color:#98C379;--shiki-dark:#98C379"> dynamic</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> 310069965sec</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> 310069965sec</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3:</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">NO-CARRIER,BROADCAST,MULTICAST,U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> DOWN</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 02:42:70:3f:9d:02</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 172.17.0.1/16</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.17.255.255</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> global</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# brctl show</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span><span style="color:#98C379;--shiki-dark:#98C379">     bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> id</span><span style="color:#98C379;--shiki-dark:#98C379">               STP</span><span style="color:#98C379;--shiki-dark:#98C379"> enabled</span><span style="color:#98C379;--shiki-dark:#98C379">     interfaces</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker0</span><span style="color:#98C379;--shiki-dark:#98C379">         8000.0242703f9d02</span><span style="color:#98C379;--shiki-dark:#98C379">       no</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>1.2.2 <strong>创建容器</strong></h4>
<p>Docker 在创建一个容器的时候，会执行如下操作：</p>
<ul>
<li>创建一对虚拟接口/网卡，也就是veth pair，分别放到本地主机和新容器中；</li>
<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethxxxxx；</li>
<li>容器一端放到新容器中，并修改名字作为 eth0，这个网卡/接口只在容器的名字空间可见；</li>
<li>从网桥可用地址段中（也就是与该bridge对应的network）获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethxxxx。</li>
</ul>
<p>让我们启动一个容器，看下变化：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker run -d --name db training/postgres</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">0ffd1092cd962bdbe335ce042b93d0f2082559600cacc82bbef40b8b66395e57</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# brctl show</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span><span style="color:#98C379;--shiki-dark:#98C379">     bridge</span><span style="color:#98C379;--shiki-dark:#98C379"> id</span><span style="color:#98C379;--shiki-dark:#98C379">               STP</span><span style="color:#98C379;--shiki-dark:#98C379"> enabled</span><span style="color:#98C379;--shiki-dark:#98C379">     interfaces</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker0</span><span style="color:#98C379;--shiki-dark:#98C379">         8000.0242703f9d02</span><span style="color:#98C379;--shiki-dark:#98C379">       no</span><span style="color:#98C379;--shiki-dark:#98C379">              vethd93e2ad</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# ip a | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> vethd93e2ad</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">51:</span><span style="color:#98C379;--shiki-dark:#98C379"> vethd93e2ad@if50:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> docker0</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker network inspect bridge</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Id"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Created"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"2020-02-17T14:10:10.424119543+08:00"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Scope"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"local"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "EnableIPv6"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "IPAM"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Driver"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"default"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: null,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Config"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Subnet"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.0/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                    "Gateway"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.1"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Internal"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Attachable"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Ingress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigFrom"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "Network"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "ConfigOnly"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">false</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Containers"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "0ffd1092cd962bdbe335ce042b93d0f2082559600cacc82bbef40b8b66395e57"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "Name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"db"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "EndpointID"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"a90cb50031effc99b9254fe4f1231bfbac8c4bb23d94c5a1425c1e116ac452dc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "MacAddress"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"02:42:ac:11:00:02"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv4Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"172.17.0.2/16"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "IPv6Address"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Options"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.default_bridge"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_icc"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.enable_ip_masquerade"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"true"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.host_binding_ipv4"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.bridge.name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"docker0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "com.docker.network.driver.mtu"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"1500"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "Labels"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不指定--network，创建的容器默认都会挂到 docker0 上，使用本地主机上 docker0 接口的 IP 作为所有容器的默认网关</p>
<p>当有多个容器创建后，容器网络拓扑结构如下：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231013480.png" alt="image-20220703225858216" tabindex="0" loading="lazy"><figcaption>image-20220703225858216</figcaption></figure>
<h3>1.3 理解容器和docker0的虚拟网卡的配对</h3>
<blockquote>
<p>在上图中容器中eth0是怎么和host中虚拟网卡配对上的呢？</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker ps -a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONTAINER</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">        IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379">               COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">                  CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">             STATUS</span><span style="color:#98C379;--shiki-dark:#98C379">              PORTS</span><span style="color:#98C379;--shiki-dark:#98C379">               NAMES</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">0ffd1092cd96</span><span style="color:#98C379;--shiki-dark:#98C379">        training/postgres</span><span style="color:#98C379;--shiki-dark:#98C379">   "su postgres -c '/us…"</span><span style="color:#D19A66;--shiki-dark:#D19A66">   11</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">      Up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span><span style="color:#98C379;--shiki-dark:#98C379"> minutes</span><span style="color:#98C379;--shiki-dark:#98C379">       5432/tcp</span><span style="color:#98C379;--shiki-dark:#98C379">            db</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker exec -it 0ffd1092cd96 /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@0ffd1092cd96:/#</span><span style="color:#98C379;--shiki-dark:#98C379"> ip</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1:</span><span style="color:#98C379;--shiki-dark:#98C379"> lo:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">LOOPBACK,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 65536</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UNKNOWN</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> qlen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/loopback</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> 00:00:00:00:00:00</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1/8</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> host</span><span style="color:#98C379;--shiki-dark:#98C379"> lo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">50:</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0@if51:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    link/ether</span><span style="color:#98C379;--shiki-dark:#98C379"> 02:42:ac:11:00:02</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#98C379;--shiki-dark:#98C379"> ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    inet</span><span style="color:#98C379;--shiki-dark:#98C379"> 172.17.0.2/16</span><span style="color:#98C379;--shiki-dark:#98C379"> brd</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.17.255.255</span><span style="color:#98C379;--shiki-dark:#98C379"> scope</span><span style="color:#98C379;--shiki-dark:#98C379"> global</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       valid_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span><span style="color:#98C379;--shiki-dark:#98C379"> preferred_lft</span><span style="color:#98C379;--shiki-dark:#98C379"> forever</span></span></code></pre>
</div><p>我们可以看到host上<code>51: vethd93e2ad@if50</code>对应着容器中<code>50: eth0@if51</code>; 即host中index=51的接口/网卡vethd93e2ad的peer inferface index是50, container中index=50的网卡eth0的peer interface index是51。</p>
<p>可以利用ethtool来确认这种对应关系：分别在host和container中运行指令<code>ethtool -S &lt;interface&gt;</code>:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# ethtool -S vethd93e2ad</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NIC</span><span style="color:#98C379;--shiki-dark:#98C379"> statistics:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     peer_ifindex:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 50</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@pdai ~]# docker exec -it 0ffd1092cd96 /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@0ffd1092cd96:/#</span><span style="color:#98C379;--shiki-dark:#98C379"> ip</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 50</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">50:</span><span style="color:#98C379;--shiki-dark:#98C379"> eth0@if51:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">P&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">mtu</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1500</span><span style="color:#98C379;--shiki-dark:#98C379"> qdisc</span><span style="color:#98C379;--shiki-dark:#98C379"> noqueue</span><span style="color:#98C379;--shiki-dark:#98C379"> state</span><span style="color:#98C379;--shiki-dark:#98C379"> UP</span><span style="color:#98C379;--shiki-dark:#98C379"> group</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root@0ffd1092cd96:/#</span></span></code></pre>
</div><h2>2. 四类网络模式</h2>
<p>安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host</p>
<p>| 网络模式   | 简介                                                         |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231013435.png" type="image/png"/>
    </item>
    <item>
      <title>Docker基础 - Docker入门实战快速上手</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-action.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-action.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - Docker入门实战快速上手</source>
      <description>Docker基础 - Docker入门实战快速上手 简介 镜像 可以理解为安装包 容器 正在运行的程序 宿主机 服务器本身 安装Docker CentOS安装 安装依赖 添加docker安装地址 安装docker 启动docker服务 Ubuntu安装 更新包索引 安装docker 进行初始化 配置镜像加速器 vim /etc/docker/daemo...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>简介</h2>
<h2>镜像</h2>
<p>可以理解为安装包</p>
<h2>容器</h2>
<p>正在运行的程序</p>
<h2>宿主机</h2>
<p>服务器本身</p>
<h1>安装Docker</h1>
<h2>CentOS安装</h2>
<blockquote>
<p>安装依赖</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> yum-utils</span></span></code></pre>
</div><blockquote>
<p>添加docker安装地址</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum-config-manager</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --add-repo</span><span style="color:#98C379;--shiki-dark:#98C379"> https://download.docker.com/linux/centos/docker-ce.repo</span></span></code></pre>
</div><blockquote>
<p>安装docker</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -y</span><span style="color:#98C379;--shiki-dark:#98C379"> docker-ce</span></span></code></pre>
</div><blockquote>
<p>启动docker服务</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">systemctl</span><span style="color:#98C379;--shiki-dark:#98C379"> start</span><span style="color:#98C379;--shiki-dark:#98C379"> docker</span></span></code></pre>
</div><h2>Ubuntu安装</h2>
<blockquote>
<p>更新包索引</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apt</span><span style="color:#98C379;--shiki-dark:#98C379"> update</span></span></code></pre>
</div><blockquote>
<p>安装docker</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apt</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> docker.io</span></span></code></pre>
</div><h2>进行初始化</h2>
<blockquote>
<p>配置镜像加速器</p>
</blockquote>
<p>vim /etc/docker/daemon.json</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    "registry-mirros"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span><span style="color:#98C379;--shiki-dark:#98C379">"https://mirror.ccs.tencent.com"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
</div><blockquote>
<p>重启docker</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">systemctl</span><span style="color:#98C379;--shiki-dark:#98C379"> daemon-reload</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">systemctl</span><span style="color:#98C379;--shiki-dark:#98C379"> restart</span><span style="color:#98C379;--shiki-dark:#98C379"> docker</span></span></code></pre>
</div><blockquote>
<p>查看镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> images</span></span></code></pre>
</div><h1>安装常用软件</h1>
<h2>安装tomcat</h2>
<blockquote>
<p>拉取镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> pull</span><span style="color:#98C379;--shiki-dark:#98C379"> tomcat:9</span></span></code></pre>
</div><blockquote>
<p>运行容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> tomcat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 8080:8080</span><span style="color:#98C379;--shiki-dark:#98C379"> tomcat:9</span></span></code></pre>
</div><h2>安装mysql</h2>
<blockquote>
<p>创建文件夹</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mkdir</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> /data/mysql</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">cd</span><span style="color:#98C379;--shiki-dark:#98C379"> /data/mysql</span></span></code></pre>
</div><blockquote>
<p>编辑配置文件</p>
</blockquote>
<p>vim my.cnf</p>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[client]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">default-character-set</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">utf8mb4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[mysql]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">default-character-set</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">utf8mb4</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[mysqld]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">character-set-server</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">utf8mb4</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">default-time-zone</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">+8:00</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">secure_file_priv</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">NULL</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">max_allowed_packet</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">2G</span></span></code></pre>
</div><blockquote>
<p>拉取mysql镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> pull</span><span style="color:#98C379;--shiki-dark:#98C379"> mysql</span></span></code></pre>
</div><blockquote>
<p>运行mysql</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> mysql</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 3306:3306</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -e</span><span style="color:#98C379;--shiki-dark:#98C379"> MYSQL_ROOT_PASSWORD=</span><span style="color:#D19A66;--shiki-dark:#D19A66">123456</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> /data/mysql:/etc/mysql</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --restart=always</span><span style="color:#98C379;--shiki-dark:#98C379"> mysql</span></span></code></pre>
</div><ul>
<li>创建容器时添加参数 --restart=always 后，当docker重启时，容器自动启动。</li>
</ul>
<h2>安装oracle</h2>
<blockquote>
<p>拉取oracle镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hangzhou.aliyuncs.com/helowin/oracle_11g</span></span></code></pre>
</div><blockquote>
<p>运行容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> oracle</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 1521:1521</span><span style="color:#98C379;--shiki-dark:#98C379"> registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span></span></code></pre>
</div><blockquote>
<p>进入容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> exec</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -it</span><span style="color:#98C379;--shiki-dark:#98C379"> oracle</span><span style="color:#98C379;--shiki-dark:#98C379"> bash</span></span></code></pre>
</div><blockquote>
<p>切换root用户</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">su</span></span></code></pre>
</div><blockquote>
<p>输入密码</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">helowin</span></span></code></pre>
</div><blockquote>
<p>编辑环境变量</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">vi</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">export</span><span style="color:#E06C75;--shiki-dark:#E06C75"> ORACLE_HOME</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">home</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">oracle</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">app</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">oracle</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">product</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">dbhome_2</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">export</span><span style="color:#E06C75;--shiki-dark:#E06C75"> ORACLE_SID</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75">helowin</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">export</span><span style="color:#E06C75;--shiki-dark:#E06C75"> PATH</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75">$PATH</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#E06C75;--shiki-dark:#E06C75">$ORACLE_HOME</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">bin</span></span></code></pre>
</div><blockquote>
<p>刷新环境变量</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">source</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/profile</span></span></code></pre>
</div><blockquote>
<p>切到oracle用户</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">su</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> oracle</span></span></code></pre>
</div><blockquote>
<p>登录sqlplus</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sqlplus</span><span style="color:#98C379;--shiki-dark:#98C379"> /nolog</span></span></code></pre>
</div><blockquote>
<p>连接数据库dba</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conn</span><span style="color:#98C379;--shiki-dark:#98C379"> /as</span><span style="color:#98C379;--shiki-dark:#98C379"> sysdba</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
</div><blockquote>
<p>修改system用户的密码</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">alter</span><span style="color:#98C379;--shiki-dark:#98C379"> user</span><span style="color:#98C379;--shiki-dark:#98C379"> system</span><span style="color:#98C379;--shiki-dark:#98C379"> identified</span><span style="color:#98C379;--shiki-dark:#98C379"> by</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 123456</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">alter</span><span style="color:#98C379;--shiki-dark:#98C379"> user</span><span style="color:#98C379;--shiki-dark:#98C379"> sys</span><span style="color:#98C379;--shiki-dark:#98C379"> identified</span><span style="color:#98C379;--shiki-dark:#98C379"> by</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 123456</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置密码不过期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">alter</span><span style="color:#98C379;--shiki-dark:#98C379"> profile</span><span style="color:#98C379;--shiki-dark:#98C379"> default</span><span style="color:#98C379;--shiki-dark:#98C379"> limit</span><span style="color:#98C379;--shiki-dark:#98C379"> PASSWORD_LIFE_TIME</span><span style="color:#98C379;--shiki-dark:#98C379"> unlimited</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
</div><blockquote>
<p>连接oracle</p>
</blockquote>
<h2>安装nginx</h2>
<blockquote>
<p>拉取镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> pull</span><span style="color:#98C379;--shiki-dark:#98C379"> nginx</span></span></code></pre>
</div><blockquote>
<p>启动容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> nginx</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --net=host</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --privileged</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> /data/nginx/conf.d:/etc/nginx/conf.d</span><span style="color:#98C379;--shiki-dark:#98C379"> nginx</span></span></code></pre>
</div><blockquote>
<p>编辑配置文件</p>
</blockquote>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">vim</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 80.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 监听80端口</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        listen </span><span style="color:#D19A66;--shiki-dark:#D19A66">80</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        location</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        		# 容器内部的静态文件目录</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                root </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
</div><h1>部署项目</h1>
<h2>部署后端项目</h2>
<blockquote>
<p>拉取若依前后端分离版代码</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">git</span><span style="color:#98C379;--shiki-dark:#98C379"> clone</span><span style="color:#98C379;--shiki-dark:#98C379"> git@gitee.com:y_project/RuoYi-Vue.git</span></span></code></pre>
</div><blockquote>
<p>创建数据库</p>
</blockquote>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">create</span><span style="color:#C678DD;--shiki-dark:#C678DD"> database</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> ruoyi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
</div><blockquote>
<p>修改application-druid.yml配置文件</p>
</blockquote>
<div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">jdbc:mysql://10.0.4.9:3306/ruoyi?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">username</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">root</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">password</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">123456</span></span></code></pre>
</div><p>10.0.4.9是服务器的内网ip，通过ipconfig可查看，不可使用localhost</p>
<blockquote>
<p>修改application.yml配置文件</p>
</blockquote>
<div class="language-yaml" data-ext="yaml" data-title="yaml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">  redis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # redis地址</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0.4.9</span></span></code></pre>
</div><blockquote>
<p>如果没有安装redis，则需要安装redis</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> redis</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 6379:6379</span><span style="color:#98C379;--shiki-dark:#98C379"> redis</span></span></code></pre>
</div><blockquote>
<p>编写Dockerfile</p>
</blockquote>
<div class="language-dockerfile" data-ext="dockerfile" data-title="dockerfile"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> openjdk:8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">EXPOSE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 8080</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ENV</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ADD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ruoyi-admin.jar app.jar</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ENTRYPOINT</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#98C379;--shiki-dark:#98C379">"java"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">"-jar"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">"app.jar"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
</div><blockquote>
<p>进行maven打包，并上传到Dockerfile同级目录</p>
</blockquote>
<blockquote>
<p>构建镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -t</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-server</span><span style="color:#98C379;--shiki-dark:#98C379"> .</span></span></code></pre>
</div><blockquote>
<p>运行容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-server</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 8080:8080</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-server</span></span></code></pre>
</div><h2>部署前端项目</h2>
<blockquote>
<p>安装依赖</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">npm</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span></span></code></pre>
</div><blockquote>
<p>打包</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">npm</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#98C379;--shiki-dark:#98C379"> build:prod</span></span></code></pre>
</div><blockquote>
<p>添加到zip压缩文件</p>
</blockquote>
<p>然后上传到服务器</p>
<p>服务器解压zip文件</p>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">unzip</span><span style="color:#98C379;--shiki-dark:#98C379"> dist.zip</span></span></code></pre>
</div><blockquote>
<p>编写nginx配置文件</p>
</blockquote>
<p>vim nginx.conf</p>
<div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    listen </span><span style="color:#D19A66;--shiki-dark:#D19A66">8081</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    location</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">				root </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/dist;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">				index </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> index.html index.htm;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">				try_files </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$</span><span style="color:#E06C75;--shiki-dark:#E06C75">uri</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span><span style="color:#E06C75;--shiki-dark:#E06C75">uri</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/ /index.html;	</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     location</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /prod-api{	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 转发到后端地址（由于容器和容器是互相隔离的，所以不能用localhost，localhost表示容器本身）</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        proxy_pass </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">http://10.0.4.9:8080;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 去掉/prod-api</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        rewrite</span><span style="color:#E06C75;--shiki-dark:#E06C75"> ^/prod-api/(.*)$</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /$</span><span style="color:#E06C75;--shiki-dark:#E06C75">1</span><span style="color:#C678DD;--shiki-dark:#C678DD"> break</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>编写Dockerfile</p>
</blockquote>
<div class="language-dockerfile" data-ext="dockerfile" data-title="dockerfile"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用基础镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> nginx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 添加项目文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">COPY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> dist/ /dist/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 添加nginx配置文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ADD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> nginx.conf /etc/nginx/conf.d</span></span></code></pre>
</div><blockquote>
<p>构建镜像</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> build</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -t</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-ui</span><span style="color:#98C379;--shiki-dark:#98C379"> .</span></span></code></pre>
</div><blockquote>
<p>运行容器</p>
</blockquote>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-ui</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 8081:8081</span><span style="color:#98C379;--shiki-dark:#98C379"> ruoyi-ui</span></span></code></pre>
</div><p>访问服务器ip:8081即可进入若依项目</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231014424.png" alt="image-20220615173424184" tabindex="0" loading="lazy"><figcaption>image-20220615173424184</figcaption></figure>
<h2>参考文章</h2>
<ul>
<li>部门同事林哲豪的分享会</li>
</ul>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231014424.png" type="image/png"/>
    </item>
    <item>
      <title>Docker基础 - 仓库，镜像，容器详解</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-basic-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-basic-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - 仓库，镜像，容器详解</source>
      <description>Docker基础 - 仓库，镜像，容器详解 1. 仓库，镜像，容器的关系 我们再回顾下仓库，镜像，容器的关系（这是官网的图） 通过下图可以得知，Docker在运行时分为Docker引擎（服务端守护进程）和客户端工具，我们日常使用各种docker命令，其实就是在使用客户端工具与Docker引擎进行交互。 image-20220613201437616im...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 仓库，镜像，容器的关系</h2>
<blockquote>
<p>我们再回顾下仓库，镜像，容器的关系（这是官网的图）</p>
</blockquote>
<p>通过下图可以得知，<code>Docker</code>在运行时分为<code>Docker引擎（服务端守护进程）</code>和<code>客户端工具</code>，我们日常使用各种<code>docker命令</code>，其实就是在使用<code>客户端工具</code>与<code>Docker</code>引擎进行交互。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231014062.png" alt="image-20220613201437616" tabindex="0" loading="lazy"><figcaption>image-20220613201437616</figcaption></figure>
<h2>2. Docker 镜像</h2>
<p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p>
<p>下面我们来学 1、管理和使用本地 Docker 主机镜像 2、创建镜像</p>
<h3>2.1 镜像列表</h3>
<p>我们可以使用 docker images 来列出本地主机上的镜像</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# docker images</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">REPOSITORY</span><span style="color:#98C379;--shiki-dark:#98C379">        TAG</span><span style="color:#98C379;--shiki-dark:#98C379">            IMAGE</span><span style="color:#98C379;--shiki-dark:#98C379"> ID</span><span style="color:#98C379;--shiki-dark:#98C379">       CREATED</span><span style="color:#98C379;--shiki-dark:#98C379">        SIZE</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">minio/minio</span><span style="color:#98C379;--shiki-dark:#98C379">       latest</span><span style="color:#98C379;--shiki-dark:#98C379">         1afc478341fd</span><span style="color:#D19A66;--shiki-dark:#D19A66">   8</span><span style="color:#98C379;--shiki-dark:#98C379"> months</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">   254MB</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">rabbitmq</span><span style="color:#98C379;--shiki-dark:#98C379">          3-management</span><span style="color:#98C379;--shiki-dark:#98C379">   3e83da0dc938</span><span style="color:#D19A66;--shiki-dark:#D19A66">   9</span><span style="color:#98C379;--shiki-dark:#98C379"> months</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">   253MB</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mongo</span><span style="color:#98C379;--shiki-dark:#98C379">             latest</span><span style="color:#98C379;--shiki-dark:#98C379">         0bcbeb494bed</span><span style="color:#D19A66;--shiki-dark:#D19A66">   9</span><span style="color:#98C379;--shiki-dark:#98C379"> months</span><span style="color:#98C379;--shiki-dark:#98C379"> ago</span><span style="color:#98C379;--shiki-dark:#98C379">   684MB</span></span></code></pre>
</div><p>| 属性       | 说明               |<br>
| :</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231014062.png" type="image/png"/>
    </item>
    <item>
      <title>Docker基础 - DockerCompose详解</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-compose-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-compose-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - DockerCompose详解</source>
      <description>Docker基础 - DockerCompose详解 1. 背景 我们可以通过Dockerfile文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况，或者开发一个Web应用，除了Web服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。 Docker Compose恰好...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>我们可以通过<code>Dockerfile</code>文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到<strong>需要多个容器相互配合来完成某项任务</strong>的情况，或者开发一个<code>Web</code>应用，除了<code>Web</code>服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。</p>
<p><code>Docker Compose</code>恰好满足了这样的需求，</p>
<ul>
<li>它是用于定义和运行多容器<code>Docker</code>应用程序的工具。</li>
<li>通过<code>Compose</code>，您可以使用<code>YAML</code>文件来配置应用程序所需要的服务。</li>
<li>然后使用一个命令，就可以通过<code>YAML</code>配置文件创建并启动所有服务。</li>
</ul>
<p>Docker Compose<code>项目是</code>Docker<code>官方的开源项目，来源于之前的</code>Fig<code>项目，使用</code>Python<code>语言编写。负责实现对</code>Docker<code>容器集群的快速编排。项目地址为：</code><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener noreferrer">https://github.com/docker/compose/releases</a></p>
<blockquote>
<ul>
<li>Docker Compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）</li>
<li>Docker Compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例</li>
</ul>
</blockquote>
<h2>2. Docker Compose使用的三个步骤</h2>
<p><code>Docker Compose</code>使用的三个步骤为：</p>
<ul>
<li>使用<code>Dockerfile</code>文件定义应用程序的环境；</li>
<li>使用<code>docker-compose.yml</code>文件定义构成应用程序的服务，这样它们可以在隔离环境中一起运行；</li>
<li>执行<code>docker-compose up</code>命令来创建并启动所有服务。</li>
</ul>
<h2>3. 安装 Docker Compose</h2>
<ul>
<li>安装 Docker Compose 可以通过下面命令自动下载适应版本的 Compose，并为安装脚本添加执行权限</li>
</ul>
<div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sudo curl </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">L</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> https</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#E06C75;--shiki-dark:#E06C75">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">github.com</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">compose</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">releases</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">download</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#D19A66;--shiki-dark:#D19A66">1.21</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">compose</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$(uname </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">s)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$(uname </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">m) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">o </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">usr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">local</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">bin</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">compose</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sudo chmod </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">x </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">usr</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">local</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">bin</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">compose</span></span></code></pre>
</div><ul>
<li>查看安装是否成功</li>
</ul>
<div class="language-cmd" data-ext="cmd" data-title="cmd"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">docker</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-</span><span style="color:#E06C75;--shiki-dark:#E06C75">compose</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> -</span><span style="color:#E06C75;--shiki-dark:#E06C75">v</span></span></code></pre>
</div><ul>
<li>卸载</li>
</ul>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">rm</span><span style="color:#98C379;--shiki-dark:#98C379"> /usr/local/bin/docker-compose</span></span></code></pre>
</div><h2>4. docker-compose.yml 文件</h2>
<p><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<ul>
<li>
<p><code>Docker Compose</code>允许用户通过<code>docker-compose.yml</code>文件（YAML 格式）来定义一组相关联的容器为一个工程（project）。</p>
</li>
<li>
<p>一个工程包含多个服务（service）</p>
</li>
<li>
<p>每个服务中定义了创建容器时所需的镜像、参数、依赖等。</p>
</li>
</ul>
<h2>5.  顶级配置</h2>
<p><code>Docker Compose</code>模板文件我们需要关注的顶级配置有<code>version</code>、<code>services</code>、<code>networks</code>、<code>volumes</code>几个部分，除<code>version</code>外，其他几个顶级配置下还有很多下级配置，后面也会详细给大家介绍，先来看看这几个顶级配置都什么意思：</p>
<ul>
<li><code>version</code>：描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code></li>
<li><code>services</code>：定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等</li>
<li><code>networkds</code>：定义网络，可以多个，根据<code>DNS server</code>让相同网络中的容器可以直接通过容器名称进行通信</li>
<li><code>volumes</code>：数据卷，用于实现目录挂载</li>
</ul>
<h3>5.1 version 版本信息</h3>
<p>描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code>。关于每个版本的详细信息请参考：<code>https://docs.docker.com/compose/compose-file/compose-versioning/</code></p>
<p>以下为<code>Compose</code>文件的版本信息所对应的<code>Docker</code>版本。</p>
<p>| Compose file format | Docker Engine release |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015369.png" type="image/png"/>
    </item>
    <item>
      <title>Docker基础 - Dockerfile详解</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-file-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-file-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Docker基础 - Dockerfile详解</source>
      <description>Docker基础 - Dockerfile详解 1. 简介 Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明 2. 命令组成 3.基础镜像信息 命令 3.1 FROM 指定哪种镜像作为新镜像的基础镜像，如： 4.维护者信息 4.1 MAINTAINER 指明该镜像的作者和其电子邮件，如： 4.2 LABE...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Dokcerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</p>
<h2>2. 命令组成</h2>
<p>| 部分               | 命令                                                     |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>docker管理 - 可视化工具Portainer</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-y-manage-portainer.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-y-manage-portainer.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">docker管理 - 可视化工具Portainer</source>
      <description>docker管理 - 可视化工具Portainer 1. 简介 https://github.com/portainer/portainer Portainer是一个轻量级的管理UI，可让您轻松管理不同的Docker环境（Docker主机或Swarm集群）。 Portainer的意图是易于部署和使用。它由一个可以在任何Docker引擎上运行的容器组成（...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p><a href="https://github.com/portainer/portainer" target="_blank" rel="noopener noreferrer">https://github.com/portainer/portainer</a><br>
Portainer是一个轻量级的管理UI，可让您轻松管理不同的Docker环境（Docker主机或Swarm集群）。 Portainer的意图是易于部署和使用。它由一个可以在任何Docker引擎上运行的容器组成（可以部署为Linux容器或Windows本机容器，也支持其他平台）。 Portainer允许您管理所有Docker资源（容器，映像，卷，网络等）！它与独立的Docker引擎和 Docker Swarm模式兼容。</p>
<h3>1.1 优点</h3>
<ol>
<li>支持容器管理、镜像管理(导入、导出)</li>
<li>轻量级，消耗资源少</li>
<li>基于docker api，安全性高，可指定docker api端口，支持TLS证书认证</li>
<li>支持权限分配</li>
<li>支持集群</li>
<li>github上目前持续维护更新</li>
</ol>
<h2>2. 下载Portainer镜像</h2>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker search portainer   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#搜索当前有哪些Portainer的镜像</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">docker pull portainer</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">portainer   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#pull 标星最多的镜像（STARS数最多的）</span></span></code></pre>
</div><h2>3. 运行Portainer镜像</h2>
<p>运行方式有两种：单机运行 和 集群运行</p>
<h3>3.1 单机运行</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 9000:9000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --restart=always</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> /var/run/docker.sock:/var/run/docker.sock</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> portainer_data:/data</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> prtainer</span><span style="color:#98C379;--shiki-dark:#98C379"> portainer/portainer</span></span></code></pre>
</div><p>参数说明：<br>
-d：容器在后台运行；<br>
-p 9000:9000 ：宿主机9000端口映射容器中的9000端口（前面的是宿主机端口，后面的是容器端口）；<br>
–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认不会重启；<br>
–restart=always：自动重启该容器；<br>
-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中；<br>
-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录；<br>
–name prtainer-test ： 给容器起名为portainer-libai；</p>
<h3>3.2 汉化安装：</h3>
<p>默认安装的是英文版的，有需要中文汉化的可以上传汉化包进行汉化。（<a href="https://pan.baidu.com/s/1ksUzbf9jkoWiCOSKBH6kEQ" target="_blank" rel="noopener noreferrer">汉化版点击下载</a>）提取码：6chp</p>
<p>将解压后的public文件夹上传到centos系统的根目录下，请注意，是centos系统的根目录。</p>
<p>然后执行以下命令：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 9000:9000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --restart=always</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> /var/run/docker.sock:/var/run/docker.sock</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> portainer_data:/data</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -v</span><span style="color:#98C379;--shiki-dark:#98C379"> /public:/public</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --name</span><span style="color:#98C379;--shiki-dark:#98C379"> prtainer-test</span><span style="color:#98C379;--shiki-dark:#98C379"> portainer/portainer（如果已部署，需要将已部署的容器删除）</span></span></code></pre>
</div><p>docker ps #查看下进程</p>
<h2>3.3 使用Portainer</h2>
<p>地址：<a href="http://ip:9000" target="_blank" rel="noopener noreferrer">http://ip:9000</a>，首次访问需要先创建管理员账号和密码，设置下</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015082.png" alt="image-20221118133933435" tabindex="0" loading="lazy"><figcaption>image-20221118133933435</figcaption></figure>
<h2>参考文章</h2>
<p><a href="https://blog.csdn.net/qq_34528463/article/details/106687234" target="_blank" rel="noopener noreferrer">docker可视化管理——Portainer安装教程</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015082.png" type="image/png"/>
    </item>
    <item>
      <title>集成docker实现一键部署</title>
      <link>https://mrjackc.github.io/posts/Docker/docker-y-one-key-deploy.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/docker-y-one-key-deploy.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">集成docker实现一键部署</source>
      <description>集成docker实现一键部署 1. 简介 这里的一键部署 主要以若依前后端分离项目为例，仅提供一个思路，项目实际使用中可根据自己项目情况调整 2. 环境搭建 Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，最终只需要一个命令即可打包发布应用到任意平台中。 1、安装docker 2、检查docker和docker...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>这里的一键部署 主要以若依前后端分离项目为例，仅提供一个思路，项目实际使用中可根据自己项目情况调整</p>
<h2>2. 环境搭建</h2>
<p><code>Docker</code>是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，最终只需要一个命令即可打包发布应用到任意平台中。</p>
<p>1、安装docker</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -y</span><span style="color:#98C379;--shiki-dark:#98C379"> yum-utils</span><span style="color:#98C379;--shiki-dark:#98C379"> device-mapper-persistent-data</span><span style="color:#98C379;--shiki-dark:#98C379"> lvm2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum-config-manager</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --add-repo</span><span style="color:#98C379;--shiki-dark:#98C379"> https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -y</span><span style="color:#98C379;--shiki-dark:#98C379"> docker-ce</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">curl</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -L</span><span style="color:#98C379;--shiki-dark:#98C379"> "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">uname</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -s</span><span style="color:#98C379;--shiki-dark:#98C379">)-$(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">uname</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -m</span><span style="color:#98C379;--shiki-dark:#98C379">)"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -o</span><span style="color:#98C379;--shiki-dark:#98C379"> /usr/local/bin/docker-compose</span></span></code></pre>
</div><p>2、检查<code>docker</code>和<code>docker-compose</code>是否安装成功</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker</span><span style="color:#98C379;--shiki-dark:#98C379"> version</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker-compose</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --version</span></span></code></pre>
</div><p>3、文件授权</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">chmod</span><span style="color:#98C379;--shiki-dark:#98C379"> +x</span><span style="color:#98C379;--shiki-dark:#98C379"> /usr/local/bin/docker-compose</span></span></code></pre>
</div><h2>3. docker 脚本下载</h2>
<p>链接:<a href="https://pan.baidu.com/s/1yse7-5G5wsghnz4MqUQmvQ" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1yse7-5G5wsghnz4MqUQmvQ</a>  密码:ru81</p>
<ul>
<li>其中<code>db目录</code>存放<code>ruoyi数据库脚本</code></li>
<li>其中<code>jar目录</code>存放打包好的<code>jar应用文件</code></li>
<li>数据库<code>mysql</code>地址需要修改成<code>ruoyi-mysql</code></li>
<li>数据库脚本头部需要添加<code>SET NAMES 'utf8';</code>（防止乱码）</li>
<li>redis地址也需要修改</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015759.png" alt="image-20220616205125631" tabindex="0" loading="lazy"><figcaption>image-20220616205125631</figcaption></figure>
<h2>4. 启动docker</h2>
<blockquote>
<p>启动docker</p>
</blockquote>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">systemctl</span><span style="color:#98C379;--shiki-dark:#98C379"> start</span><span style="color:#98C379;--shiki-dark:#98C379"> docker</span></span></code></pre>
</div><blockquote>
<p>构建docker服务</p>
</blockquote>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379"> build</span></span></code></pre>
</div><blockquote>
<p>启动docker容器</p>
</blockquote>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">docker-compose</span><span style="color:#98C379;--shiki-dark:#98C379"> up</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span></span></code></pre>
</div><blockquote>
<p>访问应用地址</p>
</blockquote>
<p>打开浏览器，输入：<a href="http://localhost/" target="_blank" rel="noopener noreferrer">http://localhost:80</a>，若能正确展示页面，则表明环境搭建成功。</p>
<blockquote>
<p>提示</p>
<p>启动服务的容器<code>docker-compose up ruoyi-mysql ruoyi-server</code></p>
<p>停止服务的容器<code>docker-compose stop ruoyi-mysql ruoyi-server</code></p>
</blockquote>
<h2>5. 脚本介绍</h2>
<h3>5.1 mysql-dockerfile</h3>
<div class="language-dockerfile" data-ext="dockerfile" data-title="dockerfile"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基础镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mysql:5.7</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># author</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">MAINTAINER</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ruoyi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 执行sql脚本</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ADD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ./db/*.sql /docker-entrypoint-initdb.d/</span></span></code></pre>
</div><h3>5.2 mysql-dockerfile</h3>
<div class="language-dockerfile" data-ext="dockerfile" data-title="dockerfile"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 基础镜像</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FROM</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> redis</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># author</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">MAINTAINER</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ruoyi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 挂载目录</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">VOLUME</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /zsz/ruoyi/redis</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建目录</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">RUN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mkdir -p /zsz/ruoyi/redis</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 指定路径</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">WORKDIR</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /zsz/ruoyi/redis</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 复制conf文件到路径</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">COPY</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ./conf/redis.conf /zsz/ruoyi/redis/redis.conf</span></span></code></pre>
</div><h3>5.3 ruoyi-dockerfile</h3>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># 基础镜像</span></span>
<span class="line"><span>FROM java:8</span></span>
<span class="line"><span># author</span></span>
<span class="line"><span>MAINTAINER ruoyi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 挂载目录</span></span>
<span class="line"><span>VOLUME /zsz/ruoyi</span></span>
<span class="line"><span># 创建目录</span></span>
<span class="line"><span>RUN mkdir -p /zsz/ruoyi</span></span>
<span class="line"><span># 指定路径</span></span>
<span class="line"><span>WORKDIR /zsz/ruoyi</span></span>
<span class="line"><span># 复制jar文件到路径de</span></span>
<span class="line"><span>COPY ./jar/*.jar /zsz/ruoyi/ruoyi.jar</span></span>
<span class="line"><span># 启动应用</span></span>
<span class="line"><span>ENTRYPOINT ["java","-jar","ruoyi.jar"]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>5.4 docker-compose.yml</h3>
<div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> : </span><span style="color:#98C379;--shiki-dark:#98C379">'3'</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">services</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">  ruoyi-mysql</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-mysql</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">mysql:5.7</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      dockerfile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">mysql-dockerfile</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">"8306:3306"</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./mysql/conf:/zsz/ruoyi/mysql/conf.d</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./mysql/logs:/zsz/ruoyi/mysql/logs</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./mysql/data:/zsz/ruoyi/mysql/mysqldata</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    command</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: [</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          'mysqld'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          '--innodb-buffer-pool-size=80M'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          '--character-set-server=utf8mb4'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          '--collation-server=utf8mb4_unicode_ci'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          '--default-time-zone=+8:00'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          '--lower-case-table-names=1'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    environment</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      MYSQL_DATABASE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">ry-vue</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      MYSQL_ROOT_PASSWORD</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">123456</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">  ruoyi-redis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-redis</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    image</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">redis</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      dockerfile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">redis-dockerfile</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">"8379:6379"</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./conf/redis.conf:/zsz/ruoyi/redis/redis.conf</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./redis/data:/data</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    command</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">redis-server /zsz/ruoyi/redis/redis.conf</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">  ruoyi-server</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    container_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-server</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      context</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">.</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">      dockerfile</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-dockerfile</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    ports</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">"8080:8080"</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    volumes</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./ruoyi/logs:/zsz/ruoyi/logs</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">./ruoyi/uploadPath:/zsz/ruoyi/uploadPath</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    depends_on</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-mysql</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-redis</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    links</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-mysql</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      - </span><span style="color:#98C379;--shiki-dark:#98C379">ruoyi-redis</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>参考文章</h2>
<p><a href="http://doc.ruoyi.vip/ruoyi/document/cjjc.html#%E9%9B%86%E6%88%90docker%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener noreferrer">集成docker实现一键部署</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231015759.png" type="image/png"/>
    </item>
    <item>
      <title>持续集成与容器管理</title>
      <link>https://mrjackc.github.io/posts/Docker/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86.html</link>
      <guid>https://mrjackc.github.io/posts/Docker/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">持续集成与容器管理</source>
      <description>持续集成与容器管理 学习目标： 掌握DockerMaven插件的使用 掌握持续集成工具Jenkins的安装与使用 掌握容器管理工具Rancher的安装与使用 掌握时间序列数据库influxDB的安装与使用 掌握容器监控工具cAdvisor的安装与使用 掌握图表工具Grafana的使用 1 DockerMaven插件 微服务部署有两种方法： （1）手动部...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<p>学习目标：</p>
<ul>
<li>掌握DockerMaven插件的使用</li>
<li>掌握持续集成工具Jenkins的安装与使用</li>
<li>掌握容器管理工具Rancher的安装与使用</li>
<li>掌握时间序列数据库influxDB的安装与使用</li>
<li>掌握容器监控工具cAdvisor的安装与使用</li>
<li>掌握图表工具Grafana的使用</li>
</ul>
<h1>1 DockerMaven插件</h1>
<p>微服务部署有两种方法：</p>
<p>（1）手动部署：首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</p>
<p>（2）通过Maven插件自动部署。</p>
<p>对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这里学习如何自动部署，这也是企业实际开发中经常使用的方法。</p>
<p>Maven插件自动部署步骤：</p>
<p>（1）修改宿主机的docker配置，让其可以远程访问</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vi /lib/systemd/system/docker.service</span></span></code></pre>
</div><p>其中ExecStart=后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p>
<p>修改后如下：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613013.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）刷新配置，重启服务</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>systemctl daemon-reload</span></span>
<span class="line"><span>systemctl restart docker</span></span>
<span class="line"><span>docker start registry</span></span></code></pre>
</div><p>（3）在工程pom.xml 增加配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">finalName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;app&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">finalName</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugins</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            &lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;com.spotify&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">groupId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;docker-maven-plugin&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">artifactId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;0.4.13&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">version</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">configuration</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">               &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/assetsName&gt;192.168.184.141:5000/${project.artifactId}:${project.version}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/assetsName&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">base.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/assets&gt;jdk1.8&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">base.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/assets&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">entryPoint</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;["java", "-jar", "/${project.build.finalName}.jar"]&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">entryPoint</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">resources</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">resource</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">targetPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;/&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">targetPath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">directory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;${project.build.directory}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">directory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">include</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;${project.build.finalName}.jar&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">include</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">resource</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">resources</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">dockerHost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;http://192.168.184.141:2375&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">dockerHost</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">configuration</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugin</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">plugins</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">build</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置会自动生成Dockerfile</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>FROM jdk1.8</span></span>
<span class="line"><span>ADD app.jar /</span></span>
<span class="line"><span>ENTRYPOINT ["java","-jar","/app.jar"]</span></span></code></pre>
</div><p>（5）在windows的命令提示符下，进入工程tensquare_parent所在的目录</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>mvn install</span></span></code></pre>
</div><p>进入tensquare_base 所在的目录，输入以下命令，进行打包和上传镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>mvn docker:build  -Dpush./assets</span></span></code></pre>
</div><p>执行后，会有如下输出，代码正在上传</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613395.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）进入宿主机 , 查看镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker ./assetss</span></span></code></pre>
</div><div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>REPOSITORY                              TAG                 ./assets ID            CREATED             SIZE</span></span>
<span class="line"><span>192.168.184.135:5000/tensquare_base   1.0-SNAPSHOT        83efa6b4478c        10 minutes ago      687.9 MB</span></span>
<span class="line"><span>192.168.184.135:5000/jdk1.8             latest              507438a0158f        6 hours ago         584 MB</span></span>
<span class="line"><span>jdk1.8                                  latest              507438a0158f        6 hours ago         584 MB</span></span></code></pre>
</div><p>输出如上内容，表示微服务已经做成镜像</p>
<p>浏览器访问  <a href="http://192.168.184.141:5000/v2/_catalog" target="_blank" rel="noopener noreferrer">http://192.168.184.141:5000/v2/_catalog</a>  ，输出</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>{"repositories":["tensquare_base"]}</span></span></code></pre>
</div><p>浏览器访问  <a href="http://192.168.184.141:5000/v2/_catalog" target="_blank" rel="noopener noreferrer">http://192.168.184.141:5000/v2/_catalog</a>  ，输出</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>{"repositories":["tensquare_base"]}</span></span></code></pre>
</div><p>（7） 启动容器：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di --name=base -p 9001:9001 192.168.184.141:5000/tensquare_base:1.0-SNAPSHOT</span></span></code></pre>
</div><h1>2 持续集成工具-Jenkins</h1>
<h2>2.1 什么是持续集成</h2>
<p>​	持续集成   Continuous integration ，简称CI</p>
<p>​	随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>
<p>​	持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>
<p>持续集成具有的特点：</p>
<ul>
<li>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li>
<li>需要有专门的集成服务器来执行集成构建；</li>
<li>需要有代码托管工具支持，我们下一小节将介绍Git以及可视化界面Gogs的使用</li>
</ul>
<p>持续集成的作用：</p>
<ul>
<li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li>
<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>
</ul>
<h2>2.2 Jenkins简介</h2>
<p>​	Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的软件工具。官方网站：<a href="http://jenkins-ci.org/" target="_blank" rel="noopener noreferrer">http://jenkins-ci.org/</a>。</p>
<p>​	Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>
<p>​	特点：</p>
<ul>
<li>易安装：仅仅一个&nbsp;java -jar jenkins.war，从官网下载该文件后，直接运行，无需额外的安装，更无需安装数据库；</li>
<li>易配置：提供友好的GUI配置界面；</li>
<li>变更支持：Jenkins能从代码仓库（Subversion/CVS）中获取并产生代码更新列表并输出到编译输出信息中；</li>
<li>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；</li>
<li>集成E-Mail/RSS/IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；</li>
<li>JUnit/TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；</li>
<li>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；</li>
<li>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；</li>
<li>支持第三方插件：使得 Jenkins 变得越来越强大</li>
</ul>
<h2>2.3 Jenkins安装</h2>
<h3>2.3.1 JDK安装</h3>
<p>（1）将jdk-8u171-linux-x64.rpm上传至服务器（虚拟机）</p>
<p>（2）执行安装命令</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>rpm -ivh jdk-8u171-linux-x64.rpm</span></span></code></pre>
</div><p>RPM方式安装JDK，其根目录为：/usr/java/jdk1.8.0_171-amd64</p>
<h3>2.3.2 Jenkins安装与启动</h3>
<p>（1）下载jenkins</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>wget https://pkg.jenkins.io/redhat/jenkins-2.83-1.1.noarch.rpm</span></span></code></pre>
</div><p>或将jenkins-2.83-1.1.noarch.rpm上传至服务器</p>
<p>（2）安装jenkins</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>rpm -ivh jenkins-2.83-1.1.noarch.rpm</span></span></code></pre>
</div><p>（3）配置jenkins</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vi /etc/sysconfig/jenkins</span></span></code></pre>
</div><p>修改用户和端口</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>JENKINS_USER="root"</span></span>
<span class="line"><span>JENKINS_PORT="8888"</span></span></code></pre>
</div><p>（4）启动服务</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>systemctl start jenkins</span></span></code></pre>
</div><p>（5）访问链接 <a href="http://192.168.184.135:8888" target="_blank" rel="noopener noreferrer">http://192.168.184.135:8888</a></p>
<p>从/var/lib/jenkins/secrets/initialAdminPassword中获取初始密码串</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613733.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）安装插件</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613461.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614510.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（7）新建用户</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613286.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>完成安装进入主界面</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613840.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>2.4 Jenkins插件安装</h2>
<p>我们以安装maven插件为例，演示插件的安装</p>
<p>（1）点击左侧的“系统管理”菜单 ,然后点击</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614282.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration  ，点击“直接安装”按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614229.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>看到如下图时，表示已经完成</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614206.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>2.5 全局工具配置</h2>
<h3>2.5.1 安装Maven与本地仓库</h3>
<p>（1）将Maven压缩包上传至服务器（虚拟机）</p>
<p>（2）解压</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>tar zxvf apache-maven-3.5.4-bin.tar.gz</span></span></code></pre>
</div><p>（3）移动目录</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>mv apache-maven-3.5.4 /usr/local/maven</span></span></code></pre>
</div><p>（4）编辑setting.xml配置文件<code>vi /usr/local/maven/conf/settings.xml </code>，配置本地仓库目录,内容如下</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>&lt;localRepository&gt;/usr/local/repository&lt;/localRepository&gt;</span></span></code></pre>
</div><p>（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到/usr/local/repository   。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>mv reponsitory_boot /usr/local/repository</span></span></code></pre>
</div><p>执行此步是为了以后在打包的时候不必重新下载，缩短打包的时间。</p>
<h3>2.5.2 全局工具配置</h3>
<p>选择系统管理，全局工具配置</p>
<p>（1）JDK配置</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614778.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>设置javahome为 /usr/java/jdk1.8.0_171-amd64</p>
<p>（2）Git配置   （本地已经安装了Git软件）</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614681.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）Maven配置</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111614746.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>2.6 代码上传至Git服务器</h2>
<h3>2.6.1 Gogs搭建与配置</h3>
<p>Gogs 是一款极易搭建的自助 Git 服务。</p>
<p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的&nbsp;<strong>所有平台</strong>，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p>
<p>地址：<a href="https://gitee.com/Unknown/gogs" target="_blank" rel="noopener noreferrer">https://gitee.com/Unknown/gogs</a></p>
<p>（1）下载镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker pull gogs/gogs</span></span></code></pre>
</div><p>（2）创建容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span></span></code></pre>
</div><p>（3）假设我的centos虚拟机IP为192.168.184.141   在地址栏输入<a href="http://192.168.184.141:3000" target="_blank" rel="noopener noreferrer">http://192.168.184.141:3000</a>  会进入首次运行安装程序页面，我们可以选择一种数据库作为gogs数据的存储，最简单的是选择SQLite3。如果对于规模较大的公司，可以选择MySQL</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615931.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615136.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击“立即安装”</p>
<p>这里的域名要设置为centos的IP地址,安装后显示主界面</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615423.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）注册</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615416.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（5）登录</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615863.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）创建仓库&nbsp;<img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615002.png" alt="创建仓库" loading="lazy"></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111615866.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>2.6.2 提交代码</h3>
<p>步骤：</p>
<p>（1）在本地安装git(Windows版本)</p>
<p>（2）在IDEA中选择菜单 :  File -- settings ,  在窗口中选择Version Control --  Git</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616402.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）选择菜单VCS  --&gt; Enable Version Control Integration...</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616002.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>选择Git</p>
<p>（4）设置远程地址:  右键点击工程选择菜单    Git --&gt; Repository   --&gt;Remotes...</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616250.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111616856.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（5）右键点击工程选择菜单    Git --&gt; Add</p>
<p>（6）右键点击工程选择菜单    Git --&gt; Commit Directory...</p>
<p>（7）右键点击工程选择菜单    Git --&gt; Repository   --&gt; Push ...</p>
<h2>2.7 任务的创建与执行</h2>
<p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619339.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）源码管理，选择Git</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619397.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）Build</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619438.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>命令:</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>clean package docker:build -Dpush./assets</span></span></code></pre>
</div><p>用于清除、打包，构建docker镜像</p>
<p>最后点击“保存”按钮</p>
<p>（4）执行任务</p>
<h1>3 容器管理工具Rancher</h1>
<h2>3.1 什么是Rancher</h2>
<p>​     Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应用部署和管理。</p>
<p>​      <a href="https://www.cnrancher.com/" target="_blank" rel="noopener noreferrer">https://www.cnrancher.com/</a></p>
<h2>3.2 Rancher安装</h2>
<p>（1）下载Rancher 镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker pull rancher/server</span></span></code></pre>
</div><p>（2）创建Rancher容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di --name=rancher -p 9090:8080 rancher/server</span></span></code></pre>
</div><p>（3）在浏览器输入地址： <a href="http://192.168.184.136:9090" target="_blank" rel="noopener noreferrer">http://192.168.184.136:9090</a>  即可看到高端大气的欢迎页</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619480.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击Got It  进入主界面</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）切换至中文界面</p>
<p>点击右下角的English 在弹出菜单中选择中文</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619570.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>切换后我们就可以看到亲切的中文界面啦~</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>3.3 Rancher初始化</h2>
<h3>3.3.1  添加环境</h3>
<p>Rancher 支持将资源分组归属到多个<strong>环境</strong>。 每个环境具有自己独立的基础架构资源及服务，并由一个或多个用户、团队或组织所管理。</p>
<p>例如，您可以创建独立的“开发”、“测试”及“生产”环境以确保环境之间的安全隔离，将“开发”环境的访问权限赋予全部人员，但限制“生产”环境的访问权限给一个小的团队。</p>
<p>（1）选择“Default --&gt;环境管理” 菜单</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）填写名称，点击“创建”按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619678.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）按照上述步骤，添加十次方测试环境和生产环境</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619710.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）你可以通过点击logo右侧的菜单在各种环境下切换</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>3.3.2 添加主机</h3>
<p>（1）选择基础架构--&gt;主机 菜单，点击添加主机</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619788.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）拷贝脚本</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619821.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）在服务器（虚拟机）上运行脚本</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619855.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）点击关闭按钮后，会看到界面中显示此主机。我们可以很方便地管理主机的每个容器的开启和关闭</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>3.3.3 添加应用</h3>
<p>点击应用--&gt;全部(或用户)  ，点击“添加应用”按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619929.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>填写名称和描述</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619962.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击“创建”按钮，列表中增加了新增的应用</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619998.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>3.4 应用部署</h2>
<h3>3.4.1 MySQL部署</h3>
<p>镜像：centos/mysql-57-centos7   增加数据库服务</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619033.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>注意：添加环境变量  MYSQL_ROOT_PASSWORD=123456</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击创建按钮，完成创建    上述操作相当于以下docker命令</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619100.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>完成后服务列表中存在并且状态为激活    使用SQLyog测试链接，执行建表语句</p>
<h3>3.4.2 RabbitMQ部署</h3>
<p>镜像：rabbitmq:management     端口映射5671   5672  4369    15671  15672  25672</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>浏览器访问   <a href="http://192.168.184.136:15672/" target="_blank" rel="noopener noreferrer">http://192.168.184.136:15672/</a></p>
<h3>3.4.3 Redis部署</h3>
<p>进入应用，点击添加服务，名称redis ，镜像redis ，端口映射6379</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619168.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>创建后使用客户端测试链接</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>redis-cli -h 192.168.184.144</span></span></code></pre>
</div><p>测试成功</p>
<h3>3.4.4 微服务部署</h3>
<p>（1）搭建私有仓库</p>
<p>启动私有仓库容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di --name=registry -p 5000:5000 registry</span></span></code></pre>
</div><p>打开浏览器 输入地址<a href="http://192.168.184.144:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B%22repositories%22:%5B%5D%7D%60" target="_blank" rel="noopener noreferrer">http://192.168.184.144:5000/v2/_catalog看到`{"repositories":[]}`</a> 表示私有仓库搭建成功并且内容为空</p>
<p>修改daemon.json</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vi /etc/docker/daemon.json</span></span></code></pre>
</div><p>添加以下内容，保存退出。</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span><span style="color:#E06C75;--shiki-dark:#E06C75">"insecure-registries"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:[</span><span style="color:#98C379;--shiki-dark:#98C379">"192.168.184.144:5000"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]}</span></span></code></pre>
</div><p>（2）修改docker配置，允许远程访问</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vi /lib/systemd/system/docker.service</span></span></code></pre>
</div><p>其中ExecStart=后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p>
<p>修改后刷新配置，冲洗服务</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>systemctl daemon-reload</span></span>
<span class="line"><span>systemctl restart docker</span></span>
<span class="line"><span>docker start registry</span></span></code></pre>
</div><p>（3）修改微服务工程，添加DockerMaven插件</p>
<p>（4）连接mysql数据库，执行建库脚本</p>
<p>（5）添加服务base-service   镜像192.168.184.144:5000/tensquare_base:1.0-SNAPSHOT    端口映射9001</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619209.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）测试微服务  浏览器打开网址  <a href="http://192.168.184.144:9001/label" target="_blank" rel="noopener noreferrer">http://192.168.184.144:9001/label</a>   看是否可以看到标签列表</p>
<h2>3.6 扩容与缩容</h2>
<h3>3.6.1 扩容</h3>
<p>（1）在Rancher将创建的base-service（基础信息微服务）删除</p>
<p>（2）重新创建base-service ，不设置端口映射</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619245.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）在选择菜单API  --&gt;WebHooks  ，点击“添加接收器”按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619283.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）填写名称等信息，选择要扩容的服务，点击创建按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619324.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（5）接收器列表中新增了一条记录  ，点击触发地址将地址复制到剪切板</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619360.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）使用postman测试：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619400.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>测试后，发现容器由原来的1个变为了3个</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619453.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>3.6.2 缩容</h3>
<p>刚才我们实现了扩容，那么如何减少容器数量呢？我们来试试如何缩容</p>
<p>（1）添加接收器  ,选择缩容，步长为1表示每次递减1个 ，点击创建按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619486.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）创建成功后，复制触发地址</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619528.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）使用postman测试</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619563.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>4 influxDB</h1>
<h2>4.1 什么是influxDB</h2>
<p>​	influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，以便显示除实时信息之外的时序数据。</p>
<h2>4.2 influxDB安装</h2>
<p>（1）下载镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker pull tutum/influxdb</span></span></code></pre>
</div><p>（2）创建容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -di \</span></span>
<span class="line"><span>   -p 8083:8083 \</span></span>
<span class="line"><span>   -p 8086:8086 \</span></span>
<span class="line"><span>   --expose 8090 \</span></span>
<span class="line"><span>   --expose 8099 \</span></span>
<span class="line"><span>   --name influxsrv \</span></span>
<span class="line"><span>   tutum/influxdb</span></span></code></pre>
</div><p>端口概述：  8083端口:web访问端口     8086:数据写入端口</p>
<p>打开浏览器   <a href="http://192.168.184.144:8083" target="_blank" rel="noopener noreferrer">http://192.168.184.144:8083/</a></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619604.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>4.3 influxDB常用操作</h2>
<h3>4.3.1 创建数据库</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>CREATE DATABASE "cadvisor"</span></span></code></pre>
</div><p>回车创建数据库</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>SHOW DATABASES</span></span></code></pre>
</div><p>查看数据库</p>
<h3>4.3.2 创建用户并授权</h3>
<p>创建用户</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>CREATE USER "cadvisor" WITH PASSWORD 'cadvisor' WITH ALL PRIVILEGES</span></span></code></pre>
</div><p>查看用户</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>SHOW USRES</span></span></code></pre>
</div><p>用户授权</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>grant all privileges on cadvisor to cadvisor</span></span>
<span class="line"><span>grant WRITE on cadvisor to cadvisor</span></span>
<span class="line"><span>grant READ on cadvisor to cadvisor</span></span></code></pre>
</div><h3>4.3.3 查看采集的数据</h3>
<p>切换到cadvisor数据库，使用以下命令查看采集的数据</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>SHOW MEASUREMENTS</span></span></code></pre>
</div><p>现在我们还没有数据，如果想采集系统的数据，我们需要使用<strong>Cadvisor</strong>软件来实现</p>
<h1>5 cAdvisor</h1>
<h2>5.1 什么是cAdvisor</h2>
<p>​	Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker主机。更多详细操作和配置选项可以查看Github上的cAdvisor项目文档。</p>
<h2>5.2 cAdvisor安装</h2>
<p>（1）下载镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker pull google/cadvisor</span></span></code></pre>
</div><p>（2）创建容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --link influxsrv:influxsrv --name=cadvisor google/cadvisor -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086</span></span></code></pre>
</div><p>WEB前端访问地址</p>
<p><a href="http://192.168.184.144:8080/containers/" target="_blank" rel="noopener noreferrer">http://192.168.184.144:8080/containers/</a></p>
<p>性能指标含义参照如下地址</p>
<p><a href="https://blog.csdn.net/ZHANG_H_A/article/details/53097084" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/ZHANG_H_A/article/details/53097084</a></p>
<p>再次查看influxDB，发现已经有很多数据被采集进去了。</p>
<h1>6 Grafana</h1>
<h2>6.1 什么是Grafana</h2>
<p>​	Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。<br>
Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p>
<h2>6.2 Grafana安装</h2>
<p>（1）下载镜像</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker pull grafana/grafana</span></span></code></pre>
</div><p>（2）创建容器</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>docker run -d -p 3001:3000  -e INFLUXDB_HOST=influxsrv -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=cadvisor -e INFLUXDB_PASS=cadvisor --link influxsrv:influxsrv --name grafana grafana/grafana</span></span></code></pre>
</div><p>（3）访问</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>http://192.168.184.144:3001</span></span></code></pre>
</div><p>用户名密码均为admin</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619631.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）登录后提示你修改密码</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619682.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（5）之后进入主页面</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619728.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>6.3 Grafana的使用</h2>
<h3>6.3.1 添加数据源</h3>
<p>（1）点击设置，DataSource</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619776.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）点击添加data source</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619826.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）为数据源起个名称，指定类型、地址、以及连接的数据库名、用户名和密码</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击保存。数据源建立成功</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>6.3.2 添加仪表盘</h3>
<p>（1）选择Dashboards --Manager</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619982.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）点击“添加”按钮</p>
<p>（3）点击Graph  图标</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619027.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）出现下面图表的界面 ，点击Panel Title  选择Edit (编辑)</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619063.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（5）定义标题等基础信息</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619109.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（6）设置查询的信息为内存，指定容器名称</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619166.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（7）指定y轴的单位 为M</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619200.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（8）保存</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>填写名称</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619282.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>6.4.3 预警通知设置</h3>
<p>（1）选择菜单  alerting--&gt; Notification channels</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619325.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）点击Add channel 按钮</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619370.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（3）填写名称，选择类型为webhook  ,填写钩子地址</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619415.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这个钩子地址是之前对base微服务扩容的地址</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619463.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（4）点击SendTest  测试  观察基础微服务是否增加容器</p>
<p>（5）点击save保存</p>
<p>（6）按照同样的方法添加缩容地址</p>
<h3>6.4.4 仪表盘预警设置</h3>
<p>（1）再次打开刚刚编辑的仪表盘</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619510.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>（2）点击 Create Alert</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619542.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>设置预警线</p>
<p>（3）选择通知</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619590.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111619632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>保存更改</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410111613013.png" type="image/png"/>
    </item>
    <item>
      <title>git工作流</title>
      <link>https://mrjackc.github.io/posts/Git/git-x-gitflow.html</link>
      <guid>https://mrjackc.github.io/posts/Git/git-x-gitflow.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">git工作流</source>
      <description>git工作流 1. 简介 Git 有多种工作流方式，我们接下来就介绍几种常见的工作流，以便大家选择最适合自己的方式。 2. 常见工作流 2.1 主干开发 严格意义上说他并不算工作流，所有提交都在主干上 image-20211209213253441image-20211209213253441 2.1.1 优势 方便，所有都提交到master 适合一些...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Git 有多种工作流方式，我们接下来就介绍几种常见的工作流，以便大家选择最适合自己的方式。</p>
<h2>2. 常见工作流</h2>
<h3>2.1 主干开发</h3>
<p>严格意义上说他并不算工作流，所有提交都在主干上</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231016835.png" alt="image-20211209213253441" tabindex="0" loading="lazy"><figcaption>image-20211209213253441</figcaption></figure>
<h4>2.1.1 优势</h4>
<ul>
<li>方便，所有都提交到master</li>
<li>适合一些小组件/工具</li>
</ul>
<h4>2.1.2 缺陷</h4>
<ul>
<li>缺乏有效管理</li>
</ul>
<h3>2.2 Git Flow</h3>
<p><code>Git工作流</code> 是最广为人知的工作流。由<code>Vincent Driessen</code> 在2010年所发明，这种工作流建立在两个具有永久生命周期的分支基础之上：</p>
<ul>
<li>master分支 - 对应生产环境的线上代码。所有开发代码都会在某个时间点合并到master分支。</li>
<li>develop分支 - 对应的是预生产的代码。当功能分支开发完毕之后，会被合并到develop分支。</li>
</ul>
<p>与之并行的，是在开发周期之内，还会使用一些其他类型的分支以便支持开发流程：</p>
<ul>
<li>feature-* ( * 表示通配符，下同) 分支 — 功能分支用来开发下次发布包含的新功能。这些分支应当都是从develop分支派生出来，然后最终也应该合并回develop分支。</li>
<li>hotfix-* 分支 — 当master分支中含有不应出现的状况时，则有必要派生出hotfix分支对master分支进行紧急修复。这些分支应当派生自master 分支，并且最终应当同时合并回master 和develop 分支。</li>
<li>release-* 分支 — release 分支用于准备一次新的生产环境版本更新。创建release-*分支用来修复一些在测试环境未发现的小BUG，以及更新此版本的原信息。其应当派生自develop分支，并且最终同时合并回master 分支和 develop分支。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231016881.png" alt="image-20211209213326278" tabindex="0" loading="lazy"><figcaption>image-20211209213326278</figcaption></figure>
<h4>2.2.1 <strong>优势</strong></h4>
<ul>
<li>在项目周期之内，该工作流保证任何时刻两个主要分支都是处于纯净状态的</li>
<li>由于遵循系统化的模式，因此分支命名容易理解</li>
<li>大多数Git工具都支持该工作流的<a href="https://link.zhihu.com/?target=https%3A//github.com/nvie/gitflow" target="_blank" rel="noopener noreferrer">扩展工具</a></li>
<li>当项目中需要同时维护多个生产版本时，该工作流模式非常理想</li>
</ul>
<h4>2.2.2 <strong>缺陷</strong></h4>
<ul>
<li>Git 的历史记录将变得异常混乱，可读性很差</li>
<li>master / develop 分支的割裂使CI/CD流程变得更加困难</li>
<li>当项目维护单一生产环境版本时，该工作流则不适用</li>
</ul>
<h3>2.3 <strong>GitHub Flow</strong></h3>
<p>GitHub 工作流是一个轻型的工作流，它是GitHub 在2011年 创建，其工作流遵循以下6个原则：</p>
<ol>
<li>任何时刻的master分支代码都是可以用来部署的</li>
<li>任何新变更都需要从master派生出一个分支，并且为其起一个描述新变更内容的名字：比如 new-oauth2-scopes</li>
<li>在本地提交该新分支变更，并且应经常性的向服务器端该同名分支推送变更</li>
<li>当你需要帮助、反馈，或认为新分支可以合并的时候，新建一个<a href="https://link.zhihu.com/?target=http%3A//help.github.com/send-pull-requests/" target="_blank" rel="noopener noreferrer">pull request</a></li>
<li>只有在其他人review通过之后，新分支才允许合并到 <code>master</code> 分支</li>
<li>一旦新分支被合并推送至<code>master</code>分支，master分支应当立即进行部署</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231016907.png" alt="image-20211209213349934" tabindex="0" loading="lazy"><figcaption>image-20211209213349934</figcaption></figure>
<h4>2.3.1 <strong>优势</strong></h4>
<ul>
<li>该工作流对于CI/CD流程友好</li>
<li>是Git工作流的一种简版替换</li>
<li>当项目维护单一生产环境版本时，该工作流适用</li>
</ul>
<h4>2.3.2 缺陷</h4>
<ul>
<li>生产环境对应的代码极易处于不稳定状态</li>
<li>对于依赖<a href="https://www.zhihu.com/search?q=%E5%8F%91%E5%B8%83%E8%AE%A1%E5%88%92&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D" target="_blank" rel="noopener noreferrer">发布计划</a>的项目无法充分支持</li>
<li>该工作流并不涉及关于部署，环境，发布和问题等方面的解决方案</li>
<li>当项目维护多生产环境版本时，该工作流不适用</li>
</ul>
<h3>2.4 <strong>GitLab Flow</strong></h3>
<p>GitLab工作流由<a href="https://link.zhihu.com/?target=https%3A//about.gitlab.com/2014/09/29/gitlab-flow/" target="_blank" rel="noopener noreferrer">GitLab</a>创建于2014年。这种工作流将<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Feature-driven_development" target="_blank" rel="noopener noreferrer">功能驱动的开发模式</a>与问题跟踪结合在一起。与GitHub工作流最大的不同，是GitLab工作流新创建了与环境相关的分支（比如，<code>staging</code>分支和<code>production</code>分支），适用于每次合并功能分支后不需马上部署至生产环境的项目（如SaaS软件，移动软件项目等）。</p>
<p>GitLab工作流遵循以下11条原则：</p>
<ol>
<li>使用功能分支进行开发，而不是直接在<code>master</code>分支上提交代码 （如果你的开发主分支是 <code>master</code>的话，下同）</li>
<li>测试每一次commit，而不仅仅是对<code>master</code>分支进行测试</li>
<li>在所有commits上运行自动化测试（如果你的测试脚本运行时间超过5分钟，就让他们并行）</li>
<li>在<a href="https://www.zhihu.com/search?q=%E5%90%88%E5%B9%B6%E4%BB%A3%E7%A0%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D" target="_blank" rel="noopener noreferrer">合并代码</a>之前进行code review，而不是在合并之后</li>
<li>以分支名或者tag为准进行自动化的部署</li>
<li>tag由人来设定，而不是CI</li>
<li>发布版本应建立在tag上</li>
<li>已push的commits永远不要进行rebase</li>
<li>所有人从<code>master</code>派生新分支，最终合并回`master</li>
<li>修复bug时应该优先修复<code>master</code>分支的代码，修复之后再cherry-pick到线上分支</li>
<li>commit messages 要有意义</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231016931.png" alt="image-20211209213428242" tabindex="0" loading="lazy"><figcaption>image-20211209213428242</figcaption></figure>
<h4>2.4.1 <strong>优势</strong></h4>
<ul>
<li>相对于前两种工作流，GitLab工作流定义了如何进行CI和CD流程的整合</li>
<li>提交历史会非常清爽，历史信息看上去会更具可读性</li>
<li>当项目维护单一生产环境版本时，该工作流适用</li>
</ul>
<h4>2.4.2 <strong>缺陷</strong></h4>
<ul>
<li>比GitHub工作流更加复杂</li>
<li>当项目维护多生产环境版本时，将会变得和Git Flow一样复杂</li>
</ul>
<h3>2.5 <strong>One Flow</strong></h3>
<p>One Flow 最初在<a href="https://link.zhihu.com/?target=http%3A//endoflineblog.com/gitflow-considered-harmful" target="_blank" rel="noopener noreferrer">GitFlow considered harmful by Adam Ruka, 2015</a>这篇文章中提出，作为Git Flow的另一种选择。使用One Flow需要满足的最重要的条件，是生产版本的每一次更新都基于前一生产版本，与Git Flow最大的区别是没有<code>develop</code>这一分支。</p>
<h4>2.5.1 <strong>优势</strong></h4>
<ul>
<li>提交历史会非常清爽，历史信息看上去会更具可读性</li>
<li>灵活的团队协作机制</li>
<li>当项目维护单一生产环境版本时，该工作流适用</li>
</ul>
<h4>2.5.2 <strong>缺陷</strong></h4>
<ul>
<li>自动化CI/CD能力的项目慎用</li>
<li>功能分支不明确，不适用<a href="https://www.zhihu.com/search?q=%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D" target="_blank" rel="noopener noreferrer">持续集成</a></li>
<li>当项目维护多生产环境版本时，该工作流不适用</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/434078984" target="_blank" rel="noopener noreferrer">四种常见的Git工作流</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231016835.png" type="image/png"/>
    </item>
    <item>
      <title>gitignore文件屏蔽规则</title>
      <link>https://mrjackc.github.io/posts/Git/git-x-gitignore.html</link>
      <guid>https://mrjackc.github.io/posts/Git/git-x-gitignore.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">gitignore文件屏蔽规则</source>
      <description>gitignore文件屏蔽规则 在使用git仓库时，我们并不希望将所有的文件都提交到仓库中，需要对一些文件进行屏蔽，有些则要保留 此时我们就需要使用到.gitignore文件 2. gitignore 文件格式规范 所有空行或#开通的行都会被忽略 可以使用标准的glob 模式匹配 文件或目录前加/表示仓库根目录的对应文件 匹配模式最后跟反斜杠/说明要忽...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在使用git仓库时，我们并不希望将所有的文件都提交到仓库中，需要对一些文件进行屏蔽，有些则要保留</p>
<p>此时我们就需要使用到<code>.gitignore</code>文件</p>
<h2>2. gitignore 文件格式规范</h2>
<ul>
<li>所有空行或#开通的行都会被忽略</li>
<li>可以使用标准的<strong>glob 模式匹配</strong></li>
<li>文件或目录前加<code>/</code>表示仓库根目录的对应文件</li>
<li>匹配模式最后跟反斜杠<code>/</code>说明要忽略目录</li>
<li>要特殊不许了某个文件或目录，可以在模式钱加上取反<code>!</code></li>
</ul>
<h3>2.1 glob 模式</h3>
<p>其中glob模式是指shell 所使用的简化了的正则表达式</p>
<ul>
<li>
<p>星号<code>*</code>匹配零个或多个任意字符</p>
</li>
<li>
<p><code>[abc]</code>匹配任何一个列在方括号中的字符（这个例子要么匹配一个a，要么匹配一个b，要么匹配一个c），</p>
<ul>
<li><code>？</code>匹配一个任意字符</li>
</ul>
</li>
<li>
<p>如果在方括号中使用短划线分割两个字符，表示所有在这两个字符范围内的都可以匹配</p>
<p>例如：[0-9] 表示匹配所有0-9的数字</p>
</li>
</ul>
<h2>3. 案例</h2>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*.a                    </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 所有以 '.a' 为后缀的文件都屏蔽掉</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Office 缓存文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">~</span><span style="color:#98C379;--shiki-dark:#98C379">'$'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*.docx</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">~</span><span style="color:#98C379;--shiki-dark:#98C379">'$'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*.ppt</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">~</span><span style="color:#98C379;--shiki-dark:#98C379">'$'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*.pptx </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">~</span><span style="color:#98C379;--shiki-dark:#98C379">'$'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*.xls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tags</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                   # 仓库中所有名为 tags 的文件都屏蔽</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">core.*</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                 # 仓库中所有以 'core.' 开头的文件都屏蔽</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tools/</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                # 屏蔽目录 tools</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">log/*</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                  # 屏蔽目录 log 下的所有文件，但不屏蔽 log 目录本身</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/log.log</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">               # 只屏蔽仓库根目录下的 log.log 文件，其他目录中的不屏蔽</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">readme.md</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       # 屏蔽仓库中所有名为 readme.md 的文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">!</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">/readme.md</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     # 在上一条屏蔽规则的条件下，不屏蔽仓库根目录下的 readme.md 文</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<br>
例子中的最后两条的顺序很重要，必须要先屏蔽所有的，然后才建立特殊不屏蔽的规则！</p>
]]></content:encoded>
    </item>
    <item>
      <title>git merge的三种操作</title>
      <link>https://mrjackc.github.io/posts/Git/git-x-merge.html</link>
      <guid>https://mrjackc.github.io/posts/Git/git-x-merge.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">git merge的三种操作</source>
      <description>git merge的三种操作 1. 背景 git merge的三种操作merge, squash merge, 和rebase merge 举例来说： 假设在master分支的B点拉出一个新的分支dev，经过一段时间开发后： master分支上有两个新的提交M1和M2 dev分支上有三个提交D1，D2，和D3 如下图所示： image-20211210...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>git merge的三种操作merge, squash merge, 和rebase merge</p>
<p>举例来说：<br>
假设在master分支的B点拉出一个新的分支dev，经过一段时间开发后：</p>
<ul>
<li>master分支上有两个新的提交M1和M2</li>
<li>dev分支上有三个提交D1，D2，和D3</li>
</ul>
<p>如下图所示：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017221.png" alt="image-20211210215256075" tabindex="0" loading="lazy"><figcaption>image-20211210215256075</figcaption></figure>
<p>现在我们完成了dev分支的开发测试工作，需要把dev分支合并回master分支。</p>
<h2>2. merge 的三种操作</h2>
<h3>2.1 merge</h3>
<p>这是最基本的merge，就是把提交历史原封不动的拷贝过来，包含完整的提交历史记录。</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">git</span><span style="color:#98C379;--shiki-dark:#98C379"> checkout</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">git</span><span style="color:#98C379;--shiki-dark:#98C379"> merge</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017264.png" alt="image-20211210215426765" tabindex="0" loading="lazy"><figcaption>image-20211210215426765</figcaption></figure>
<p><strong>此时还会生产一个merge commit (D4')</strong>，这个merge commit不包含任何代码改动，而包含在dev分支上的几个commit列表(D1, D2和D3)。查看git的提交历史(git log)可以看到所有的这些提交历史记录。</p>
<h3>2.2 squash merge</h3>
<p>根据字面意思，这个操作完成的是压缩的提交；解决的是什么问题呢，由于在dev分支上执行的是开发工作，有一些很小的提交，或者是纠正前面的错误的提交，对于这类提交对整个工程来说不需要单独显示出来一次提交，不然导致项目的提交历史过于复杂；所以基于这种原因，我们可以把dev上的所有提交都合并成一个提交；然后提交到主干。</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> checkout</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> merge</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --squash</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017292.png" alt="image-20211210215937039" tabindex="0" loading="lazy"><figcaption>image-20211210215937039</figcaption></figure>
<p>在这个例子中，我们把D1，D2和D3的改动合并成了一个D。</p>
<p>注意，squash merge并不会替你产生提交，它只是把所有的改动合并，然后放在本地文件，需要你再次手动执行git commit操作；此时又要注意了，因为你要你手动commit，也就是说这个commit是你产生的，不是有原来dev分支上的开发人员产生的，提交者本身发生了变化。也可以这么理解，就是你把dev分支上的所有代码改动一次性porting到master分支上而已。</p>
<h3>2.3 rebase merge</h3>
<p>由于squash merge会变更提交者作者信息，这是一个很大的问题，后期问题追溯不好处理(当然也可以由分支dev的所有者来执行squash merge操作，以解决部分问题)，rebase merge可以保留提交的作者信息，同时可以合并commit历史，完美的解决了上面的问题。</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> checkout</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> rebase</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> checkout</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> git</span><span style="color:#98C379;--shiki-dark:#98C379"> merge</span><span style="color:#98C379;--shiki-dark:#98C379"> dev</span></span></code></pre>
</div><p>rebase merge分两步完成：<br>
第一步：执行rebase操作，结果是看起来dev分支是从M2拉出来的，而不是从B拉出来的，然后使用-i参数手动调整commit历史，是否合并如何合并。例如下rebase -i命令会弹出文本编辑框：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">1&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">2&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">3&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #3</span></span></code></pre>
</div><p>假设D2是对D1的一个拼写错误修正，因此可以不需要显式的指出来，我们把D2修改为fixup：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">1&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">fixup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">2&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pick</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">D</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">3&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Message</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> commit</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #3</span></span></code></pre>
</div><p>rebase之后的状态变为：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017318.png" alt="image-20211210220238914" tabindex="0" loading="lazy"><figcaption>image-20211210220238914</figcaption></figure>
<p>D1'是D1和D2的合并。</p>
<p>第二步：再执行merge操作，把dev分支合并到master分支：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017343.png" alt="image-20211210220256208" tabindex="0" loading="lazy"><figcaption>image-20211210220256208</figcaption></figure>
<p>注意：在执行rebase的时候可能会出现冲突的问题，此时需要手工解决冲突的问题，然后执行(git add)命令；所有冲突解决完之后，这时不需要执行(git commit)命令，而是运行(git rebase --continue)命令，一直到rebase完成；如果中途想放弃rebase操作，可以运行(git rebase --abort)命令回到rebase之前的状态。</p>
<h2>参考文章</h2>
<p><a href="https://www.jianshu.com/p/ff1877c5864e" target="_blank" rel="noopener noreferrer">git merge的三种操作merge, squash merge, 和rebase merge</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231017221.png" type="image/png"/>
    </item>
    <item>
      <title>删除.git中的错误提交的文件.md</title>
      <link>https://mrjackc.github.io/posts/Git/git-y-delete-error-commit-file.html</link>
      <guid>https://mrjackc.github.io/posts/Git/git-y-delete-error-commit-file.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">删除.git中的错误提交的文件.md</source>
      <description>删除.git中的错误提交的文件.md 1. 背景 Git 操作时，经常“不小心”上传一些不必要的（大）文件，或者私密数据，等等。 当然可以从本地把这些文件删除，加入 .gitignore, 避免下次再上传。 然而，之前已经上传过的，还遗留在 git 历史中 2. 实例 如下是一个我误将vue 的第三方依赖node_modules 添加到git 导致.g...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>Git 操作时，经常“不小心”上传一些不必要的（大）文件，或者私密数据，等等。</p>
<p>当然可以从本地把这些文件删除，加入 <code>.gitignore</code>, 避免下次再上传。</p>
<p>然而，<strong>之前已经上传过的，还遗留在 git 历史中</strong></p>
<h2>2. 实例</h2>
<p>如下是一个我误将vue 的第三方依赖node_modules 添加到git 导致.git文件过大</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231018852.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>3. 操作步骤</h2>
<ol>
<li>
<p><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener noreferrer">下载bfg.jar</a>, 直接将其复制到 <code>your-repo.git</code> 目录下</p>
</li>
<li>
<p>删除.git 中的文件或者文件夹</p>
<ul>
<li>
<p>删除文件</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">java</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -jar</span><span style="color:#98C379;--shiki-dark:#98C379"> bfg-1.12.16.jar</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --delete-files</span><span style="color:#98C379;--shiki-dark:#98C379"> test1.py</span></span></code></pre>
</div></li>
<li>
<p>删除文件夹</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">java</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -jar</span><span style="color:#98C379;--shiki-dark:#98C379"> bfg-1.12.16.jar</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --delete-folders</span><span style="color:#98C379;--shiki-dark:#98C379"> "{folderA,folderB,folderC}"</span></span></code></pre>
</div></li>
</ul>
</li>
<li>
<p>执行如下 git 命令</p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">git</span><span style="color:#98C379;--shiki-dark:#98C379"> reflog</span><span style="color:#98C379;--shiki-dark:#98C379"> expire</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --expire=now</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">git</span><span style="color:#98C379;--shiki-dark:#98C379"> gc</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --prune=now</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --aggressive</span></span></code></pre>
</div><p>此时查看.git 文件夹，就可以看到文件变小了</p>
</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231018896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>参考文章</h2>
<p><a href="https://juejin.im/post/6844904045459537934" target="_blank" rel="noopener noreferrer">BFG Repo-Cleaner - 从 Git 历史中真正删除文件</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231018852.png" type="image/png"/>
    </item>
    <item>
      <title>gitlab配置custom hook</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x-custom-hook.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x-custom-hook.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">gitlab配置custom hook</source>
      <description>gitlab配置custom hook 1. 具体步骤 1.1 设置custom_hooks路径 修改 gitlab 中的vi /etc/gitlab/gitlab.rb 增加 custom_hooks_dir 路径： 注：这里直接去掉注释使用自带的 1.2 启用配置 1.3 创建hook文件 自定义脚本目录要符合&amp;lt;custom_hooks_dir&amp;gt;/...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 具体步骤</h2>
<h3>1.1 设置custom_hooks路径</h3>
<p>修改 gitlab 中的<code>vi /etc/gitlab/gitlab.rb</code></p>
<p>增加 custom_hooks_dir 路径：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>gitlab_shell['custom_hooks_dir'] = "/opt/gitlab/embedded/service/gitlab-shell/hooks"</span></span></code></pre>
</div><p>注：这里直接去掉注释使用自带的</p>
<h3>1.2 启用配置</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo gitlab-ctl reconfigure</span></span></code></pre>
</div><h3>1.3 创建hook文件</h3>
<p>自定义脚本目录要符合<code>&lt;custom_hooks_dir&gt;/&lt;hook_name.d&gt;/*</code> 的规范。具体就是</p>
<ul>
<li>
<p>在自定的<code>custom_hooks_dir</code> 目录下可创建三个文件夹对应三类 <code>server hook name</code> ：</p>
<ul>
<li>pre-receive.d</li>
<li>update.d</li>
<li>post-receive.d</li>
</ul>
</li>
<li>
<p>在每个文件夹下可以创建任意文件，在对应的hook时期，gitlab就会主动调用</p>
</li>
<li>
<p>文件名以<code>~</code>结尾的文件会被忽略</p>
</li>
<li>
<p>如果想看这部分的实现细节可以看 <code>&lt;gitlab-shell&gt;/lib/gitlab_custom_hook.rb</code> 文件</p>
</li>
</ul>
<p>目录结构示意</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>[root@localhost custom_hooks]# tree</span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├── post-receive.d</span></span>
<span class="line"><span>│   ├── 01.sh</span></span>
<span class="line"><span>│   └── 02.sh~</span></span>
<span class="line"><span>├── pre-receive.d</span></span>
<span class="line"><span>│   ├── 01.sh</span></span>
<span class="line"><span>│   ├── 02.py</span></span>
<span class="line"><span>│   └── 03.rb</span></span>
<span class="line"><span>└── update.d</span></span>
<span class="line"><span>    ├── 01.sh</span></span>
<span class="line"><span>    └── 02.sh</span></span></code></pre>
</div><h3>1.4 编写 hook 脚本</h3>
<p>hook 脚本就是git 自身的规范，写shell，python、ruby 都可以</p>
<p>留意脚本最后的退出值：<strong>0 正常退出，用户可以 push；非 0 异常退出，中断提交（pre-receive 和 update）</strong> 。<br>
细节参见： <a href="https://link.jianshu.com/?t=https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="noopener noreferrer">5.4 Git钩子：自定义你的工作流 · geeeeeeeeek/git-recipes Wiki · GitHub</a></p>
<p>如果想让用户 push 时看到相应的日志直接在脚本中 echo 即可。</p>
<p>这里举两个例子：</p>
<p>🌰：Say hi.</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "Say hi from gitlab servertes ok 😄"</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">exit</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span></code></pre>
</div><p>🌰：检查提交修改的文件，发现有特定内容禁止提交</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>FIND_KEY='.test.51offer.com'</span></span>
<span class="line"><span>OLD_VALUE=$2</span></span>
<span class="line"><span>NEW_VALUE=$3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FILES=$(git rev-list --objects $OLD_VALUE...$NEW_VALUE | egrep '\.(jsp|vm|java)$' | awk '{print $2}' | sort | uniq )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FLAG=0</span></span>
<span class="line"><span>for FILE in $FILES</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    git show $NEW_VALUE:$FILE | grep -q "$FIND_KEY"</span></span>
<span class="line"><span>    if [ $? -eq 0 ]</span></span>
<span class="line"><span>    then</span></span>
<span class="line"><span>        FLAG=1</span></span>
<span class="line"><span>        echo "📃  包含非法字段 '$FIND_KEY' : $FILE"</span></span>
<span class="line"><span>    fi</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [ $FLAG -eq 0 ]</span></span>
<span class="line"><span>then</span></span>
<span class="line"><span>    echo "✅  代码检查通过."</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>    echo "❌  代码检查不通过!"</span></span>
<span class="line"><span>    exit 1</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>exit 0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子结果</p>
<p>上面第二个例子中，尝试 <code>git push</code>，就能看到如下的日志：</p>
<div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">Pushing</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> to git</span><span style="color:#E06C75;--shiki-dark:#E06C75">@gitlab</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.51offer.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">inner</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">mall</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">paycenter.git</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">remote</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 📃  包含非法字段 </span><span style="color:#98C379;--shiki-dark:#98C379">'.test.51offer.com'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> : service</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">src</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">main</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">java</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">com</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">horizon</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#C678DD;--shiki-dark:#C678DD">module</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">paycenter</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">service</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">PayService</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.java        </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">remote</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ❌  代码检查不通过!        </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">remote</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> error</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> hook declined to update refs</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">heads</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/test</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">To</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> git</span><span style="color:#E06C75;--shiki-dark:#E06C75">@gitlab</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.51offer.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">inner</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">mall</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">paycenter.git</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [up to date]      release</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">old </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> release</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">old</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [up to date]      v1.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">2016.9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">8</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> v1.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">2016.9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">8</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2"> !</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [remote rejected] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">test</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -&gt;</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> test</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (hook declined)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">error</span><span style="color:#D19A66;--shiki-dark:#D19A66">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> failed to push some refs to </span><span style="color:#98C379;--shiki-dark:#98C379">'git@gitlab.51offer.inner:mall/paycenter.git'</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">Completed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> with errors, see above</span></span></code></pre>
</div><h3>参考文章</h3>
<p><a href="https://www.jianshu.com/p/5531a21afa68" target="_blank" rel="noopener noreferrer">Gitlab 服务器端 custom hook 配置</a></p>
<p><a href="https://docs.gitlab.com/ee/administration/custom_hooks.html" target="_blank" rel="noopener noreferrer">官方文档</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>gitlab搭建</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x-install.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x-install.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">gitlab搭建</source>
      <description>gitlab搭建 1. 搭建方式 gitlab 搭建有两种方式 第一种方法 说白了其实gitlab就是一个web端，打散后其实也是由（nginx，gitaly，redis，gitlab-workhorse...）等这些东西构成；所以你可以一个个组装一个个编译安装；这样你也可以深入去了解gitlab，同时也可以达到最简化（将不必要的东西去掉） 第二种方法...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 搭建方式</h2>
<p>gitlab 搭建有两种方式</p>
<ul>
<li>
<p>第一种方法</p>
<p>说白了其实gitlab就是一个web端，打散后其实也是由（nginx，gitaly，redis，gitlab-workhorse...）等这些东西构成；所以你可以一个个组装一个个编译安装；这样你也可以深入去了解gitlab，同时也可以达到最简化（将不必要的东西去掉）</p>
</li>
<li>
<p>第二种方法</p>
<p>rpm 安装。。。官方和社区都有提供</p>
</li>
</ul>
<p>第一种太折腾人了，本文演示第二种方式</p>
<h2>2. 安装</h2>
<h3>2.1 安装并配置必要的依赖关系</h3>
<p>在 CentOS 系统上，下面的命令将会打开系统防火墙 HTTP 和 SSH 的访问。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo yum install curl policycoreutils openssh-server openssh-clients</span></span>
<span class="line"><span>sudo systemctl enable sshd</span></span>
<span class="line"><span>sudo systemctl start sshd</span></span>
<span class="line"><span>sudo yum install postfix</span></span>
<span class="line"><span>sudo systemctl enable postfix</span></span>
<span class="line"><span>sudo systemctl start postfix</span></span>
<span class="line"><span>sudo firewall-cmd --permanent --add-service=http</span></span>
<span class="line"><span>sudo systemctl reload firewalld</span></span></code></pre>
</div><h3>2.2 添加 GitLab 镜像源并安装</h3>
<ul>
<li>
<p>方式1：命令管道的方式安装镜像仓库</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>curl -sS http://packages.gitlab.com.cn/install/gitlab-ce/script.rpm.sh | sudo bash</span></span>
<span class="line"><span>sudo yum install gitlab-ce</span></span></code></pre>
</div><p>我使用不成功</p>
</li>
<li>
<p>方式2：使用命名手动安装</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>curl -LJO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-XXX.rpm</span></span>
<span class="line"><span>rpm -i gitlab-ce-XXX.rpm</span></span></code></pre>
</div><p>gitlab-ce-xxx.rpm 具体是哪个版本可以进<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener noreferrer">gitlab镜像</a>中选择</p>
</li>
</ul>
<h4>2.2.1 安装时异常</h4>
<p>在使用命令rpm -i gitlab-ce-XXX.rpm 时提示</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>rpm -i gitlab-ce-12.2.4-ce.0.el7.x86_64.rpm</span></span>
<span class="line"><span>warning: gitlab-ce-12.2.4-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</span></span>
<span class="line"><span>error: Failed dependencies:</span></span>
<span class="line"><span>	policycoreutils-python is needed by gitlab-ce-12.2.4-ce.0.el7.x86_64</span></span></code></pre>
</div><p>需要安装</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>yum install policycoreutils-python</span></span></code></pre>
</div><h4>2.2.2 安装完成提示</h4>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>[root@iZwz97t3ru69kye3l7uj70Z ~]# rpm -i gitlab-ce-12.2.4-ce.0.el7.x86_64.rpm</span></span>
<span class="line"><span>warning: gitlab-ce-12.2.4-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</span></span>
<span class="line"><span>It looks like GitLab has not been configured yet; skipping the upgrade script.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       *.                  *.</span></span>
<span class="line"><span>      ***                 ***</span></span>
<span class="line"><span>     *****               *****</span></span>
<span class="line"><span>    .******             *******</span></span>
<span class="line"><span>    ********            ********</span></span>
<span class="line"><span>   ,,,,,,,,,***********,,,,,,,,,</span></span>
<span class="line"><span>  ,,,,,,,,,,,*********,,,,,,,,,,,</span></span>
<span class="line"><span>  .,,,,,,,,,,,*******,,,,,,,,,,,,</span></span>
<span class="line"><span>      ,,,,,,,,,*****,,,,,,,,,.</span></span>
<span class="line"><span>         ,,,,,,,****,,,,,,</span></span>
<span class="line"><span>            .,,,***,,,,</span></span>
<span class="line"><span>                ,*,.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>     _______ __  __          __</span></span>
<span class="line"><span>    / ____(_) /_/ /   ____ _/ /_</span></span>
<span class="line"><span>   / / __/ / __/ /   / __ `/ __ \</span></span>
<span class="line"><span>  / /_/ / / /_/ /___/ /_/ / /_/ /</span></span>
<span class="line"><span>  \____/_/\__/_____/\__,_/_.___/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Thank you for installing GitLab!</span></span>
<span class="line"><span>GitLab was unable to detect a valid hostname for your instance.</span></span>
<span class="line"><span>Please configure a URL for your GitLab instance by setting `external_url`</span></span>
<span class="line"><span>configuration in /etc/gitlab/gitlab.rb file.</span></span>
<span class="line"><span>Then, you can start your GitLab instance by running the following command:</span></span>
<span class="line"><span>  sudo gitlab-ctl reconfigure</span></span>
<span class="line"><span></span></span>
<span class="line"><span>For a comprehensive list of configuration options please see the Omnibus GitLab readme</span></span>
<span class="line"><span>https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.3 配置</h3>
<h4>2.3.1 配置外网访问的地址(必须改)</h4>
<p>修改/etc/gitlab/gitlab.rb，将默认external_url改成，你的ip或者域名</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>external_url 'http://gitlab.isture.com'</span></span>
<span class="line"><span>#external_url 'http://120.79.200.xxx'</span></span></code></pre>
</div><h4>2.3.2 nginx端口冲突</h4>
<p>gitlab 其实是个web，他自带了nginx。但是我们本身服务器也有一个nginx这样就冲突了</p>
<h5>2.3.2.1 解决方案</h5>
<ul>
<li>
<p>第一种（不建议）</p>
<p>禁用gitlab自带的nginx，使用我们自己安装的nginx</p>
</li>
<li>
<p>第二种</p>
<p>更改gitlab 自带的nginx的默认端口，域名加端口访问。</p>
<p>如果有强迫症，可以在自己的服务器nginx映射到gitlab 的nginx就好了</p>
</li>
</ul>
<h5>2.3.2.2 修改配置</h5>
<p>修改/etc/gitlab/gitlab.rb的端口配置</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> nginx['listen_port'] = 9999</span></span></code></pre>
</div><h4>2.3.3 修改Gitlab数据存储路径（非必选）</h4>
<p>默认的Gitlab数据存储路径在<code>/var/opt/gitlab/git-data</code></p>
<p>修改/etc/gitlab/gitlab.rb</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>###!   path that doesn't contain symlinks.**</span></span>
<span class="line"><span># git_data_dirs({</span></span>
<span class="line"><span>#   "default" =&gt; {</span></span>
<span class="line"><span>#     "path" =&gt; "你需要放置的路径"</span></span>
<span class="line"><span>#    }</span></span>
<span class="line"><span># })</span></span></code></pre>
</div><h3>2.4 启用配置并启动GitLab</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo gitlab-ctl reconfigure</span></span></code></pre>
</div><p>其他gitlab 命令</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo gitlab-ctl reconfigure</span></span>
<span class="line"><span>sudo gitlab-ctl restart</span></span>
<span class="line"><span>sudo gitlab-ctl status</span></span></code></pre>
</div><h3>2.5 浏览器打开配置的地址</h3>
<ul>
<li>
<p>在第一次访问时，将被重定向到密码重置页面</p>
<p>默认账户是root，密码在此页面设置</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020676.png" alt="image-20190907201354004" tabindex="0" loading="lazy"><figcaption>image-20190907201354004</figcaption></figure>
<h2>3. 常用的几个Gitlab命令</h2>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># 重新应用gitlab的配置,每次修改/etc/gitlab/gitlab.rb文件之后执行</span></span>
<span class="line"><span>sudo gitlab-ctl reconfigure</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动gitlab服务</span></span>
<span class="line"><span>sudo gitlab-ctl start</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 重启gitlab服务</span></span>
<span class="line"><span>sudo gitlab-ctl restart</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看gitlab运行状态</span></span>
<span class="line"><span>sudo gitlab-ctl status</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#停止gitlab服务</span></span>
<span class="line"><span>sudo gitlab-ctl stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看gitlab运行所有日志</span></span>
<span class="line"><span>sudo gitlab-ctl tail</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#查看 nginx 访问日志</span></span>
<span class="line"><span>sudo gitlab-ctl tail nginx/gitlab_acces.log </span></span>
<span class="line"><span></span></span>
<span class="line"><span>#查看 postgresql 日志</span></span>
<span class="line"><span>sudo gitlab-ctl tail postgresql </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 停止相关数据连接服务</span></span>
<span class="line"><span>gitlab-ctl stop unicorn</span></span>
<span class="line"><span>gitlab-ctl stop sidekiq</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 系统信息监测</span></span>
<span class="line"><span>gitlab-rake gitlab:env:info</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>4. gitlab相关目录</h2>
<ul>
<li>/var/opt/gitlab/git-data/repositories/root：库默认存储目录</li>
<li>/opt/gitlab：是gitlab的应用代码和相应的依赖程序</li>
<li>/var/opt/gitlab：此目录下是运行gitlab-ctl reconfigure命令编译后的应用数据和配置文件，不需要人为修改配置</li>
<li>/etc/gitlab：此目录下存放了以omnibus-gitlab包安装方式时的配置文件，这里的配置文件才需要管理员手动编译配置</li>
<li>/var/log/gitlab：此目录下存放了gitlab各个组件产生的日志</li>
<li>/opt/gitlab/backups/：默认备份文件生成的目录</li>
</ul>
<h3>参考文章</h3>
<p><a href="https://segmentfault.com/a/1190000011632220" target="_blank" rel="noopener noreferrer">搭建gitlab服务</a></p>
<p><a href="https://blog.csdn.net/ouyang_peng/article/details/72903221" target="_blank" rel="noopener noreferrer">在CenterOS系统上安装GitLab并自定义域名访问GitLab管理页面</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020676.png" type="image/png"/>
    </item>
    <item>
      <title>gitlab内存占用过大</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x-memory-size.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x-memory-size.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">gitlab内存占用过大</source>
      <description>gitlab内存占用过大 我的服务器配置是2核4G内存，启动gitlab 就占用了很大内存空间(停止gitlab 会释放1.5G内存) 1. 解决方案 1.1 减少 unicorn worker进程数 我们可以使用 top -ac 先看一下开启了多少unicorn worker进程，gitlab默认开启进程数与CPU内核数相同 默认是被注释掉的，官方建...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<p>我的服务器配置是2核4G内存，启动gitlab 就占用了很大内存空间(停止gitlab 会释放1.5G内存)</p>
<h2>1. 解决方案</h2>
<h3>1.1 减少 unicorn worker进程数</h3>
<p>我们可以使用 top -ac 先看一下开启了多少unicorn worker进程，gitlab默认开启进程数与CPU内核数相同</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vim /etc/gitlab/gitlab.rb</span></span>
<span class="line"><span>unicorn['worker_processes'] = 8</span></span></code></pre>
</div><p>默认是被注释掉的，官方建议该值是CPU核心数加一，可以提高服务器的响应速度，如果内存只有4G，或者服务器上有其它业务，就不要改了，以免内存不足。另外，这个参数最小值是2，设为1，服务器可能会卡死。</p>
<h3>1.2 减少数据库缓存</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> postgresql['shared_buffers'] = "128MB"</span></span></code></pre>
</div><p>默认为256MB，可适当改小</p>
<h3>1.3 减少数据库并发数</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>postgresql['max_worker_processes'] = 4</span></span></code></pre>
</div><p>默认为8，可适当减少</p>
<h3>1.4 减少sidekiq并发数</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sidekiq['concurrency'] = 10</span></span></code></pre>
</div><p>默认是25，可适当改小</p>
]]></content:encoded>
    </item>
    <item>
      <title>Gitlab-Runner实践</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x-runner-action.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x-runner-action.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Gitlab-Runner实践</source>
      <description>Gitlab-Runner实践 image-20191220114358441image-20191220114358441 根据gitlab-runner 的介绍，我们可以看到 1. 安装Gitlab Runner 2. 注册gitlab-runner 安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库注册一个 Runner，...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020871.png" alt="image-20191220114358441" tabindex="0" loading="lazy"><figcaption>image-20191220114358441</figcaption></figure>
<p>根据gitlab-runner 的介绍，我们可以看到</p>
<h2>1. 安装Gitlab Runner</h2>
<h2>2. 注册gitlab-runner</h2>
<p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener noreferrer">注册一个 Runner</a>，注册的交互式命令如下：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo gitlab-runner register</span></span></code></pre>
</div><p>命令交互过程</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span></span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://blinkfox.github.io/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/" target="_blank" rel="noopener noreferrer">GitLab CI/CD 介绍和使用</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020871.png" type="image/png"/>
    </item>
    <item>
      <title>Gitlab-Runner的安装与使用</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x-runner-install.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x-runner-install.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Gitlab-Runner的安装与使用</source>
      <description>Gitlab-Runner的安装与使用 1. 安装步骤 1.1 安装gitlab-ci-multi-runner 添加yum源 安装 这里是官网的安装教程，其它操作系统的请参考 https://gitlab.com/gitlab-org/gitlab-ci-multi-runner 1.2 使用gitlab-ci-multi-runner注册Runne...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 安装步骤</h2>
<h3>1.1 安装gitlab-ci-multi-runner</h3>
<ul>
<li>
<p>添加yum源</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span></span></code></pre>
</div></li>
<li>
<p>安装</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>yum install gitlab-ci-multi-runner</span></span></code></pre>
</div><p>这里是官网的安装教程，其它操作系统的请参考<br>
<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener noreferrer">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a></p>
</li>
</ul>
<h3>1.2 使用gitlab-ci-multi-runner注册Runner</h3>
<p>安装好gitlab-ci-multi-runner这个软件之后，我们可以用它想gitlab-ci注册runner</p>
<p>向gitlab-CI注册runner需要两样东西:<strong>GitLab-CI的url</strong>和<strong>注册token</strong>。</p>
<p>其中，token是为了确定你这个Runner是<strong>所有工程都能够使用的Shared Runner</strong>还是具体<strong>某一个工程才能使用的Specific Runner</strong>。</p>
<h4>1.2.1 所有工程都能够使用的Shared Runner</h4>
<p>如果要注册Shared Runner，你需要到管理界面的Runners页面里面去找注册token。如下图所示：</p>
<h4>1.2.2 某一个工程才能使用的Specific Runner</h4>
<p>如果要注册Specific Runner，你需要到项目的设置的Runner页面里面去找注册token。如下图所示：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020625.png" alt="image-20200109135721629" tabindex="0" loading="lazy"><figcaption>image-20200109135721629</figcaption></figure>
<h4>1.2.3 注册runner</h4>
<p>找到token之后，运行下面这条命令注册Runner（当然，除了url和token之外，还需要其他的信息，比如执行器<code>executor</code>、构建目录<code>builds_dir</code>等）。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># 如果启动sudo 这里也要加上sudo</span></span>
<span class="line"><span>gitlab-ci-multi-runner register</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020669.png" alt="image-20200109140942669" tabindex="0" loading="lazy"><figcaption>image-20200109140942669</figcaption></figure>
<p>依据提示输入</p>
<h3>注意事项</h3>
<ul>
<li>
<p>Whether to run untagged builds [true/false]:</p>
<p>是否运行在没有 tag 的 build 上面。在配置 gitlab-ci 时，会有很多 job，每个 job 可以通过 tags 属性来选择 Runner。<strong>这里为 true 表示如果 job 没有配置 tags，也执行。</strong></p>
</li>
<li>
<p>Whether to lock the Runner to current project [true/false]:</p>
<p>是否锁定 Runner 到当前项目</p>
</li>
<li>
<p>选择 executor，这里列出了很多 executor</p>
<p>shell</p>
</li>
</ul>
<p>注册完成之后，GitLab-CI就会多出一条Runner记录，如下图所示：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020693.png" alt="image-20200109141223152" tabindex="0" loading="lazy"><figcaption>image-20200109141223152</figcaption></figure>
<h3>1.3 让注册好的Runner运行起来</h3>
<p>Runner注册完成之后还不行，还必须让它运行起来，否则它无法接收到GitLab-CI的通知并且执行软件集成脚本。怎么让Runner运行起来呢？<code>gitlab-ci-multi-runner</code>提供了这样一条命令<code>gitlab-ci-multi-runner run-single</code>，详情如下：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>gitlab-ci-multi-runner start gitbook-runner</span></span></code></pre>
</div><p>查看runner运行状态</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ps -aux | grep gitlab-runner</span></span></code></pre>
</div><p>gitlab运行成功了</p>
<h2>2. 可能遇到的问题</h2>
<h3>2.1 注册 runner 后，gitlab runner 出现灰色感叹号</h3>
<p>在服务器注册完 runner 后，在 gitlab 的 runner 处出现灰色感叹号，并提示 new runner has not connected yet。这个问题一般都是权限问题造成的，加 sudo 和不加 sudo 所创建的配置文件不同。在使用 <code>gitlab-runner register</code> 注册的时候，加上 sudo，在启动 runner 时也要加上 sudo ， <code>sudo gitlab-runner restart</code> 或 <code>sudo gitlab-runner start</code> 。</p>
<h3>参考文章</h3>
<p><a href="https://www.jianshu.com/p/2b43151fb92e" target="_blank" rel="noopener noreferrer">GitLab-CI与GitLab-Runner</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231020625.png" type="image/png"/>
    </item>
    <item>
      <title>问题集锦</title>
      <link>https://mrjackc.github.io/posts/Git/gitlab-x_problem.html</link>
      <guid>https://mrjackc.github.io/posts/Git/gitlab-x_problem.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">问题集锦</source>
      <description>问题集锦 1. push 提交异常 push 提交时出现fatal: The remote end hung up unexpectedly异常 1.1 解决方案 原因：因为上传文件超过了nginx 的文件限制最大值 注意：自己是走哪个nginx，是gitlab自带的还是服务器的nginx 给nginx 添加上 2. clone路径不对 2.1 方式一...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. push 提交异常</h2>
<p>push 提交时出现fatal: The remote end hung up unexpectedly异常</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>localhost:android zhangshengzhong$ git push --set-upstream http://gitlab.isture.com/zsz/android-gitbook.git master</span></span>
<span class="line"><span>Counting objects: 245, done.</span></span>
<span class="line"><span>Delta compression using up to 8 threads.</span></span>
<span class="line"><span>Compressing objects: 100% (214/214), done.</span></span>
<span class="line"><span>error: RPC failed; result=22, HTTP code = 41383 MiB/s</span></span>
<span class="line"><span>fatal: The remote end hung up unexpectedly</span></span>
<span class="line"><span>Writing objects: 100% (245/245), 15.83 MiB | 6.85 MiB/s, done.</span></span>
<span class="line"><span>Total 245 (delta 7), reused 0 (delta 0)</span></span>
<span class="line"><span>fatal: The remote end hung up unexpectedly</span></span>
<span class="line"><span>Everything up-to-date</span></span></code></pre>
</div><h3>1.1 解决方案</h3>
<p>原因：因为上传文件超过了nginx 的文件限制最大值</p>
<p>注意：自己是走哪个nginx，是gitlab自带的还是服务器的nginx</p>
<p>给nginx 添加上</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>http {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  client_max_body_size 100M;</span></span></code></pre>
</div><h2>2. clone路径不对</h2>
<h3>2.1 方式一</h3>
<p>直接更改/etc/gitlab/gitlab.rb不能生效，更改/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml文件</p>
]]></content:encoded>
    </item>
    <item>
      <title>终端究极美化iTerm2+Pure</title>
      <link>https://mrjackc.github.io/posts/Linux/iterm2-pure.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/iterm2-pure.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">终端究极美化iTerm2+Pure</source>
      <description>提示 之前介绍了ZSH的安装和使用，这次把最终成果介绍一下，就是ZSH + iTerm2 + Pure 前置工作：安装ZSH，请参照之前的文章👉zsh安装</description>
      <category>Linux</category>
      <pubDate>Fri, 24 Mar 2023 16:40:37 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>之前介绍了ZSH的安装和使用，这次把最终成果介绍一下，就是ZSH + iTerm2 + Pure</p>
<p>前置工作：安装ZSH，请参照之前的文章👉<a href="/posts/Linux/zsh.html" target="_blank">zsh安装</a></p>
</div>
<!-- more -->
<h2>目录</h2>

<h2>先看效果图</h2>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/140a5562a8b9e334.png" alt="界面" tabindex="0" loading="lazy"><figcaption>界面</figcaption></figure>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/810d0c1d2a4d7069.png" alt="命令提示" tabindex="0" loading="lazy"><figcaption>命令提示</figcaption></figure>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/052c26b51ecde528.png" alt="流输出" tabindex="0" loading="lazy"><figcaption>流输出</figcaption></figure>
<h2>安装pure</h2>
<p>👉<a href="https://github.com/sindresorhus/pure" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>可以使用 npm 或手动安装。需要 Git 2.15.2+ 和 ZSH 5.2+。已知旧版本的 ZSH 可以工作，但不推荐使用。</p>

<p>如果是手动安装的，将克隆的 repo 的路径添加到 $HOME/.zshrc 中的 $fpath 。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># .zshrc</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">fpath</span><span style="color:#C678DD;--shiki-dark:#C678DD">+=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">$HOME</span><span style="color:#98C379;--shiki-dark:#98C379">/.zsh/pure</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div><p>将以下内容复制到 <code>.zshrc</code>文件中</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">autoload</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -U</span><span style="color:#98C379;--shiki-dark:#98C379"> promptinit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">promptinit</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">prompt</span><span style="color:#98C379;--shiki-dark:#98C379"> pure</span></span></code></pre>
</div><p>在 .zshrc 中设置 ZSH_THEME="" 以禁用 oh-my-zsh 主题。</p>
<p>到这里就基本完成了，如果要基于pure做详细定制，请参考文档</p>
<h2>iTerm2</h2>
<p>👉戳这里下载 <a href="https://iterm2.com/downloads.html" target="_blank" rel="noopener noreferrer">官方下载地址</a></p>
<p>效果图我自用的配置文件在这里 👉 <a href="https://pan.baidu.com/s/1cG-gSwoPouYXeZ-P2pjmAg" target="_blank" rel="noopener noreferrer">链接</a>  密码:74aq</p>
<h3>1.主题配置</h3>
<p>访问iTerm2主题网站👉<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener noreferrer">iTerm2-Color-Schemes</a></p>
<p>可以下载zip包并解压到本地，进入解压缩的文件目录，找到schemes文件夹，里边全是主题配置，可以对照github上的效果图来选择</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/2eee92812c17fc48.png" alt="导入" tabindex="0" loading="lazy"><figcaption>导入</figcaption></figure>
<h3>2. 标签页配色</h3>
<p>标签配色默认为黑色，不能与操作页面保持统一</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/9995b0382a76bba8.png" alt="默认" tabindex="0" loading="lazy"><figcaption>默认</figcaption></figure>
<p>打开iTerm2，打开Preferences配置界面，Appearence -&gt; General，将 Theme 改为 Minimal</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/411e917c7fb3d2b9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>3. 设置 Status bar</h3>
<p>iTerm2 提供了不少的 Status bar，开启后我们可以在终端的最上方非常方便的实时查看本机的一些信息。</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/d93a133dcd5fe00c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>打开iTerm2，打开Preferences配置界面，Profiles -&gt; session-&gt; 勾选 Status bar enable-&gt; configure Status bar，选择自己想要的展示内容即可。向下托动放入Active Components 中即可,我这里只选了CPU、内存、网络</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/918522902136668f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>4. 光标选择</h3>
<p>iterm提供了三种光标可供选择：_、|、[]。</p>
<p>打开iTerm2，打开Preferences配置界面，Profiles -&gt; text-&gt; cursor，选择自己想要的光标即可。</p>
<h3>5.配置SSH快速连接</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#首先在/Users目录下按照如下命令创建sh脚本</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">cd</span><span style="color:#98C379;--shiki-dark:#98C379"> /Users/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#创建iterm文件夹</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mkdir</span><span style="color:#98C379;--shiki-dark:#98C379"> iterm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#进入iterm文件夹</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">cd</span><span style="color:#98C379;--shiki-dark:#98C379"> iterm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#创建myserver.sh文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">touch</span><span style="color:#98C379;--shiki-dark:#98C379"> myserver.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#编辑myserver.sh文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">vi</span><span style="color:#98C379;--shiki-dark:#98C379"> myserver.sh</span></span></code></pre>
</div><p>如果出现没有权限，就命令前面加上sudo</p>
<p>键盘输入i编辑文件，插入以下内容：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/usr/bin/expect</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">set</span><span style="color:#98C379;--shiki-dark:#98C379"> timeout</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">spawn</span><span style="color:#98C379;--shiki-dark:#98C379"> ssh</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#98C379;--shiki-dark:#98C379"> 0]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#98C379;--shiki-dark:#98C379"> 1]@[lindex</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $argv</span><span style="color:#98C379;--shiki-dark:#98C379"> 2]</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">expect</span><span style="color:#98C379;--shiki-dark:#98C379"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        "(yes/no)?"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        {</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">send</span><span style="color:#98C379;--shiki-dark:#98C379"> "yes\n"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">exp_continue}</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        "password:"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        {</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">send</span><span style="color:#98C379;--shiki-dark:#98C379"> "[lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#98C379;--shiki-dark:#98C379"> 3]\n"}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">interact</span></span></code></pre>
</div><p>myserver.sh文件中变量解释：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 0]：端口号</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 1]：服务器用户名</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 2]：服务器IP地址</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[lindex </span><span style="color:#E06C75;--shiki-dark:#E06C75">$argv</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 3]：服务器密码</span></span></code></pre>
</div><p>插入完成后键盘esc 然后输入:wq退出，接下来给文件赋权</p>
<p>chmod 777 <a href="http://myserver.sh" target="_blank" rel="noopener noreferrer">myserver.sh</a><br>
打开iTerm2，打开Preferences配置界面，Profiles -&gt; general，左下角点击+号，新建profile，参考下面图片在对应位置输入内容即可。</p>
<figure><img src="https://s3.bmp.ovh/imgs/2023/03/24/349fdd06e7bc428d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>Name:根据需求输入，通常选择标识性较强的内容便于区分，例如服务器的IP地址</p>
<p>Command：这里选择login Shell</p>
<p>Send text at start ：填写格式形如A B C D E这样，每一个部分之间用空格隔开，根据自己实际情况填写,下面是对每一部分内容的解释</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>A 代表咱们上面写的本机保存sh脚本的路径：/Users/iterm/myserver.sh</p>
<p>B 代表服务器端口号一般远程连接端口为：22</p>
<p>C 代表服务器用户名一般为：root</p>
<p>D 代表服务器IP：公网IP填写</p>
<p>E 代表服务器密码：根据自己实际的服务器密码填写<br>
设置好之后打开iTerm2，点击profiles，点击前面自己新增的连接远程服务器的profile的名字</p>
<p>首次连接需要输入一次服务器密码，之后再连接就免密码登陆了</p>
</div>
<h2>结语</h2>
<p>当然这里只介绍一部分，还有很多高级玩法，需要用到的时候自己去研究一下了</p>
]]></content:encoded>
      <enclosure url="https://s3.bmp.ovh/imgs/2023/03/24/140a5562a8b9e334.png" type="image/png"/>
    </item>
    <item>
      <title>shell入门</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-a-shell.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-a-shell.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">shell入门</source>
      <description>shell入门 1. 简介 Shell 是一个命令解释器,它为用户提供了一个向 Linux 内核发送请求以便运行程序界面系统级程序,用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。 image-20220330153029197image-20220330153029197 2. Shell 编程快速入门 进入 Linux 终端,编写一个...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Shell 是一个命令解释器,它为用户提供了一个向 Linux 内核发送请求以便运行程序界面系统级程序,用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231032989.png" alt="image-20220330153029197" tabindex="0" loading="lazy"><figcaption>image-20220330153029197</figcaption></figure>
<h2>2. <strong>Shell 编程快速入门</strong></h2>
<p>进入 Linux 终端,编写一个 Shell 脚本 <a href="http://hello.sh" target="_blank" rel="noopener noreferrer">hello.sh</a> ：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 'hello world!'</span></span></code></pre>
</div><p>运行：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法1 </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sh</span><span style="color:#98C379;--shiki-dark:#98C379"> hello.sh</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法2 </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">chmod</span><span style="color:#98C379;--shiki-dark:#98C379"> +x</span><span style="color:#98C379;--shiki-dark:#98C379"> hello.sh</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">./hello.sh</span></span></code></pre>
</div><p>终端打印出 <code>hello world!</code> 。</p>
<p><strong>说明：</strong></p>
<ul>
<li><code>#!</code> 告诉系统这个脚本需要什么解释器来执行。</li>
<li>文件扩展名 <code>.sh</code> 不是强制要求的。</li>
<li>方法1 直接运行解释器,<code>hello.sh</code> 作为 Shell 解释器的参数。此时 Shell 脚本就不需要指定解释器信息,第一行可以去掉。</li>
<li>方法2 <a href="http://hello.sh" target="_blank" rel="noopener noreferrer">hello.sh</a> 作为可执行程序运行,Shell 脚本第一行一定要指定解释器。</li>
</ul>
<h2>3. <strong>Shell 变量</strong></h2>
<h3>3.1 <strong>定义</strong></h3>
<p>Shell 变量分为<strong>系统变量</strong>和<strong>自定义变量</strong>。系统变量有<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">HOME,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.05764em;">OME</span><span class="mpunct">,</span></span></span></span>PWD,$USER等,显示当前 Shell 中所有变量：<code>set</code> 。<br>
变量名可以由字母、数字、下划线组成,不能以数字开头。</p>
<h3>3.2 <strong>基本语法</strong></h3>
<ul>
<li><strong>定义变量：</strong> 变量名=变量值,等号两侧不能有空格,变量名一般习惯用大写。</li>
<li><strong>删除变量：</strong> unset 变量名 。</li>
<li><strong>声明静态变量：</strong> readonly 变量名,静态变量不能unset。</li>
<li><strong>使用变量：</strong> $变量名</li>
</ul>
<h3>3.3 <strong>将命令返回值赋给变量（重点）</strong></h3>
<ul>
<li>A=` ls` 反引号,执行里面的命令</li>
<li>A=$(ls) 等价于反引号</li>
</ul>
<h2>4. <strong>Shell 环境变量</strong></h2>
<h3>4.1 <strong>定义</strong></h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231032032.png" alt="image-20220330153653301" tabindex="0" loading="lazy"><figcaption>image-20220330153653301</figcaption></figure>
<h3>4.2 <strong>基本语法</strong></h3>
<ol>
<li>export 变量名=变量值,将 Shell 变量输出为环境变量。</li>
<li>source 配置文件路径,让修改后的配置信息立即生效。</li>
<li>echo $变量名,检查环境变量是否生效</li>
</ol>
<h3>4.3 <strong>位置参数变量</strong></h3>
<p><strong>基本语法</strong></p>
<ul>
<li>$n ：$0 代表命令本身,$1-$9 代表第1到9个参数,10以上参数用花括号,如 ${10}。</li>
<li>$* ：命令行中所有参数,且把所有参数看成一个整体。</li>
<li>$@ ：命令行中所有参数,且把每个参数区分对待。</li>
<li>$# ：所有参数个数。</li>
</ul>
<h3>4.4 <strong>实例：</strong></h3>
<p>编写 Shell 脚本 <a href="http://positionPara.sh" target="_blank" rel="noopener noreferrer">positionPara.sh</a> ,输出命令行输入的各个参数信息。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash     </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 输出各个参数 </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $0</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $1</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> $*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $@</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 参数个数=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">$#</span></span></code></pre>
</div><p>运行：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">chmod</span><span style="color:#98C379;--shiki-dark:#98C379"> +x</span><span style="color:#98C379;--shiki-dark:#98C379"> positionPara.sh</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">./positionPara.sh</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span></span></code></pre>
</div><p>运行结果：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">./positionPara.sh</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">参数个数</span><span style="color:#98C379;--shiki-dark:#98C379">=2</span></span></code></pre>
</div><h2>5. <strong>预定义变量</strong></h2>
<h3>5.1 <strong>定义</strong></h3>
<p>在赋值定义之前,事先在 Shell 脚本中直接引用的变量。</p>
<h3>5.2 <strong>基本语法</strong></h3>
<ul>
<li><code>$$</code> ：当前进程的PID进程号。</li>
<li><code>$!</code> ：后台运行的最后一个进程的 PID 进程号。</li>
<li><code>$?</code> ：最后一次执行的命令的返回状态,0为执行正确,非0执行失败。</li>
</ul>
<h3>5.3 <strong>实例：</strong></h3>
<p>编写 Shell 脚本 <a href="http://prePara.sh" target="_blank" rel="noopener noreferrer">prePara.sh</a> ,输出命令行输入的各个参数信息。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash     </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">echo 当前的进程号</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$$ </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># &amp;：以后台的方式运行程序 </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">hello.sh &amp; </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">echo 最后一个进程的进程号</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$! </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">echo 最后执行的命令结果</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$?</span></span></code></pre>
</div><p>运行结果：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">当前的进程号</span><span style="color:#98C379;--shiki-dark:#98C379">=41752</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">最后一个进程的进程号</span><span style="color:#98C379;--shiki-dark:#98C379">=41753</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">最后执行的命令结果</span><span style="color:#98C379;--shiki-dark:#98C379">=0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # hello world!</span></span></code></pre>
</div><h2>6.<strong>运算符</strong></h2>
<h3>6.1 <strong>基本语法</strong></h3>
<ul>
<li>$((运算式)) 或 $[运算式]</li>
<li>expr m + n 注意 expr 运算符间要有空格</li>
<li>expr m - n</li>
<li>expr *,/,% 分别代表乘,除,取余</li>
</ul>
<h3>6.2 <strong>实例</strong></h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 第1种方式 $(()) </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $(((</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">2+3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">*4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 第2种方式 $[],推荐 </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span><span style="color:#98C379;--shiki-dark:#98C379">[</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">2+3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span><span style="color:#98C379;--shiki-dark:#98C379">4]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用 expr </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">TEMP</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">`</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">expr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> + </span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span><span style="color:#98C379;--shiki-dark:#98C379">`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">expr</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $TEMP</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> \*</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#98C379;--shiki-dark:#98C379">`</span></span></code></pre>
</div><h2>7. <strong>条件判断</strong></h2>
<h3>7.1 <strong>基本语法</strong></h3>
<p>[ condition ] 注意condition前后要有空格。非空返回0,0为 true,否则为 false 。</p>
<h3>7.2 <strong>实例</strong></h3>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#98C379;--shiki-dark:#98C379">'test01'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> 'test'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ] </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">     echo</span><span style="color:#98C379;--shiki-dark:#98C379"> '等于'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 20是否大于10 </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -gt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 10] </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">     echo</span><span style="color:#98C379;--shiki-dark:#98C379"> '大于'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 是否存在文件/root/shell/a.txt </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /root/shell/a.txt ] </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">     echo</span><span style="color:#98C379;--shiki-dark:#98C379"> '存在'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#98C379;--shiki-dark:#98C379">'test02'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> 'test02'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ] &amp;&amp; </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 'hello'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> || </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 'world'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">     echo</span><span style="color:#98C379;--shiki-dark:#98C379"> '条件满足,执行后面的语句'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">运行结果：</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">大于</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">条件满足,执行后面的语句</span></span></code></pre>
</div><h2>9. <strong>流程控制</strong></h2>
<h3>9.1 <strong>if 判断</strong></h3>
<h4>9.1.1 <strong>基本语法</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ 条件判断式 ];</span><span style="color:#C678DD;--shiki-dark:#C678DD">then</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 或者（推荐）</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ 条件判断式 ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ 条件判断式 ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span></span></code></pre>
</div><h4>9.1.2 <strong>实例</strong></h4>
<p>编写 Shell 程序：如果输入的参数大于60,输出“及格”,否则输出“不及格”。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">$1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -ge</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 60</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 及格</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">$1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -lt</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 60</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "不及格"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">fi</span></span></code></pre>
</div><h3>9.2 <strong>case 分支</strong></h3>
<h4>9.2.1 <strong>基本语法</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">case</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $变量名</span><span style="color:#C678DD;--shiki-dark:#C678DD"> in</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">"值1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">如果变量值等于值1,则执行此处程序1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">"值2"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">如果变量值等于值2,则执行此处程序2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">...省略其它分支...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">如果变量值不等于以上列出的值,则执行此处程序</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">esac</span></span></code></pre>
</div><h4>9.2.2 <strong>实例</strong></h4>
<p>当命令行参数为1时输出“周一”,2时输出“周二”,其他情况输出“其它”。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">case</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $1</span><span style="color:#C678DD;--shiki-dark:#C678DD"> in</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">"1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 周一</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">"2"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 周二</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">*)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> 其它</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">esac</span></span></code></pre>
</div><h3>9.3 <strong>for 循环</strong></h3>
<h4>9..3.1 <strong>基本语法</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法1</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 变量名 in 值1 值2 值3...</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法2</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ((初始值;循环控制条件;变量变化))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span></span></code></pre>
</div><h4>9.3.2 <strong>实例</strong></h4>
<ol>
<li>打印命令行输入的参数。</li>
</ol>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用$* </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#E06C75;--shiki-dark:#E06C75"> i</span><span style="color:#C678DD;--shiki-dark:#C678DD"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> "</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">$*</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "the arg is </span><span style="color:#E06C75;--shiki-dark:#E06C75">$i</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "=================="</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 使用$@ </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#E06C75;--shiki-dark:#E06C75"> j</span><span style="color:#C678DD;--shiki-dark:#C678DD"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> "</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">$@</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "the arg is </span><span style="color:#E06C75;--shiki-dark:#E06C75">$j</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span></span></code></pre>
</div><p>运行结果（回顾一下 $* 和 $@ 的区别）：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">the</span><span style="color:#98C379;--shiki-dark:#98C379"> arg</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">==================</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">the</span><span style="color:#98C379;--shiki-dark:#98C379"> arg</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">the</span><span style="color:#98C379;--shiki-dark:#98C379"> arg</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">the</span><span style="color:#98C379;--shiki-dark:#98C379"> arg</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span></span></code></pre>
</div><ol>
<li>输出从1加到100的值。</li>
</ol>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">SUM</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ((</span><span style="color:#E06C75;--shiki-dark:#E06C75">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#E06C75;--shiki-dark:#E06C75">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66">100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#E06C75;--shiki-dark:#E06C75">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)) </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     </span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    SUM</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$</span><span style="color:#98C379;--shiki-dark:#98C379">[</span><span style="color:#E06C75;--shiki-dark:#E06C75">$SUM</span><span style="color:#98C379;--shiki-dark:#98C379">+</span><span style="color:#E06C75;--shiki-dark:#E06C75">$i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $SUM</span></span></code></pre>
</div><h3>9.4 <strong>while 循环</strong></h3>
<h4>9.4.1<strong>基本语法</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ 条件判断式 ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    程序</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span></span></code></pre>
</div><h4>9.4.2<strong>实例</strong></h4>
<p>输出从1加到100的值。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">SUM</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">0</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [ </span><span style="color:#E06C75;--shiki-dark:#E06C75">$i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -le</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> $1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">do</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    SUM</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$</span><span style="color:#98C379;--shiki-dark:#98C379">[</span><span style="color:#E06C75;--shiki-dark:#E06C75">$SUM</span><span style="color:#98C379;--shiki-dark:#98C379">+</span><span style="color:#E06C75;--shiki-dark:#E06C75">$i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$</span><span style="color:#98C379;--shiki-dark:#98C379">[</span><span style="color:#E06C75;--shiki-dark:#E06C75">$i</span><span style="color:#98C379;--shiki-dark:#98C379">+1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">done</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">       </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $SUM</span></span></code></pre>
</div><h2>10. <strong>读取控制台输入</strong></h2>
<h3>10.1 <strong>基本语法</strong></h3>
<p>read(选项)(参数)<br>
<strong>选项</strong></p>
<ul>
<li>-p：指定读取值时的提示符</li>
<li>-t：指定读取值时等待的时间（秒）,如果没有在指定时间内输入,就不再等待了。</li>
</ul>
<p><strong>参数</strong></p>
<ul>
<li>变量名：读取值的变量名</li>
</ul>
<h3>10.2 <strong>实例</strong></h3>
<p>读取控制台输入一个num值。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">read</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> "请输入一个数num1="</span><span style="color:#98C379;--shiki-dark:#98C379"> NUM1</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "你输入num1的值是：</span><span style="color:#E06C75;--shiki-dark:#E06C75">$NUM1</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">read</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -t</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> "请在10秒内输入一个数num2="</span><span style="color:#98C379;--shiki-dark:#98C379"> NUM2</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "你输入num2的值是：</span><span style="color:#E06C75;--shiki-dark:#E06C75">$NUM2</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span></code></pre>
</div><p>运行结果：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">请输入一个数num1</span><span style="color:#98C379;--shiki-dark:#98C379">=10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">你输入num1的值是：10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">请在10秒内输入一个数num2</span><span style="color:#98C379;--shiki-dark:#98C379">=20</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">你输入num2的值是：20</span></span></code></pre>
</div><h2>11. <strong>函数</strong></h2>
<p>和其它编程语言一样,Shell 编程有系统函数和自定义函数,本文只举两个常用系统函数。</p>
<h3>11.1<strong>系统函数</strong></h3>
<h4>11.1.1 basename</h4>
<ul>
<li>
<p>basename,删掉路径最后一个 / 前的所有部分（包括/）,常用于获取文件名。<br>
<strong>基本语法</strong></p>
</li>
<li>
<p>basename [pathname] [suffix]</p>
<ul>
<li>basename [string] [suffix]</li>
<li>如果指定 suffix,也会删掉pathname或string的后缀部分。</li>
</ul>
</li>
</ul>
<p><strong>实例</strong></p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># basename /usr/bin/sort  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sort</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># basename include/stdio.h  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">stdio.h</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># basename include/stdio.h .h </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">stdio</span></span></code></pre>
</div><h4>11.1.2 dirname</h4>
<ul>
<li>
<p>dirname,删掉路径最后一个 / 后的所有部分（包括/）,常用于获取文件路径。<br>
<strong>基本语法</strong></p>
</li>
<li>
<p>dirname pathname</p>
<ul>
<li>如果路径中不含 / ,则返回 '.' （当前路径）。</li>
</ul>
</li>
</ul>
<p><strong>实例</strong></p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dirname /usr/bin/  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/usr</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dirname dir1/str dir2/str </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">dir1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">dir2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># dirname stdio.h </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">.</span></span></code></pre>
</div><h3>11.2 <strong>自定义函数</strong></h3>
<h4>11.2.1 <strong>基本语法</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[ function ] </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">funname[</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    Action</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    [return int;]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 调用</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">funname</span><span style="color:#98C379;--shiki-dark:#98C379"> 参数1</span><span style="color:#98C379;--shiki-dark:#98C379"> 参数2...</span></span></code></pre>
</div><h4>11.2.2 <strong>实例</strong></h4>
<p>计算输入两个参数的和。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">function</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> getSum</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    SUM</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">$</span><span style="color:#98C379;--shiki-dark:#98C379">[</span><span style="color:#E06C75;--shiki-dark:#E06C75">$n1</span><span style="color:#98C379;--shiki-dark:#98C379">+</span><span style="color:#E06C75;--shiki-dark:#E06C75">$n2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    echo</span><span style="color:#98C379;--shiki-dark:#98C379"> "sum=</span><span style="color:#E06C75;--shiki-dark:#E06C75">$SUM</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}   </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">read</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> "请输入第一个参数n1："</span><span style="color:#98C379;--shiki-dark:#98C379"> n1</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">read</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> "请输入第二个参数n2："</span><span style="color:#98C379;--shiki-dark:#98C379"> n2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 调用 getSum 函数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">getSum</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $n1</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $n2</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/102176365" target="_blank" rel="noopener noreferrer">掌握Shell编程,一篇就够了</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231032989.png" type="image/png"/>
    </item>
    <item>
      <title>Linux系统监控全能工具</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-all-tools.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-all-tools.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux系统监控全能工具</source>
      <description>Linux系统监控全能工具 1. 简介 常用的命令有glances 和 dstat 2. 命令 2.1 glances glances 是一个用来监视 GNU/Linux 和 FreeBSD 操作系统的 GPL 授权的全能工具。 Glances 会用一下几种颜色来代表状态： 绿色：OK（一切正常） 蓝色：CAREFUL（需要注意） 紫色：WARNING...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>常用的命令有glances 和 dstat</p>
<h2>2. 命令</h2>
<h3>2.1 glances</h3>
<p>glances 是一个用来监视 GNU/Linux 和 FreeBSD 操作系统的 GPL 授权的全能工具。</p>
<p>Glances 会用一下几种颜色来代表状态：</p>
<ul>
<li>绿色：OK（一切正常）</li>
<li>蓝色：CAREFUL（需要注意）</li>
<li>紫色：WARNING（警告）</li>
<li>红色：CRITICAL（严重）。</li>
</ul>
<p>阀值可以在配置文件中设置，一般阀值被默认设置为（careful=50、warning=70、critical=90）</p>
<h3>2.2 dstat</h3>
<p>dstat命令 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具。</p>
<p>直接使用dstat，默认使用的是-cdngy参数，分别显示cpu、disk、net、page、system信息，默认是1s显示一条信息。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Linux CPU监控</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-cpu.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-cpu.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux CPU监控</source>
      <description>Linux CPU监控 1. 简介 常用命令有top 和mpstat 2.命令 2.1 top 2.1.1 简介 top命令 可以实时动态地查看系统的整体运行情况。 2.1.2 语法： 选项： -b：以批处理模式操作； -c：显示完整的治命令； -d：屏幕刷新间隔时间； -I：忽略失效过程； -s：保密模式； -S：累积模式； -i&amp;lt;时间&amp;gt;：设置间隔时...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>常用命令有top 和mpstat</p>
<h2>2.命令</h2>
<h3>2.1 top</h3>
<h4>2.1.1 简介</h4>
<p>top命令 可以实时动态地查看系统的整体运行情况。</p>
<h4>2.1.2 语法：</h4>
<div class="language-scss" data-ext="scss" data-title="scss"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">top (选项)</span></span></code></pre>
</div><p>选项：<br>
<code>-b</code>：以批处理模式操作；<br>
<code>-c</code>：显示完整的治命令；<br>
<code>-d</code>：屏幕刷新间隔时间；<br>
<code>-I</code>：忽略失效过程；<br>
<code>-s</code>：保密模式；<br>
<code>-S</code>：累积模式；<br>
<code>-i&lt;时间&gt;</code>：设置间隔时间；<br>
<code>-u&lt;用户名&gt;</code>：指定用户名；<br>
<code>-p&lt;进程号&gt;</code>：指定进程；<br>
<code>-n&lt;次数&gt;</code>：循环显示的次数</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231035663.png" alt="image-20220401142646239" tabindex="0" loading="lazy"><figcaption>image-20220401142646239</figcaption></figure>
<h4>2.1.3 字段说明</h4>
<ul>
<li><code>top</code>：系统当前时间</li>
<li><code>up xxx days</code>：系统运行时间</li>
<li><code>1 users</code>：当前登录用户个数</li>
<li><code>load average</code>：系统负载。即任务队列的平均长度。三个数值分别为最近1分钟、最近5分钟、最近15分钟的平均负载。——超过N（CPU核数）说明系统满负荷运行。</li>
<li>Tasks
<ul>
<li><code>total</code>：总进程数</li>
<li><code>running</code>：正在运行的进程数</li>
<li><code>sleeping</code>：睡眠的进程数</li>
<li><code>stopped</code>：停止的进程数</li>
<li><code>zombie</code>：冻结的进程数</li>
</ul>
</li>
<li>%Cpu(s)
<ul>
<li><code>us</code>：用户进程消耗的CPU百分比</li>
<li><code>sy</code>：内核进程消耗的CPU百分比</li>
<li><code>ni</code>：改变过优先级的进程占用CPU的百分比</li>
<li><code>id</code>：空闲CPU的百分比</li>
<li><code>wa</code>：IO等待消耗的CPU百分比</li>
</ul>
</li>
<li>Mem
<ul>
<li><code>total</code>：物理内存总量</li>
<li><code>free</code>：空闲物理内存总量</li>
<li><code>used</code>：已用物理内存总量</li>
<li><code>buff</code>：用作内核缓存内存总量</li>
</ul>
</li>
<li>Swap
<ul>
<li><code>total</code>：虚拟内存总量</li>
<li><code>free</code>：空闲虚拟内存总量</li>
<li><code>used</code>：已用虚拟内存总量</li>
</ul>
</li>
</ul>
<h4>2.1.4 实例</h4>
<h5>2.1.4.1 默认top</h5>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231035663.png" alt="image-20220401142646239" tabindex="0" loading="lazy"><figcaption>image-20220401142646239</figcaption></figure>
<h3>2.2 mpstat</h3>
<h4>2.2.1 简介</h4>
<p>mpstat命令 指令主要用于多CPU环境下，它显示各个可用CPU的状态系你想。</p>
<h4>2.2.2 语法：</h4>
<div class="language-erlang" data-ext="erlang" data-title="erlang"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mpstat</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (选项) (参数)</span></span></code></pre>
</div><p>选项：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">-P：指定CPU编号。</span></span></code></pre>
</div><p>参数：</p>
<ul>
<li>间隔时间：每次报告的间隔时间（秒）；</li>
<li>次数：显示报告的次数。</li>
</ul>
<h4>2.2.3 示例</h4>
<p>ALL表示显示所有CPUs，也可以指定某个CPU；2表示刷新间隔。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231035736.png" alt="image-20220401143304219" tabindex="0" loading="lazy"><figcaption>image-20220401143304219</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231035663.png" type="image/png"/>
    </item>
    <item>
      <title>Linux磁盘监控</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-disk.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-disk.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux磁盘监控</source>
      <description>Linux磁盘监控 1. 简介 linux磁盘监控命令主要有，df，iostat,iotop 2. 监控命令 2.1 df 2.1.1 简介 df命令 用于显示磁盘分区上的可使用的磁盘空间。如果没有文件名被指定，则显示当前所有被挂载的文件系统，默认以 KB 为单位。 2.1.2 语法： 选项： -a 全部文件系统列表 -h 以方便阅读的方式显示 -i ...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>linux磁盘监控命令主要有，df，iostat,iotop</p>
<h2>2. 监控命令</h2>
<h3>2.1 df</h3>
<h4>2.1.1 简介</h4>
<p>df命令 用于显示磁盘分区上的可使用的磁盘空间。如果没有文件名被指定，则显示当前所有被挂载的文件系统，默认以 KB 为单位。</p>
<h4>2.1.2 语法：</h4>
<div class="language-erlang" data-ext="erlang" data-title="erlang"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">df</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (选项) (参数)</span></span></code></pre>
</div><p>选项：<br>
<code>-a</code> 全部文件系统列表<br>
<code>-h</code> 以方便阅读的方式显示<br>
<code>-i</code> 显示inode信息<br>
<code>-T</code> 显示文件系统类型<br>
<code>-l</code> 只显示本地文件系统<br>
<code>-k</code> 以KB为单位<br>
<code>-m</code> 以MB为单位</p>
<p>参数：</p>
<ul>
<li>文件：指定文件系统上的文件。</li>
</ul>
<h4>2.1.3 示例</h4>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231036020.png" alt="image-20220401145602336" tabindex="0" loading="lazy"><figcaption>image-20220401145602336</figcaption></figure>
<h4>2.1.4 tldr 中的介绍</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Gives</span><span style="color:#98C379;--shiki-dark:#98C379"> an</span><span style="color:#98C379;--shiki-dark:#98C379"> overview</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> filesystem</span><span style="color:#98C379;--shiki-dark:#98C379"> disk</span><span style="color:#98C379;--shiki-dark:#98C379"> space</span><span style="color:#98C379;--shiki-dark:#98C379"> usage.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  概述了文件系统磁盘空间的使用情况。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  More</span><span style="color:#98C379;--shiki-dark:#98C379"> information:</span><span style="color:#98C379;--shiki-dark:#98C379"> https://www.gnu.org/software/coreutils/df.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> filesystems</span><span style="color:#98C379;--shiki-dark:#98C379"> and</span><span style="color:#98C379;--shiki-dark:#98C379"> their</span><span style="color:#98C379;--shiki-dark:#98C379"> disk</span><span style="color:#98C379;--shiki-dark:#98C379"> usage:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	显示所有文件系统及其磁盘使用情况:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> filesystems</span><span style="color:#98C379;--shiki-dark:#98C379"> and</span><span style="color:#98C379;--shiki-dark:#98C379"> their</span><span style="color:#98C379;--shiki-dark:#98C379"> disk</span><span style="color:#98C379;--shiki-dark:#98C379"> usage</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> human</span><span style="color:#98C379;--shiki-dark:#98C379"> readable</span><span style="color:#98C379;--shiki-dark:#98C379"> form:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	以人类可读的形式显示所有文件系统及其磁盘使用情况:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    df</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> filesystem</span><span style="color:#98C379;--shiki-dark:#98C379"> and</span><span style="color:#98C379;--shiki-dark:#98C379"> its</span><span style="color:#98C379;--shiki-dark:#98C379"> disk</span><span style="color:#98C379;--shiki-dark:#98C379"> usage</span><span style="color:#98C379;--shiki-dark:#98C379"> containing</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> given</span><span style="color:#98C379;--shiki-dark:#98C379"> file</span><span style="color:#98C379;--shiki-dark:#98C379"> or</span><span style="color:#98C379;--shiki-dark:#98C379"> directory:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	显示包含指定文件或目录的文件系统及其磁盘使用情况:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    df</span><span style="color:#98C379;--shiki-dark:#98C379"> path/to/file_or_directory</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> statistics</span><span style="color:#98C379;--shiki-dark:#98C379"> on</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> number</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> free</span><span style="color:#98C379;--shiki-dark:#98C379"> inodes:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    df</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> filesystems</span><span style="color:#98C379;--shiki-dark:#98C379"> but</span><span style="color:#98C379;--shiki-dark:#98C379"> exclude</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> specified</span><span style="color:#98C379;--shiki-dark:#98C379"> types:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    df</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -x</span><span style="color:#98C379;--shiki-dark:#98C379"> squashfs</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -x</span><span style="color:#98C379;--shiki-dark:#98C379"> tmpfs</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.2 iostat</h3>
<h4>2.2.1 简介</h4>
<p>iostat命令 被用于监视系统输入输出设备和CPU的使用情况。</p>
<h4>2.2.2 语法：</h4>
<div class="language-erlang" data-ext="erlang" data-title="erlang"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">iostat</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (选项) (参数)</span></span></code></pre>
</div><p>选项：<br>
<code>-c</code>：仅显示CPU使用情况；<br>
<code>-d</code>：仅显示设备利用率；<br>
<code>-k</code>：显示状态以千字节每秒为单位，而不使用块每秒；<br>
<code>-m</code>：显示状态以兆字节每秒为单位；<br>
<code>-p</code>：仅显示块设备和所有被使用的其他分区的状态；<br>
<code>-t</code>：显示每个报告产生时的时间；<br>
<code>-V</code>：显示版号并退出；<br>
<code>-x</code>：显示扩展状态。</p>
<p>参数：</p>
<ul>
<li>间隔时间：每次报告的间隔时间（秒）；</li>
<li>次数：显示报告的次数。</li>
</ul>
<h4>2.2.3 字段说明：</h4>
<ul>
<li><code>r/s</code>: 每秒完成的读 I/O 设备次数。</li>
<li><code>w/s</code>: 每秒完成的写 I/O 设备次数。</li>
<li><code>rkB/s</code>: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节。</li>
<li><code>wkB/s</code>: 每秒写K字节数.是 wsect/s 的一半。</li>
<li><code>avgrq-sz</code>: 平均每次设备I/O操作的数据大小 (扇区)。</li>
<li><code>avgqu-sz</code>: 平均I/O队列长度。</li>
<li><code>await</code>: 平均每次设备I/O操作的等待时间 (毫秒)。</li>
<li><code>svctm</code>: 平均每次设备I/O操作的服务时间 (毫秒)。</li>
<li><code>%util</code>: 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的。</li>
</ul>
<h4>2.2.4 示例</h4>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231036066.png" alt="image-20220401145950590" tabindex="0" loading="lazy"><figcaption>image-20220401145950590</figcaption></figure>
<h3>2.3 . iotop</h3>
<blockquote>
<p>centos没有该命名</p>
</blockquote>
<h4>2.3.1 简介</h4>
<p>iotop命令 是一个用来监视磁盘I/O使用状况的top类工具。</p>
<p>iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息。Linux下的IO统计工具如iostat，nmon等大多数是只能统计到per设备的读写情况，如果你想知道每个进程是如何使用IO的就比较麻烦，使用iotop命令可以很方便的查看。</p>
<h4>2.3.2 语法：</h4>
<div class="language-erlang" data-ext="erlang" data-title="erlang"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">iotop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (选项)</span></span></code></pre>
</div><p>选项：<br>
<code>-o</code>：只显示有io操作的进程<br>
<code>-b</code>：批量显示，无交互，主要用作记录到文件。<br>
<code>-n</code>： NUM：显示NUM次，主要用于非交互式模式。<br>
<code>-d SEC</code>：间隔SEC秒显示一次。<br>
<code>-p PID</code>：监控的进程pid。<br>
<code>-u USER</code>：监控的进程用户。</p>
<h4>2.3.3 iotop常用快捷键：</h4>
<ul>
<li>左右箭头：改变排序方式，默认是按IO排序。</li>
<li>r：改变排序顺序。</li>
<li>o：只显示有IO输出的进程。</li>
<li>p：进程/线程的显示方式的切换。</li>
<li>a：显示累积使用量。</li>
<li>q：退出。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231036090.png" alt="image-20220401150415728" tabindex="0" loading="lazy"><figcaption>image-20220401150415728</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231036020.png" type="image/png"/>
    </item>
    <item>
      <title>Linux概念 - Load 平均负载</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-load.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-load.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux概念 - Load 平均负载</source>
      <description>Linux概念 - Load 平均负载 1. 简介 Linux load averages 是系统负载平均值（system load averages），它将正在运行的线程（任务）对系统的需求显示为平均运行数和等待线程数。Linux load averages 可以衡量任务对系统的需求，并且它可能大于系统当前正在处理的数量，大多数工具将其显示为三个平均...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Linux load averages 是系统负载平均值（system load averages），它将正在运行的线程（任务）对系统的需求显示为平均运行数和等待线程数。Linux load averages 可以衡量任务对系统的需求，并且它可能大于系统当前正在处理的数量，大多数工具将其显示为三个平均值，分别为 1、5 和 15 分钟值。</p>
<h3>1.1 查看命令</h3>
<p>以下为系统中显示 Linux load averages 的实例：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法一：uptime</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> uptime</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 16:48:24</span><span style="color:#98C379;--shiki-dark:#98C379"> up</span><span style="color:#98C379;--shiki-dark:#98C379">  4:11,</span><span style="color:#D19A66;--shiki-dark:#D19A66">  1</span><span style="color:#98C379;--shiki-dark:#98C379"> user,</span><span style="color:#98C379;--shiki-dark:#98C379">  load</span><span style="color:#98C379;--shiki-dark:#98C379"> average:</span><span style="color:#98C379;--shiki-dark:#98C379"> 25.25,</span><span style="color:#98C379;--shiki-dark:#98C379"> 23.40,</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 23.46</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法二：top</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">top</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:48:42</span><span style="color:#98C379;--shiki-dark:#98C379"> up</span><span style="color:#98C379;--shiki-dark:#98C379">  4:12,</span><span style="color:#D19A66;--shiki-dark:#D19A66">  1</span><span style="color:#98C379;--shiki-dark:#98C379"> user,</span><span style="color:#98C379;--shiki-dark:#98C379">  load</span><span style="color:#98C379;--shiki-dark:#98C379"> average:</span><span style="color:#98C379;--shiki-dark:#98C379"> 25.25,</span><span style="color:#98C379;--shiki-dark:#98C379"> 23.14,</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 23.37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方法三：cat /proc/loadavg</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> /proc/loadavg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">25.72</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 23.19</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 23.35</span><span style="color:#98C379;--shiki-dark:#98C379"> 42/3411</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 43603</span></span></code></pre>
</div><h3>1.2 简单分析</h3>
<ul>
<li>如果平均值为 0.0，意味着系统处于空闲状态；</li>
<li>当CPU工作量饱和的时候，平均负荷为1。</li>
<li>"load average"的值越低，比如等于0.2或0.3，就说明电脑的工作量越小，系统负荷比较轻。</li>
<li>如果 1min 平均值高于 5min 或 15min 平均值，则负载正在增加</li>
<li>如果 1min 平均值低于 5min 或 15min 平均值，则负载正在减少</li>
<li>如果它们高于系统 CPU 的数量，那么系统很可能会遇到性能问题（视情况而定）</li>
</ul>
<blockquote>
<p>1min、5min、15min 作为一个三元组，可以通过这三个值来判断系统中负载是正在增加还是减少。同时，它们也可以应用于其他的场景，例如作为云计算中实例自动扩缩容的规则。</p>
</blockquote>
<h2>2. 一个类比</h2>
<p>判断系统负荷是否过重，必须理解load average的真正含义。</p>
<p>首先，假设最简单的情况，你的电脑只有一个CPU，所有的运算都必须由这个CPU来完成。</p>
<p>那么，我们不妨把这个CPU想象成一座大桥，桥上只有一根车道，所有车辆都必须从这根车道上通过。（很显然，这座桥只能单向通行。）</p>
<ul>
<li>
<p>系统负荷为0，意味着大桥上一辆车也没有。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041613.png" alt="image-20230510101406905" tabindex="0" loading="lazy"><figcaption>image-20230510101406905</figcaption></figure>
</li>
<li>
<p>系统负荷为0.5，意味着大桥一半的路段有车。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041656.png" alt="image-20230510101428274" tabindex="0" loading="lazy"><figcaption>image-20230510101428274</figcaption></figure>
</li>
<li>
<p>系统负荷为1.0，意味着大桥的所有路段都有车，也就是说大桥已经"满"了。但是必须注意的是，直到此时大桥还是能顺畅通行的。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041686.png" alt="image-20230510101453298" tabindex="0" loading="lazy"><figcaption>image-20230510101453298</figcaption></figure>
</li>
<li>
<p>系统负荷为1.7，意味着车辆太多了，大桥已经被占满了（100%），后面等着上桥的车辆为桥面车辆的70%。以此类推，系统负荷2.0，意味着等待上桥的车辆与桥面的车辆一样多；系统负荷3.0，意味着等待上桥的车辆是桥面车辆的2倍。总之，当系统负荷大于1，后面的车辆就必须等待了；系统负荷越大，过桥就必须等得越久。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041716.png" alt="image-20230510101526551" tabindex="0" loading="lazy"><figcaption>image-20230510101526551</figcaption></figure>
</li>
</ul>
<p>CPU的系统负荷，基本上等同于上面的类比。大桥的通行能力，就是CPU的最大工作量；桥梁上的车辆，就是一个个等待CPU处理的进程（process）。</p>
<p>如果CPU每分钟最多处理100个进程，那么系统负荷0.2，意味着CPU在这1分钟里只处理20个进程；系统负荷1.0，意味着CPU在这1分钟里正好处理100个进程；系统负荷1.7，意味着除了CPU正在处理的100个进程以外，还有70个进程正排队等着CPU处理。</p>
<p>为了电脑顺畅运行，系统负荷最好不要超过1.0，这样就没有进程需要等待了，所有进程都能第一时间得到处理。很显然，1.0是一个关键值，超过这个值，系统就不在最佳状态了，你要动手干预了。</p>
<h2>3. <strong>系统负荷的经验法则</strong></h2>
<p>1.0是系统负荷的理想值吗？</p>
<p>不一定，系统管理员往往会留一点余地，当这个值达到0.7，就应当引起注意了。经验法则是这样的：</p>
<p>当系统负荷持续大于0.7，你必须开始调查了，问题出在哪里，防止情况恶化。</p>
<p>当系统负荷持续大于1.0，你必须动手寻找解决办法，把这个值降下来。</p>
<p>当系统负荷达到5.0，就表明你的系统有很严重的问题，长时间没有响应，或者接近死机了。你不应该让系统达到这个值。</p>
<h2>4. <strong>多处理器</strong></h2>
<p>上面，我们假设你的电脑只有1个CPU。如果你的电脑装了2个CPU，会发生什么情况呢？</p>
<p>2个CPU，意味着电脑的处理能力翻了一倍，能够同时处理的进程数量也翻了一倍。</p>
<p>还是用大桥来类比，两个CPU就意味着大桥有两根车道了，通车能力翻倍了。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041743.png" alt="image-20230510101736793" tabindex="0" loading="lazy"><figcaption>image-20230510101736793</figcaption></figure>
<p>所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。</p>
<h2>参考文章</h2>
<p><a href="https://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html" target="_blank" rel="noopener noreferrer">理解Linux系统负荷</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/75975041" target="_blank" rel="noopener noreferrer">Linux Load Averages：什么是平均负载？</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041613.png" type="image/png"/>
    </item>
    <item>
      <title>Linux内存监控</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-mem.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-mem.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux内存监控</source>
      <description>Linux内存监控 1. 简介 内存监控主要有free 和 vmstat 2. 监控命令 2.1 free Linux free命令用于显示内存状态。 free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。 2.1.1 语法 常用选项： -b：以Byte为单位显示内存使用情况； -k：以KB为单位...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>内存监控主要有free 和 vmstat</p>
<h2>2. 监控命令</h2>
<h3>2.1 free</h3>
<p>Linux free命令用于显示内存状态。</p>
<p>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p>
<h4>2.1.1 语法</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">free</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [-bkmotV][-s </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">间隔秒数</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
</div><p>常用选项：<br>
<code>-b</code>：以Byte为单位显示内存使用情况；<br>
<code>-k</code>：以KB为单位显示内存使用情况；<br>
<code>-m</code>：以MB为单位显示内存使用情况；<br>
<code>-g</code>：以GB为单位显示内存使用情况;</p>
<p><strong><code>-h</code>: 以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。单位有：</strong></p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>B = bytes</span></span>
<span class="line"><span>K = kilos</span></span>
<span class="line"><span>M = megas</span></span>
<span class="line"><span>G = gigas</span></span>
<span class="line"><span>T = teras</span></span></code></pre>
</div><p><code>-o</code>：不显示缓冲区调节列；<br>
<code>-t</code>：显示内存总和列；<br>
<code>-V</code>：显示版本信息。****</p>
<p><strong><code>-s</code>: &lt;间隔秒数&gt; 持续观察内存使用状况。</strong></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041167.png" alt="image-20220401101834998" tabindex="0" loading="lazy"><figcaption>image-20220401101834998</figcaption></figure>
<h4>2.1.2 字段说明：</h4>
<ul>
<li>total：内存总数；</li>
<li>used：已经使用的内存数，包括 cached 和应用程序实际使用的内存；</li>
<li>free：空闲的内存数；</li>
<li>shared：当前已经废弃不用；</li>
<li>buffers：缓存内存数；</li>
<li>cached：缓存内存数。</li>
</ul>
<p>关系：total = used +available</p>
<h4>2.1.3 实例</h4>
<h5>2.1.3.1 显示内存使用情况</h5>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>free</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041209.png" alt="image-20220401141256030" tabindex="0" loading="lazy"><figcaption>image-20220401141256030</figcaption></figure>
<h5>2.1.3.2 以合适的单位显示内存使用情况</h5>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041230.png" alt="image-20220401141510962" tabindex="0" loading="lazy"><figcaption>image-20220401141510962</figcaption></figure>
<h5>2.1.3.3 以总和的形式显示内存的使用信息</h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">free</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -t</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041255.png" alt="image-20220401141403556" tabindex="0" loading="lazy"><figcaption>image-20220401141403556</figcaption></figure>
<h5>2.1.3.4 周期性的查询内存使用信息</h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">free</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -s</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#98C379;--shiki-dark:#98C379"> //每10s</span><span style="color:#98C379;--shiki-dark:#98C379"> 执行一次命令</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041280.png" alt="image-20220401141645744" tabindex="0" loading="lazy"><figcaption>image-20220401141645744</figcaption></figure>
<h4>2.1.4 tldr 中的介绍</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">➜</span><span style="color:#98C379;--shiki-dark:#98C379">  ~</span><span style="color:#98C379;--shiki-dark:#98C379"> tldr</span><span style="color:#98C379;--shiki-dark:#98C379"> free</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  free</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Display</span><span style="color:#98C379;--shiki-dark:#98C379"> amount</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> free</span><span style="color:#98C379;--shiki-dark:#98C379"> and</span><span style="color:#98C379;--shiki-dark:#98C379"> used</span><span style="color:#98C379;--shiki-dark:#98C379"> memory</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> system.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  显示系统中可用和已使用的内存量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> system</span><span style="color:#98C379;--shiki-dark:#98C379"> memory:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	显示系统内存:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    free</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> memory</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> Bytes/KB/MB/GB:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	以字节/KB/MB/GB为单位显示内存:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    free</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">k</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">m</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Display</span><span style="color:#98C379;--shiki-dark:#98C379"> memory</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> human</span><span style="color:#98C379;--shiki-dark:#98C379"> readable</span><span style="color:#98C379;--shiki-dark:#98C379"> units:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	以人类可读单位显示内存:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    free</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Refresh</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> output</span><span style="color:#98C379;--shiki-dark:#98C379"> every</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> seconds:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	每2秒刷新一次输出:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    free</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -s</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.2 vmstat</h3>
<h4>2.2.1 简介</h4>
<p>mstat命令 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p>
<h4>2.2.2 语法</h4>
<div class="language-erlang" data-ext="erlang" data-title="erlang"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">vmstat</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (选项) (参数)</span></span></code></pre>
</div><p>选项<br>
<code>-a</code>：显示活动内页；<br>
<code>-f</code>：显示启动后创建的进程总数；<br>
<code>-m</code>：显示slab信息；<br>
<code>-n</code>：头信息仅显示一次；<br>
<code>-s</code>：以表格方式显示事件计数器和内存状态；<br>
<code>-d</code>：报告磁盘状态；<br>
<code>-p</code>：显示指定的硬盘分区状态；<br>
<code>-S</code>：输出信息的单位。</p>
<p>参数</p>
<ul>
<li>事件间隔：状态信息刷新的时间间隔；</li>
<li>次数：显示报告的次数</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041303.png" alt="image-20220401141913473" tabindex="0" loading="lazy"><figcaption>image-20220401141913473</figcaption></figure>
<h4>2.2.3 字段说明</h4>
<p>Procs（进程）</p>
<ul>
<li>r: 运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU个数，就说明CPU资源不足，可以考虑增加CPU</li>
<li>b: 等待资源的进程数，比如正在等待I/O或者内存交换等</li>
</ul>
<p>Memory（内存）</p>
<ul>
<li>swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</li>
<li>free: 空闲物理内存大小（以KB为单位）。</li>
<li>buff: 用作缓冲的内存大小。</li>
<li>cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多。如果此时IO中的bi比较小，就说明文件系统效率比较好。</li>
</ul>
<p>Swap</p>
<ul>
<li>si: 每秒从交换区写到内存的大小，由磁盘调入内存。</li>
<li>so: 每秒写入交换区的内存大小，由内存调入磁盘。</li>
</ul>
<p>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p>
<p>IO（现在的Linux版本块的大小为1kb）</p>
<ul>
<li>bi: 每秒读取的块数</li>
<li>bo: 每秒写入的块数</li>
</ul>
<p>注意：随机磁盘读写的时候，这2个值较大（如超出1024k)，而且wa值比较大，则表示系统磁盘IO性能瓶颈。</p>
<p>system（系统）</p>
<ul>
<li>in: 每秒中断数，包括时钟中断。</li>
<li>cs: 每秒上下文切换数。</li>
</ul>
<p>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p>
<p>CPU（以百分比表示）<br>
us: 用户进程执行时间百分比(user time)<br>
us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p>
<ul>
<li>sy: 内核系统进程执行时间百分比(system time)</li>
</ul>
<p>sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p>
<ul>
<li>id: 空闲时间百分比</li>
<li>wa: IO等待时间百分比</li>
</ul>
<p>wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</p>
<ul>
<li>st：一般不关注，虚拟机占用的时间百分比。</li>
</ul>
<h4>2.2.4 实例</h4>
<p>每2s显示一次</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041303.png" alt="image-20220401141913473" tabindex="0" loading="lazy"><figcaption>image-20220401141913473</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231041167.png" type="image/png"/>
    </item>
    <item>
      <title>Linux系统监控命令汇总</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-monitor-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-monitor-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux系统监控命令汇总</source>
      <description>Linux系统监控命令汇总 1. 简介 以下命令以Ubuntu 18.04 LTS 系统为准。 2. 内存监控 2.1 free Linux free命令用于显示内存状态。 free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。 2.1.1 语法 常用选项： -b：以Byte为单位显示内存使用情况...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>以下命令以Ubuntu 18.04 LTS 系统为准。</p>
<p>| 命令    | 功能                                                         | 实例                 |          |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231042625.png" type="image/png"/>
    </item>
    <item>
      <title>Linux网络监控</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-net.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-net.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux网络监控</source>
      <description>Linux网络监控 1. 简介 linux中网络监控命令主要是netstat 和sar 2. 监控命令 2.1 netstat 2.1.1 简介 netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。 2.1.2 常用实例： 2.1.3 tldr 中的介绍 2.1.4 示例 2.1.4.1 ...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>linux中网络监控命令主要是netstat 和sar</p>
<h2>2. 监控命令</h2>
<h3>2.1 netstat</h3>
<h4>2.1.1 简介</h4>
<p>netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。</p>
<h4>2.1.2 常用实例：</h4>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -aup</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 输出所有UDP连接状况</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -atp</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 输出所有TCP连接状况</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -s</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 显示各个协议的网络统计信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 显示网卡列表</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 显示路由表信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -l</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 只显示监听端口</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -lt</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       # 只列出所有监听 tcp 端口</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -lu</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       # 只列出所有监听 udp 端口</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -lx</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">       # 只列出所有监听 UNIX 端口</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p或--programs</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 显示正在使用Socket的程序识别码和程序名称；</span></span></code></pre>
</div><h4>2.1.3 tldr 中的介绍</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> netstat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  显示与网络相关的信息，如打开的连接、打开的套接字端口等.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  更多信息:</span><span style="color:#98C379;--shiki-dark:#98C379"> https://www.unix.com/man-page/osx/1/netstat.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> 列出所有端口:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> 列出所有被侦听端口:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> 列出侦听的</span><span style="color:#98C379;--shiki-dark:#98C379"> TCP</span><span style="color:#98C379;--shiki-dark:#98C379"> 端口:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -t</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> 显示监听给定协议监听的</span><span style="color:#98C379;--shiki-dark:#98C379"> PID</span><span style="color:#98C379;--shiki-dark:#98C379"> 和程序名:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> 协议</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> 打印路由表:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nr</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.1.4 示例</h4>
<h5>2.1.4.1 <strong>列出所有端口(包含TCP和UDP)</strong></h5>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>netstat -a</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043191.png" alt="image-20220408145537683" tabindex="0" loading="lazy"><figcaption>image-20220408145537683</figcaption></figure>
<h5>2.1.4.2 <strong>列出所有TCP端口</strong></h5>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>&gt; netstat -at</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043237.png" alt="image-20220408145637391" tabindex="0" loading="lazy"><figcaption>image-20220408145637391</figcaption></figure>
<h5>2.1.4.3 <strong>列出所有UDP端口</strong></h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -au</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043265.png" alt="image-20220408145728045" tabindex="0" loading="lazy"><figcaption>image-20220408145728045</figcaption></figure>
<h5>2.1.4.4 <strong>找出程序运行的端口</strong></h5>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> netstat -tunlp | grep redis</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043291.png" alt="image-20220408150002077" tabindex="0" loading="lazy"><figcaption>image-20220408150002077</figcaption></figure>
<h5>2.1.4.5 <strong>找出运行在指定端口的进程</strong></h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -tunlp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043318.png" alt="image-20220408150517112" tabindex="0" loading="lazy"><figcaption>image-20220408150517112</figcaption></figure>
<h5>2.1.4.6 通过端口找进程ID</h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">netstat</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -tunlp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> '{print $7}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d/</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f1</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043340.png" alt="image-20220408150717292" tabindex="0" loading="lazy"><figcaption>image-20220408150717292</figcaption></figure>
<h3>2.2 sar</h3>
<h4>2.2.1 简介</h4>
<p>sar命令 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。</p>
<h4>2.2.2 字段说明</h4>
<ul>
<li><code>IFACE</code>：网络设备的名称</li>
<li><code>rxpck/s</code>：每秒钟接收到的包数目</li>
<li><code>txpck/s</code>：每秒钟发送出去的包数目</li>
<li><code>rxkB/s</code>：每秒钟接收到的字节数</li>
<li><code>txkB/s</code>：每秒钟发送出去的字节数</li>
</ul>
<h4>2.2.3 示例</h4>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043363.png" alt="image-20220401145225177" tabindex="0" loading="lazy"><figcaption>image-20220401145225177</figcaption></figure>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/398839850" target="_blank" rel="noopener noreferrer">Linux之netstat命令</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231043191.png" type="image/png"/>
    </item>
    <item>
      <title>Linux进程监控</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-j-ps.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-j-ps.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux进程监控</source>
      <description>Linux进程监控 1. 简介 进程监控命令ps 2. 命令 2.1 ps 2.1.1 简介 ps（Process Status，进程状态）命令 用于报告当前系统的进程状态。 2.1.2 语法 常用参数： 2.1.3 字段含义 在介绍实例之前，需要先了解一下ps命令输出各字段的含义，这样我们才能更好地理解所展示的信息。常见字段的基本含义如下: 2.1....</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>进程监控命令ps</p>
<h2>2. 命令</h2>
<h3>2.1 ps</h3>
<h4>2.1.1 简介</h4>
<p>ps（Process Status，进程状态）命令 用于报告当前系统的进程状态。</p>
<h4>2.1.2 语法</h4>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ps [参数]</span></span></code></pre>
</div><p>常用参数：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-A</span><span style="color:#98C379;--shiki-dark:#98C379">    显示所有进程（同-e）</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-a</span><span style="color:#98C379;--shiki-dark:#98C379">    显示当前终端的所有进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-u</span><span style="color:#98C379;--shiki-dark:#98C379">    显示进程的用户信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-o</span><span style="color:#98C379;--shiki-dark:#98C379">    以用户自定义形式显示进程信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-f</span><span style="color:#98C379;--shiki-dark:#98C379">    显示程序间的关系</span></span></code></pre>
</div><h4>2.1.3 <strong>字段含义</strong></h4>
<p>在介绍实例之前，需要先了解一下ps命令输出各字段的含义，这样我们才能更好地理解所展示的信息。常见字段的基本含义如下:</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">USER</span><span style="color:#98C379;--shiki-dark:#98C379">          进程所有者的用户名</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">PID</span><span style="color:#98C379;--shiki-dark:#98C379">           进程ID（Process</span><span style="color:#98C379;--shiki-dark:#98C379"> ID）</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">START</span><span style="color:#98C379;--shiki-dark:#98C379">         进程激活时间</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">%CPU</span><span style="color:#98C379;--shiki-dark:#98C379">          进程的cpu占用率</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">%MEM</span><span style="color:#98C379;--shiki-dark:#98C379">          进程使用内存的百分比</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">VSZ</span><span style="color:#98C379;--shiki-dark:#98C379">           进程使用的虚拟内存大小，以K为单位</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">RSS</span><span style="color:#98C379;--shiki-dark:#98C379">           驻留空间的大小。显示当前常驻内存的程序的K字节数。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">TTY</span><span style="color:#98C379;--shiki-dark:#98C379">           与进程关联的终端（tty）</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">STAT</span><span style="color:#98C379;--shiki-dark:#98C379">          进程状态，包括下面的状态：</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     D</span><span style="color:#98C379;--shiki-dark:#98C379">    不可中断</span><span style="color:#98C379;--shiki-dark:#98C379">     Uninterruptible</span><span style="color:#98C379;--shiki-dark:#98C379"> sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (usually </span><span style="color:#98C379;--shiki-dark:#98C379">IO</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     R</span><span style="color:#98C379;--shiki-dark:#98C379">    正在运行，或在队列中的进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     S</span><span style="color:#98C379;--shiki-dark:#98C379">    处于休眠状态</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     T</span><span style="color:#98C379;--shiki-dark:#98C379">    停止或被追踪</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     Z</span><span style="color:#98C379;--shiki-dark:#98C379">    僵尸进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     W</span><span style="color:#98C379;--shiki-dark:#98C379">    进入内存交换（从内核2.6开始无效）</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     X</span><span style="color:#98C379;--shiki-dark:#98C379">    死掉的进程</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                     &lt;    </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">高优先级</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     N</span><span style="color:#98C379;--shiki-dark:#98C379">    低优先级</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     L</span><span style="color:#98C379;--shiki-dark:#98C379">    有些页被锁进内存</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     s</span><span style="color:#98C379;--shiki-dark:#98C379">    包含子进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     \+</span><span style="color:#98C379;--shiki-dark:#98C379">   位于后台的进程组；</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                     l</span><span style="color:#98C379;--shiki-dark:#98C379">    多线程，克隆线程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">TIME</span><span style="color:#98C379;--shiki-dark:#98C379">          进程使用的总CPU时间</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">COMMAND</span><span style="color:#98C379;--shiki-dark:#98C379">       被执行的命令行</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NI</span><span style="color:#98C379;--shiki-dark:#98C379">            进程的优先级值，较小的数字意味着占用较少的CPU时间</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">PRI</span><span style="color:#98C379;--shiki-dark:#98C379">           进程优先级。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">PPID</span><span style="color:#98C379;--shiki-dark:#98C379">          父进程ID</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">WCHAN</span><span style="color:#98C379;--shiki-dark:#98C379">         进程等待的内核事件名</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.1.4 tldr 文档</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">base</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">➜</span><span style="color:#98C379;--shiki-dark:#98C379">  ~</span><span style="color:#98C379;--shiki-dark:#98C379"> tldr</span><span style="color:#98C379;--shiki-dark:#98C379"> ps</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Cache</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> out</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> date.</span><span style="color:#98C379;--shiki-dark:#98C379"> You</span><span style="color:#98C379;--shiki-dark:#98C379"> should</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#98C379;--shiki-dark:#98C379"> "tldr --update"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  ps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Information</span><span style="color:#98C379;--shiki-dark:#98C379"> about</span><span style="color:#98C379;--shiki-dark:#98C379"> running</span><span style="color:#98C379;--shiki-dark:#98C379"> processes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> List</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> running</span><span style="color:#98C379;--shiki-dark:#98C379"> processes:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    显示所有运行的进程</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#98C379;--shiki-dark:#98C379"> aux</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> List</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> running</span><span style="color:#98C379;--shiki-dark:#98C379"> processes</span><span style="color:#98C379;--shiki-dark:#98C379"> including</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> full</span><span style="color:#98C379;--shiki-dark:#98C379"> command</span><span style="color:#98C379;--shiki-dark:#98C379"> string:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	列出所有正在运行的进程，包括完整的命令字符串</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#98C379;--shiki-dark:#98C379"> auxww</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Search</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> process</span><span style="color:#98C379;--shiki-dark:#98C379"> that</span><span style="color:#98C379;--shiki-dark:#98C379"> matches</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> string:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	搜索与字符串匹配的进程:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#98C379;--shiki-dark:#98C379"> aux</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> List</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> processes</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> current</span><span style="color:#98C379;--shiki-dark:#98C379"> user</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#98C379;--shiki-dark:#98C379"> extra</span><span style="color:#98C379;--shiki-dark:#98C379"> full</span><span style="color:#98C379;--shiki-dark:#98C379"> format:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	以额外完整格式列出当前用户的所有进程:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">id</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -u</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">-F</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> List</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> processes</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> current</span><span style="color:#98C379;--shiki-dark:#98C379"> user</span><span style="color:#98C379;--shiki-dark:#98C379"> as</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> tree:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	以树的形式列出当前用户的所有进程:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --user</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">id</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -u</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Get</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> parent</span><span style="color:#98C379;--shiki-dark:#98C379"> pid</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> process:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	获取进程的父进程pid:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -o</span><span style="color:#98C379;--shiki-dark:#98C379"> ppid=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#98C379;--shiki-dark:#98C379"> pid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  -</span><span style="color:#98C379;--shiki-dark:#98C379"> Sort</span><span style="color:#98C379;--shiki-dark:#98C379"> processes</span><span style="color:#98C379;--shiki-dark:#98C379"> by</span><span style="color:#98C379;--shiki-dark:#98C379"> memory</span><span style="color:#98C379;--shiki-dark:#98C379"> consumption:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  	按内存消耗对进程进行排序:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --sort</span><span style="color:#98C379;--shiki-dark:#98C379"> size</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.1.5 常见用法</h4>
<h5>2.1.5.1 显示所有运行的进程</h5>
<p>把所有进程显示出来，可用使用 ps -aux 或者 ps -A 。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -aux</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231044433.png" alt="image-20220408112800947" tabindex="0" loading="lazy"><figcaption>image-20220408112800947</figcaption></figure>
<h5>2.1.5.2 <strong>显示所有进程基本信息</strong></h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -ef</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231044475.png" alt="image-20220408112951231" tabindex="0" loading="lazy"><figcaption>image-20220408112951231</figcaption></figure>
<h5>2.1.5.3 搜索与字符串匹配的进程</h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -aux</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> nginx</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231044499.png" alt="image-20220408113035249" tabindex="0" loading="lazy"><figcaption>image-20220408113035249</figcaption></figure>
<h5>2.1.5.4 <strong>查看CPU 资源的使用量对进程进行排序</strong></h5>
<p>默认的结果集是未排好序的。可以通过 sort命令来排序。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ps</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -aux</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nk</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span></span></code></pre>
</div><h5>2.1.5.4 <strong>其他用法</strong></h5>
<p>ps 的用法非常多，这里仅列举一些常用的：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">aux | grep &lt;name&gt;      </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看name 进程详细信息</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">p &lt;pid&gt; </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">L             </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 显示进程&lt;pid&gt; 的所有线程</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">o lstart &lt;pid&gt;         </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 显示进程的启动时间</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-f</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> --</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">forest </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">C &lt;name&gt;   </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用树的风格显示进程的层次关系</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">e </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">o pid,uname,pcpu,pmem,comm,etime  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 定制显示的列</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ps </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">o lstart &lt;pid&gt;         </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 显示进程的启动时间</span></span></code></pre>
</div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231044433.png" type="image/png"/>
    </item>
    <item>
      <title>awk强大的文本分析命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-awk.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-awk.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">awk强大的文本分析命令</source>
      <description>awk强大的文本分析命令 1 简介 awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 2 语法 尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<h2>2 语法</h2>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> '{pattern + action}'</span><span style="color:#98C379;--shiki-dark:#98C379"> {filenames}</span></span></code></pre>
</div><p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>
<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>
<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
<h2>3 awk入门</h2>
<p>假设last -n 5的输出如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]#  last -n 5 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 仅取出前五行</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:22</span><span style="color:#98C379;--shiki-dark:#98C379">   still</span><span style="color:#98C379;--shiki-dark:#98C379"> logged</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:22</span><span style="color:#98C379;--shiki-dark:#98C379">   still</span><span style="color:#98C379;--shiki-dark:#98C379"> logged</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:30</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:43)    </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:30</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:43)    </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.12</span><span style="color:#98C379;--shiki-dark:#98C379">     Tue</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 19</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:35</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:52</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:17)</span></span></code></pre>
</div><p>如果只是显示最近登录的5个帐号：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# last -n 5 | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span></code></pre>
</div><p>awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,𝑛表示第𝑛个域。默认域分隔符是"空白键"或"[𝑡𝑎𝑏]键",所以n表示第n个域。默认域分隔符是"空白键"或"[tab]键",所以1表示登录用户，$3表示登录用户ip,以此类推。</p>
<p>如果只是显示/etc/passwd的账户：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sync</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">shutdown</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">halt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mail</span></span></code></pre>
</div><p>这种是awk+action的示例，每行都会执行action{print $1}。</p>
<p><strong>-F指定域分隔符为':'。</strong></p>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1"\t"$7}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">    /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span><span style="color:#98C379;--shiki-dark:#98C379">     /sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span><span style="color:#98C379;--shiki-dark:#98C379">  /sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span><span style="color:#98C379;--shiki-dark:#98C379">     /sbin/nologin</span></span></code></pre>
</div><p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">name,shell</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root,/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sync,/bin/sync</span></span></code></pre>
</div><p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<p>搜索/etc/passwd有root关键字的所有行：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# awk -F: </span><span style="color:#98C379;--shiki-dark:#98C379">'/root/{print $7}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /etc/passwd   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/sbin/nologin</span></span></code></pre>
</div><p>这里指定了action{print $7}。</p>
<h2>4 awk 进阶</h2>
<h3>4.1 内置变量</h3>
<p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ARGC</span><span style="color:#98C379;--shiki-dark:#98C379">               命令行参数个数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ARGV</span><span style="color:#98C379;--shiki-dark:#98C379">               命令行参数排列</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ENVIRON</span><span style="color:#98C379;--shiki-dark:#98C379">            支持队列中系统环境变量的使用</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FILENAME</span><span style="color:#98C379;--shiki-dark:#98C379">           awk浏览的文件名</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FNR</span><span style="color:#98C379;--shiki-dark:#98C379">                浏览文件的记录数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FS</span><span style="color:#98C379;--shiki-dark:#98C379">                 设置输入域分隔符，等价于命令行</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -F选项</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NF</span><span style="color:#98C379;--shiki-dark:#98C379">                 浏览记录的域的个数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NR</span><span style="color:#98C379;--shiki-dark:#98C379">                 已读的记录数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OFS</span><span style="color:#98C379;--shiki-dark:#98C379">                输出域分隔符</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ORS</span><span style="color:#98C379;--shiki-dark:#98C379">                输出记录分隔符</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">RS</span><span style="color:#98C379;--shiki-dark:#98C379">                 控制记录分隔符</span></span></code></pre>
</div><p>此外,0变量是指整条记录。0变量是指整条记录。1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。</p>
<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# awk  -F </span><span style="color:#98C379;--shiki-dark:#98C379">':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:3,columns:7,linecontent:daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:4,columns:7,linecontent:adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:5,columns:7,linecontent:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:6,columns:7,linecontent:sync:x:5:0:sync:/sbin:/bin/sync</span></span></code></pre>
</div><h3>4.2 变量和赋值</h3>
<p>除了awk的内置变量，awk还可以自定义变量。</p>
<p>下面统计/etc/passwd的账户人数：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> '{count++;print $0;} END{print "user count is ", count}'</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">user</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66">  25</span></span></code></pre>
</div><p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。</p>
<p>这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> 'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}'</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/passwd</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[start]user count is  0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">nexus:x:1001:1001::/home/nexus:/bin/bash</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[end]user count is  25</span></span></code></pre>
</div><h3>4.3 条件语句</h3>
<p>awk中的条件语句是从C语言中借鉴来的，用法与C语言一致。</p>
<p>统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#ls -l |awk 'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}' </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[end]size is  8.22339 M</span></span></code></pre>
</div><h3>4.4 循环语句</h3>
<p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</p>
<h3>4.5 数组</h3>
<p>因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p>
<p>显示/etc/passwd的账户：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}' /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#98C379;--shiki-dark:#98C379"> daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> sys</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#98C379;--shiki-dark:#98C379"> sync</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span><span style="color:#98C379;--shiki-dark:#98C379"> games</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">......</span></span></code></pre>
</div><p>这里使用for循环遍历数组。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Linux文件解压</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-compress.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-compress.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux文件解压</source>
      <description>Linux文件解压 1. tar命令详解 1.1 五个独立命令 这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。 -c: 建立压缩档案 -x：解压 -t：查看内容 -r：向压缩归档文件末尾追加文件 -u：更新原压缩包中的文件 1.2 可选命令 下面的参数是根据需要在压缩或解压档案时可选的。 -z：有gzip属性的 -j...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1.  tar命令详解</h2>
<h3>1.1 五个独立命令</h3>
<p>这五个是独立的命令，压缩解压都要<strong>用到其中一个</strong>，<strong>可以和别的命令连用但只能用其中一个</strong>。</p>
<p>-c: 建立压缩档案</p>
<p>-x：解压</p>
<p>-t：查看内容</p>
<p>-r：向压缩归档文件末尾追加文件</p>
<p>-u：更新原压缩包中的文件</p>
<h3>1.2 可选命令</h3>
<p>下面的参数是根据需要在压缩或解压档案时可选的。</p>
<p>-z：有gzip属性的</p>
<p>-j：有bz2属性的</p>
<p>-Z：有compress属性的</p>
<p>-v：显示所有过程</p>
<p>-O：将文件解开到标准输出</p>
<h3>1.3 最后一个必须参数-f</h3>
<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>
<h2>2. 常用解压</h2>
<p><strong>压缩</strong></p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –cvf</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">       //</span><span style="color:#98C379;--shiki-dark:#98C379"> 将目录里所有jpg文件打包成</span><span style="color:#98C379;--shiki-dark:#98C379"> tar.jpg</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –czf</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar.gz</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">    //</span><span style="color:#98C379;--shiki-dark:#98C379"> 将目录里所有jpg文件打包成</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar</span><span style="color:#98C379;--shiki-dark:#98C379"> 后，并且将其用</span><span style="color:#98C379;--shiki-dark:#98C379"> gzip</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩，生成一个</span><span style="color:#98C379;--shiki-dark:#98C379"> gzip</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩过的包，命名为</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar.gz</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –cjf</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar.bz2</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">   //</span><span style="color:#98C379;--shiki-dark:#98C379"> 将目录里所有jpg文件打包成</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar</span><span style="color:#98C379;--shiki-dark:#98C379"> 后，并且将其用</span><span style="color:#98C379;--shiki-dark:#98C379"> bzip2</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩，生成一个</span><span style="color:#98C379;--shiki-dark:#98C379"> bzip2</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩过的包，命名为jpg.tar.bz2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –cZf</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar.Z</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">     //</span><span style="color:#98C379;--shiki-dark:#98C379"> 将目录里所有</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg</span><span style="color:#98C379;--shiki-dark:#98C379"> 文件打包成</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.tar</span><span style="color:#98C379;--shiki-dark:#98C379"> 后，并且将其用</span><span style="color:#98C379;--shiki-dark:#98C379"> compress</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩，生成一个</span><span style="color:#98C379;--shiki-dark:#98C379"> umcompress</span><span style="color:#98C379;--shiki-dark:#98C379"> 压缩过的包，命名为jpg.tar.Z</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">rar</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.rar</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">          //</span><span style="color:#98C379;--shiki-dark:#98C379"> rar格式的压缩，需要先下载</span><span style="color:#98C379;--shiki-dark:#98C379"> rar</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> linux</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">zip</span><span style="color:#98C379;--shiki-dark:#98C379"> jpg.zip</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">.jpg</span><span style="color:#98C379;--shiki-dark:#98C379">            //</span><span style="color:#98C379;--shiki-dark:#98C379"> zip格式的压缩，需要先下载</span><span style="color:#98C379;--shiki-dark:#98C379"> zip</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> linux</span></span></code></pre>
</div><p><strong>解压</strong></p>
<div class="language-sh" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –xvf</span><span style="color:#98C379;--shiki-dark:#98C379"> file.tar</span><span style="color:#98C379;--shiki-dark:#98C379">         //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> tar</span><span style="color:#98C379;--shiki-dark:#98C379"> 包</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -xzvf</span><span style="color:#98C379;--shiki-dark:#98C379"> file.tar.gz</span><span style="color:#98C379;--shiki-dark:#98C379">     //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> tar.gz</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -xjvf</span><span style="color:#98C379;--shiki-dark:#98C379"> file.tar.bz2</span><span style="color:#98C379;--shiki-dark:#98C379">    //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> tar.bz2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tar</span><span style="color:#98C379;--shiki-dark:#98C379"> –xZvf</span><span style="color:#98C379;--shiki-dark:#98C379"> file.tar.Z</span><span style="color:#98C379;--shiki-dark:#98C379">      //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> tar.Z</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">unrar</span><span style="color:#98C379;--shiki-dark:#98C379"> e</span><span style="color:#98C379;--shiki-dark:#98C379"> file.rar</span><span style="color:#98C379;--shiki-dark:#98C379">          //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> rar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">unzip</span><span style="color:#98C379;--shiki-dark:#98C379"> file.zip</span><span style="color:#98C379;--shiki-dark:#98C379">            //</span><span style="color:#98C379;--shiki-dark:#98C379"> 解压</span><span style="color:#98C379;--shiki-dark:#98C379"> zip</span></span></code></pre>
</div><h2>2. 7z 操作</h2>
<ol>
<li>
<p>安装</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>yum install p7zip</span></span></code></pre>
</div></li>
<li>
<p>压缩</p>
</li>
</ol>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>7za a 压缩包.7z 被压缩文件或目录</span></span></code></pre>
</div><ol start="3">
<li>
<p>解压</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span>
<span class="line"><span>7za x 压缩包.7z -o解压目录</span></span>
<span class="line"><span>#将压缩包解压到当前目录</span></span>
<span class="line"><span>7za x 压缩包.7z</span></span></code></pre>
</div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>cut切分命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-cut.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-cut.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">cut切分命令</source>
      <description>cut切分命令 1 简介 cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。 如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。 2 语法 3 参数 **-b ：**以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。 **-c ：**以字符...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p>
<blockquote>
<p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p>
</blockquote>
<h2>2 语法</h2>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  [-bn] [file] 或 cut [-c] [file]  或  cut [-df] [file]</span></span></code></pre>
</div><h2>3 参数</h2>
<ul>
<li>**-b ：**以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>**-c ：**以字符为单位进行分割。</li>
<li>**-d ：**自定义分隔符，默认为制表符。</li>
<li>**-f ：**与-d一起使用，指定显示哪个区域。</li>
<li>**-n ：**取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</li>
</ul>
<h2>4 如何定位到剪切内容</h2>
<p>cut命令主要是接受三个定位方法：</p>
<p>第一，字节（bytes），用选项-b</p>
<p>第二，字符（characters），用选项-c</p>
<p>第三，域（fields），用选项-f</p>
<h3>4.1 <strong>以“字节”为单位切分</strong></h3>
<p>举个例子吧，当你执行who命令时，会输出类似如下的内容：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">who</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><p>如果我们想提取每一行的第4个字节，就这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>who|cut -b 4</span></span>
<span class="line"><span>t</span></span>
<span class="line"><span>t</span></span></code></pre>
</div><p><strong>如果“字节”定位中，我想提取第1，第2、第3和第10个字节，怎么办?</strong></p>
<p>-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">who</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 1-3,10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span></code></pre>
</div><p>但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。因此这跟我们书写的顺序没有关系。这个例子就可以说明这个问题：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>who|cut -b 10,1-3</span></span>
<span class="line"><span>roop</span></span>
<span class="line"><span>roop</span></span></code></pre>
</div><h4>4.1.1　<strong>还有哪些类似“3-5”这样的小技巧，列举一下吧!</strong></h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roo</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><p>想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> who</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -3,3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><h3>4.2 以"字符"为单位切分</h3>
<p>下面例子你似曾相识，提取第1，第2，第3和第10个字符：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># who|cut -c 1-3,10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span></code></pre>
</div><p>不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt</span></span>
<span class="line"><span>星期一</span></span>
<span class="line"><span>星期二</span></span>
<span class="line"><span>星期三</span></span>
<span class="line"><span>星期四</span></span>
<span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cut -b 3 cut_ch.txt</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cut -c 3 cut_ch.txt</span></span>
<span class="line"><span>一</span></span>
<span class="line"><span>二</span></span>
<span class="line"><span>三</span></span>
<span class="line"><span>四</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。</p>
<blockquote>
<p>跟文档不太一样</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> cut_ch.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nb</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,2,3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期一</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期二</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期三</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期四</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.3 以"域"为单位切分</h3>
<p>为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。</p>
<p>我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！</p>
<p>以/etc/passwd的前五行内容为例：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]#  cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:x:1:1:bin:/bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp</span></span></code></pre>
</div><p>看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！</p>
<p>当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,3-5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:0:0:root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:1:1:bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:2:2:daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:3:4:adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:4:7:lp</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,3-5,7</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:0:0:root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:1:1:bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:2:2:daemon:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:3:4:adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:4:7:lp:/sbin/nologin</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:x</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.4 cut的弊端</h3>
<p><strong>如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？</strong></p>
<p>有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>cat tab_space.txt</span></span>
<span class="line"><span>this is tab finish.</span></span>
<span class="line"><span>this is several space      finish.</span></span>
<span class="line"><span>$ sed -n l tab_space.txt</span></span>
<span class="line"><span>this is tab\tfinish.$</span></span>
<span class="line"><span>this is several space      finish.$</span></span></code></pre>
</div><p>看到了吧，如果是制表符（TAB），那么会显示为\t符号，如果是空格，就会原样显示。通过此方法即可以判断制表符和空格了。注意，上面sed -n后面的字符是L的小写字母哦，不要看错。</p>
<p><strong>我应该在cut -d中用什么符号来设定制表符或空格呢?</strong></p>
<p>其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。如果你设定一个空格为间隔符，那么就这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$cat tab_space.txt |cut -d ' ' -f 1</span></span>
<span class="line"><span>this</span></span>
<span class="line"><span>this</span></span></code></pre>
</div><p>注意，两个单引号之间可确实要有一个空格哦，不能偷懒。而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ cat tab_space.txt |cut -d ' ' -f 1</span></span>
<span class="line"><span>cut: the delimiter must be a single character</span></span>
<span class="line"><span>Try `cut --help' for more information.</span></span></code></pre>
</div><p>此外，cut在处理多空格的时候会更麻烦，因为<strong>cut只擅长处理“以一个字符间隔”的文本内容。</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Linux-grep文本搜索</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-grep.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-grep.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux-grep文本搜索</source>
      <description>Linux-grep文本搜索 1 简介 Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。 grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>Linux系统中grep命令是一种强大的<strong>文本搜索工具</strong>，它能使用<strong>正则表达式搜索文本</strong>，并把匹 <strong>配的行</strong>打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p>
<p>grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p>
<p>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果<strong>模板搜索成功，则返回0，如果搜索不成功，则返回1</strong>，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>
<h2>2 命令语法</h2>
<p>用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [选项] pattern [文件名]</span></span></code></pre>
</div><h2>3 命令参数</h2>
<p>-? 同时显示匹配行上下的？行，如：grep -2 pattern filename 同时显示匹配行的上下2行。<br>
-b，—byte-offset 打印匹配行前面打印该行所在的块号码。<br>
-c,—count 只打印匹配的行数，不显示匹配的内容。<br>
-f File，—file=File 从文件中提取模板。空文件中包含0个模板，所以什么都不匹配。<br>
-h，—no-filename 当搜索多个文件时，不显示匹配文件名前缀。<br>
-i，—ignore-case 忽略大小写差别。<br>
-q，—quiet 取消显示，只返回退出状态。0则表示找到了匹配的行。<br>
-l，—files-with-matches 打印匹配模板的文件清单。<br>
-L，—files-without-match 打印不匹配模板的文件清单。<br>
-n，—line-number 在匹配的行前面打印行号。<br>
-s，—silent 不显示关于不存在或者无法读取文件的错误信息。<br>
-v，—revert-match 反检索，只显示不匹配的行。<br>
-w，—word-regexp 如果被&lt;和&gt;引用，就把表达式做为一个单词搜索。<br>
-V，—version 显示软件版本信息。</p>
<h2>4 pattern 规则表达式</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>. 匹配任意一个字符</span></span>
<span class="line"><span>* 匹配0 个或多个*前的字符</span></span>
<span class="line"><span>^ 匹配行开头</span></span>
<span class="line"><span>$ 匹配行结尾</span></span>
<span class="line"><span>[] 匹配[ ]中的任意一个字符，[]中可用 - 表示范围，</span></span>
<span class="line"><span>例如[a-z]表示字母a 至z 中的任意一个</span></span>
<span class="line"><span>\ 转意字符</span></span></code></pre>
</div><h2>5 实例</h2>
<p>文件fruits.txt</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>i like apple</span></span>
<span class="line"><span>i like pineapple</span></span>
<span class="line"><span>i like Apple</span></span>
<span class="line"><span>i like banana</span></span>
<span class="line"><span>i like watermelon</span></span></code></pre>
</div><h3>5.1 在文件中搜索模式</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> "search_pattern"</span><span style="color:#98C379;--shiki-dark:#98C379"> path/to/file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例(查看文件中带有apple的行)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> apple</span><span style="color:#98C379;--shiki-dark:#98C379"> fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045486.png" alt="image-20220412135702730" tabindex="0" loading="lazy"><figcaption>image-20220412135702730</figcaption></figure>
<h3>5.2 or 条件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方式一： -E (E需要大写)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -E</span><span style="color:#98C379;--shiki-dark:#98C379"> 'string1|string2'</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 方式二： egrep</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">egrep</span><span style="color:#98C379;--shiki-dark:#98C379"> 'string1|string2'</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -E</span><span style="color:#98C379;--shiki-dark:#98C379"> 'apple|banana'</span><span style="color:#98C379;--shiki-dark:#98C379">  fruits.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">egrep</span><span style="color:#98C379;--shiki-dark:#98C379"> apple</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">'  fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045527.png" alt="image-20220412135839507" tabindex="0" loading="lazy"><figcaption>image-20220412135839507</figcaption></figure>
<h3>5.3 忽略大小写</h3>
<p>默认情况下，grep区分大小写，这意味着您必须精确搜索大写的字符串。通过使用-i开关告诉grep忽略大小写，可以避免这种情况。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> string</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> apple</span><span style="color:#98C379;--shiki-dark:#98C379"> fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045553.png" alt="image-20220412140005854" tabindex="0" loading="lazy"><figcaption>image-20220412140005854</figcaption></figure>
<h3>5.4 搜索精确的字符串 (禁用正则表达式):</h3>
<p>在上面的示例中，每当我们在文档中搜索字符串“ apple”时，grep也会在输出中返回“ pineapple”。为了避免这种情况，并严格搜索“ apple”，可以使用以下命令：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> "\&lt;apple\&gt;"</span><span style="color:#98C379;--shiki-dark:#98C379"> fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045580.png" alt="image-20220412140216431" tabindex="0" loading="lazy"><figcaption>image-20220412140216431</figcaption></figure>
<h3>5.5 <em><strong>带行号的Grep</strong></em></h3>
<p>要显示搜索字符串所在的行数，请使用-n开关。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#98C379;--shiki-dark:#98C379"> string</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#98C379;--shiki-dark:#98C379">  apple</span><span style="color:#98C379;--shiki-dark:#98C379">  fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045604.png" alt="image-20220412140342553" tabindex="0" loading="lazy"><figcaption>image-20220412140342553</figcaption></figure>
<h3>5.6 <em><strong>显示之前和之后的行</strong></em></h3>
<p>如果需要更多grep输出上下文，可以使用-c开关在指定的搜索字符串前后显示一行：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法 大写的C</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -C</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> string</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -C</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> banana</span><span style="color:#98C379;--shiki-dark:#98C379"> fruits.txt</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045628.png" alt="image-20220412140621158" tabindex="0" loading="lazy"><figcaption>image-20220412140621158</figcaption></figure>
<h2>6 与其他命令配合使用</h2>
<p>Linux命令的输出通过管道传输到grep，grep就可以仅显示您需要查看的输出。</p>
<h3>6.1 查找文件是否存在</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#查找当前目录 .sh结尾的文件</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ls</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> .sh</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#查找当前目录 xx.sh结尾的文件，返回空则证明文件不存在</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span><span style="color:#98C379;--shiki-dark:#98C379"> ls</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">grep</span><span style="color:#98C379;--shiki-dark:#98C379"> xx.sh</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045652.png" alt="image-20220412151129285" tabindex="0" loading="lazy"><figcaption>image-20220412151129285</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231045486.png" type="image/png"/>
    </item>
    <item>
      <title>sed替换/查找/删除命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-sed.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-sed.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">sed替换/查找/删除命令</source>
      <description>sed替换/查找/删除命令 1 简介 sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作 2 sed 语法 3 常用选项 -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed ...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作</p>
<h2>2 sed 语法</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sed [-nefri] ‘command’ 输入文本</span></span></code></pre>
</div><h2>3 常用选项</h2>
<ul>
<li>-n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</li>
<li>-e∶直接在指令列模式上进行 sed 的动作编辑；</li>
<li>-f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；</li>
<li>-r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)</li>
<li>-i∶直接修改读取的档案内容，而不是由萤幕输出。</li>
</ul>
<h2>4 <strong>常用命令</strong></h2>
<ul>
<li>a ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>c ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>d ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</li>
<li>i ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>p ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～</li>
<li>s ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</li>
</ul>
<h2>5 示例</h2>
<p>假设我们有一文件名为my.txt。内容如下</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>Hello!</span></span>
<span class="line"><span>welcome to my blog.</span></span>
<span class="line"><span>end</span></span></code></pre>
</div><h3>5.1 删除某行</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1d' my.txt              #删除第一行 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '$d' my.txt              #删除最后一行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1,2d' my.txt           #删除第一行到第二行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '2,$d' my.txt           #删除第二行到最后一行</span></span></code></pre>
</div><h3>5.2 显示某行：</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '1p' my.txt           #显示第一行 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '$p' my.txt           #显示最后一行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '1,2p' my.txt        #显示第一行到第二行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '2,$p' my.txt        #显示第二行到最后一行</span></span></code></pre>
</div><h3>5.3 使用模式进行查询：</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '/blog/p' my.txt    #查询包括关键字blog所在所有行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '/\$/p' my.txt        #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</span></span></code></pre>
</div><h3>5.4 增加一行或多行字符串：</h3>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># cat my.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1a drink tea' my.txt  #第一行后增加字符串"drink tea"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1,3a drink tea' my.txt #第一行到第三行后增加字符串"drink tea"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1a drink tea\nor coffee' my.txt   #第一行后增加多行，使用换行符\n</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     or</span><span style="color:#98C379;--shiki-dark:#98C379"> coffee</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>5.5 删除匹配行：</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sed</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> '/匹配字符串/d'</span><span style="color:#98C379;--shiki-dark:#98C379">  filename</span><span style="color:#98C379;--shiki-dark:#98C379">  （注：若匹配字符串是变量，则需要“”，而不是‘’。记得好像是）</span></span></code></pre>
</div><h3>5.6 替换匹配行中的某个字符串：</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sed</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> '/匹配字符串/s/替换源字符串/替换目标字符串/g'</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span></code></pre>
</div><h2></h2>
]]></content:encoded>
    </item>
    <item>
      <title>sort排序命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-sort.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-sort.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">sort排序命令</source>
      <description>sort排序命令 1 简介 sort命令是帮我们依据不同的数据类型进行排序 sort可针对文本文件的内容，以行为单位来排序。 2 语法 3 参数 -b 忽略每行前面开始出的空格字符。 -c 检查文件是否已经按照顺序排序。 -f 排序时，忽略大小写字母。 -M 将前面3个字母依照月份的缩写进行排序。 -n 依照数值的大小排序。 -o&amp;lt;输出文件&amp;gt; 将排序后...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>sort命令是帮我们依据不同的数据类型进行排序</p>
<blockquote>
<p>sort可针对文本文件的内容，以行为单位来排序。</p>
</blockquote>
<h2>2 语法</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sort [-bcfMnrtk][源文件][-o 输出文件]</span></span></code></pre>
</div><h2>3 参数</h2>
<ul>
<li>-b  忽略每行前面开始出的空格字符。</li>
<li>-c  检查文件是否已经按照顺序排序。</li>
<li>-f  排序时，忽略大小写字母。</li>
<li>-M  将前面3个字母依照月份的缩写进行排序。</li>
<li>-n  依照数值的大小排序。</li>
<li>-o&lt;输出文件&gt;  将排序后的结果存入指定的文件。</li>
<li>-r  以相反的顺序来排序。</li>
<li>-t&lt;分隔字符&gt;  指定排序时所用的栏位分隔字符。</li>
<li>-k 选择以哪个区间进行排序。</li>
</ul>
<h2>4 示例</h2>
<h3>4.1 示例1</h3>
<p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span></code></pre>
</div><p>用户可以保存排序后的文件内容，或把排序后的文件内容输出至打印机。下例中用户把排序后的文件内容保存到名为result的文件中。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379">result</span></span></code></pre>
</div><h3>4.2 示例2:sort的-u选项</h3>
<p>它的作用很简单，就是在输出行中去除重复行。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -u</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pear由于重复被-u选项无情的删除了。</p>
<h3>4.3 示例3：sort的-r选项</h3>
<p>sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.4 示例4：sort的-o选项</h3>
<p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename &gt; newfile。</p>
<p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379">number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span></span></code></pre>
</div><p>看，竟然将number清空了。就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -o</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
</div><h3>4.5 示例5：sort的-n选项</h3>
<p>你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.6 示例6： sort的-t选项和-k选项</h3>
<p>如果有一个文件的内容是这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ cat facebook.txt</span></span>
<span class="line"><span>banana:30:5.5</span></span>
<span class="line"><span>apple:10:2.5</span></span>
<span class="line"><span>pear:90:2.3</span></span>
<span class="line"><span>orange:20:3.4</span></span></code></pre>
</div><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？幸好，sort提供了-t选项，后面可以设定间隔符。指定了间隔符之后，就可以用-k来指定列数了。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ sort -n -k 2 -t ‘:’ facebook.txt</span></span>
<span class="line"><span>apple:10:2.5</span></span>
<span class="line"><span>orange:20:3.4</span></span>
<span class="line"><span>banana:30:5.5</span></span>
<span class="line"><span>pear:90:2.3</span></span></code></pre>
</div><h2>5 其他的sort常用选项</h2>
<ul>
<li>-f 会将小写字母都转换为大写字母来进行比较，亦即忽略大小写</li>
<li>-c 会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1</li>
<li>-C 会检查文件是否已排好序，如果乱序，不输出内容，仅返回1</li>
<li>-M 会以月份来排序，比如JAN小于FEB等等</li>
<li>-b 会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Linux文本操作命令汇总</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-txt-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-txt-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux文本操作命令汇总</source>
      <description>Linux文本操作命令汇总 1. 简介 Linux常用文本操作命令，包括wc(统计)、cut(切分)、sort(排序)、uniq(去重)、grep(查找)、sed(替换、插入、删除)、awk(文本分析)。 2. sed替换/查找/删除命令 2.1 简介 sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Linux常用文本操作命令，包括wc(统计)、cut(切分)、sort(排序)、uniq(去重)、grep(查找)、sed(替换、插入、删除)、awk(文本分析)。</p>
<h2>2. sed替换/查找/删除命令</h2>
<h3>2.1 简介</h3>
<p>sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作</p>
<h3>2.2 sed 语法</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sed [-nefri] ‘command’ 输入文本</span></span></code></pre>
</div><h3>2.3 常用选项</h3>
<ul>
<li>-n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</li>
<li>-e∶直接在指令列模式上进行 sed 的动作编辑；</li>
<li>-f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；</li>
<li>-r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)</li>
<li>-i∶直接修改读取的档案内容，而不是由萤幕输出。</li>
</ul>
<h3>2.4 <strong>常用命令</strong></h3>
<ul>
<li>a  ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>c  ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>d  ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</li>
<li>i  ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>p ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～</li>
<li>s ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</li>
</ul>
<h3>2.5 示例</h3>
<p>假设我们有一文件名为my.txt。内容如下</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>Hello!</span></span>
<span class="line"><span>welcome to my blog.</span></span>
<span class="line"><span>end</span></span></code></pre>
</div><h4>2.5.1 删除某行</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1d' my.txt              #删除第一行 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '$d' my.txt              #删除最后一行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1,2d' my.txt           #删除第一行到第二行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '2,$d' my.txt           #删除第二行到最后一行</span></span></code></pre>
</div><h4>2.5.2 显示某行：</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '1p' my.txt           #显示第一行 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '$p' my.txt           #显示最后一行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '1,2p' my.txt        #显示第一行到第二行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '2,$p' my.txt        #显示第二行到最后一行</span></span></code></pre>
</div><h4>2.5.3 使用模式进行查询：</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '/blog/p' my.txt    #查询包括关键字blog所在所有行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed -n '/\$/p' my.txt        #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</span></span></code></pre>
</div><h4>2.5.4 增加一行或多行字符串：</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># cat my.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1a drink tea' my.txt  #第一行后增加字符串"drink tea"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1,3a drink tea' my.txt #第一行到第三行后增加字符串"drink tea"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sed '1a drink tea\nor coffee' my.txt   #第一行后增加多行，使用换行符\n</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     Hello!</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     drink</span><span style="color:#98C379;--shiki-dark:#98C379"> tea</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     or</span><span style="color:#98C379;--shiki-dark:#98C379"> coffee</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">     ruby</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> me,welcome</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> my</span><span style="color:#98C379;--shiki-dark:#98C379"> blog.</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">     end</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.5.5 删除匹配行：</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sed</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> '/匹配字符串/d'</span><span style="color:#98C379;--shiki-dark:#98C379">  filename</span><span style="color:#98C379;--shiki-dark:#98C379">  （注：若匹配字符串是变量，则需要“”，而不是‘’。记得好像是）</span></span></code></pre>
</div><h4>2.5.6 替换匹配行中的某个字符串：</h4>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sed</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#98C379;--shiki-dark:#98C379"> '/匹配字符串/s/替换源字符串/替换目标字符串/g'</span><span style="color:#98C379;--shiki-dark:#98C379"> filename</span></span></code></pre>
</div><h2>3 awk强大的文本分析命令</h2>
<h3>3.1 简介</h3>
<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<h3>3.2 语法</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> '{pattern + action}'</span><span style="color:#98C379;--shiki-dark:#98C379"> {filenames}</span></span></code></pre>
</div><p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>
<p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p>
<p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
<h3>3.3 awk入门</h3>
<p>假设last -n 5的输出如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]#  last -n 5 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 仅取出前五行</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:22</span><span style="color:#98C379;--shiki-dark:#98C379">   still</span><span style="color:#98C379;--shiki-dark:#98C379"> logged</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:22</span><span style="color:#98C379;--shiki-dark:#98C379">   still</span><span style="color:#98C379;--shiki-dark:#98C379"> logged</span><span style="color:#98C379;--shiki-dark:#98C379"> in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:30</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:43)    </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.18</span><span style="color:#98C379;--shiki-dark:#98C379">     Thu</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 21</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:30</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:43)    </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#D19A66;--shiki-dark:#D19A66">        223.104.6.12</span><span style="color:#98C379;--shiki-dark:#98C379">     Tue</span><span style="color:#98C379;--shiki-dark:#98C379"> Apr</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 19</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:35</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> 17:52</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  (00:17)</span></span></code></pre>
</div><p>如果只是显示最近登录的5个帐号：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# last -n 5 | </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span></code></pre>
</div><p>awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,𝑛表示第𝑛个域。默认域分隔符是"空白键"或"[𝑡𝑎𝑏]键",所以n表示第n个域。默认域分隔符是"空白键"或"[tab]键",所以1表示登录用户，$3表示登录用户ip,以此类推。</p>
<p>如果只是显示/etc/passwd的账户：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sync</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">shutdown</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">halt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">mail</span></span></code></pre>
</div><p>这种是awk+action的示例，每行都会执行action{print $1}。</p>
<p><strong>-F指定域分隔符为':'。</strong></p>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print $1"\t"$7}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">    /bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span><span style="color:#98C379;--shiki-dark:#98C379">     /sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span><span style="color:#98C379;--shiki-dark:#98C379">  /sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span><span style="color:#98C379;--shiki-dark:#98C379">     /sbin/nologin</span></span></code></pre>
</div><p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#D19A66;--shiki-dark:#D19A66">  -F</span><span style="color:#98C379;--shiki-dark:#98C379"> ':'</span><span style="color:#98C379;--shiki-dark:#98C379">  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">name,shell</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root,/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp,/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sync,/bin/sync</span></span></code></pre>
</div><p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<p>搜索/etc/passwd有root关键字的所有行：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# awk -F: </span><span style="color:#98C379;--shiki-dark:#98C379">'/root/{print $7}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /etc/passwd   </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">/sbin/nologin</span></span></code></pre>
</div><p>这里指定了action{print $7}。</p>
<h3>3.4 awk 进阶</h3>
<h4>3.4.1 内置变量</h4>
<p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ARGC</span><span style="color:#98C379;--shiki-dark:#98C379">               命令行参数个数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ARGV</span><span style="color:#98C379;--shiki-dark:#98C379">               命令行参数排列</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ENVIRON</span><span style="color:#98C379;--shiki-dark:#98C379">            支持队列中系统环境变量的使用</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FILENAME</span><span style="color:#98C379;--shiki-dark:#98C379">           awk浏览的文件名</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FNR</span><span style="color:#98C379;--shiki-dark:#98C379">                浏览文件的记录数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">FS</span><span style="color:#98C379;--shiki-dark:#98C379">                 设置输入域分隔符，等价于命令行</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -F选项</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NF</span><span style="color:#98C379;--shiki-dark:#98C379">                 浏览记录的域的个数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">NR</span><span style="color:#98C379;--shiki-dark:#98C379">                 已读的记录数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OFS</span><span style="color:#98C379;--shiki-dark:#98C379">                输出域分隔符</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ORS</span><span style="color:#98C379;--shiki-dark:#98C379">                输出记录分隔符</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">RS</span><span style="color:#98C379;--shiki-dark:#98C379">                 控制记录分隔符</span></span></code></pre>
</div><p>此外,0变量是指整条记录。0变量是指整条记录。1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。</p>
<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# awk  -F </span><span style="color:#98C379;--shiki-dark:#98C379">':'</span><span style="color:#98C379;--shiki-dark:#98C379">  '{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:3,columns:7,linecontent:daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:4,columns:7,linecontent:adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:5,columns:7,linecontent:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">filename:/etc/passwd,linenumber:6,columns:7,linecontent:sync:x:5:0:sync:/sbin:/bin/sync</span></span></code></pre>
</div><h4>3.4.2 变量和赋值</h4>
<p>除了awk的内置变量，awk还可以自定义变量。</p>
<p>下面统计/etc/passwd的账户人数：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> '{count++;print $0;} END{print "user count is ", count}'</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">user</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#D19A66;--shiki-dark:#D19A66">  25</span></span></code></pre>
</div><p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。</p>
<p>这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">awk</span><span style="color:#98C379;--shiki-dark:#98C379"> 'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}'</span><span style="color:#98C379;--shiki-dark:#98C379"> /etc/passwd</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[start]user count is  0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">nexus:x:1001:1001::/home/nexus:/bin/bash</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[end]user count is  25</span></span></code></pre>
</div><h4>3.4.3 条件语句</h4>
<p>awk中的条件语句是从C语言中借鉴来的，用法与C语言一致。</p>
<p>统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#ls -l |awk 'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}' </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[end]size is  8.22339 M</span></span></code></pre>
</div><h4>3.4.4 循环语句</h4>
<p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</p>
<h4>3.4.5 数组</h4>
<p>因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p>
<p>显示/etc/passwd的账户：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}' /etc/passwd</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span><span style="color:#98C379;--shiki-dark:#98C379"> root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#98C379;--shiki-dark:#98C379"> daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> sys</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#98C379;--shiki-dark:#98C379"> sync</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span><span style="color:#98C379;--shiki-dark:#98C379"> games</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">......</span></span></code></pre>
</div><p>这里使用for循环遍历数组。</p>
<h2>4 wc统计命令</h2>
<h3>4.1 简介</h3>
<p>统计文件里面有多少单词，多少行，多少字符。</p>
<h3>4.2 wc语法</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> wc [-lwm]</span></span></code></pre>
</div><p>选项与参数：<br>
-l  ：仅列出行；<br>
-w  ：仅列出多少字(英文单字)；<br>
-m  ：多少字符；</p>
<h3>4.3 wc使用</h3>
<div class="language-cmd" data-ext="cmd" data-title="cmd"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">wc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">etc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">passwd</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">25</span><span style="color:#D19A66;--shiki-dark:#D19A66">   35</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1095</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">etc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">passwd</span></span></code></pre>
</div><p>258是行数，462是单词数，6919是字节数</p>
<p>wc的命令比较简单使用，每个参数使用如下：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>#wc -l /etc/passwd   #统计行数，在对记录数时，很常用</span></span>
<span class="line"><span>/etc/passwd       #表示系统有40个账户</span></span>
<span class="line"><span>#wc -w /etc/passwd  #统计单词出现次数</span></span>
<span class="line"><span>/etc/passwd</span></span>
<span class="line"><span>#wc -m /etc/passwd  #统计文件的字节数</span></span></code></pre>
</div><h2>5. cut 切分命令</h2>
<h3>5.1 简介</h3>
<p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p>
<blockquote>
<p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p>
</blockquote>
<h3>5.2 语法</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  [-bn] [file] 或 cut [-c] [file]  或  cut [-df] [file]</span></span></code></pre>
</div><h3>5.3 参数</h3>
<ul>
<li>**-b ：**以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>**-c ：**以字符为单位进行分割。</li>
<li>**-d ：**自定义分隔符，默认为制表符。</li>
<li>**-f ：**与-d一起使用，指定显示哪个区域。</li>
<li>**-n ：**取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</li>
</ul>
<h3>5.4 如何定位到剪切内容</h3>
<p>cut命令主要是接受三个定位方法：</p>
<p>第一，字节（bytes），用选项-b</p>
<p>第二，字符（characters），用选项-c</p>
<p>第三，域（fields），用选项-f</p>
<h4>5.4.1 <strong>以“字节”为单位切分</strong></h4>
<p>举个例子吧，当你执行who命令时，会输出类似如下的内容：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">who</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><p>如果我们想提取每一行的第4个字节，就这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>who|cut -b 4</span></span>
<span class="line"><span>t</span></span>
<span class="line"><span>t</span></span></code></pre>
</div><p><strong>如果“字节”定位中，我想提取第1，第2、第3和第10个字节，怎么办?</strong></p>
<p>-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">who</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 1-3,10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span></code></pre>
</div><p>但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。因此这跟我们书写的顺序没有关系。这个例子就可以说明这个问题：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>who|cut -b 10,1-3</span></span>
<span class="line"><span>roop</span></span>
<span class="line"><span>roop</span></span></code></pre>
</div><h5>5.4.1.1　<strong>还有哪些类似“3-5”这样的小技巧，列举一下吧!</strong></h5>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roo</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roo</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# who|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#98C379;--shiki-dark:#98C379"> 3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ot</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><p>想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> who</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -3,3-</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/2</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span><span style="color:#98C379;--shiki-dark:#98C379">     pts/3</span><span style="color:#98C379;--shiki-dark:#98C379">        2022-04-24</span><span style="color:#98C379;--shiki-dark:#98C379"> 16:17</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (223.104.6.4)</span></span></code></pre>
</div><h4>5.4.2 以"字符"为单位切分</h4>
<p>下面例子你似曾相识，提取第1，第2，第3和第10个字符：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># who|cut -c 1-3,10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">roop</span></span></code></pre>
</div><p>不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt</span></span>
<span class="line"><span>星期一</span></span>
<span class="line"><span>星期二</span></span>
<span class="line"><span>星期三</span></span>
<span class="line"><span>星期四</span></span>
<span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cut -b 3 cut_ch.txt</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>�</span></span>
<span class="line"><span>[root@iZwz914d1peizv4h7laju4Z ~]# cut -c 3 cut_ch.txt</span></span>
<span class="line"><span>一</span></span>
<span class="line"><span>二</span></span>
<span class="line"><span>三</span></span>
<span class="line"><span>四</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。</p>
<blockquote>
<p>跟文档不太一样</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> cut_ch.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -b</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">�</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nb</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">期</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt |</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -nb</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,2,3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期一</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期二</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期三</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">星期四</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>5.4.3 以"域"为单位切分</h4>
<p>为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。</p>
<p>我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！</p>
<p>以/etc/passwd的前五行内容为例：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]#  cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x:0:0:root:/root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:x:1:1:bin:/bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp</span></span></code></pre>
</div><p>看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！</p>
<p>当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,3-5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:0:0:root</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:1:1:bin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:2:2:daemon</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:3:4:adm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:4:7:lp</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,3-5,7</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:0:0:root:/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:1:1:bin:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:2:2:daemon:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:3:4:adm:/sbin/nologin</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:4:7:lp:/sbin/nologin</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@iZwz914d1peizv4h7laju4Z ~]# cat /etc/passwd|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">head</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">|</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -d</span><span style="color:#98C379;--shiki-dark:#98C379"> :</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">root:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">bin:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">daemon:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">adm:x</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">lp:x</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>5.4.4 cut的弊端</h4>
<p><strong>如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？</strong></p>
<p>有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>cat tab_space.txt</span></span>
<span class="line"><span>this is tab finish.</span></span>
<span class="line"><span>this is several space      finish.</span></span>
<span class="line"><span>$ sed -n l tab_space.txt</span></span>
<span class="line"><span>this is tab\tfinish.$</span></span>
<span class="line"><span>this is several space      finish.$</span></span></code></pre>
</div><p>看到了吧，如果是制表符（TAB），那么会显示为\t符号，如果是空格，就会原样显示。通过此方法即可以判断制表符和空格了。注意，上面sed -n后面的字符是L的小写字母哦，不要看错。</p>
<p><strong>我应该在cut -d中用什么符号来设定制表符或空格呢?</strong></p>
<p>其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。如果你设定一个空格为间隔符，那么就这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$cat tab_space.txt |cut -d ' ' -f 1</span></span>
<span class="line"><span>this</span></span>
<span class="line"><span>this</span></span></code></pre>
</div><p>注意，两个单引号之间可确实要有一个空格哦，不能偷懒。而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ cat tab_space.txt |cut -d ' ' -f 1</span></span>
<span class="line"><span>cut: the delimiter must be a single character</span></span>
<span class="line"><span>Try `cut --help' for more information.</span></span></code></pre>
</div><p>此外，cut在处理多空格的时候会更麻烦，因为<strong>cut只擅长处理“以一个字符间隔”的文本内容。</strong></p>
<h2>6. sort 排序命令</h2>
<h3>6.1 简介</h3>
<p>sort命令是帮我们依据不同的数据类型进行排序</p>
<blockquote>
<p>sort可针对文本文件的内容，以行为单位来排序。</p>
</blockquote>
<h3>6.2 语法</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sort [-bcfMnrtk][源文件][-o 输出文件]</span></span></code></pre>
</div><h3>6.3 参数</h3>
<ul>
<li>-b  忽略每行前面开始出的空格字符。</li>
<li>-c  检查文件是否已经按照顺序排序。</li>
<li>-f  排序时，忽略大小写字母。</li>
<li>-M  将前面3个字母依照月份的缩写进行排序。</li>
<li>-n  依照数值的大小排序。</li>
<li>-o&lt;输出文件&gt;  将排序后的结果存入指定的文件。</li>
<li>-r  以相反的顺序来排序。</li>
<li>-t&lt;分隔字符&gt;  指定排序时所用的栏位分隔字符。</li>
<li>-k 选择以哪个区间进行排序。</li>
</ul>
<h3>6.4 示例</h3>
<h4>6.4.1 示例1</h4>
<p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span></code></pre>
</div><p>用户可以保存排序后的文件内容，或把排序后的文件内容输出至打印机。下例中用户把排序后的文件内容保存到名为result的文件中。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379">result</span></span></code></pre>
</div><h4>6.4.2 示例2:sort的-u选项</h4>
<p>它的作用很简单，就是在输出行中去除重复行。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -u</span><span style="color:#98C379;--shiki-dark:#98C379"> seq.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">apple</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">banana</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">orange</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pear</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pear由于重复被-u选项无情的删除了。</p>
<h4>6.4.3 示例3：sort的-r选项</h4>
<p>sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>6.4.4 示例4：sort的-o选项</h4>
<p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename &gt; newfile。</p>
<p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379">number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span></span></code></pre>
</div><p>看，竟然将number清空了。就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -r</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -o</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
</div><h4>6.4.5 示例5：sort的-n选项</h4>
<p>你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">cat</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> sort</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#98C379;--shiki-dark:#98C379"> number.txt</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">19</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>6.4.6 示例6： sort的-t选项和-k选项</h4>
<p>如果有一个文件的内容是这样：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ cat facebook.txt</span></span>
<span class="line"><span>banana:30:5.5</span></span>
<span class="line"><span>apple:10:2.5</span></span>
<span class="line"><span>pear:90:2.3</span></span>
<span class="line"><span>orange:20:3.4</span></span></code></pre>
</div><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？幸好，sort提供了-t选项，后面可以设定间隔符。指定了间隔符之后，就可以用-k来指定列数了。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>$ sort -n -k 2 -t ‘:’ facebook.txt</span></span>
<span class="line"><span>apple:10:2.5</span></span>
<span class="line"><span>orange:20:3.4</span></span>
<span class="line"><span>banana:30:5.5</span></span>
<span class="line"><span>pear:90:2.3</span></span></code></pre>
</div><h3>6.5 其他的sort常用选项</h3>
<ul>
<li>-f 会将小写字母都转换为大写字母来进行比较，亦即忽略大小写</li>
<li>-c 会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1</li>
<li>-C 会检查文件是否已排好序，如果乱序，不输出内容，仅返回1</li>
<li>-M 会以月份来排序，比如JAN小于FEB等等</li>
<li>-b 会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。</li>
</ul>
<h2>7. uniq 去重命令</h2>
<h3>7.1 简介</h3>
<p>uniq命令可以去除排序过的文件中的重复行</p>
<blockquote>
<p>因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。</p>
</blockquote>
<h3>7.2 简介</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">uniq</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [-icu]</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">选项与参数：</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-i</span><span style="color:#98C379;--shiki-dark:#98C379">   ：忽略大小写字符的不同；</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-c</span><span style="color:#98C379;--shiki-dark:#98C379">  ：进行计数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-u</span><span style="color:#98C379;--shiki-dark:#98C379">  ：只显示唯一的行</span></span></code></pre>
</div><h3>7.3 uniq 使用</h3>
<p>testfile的内容如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># cat testfile</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span></code></pre>
</div><p>直接删除未经排序的文件，将会发现没有任何行被删除:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#uniq testfile  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span></code></pre>
</div><p>排序文件，默认是去重:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#cat words | sort |uniq</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span></code></pre>
</div><p>排序之后删除了重复行，同时在行首位置输出该行重复的次数:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -c</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#98C379;--shiki-dark:#98C379"> friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> world</span></span></code></pre>
</div><p>仅显示存在重复的行，并在行首显示该行重复的次数:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -dc</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> world</span></span></code></pre>
</div><p>仅显示不重复的行:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -u</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://www.cnblogs.com/maybe2030/p/5325530.html#_label5" target="_blank" rel="noopener noreferrer">Linux文本操作命令</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>uniq去重命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-uniq.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-uniq.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">uniq去重命令</source>
      <description>uniq去重命令 1 简介 uniq命令可以去除排序过的文件中的重复行 因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。 2 简介 3 uniq 使用 testfile的内容如下： 直接删除未经排序的文件，将会发现没有任何行被删除: 排序文件，默认是去重: 排序之后删除了重复行，同时在行首位置输出该行重复的次数...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>uniq命令可以去除排序过的文件中的重复行</p>
<blockquote>
<p>因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。</p>
</blockquote>
<h2>2 简介</h2>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">uniq</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [-icu]</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">选项与参数：</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-i</span><span style="color:#98C379;--shiki-dark:#98C379">   ：忽略大小写字符的不同；</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-c</span><span style="color:#98C379;--shiki-dark:#98C379">  ：进行计数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">-u</span><span style="color:#98C379;--shiki-dark:#98C379">  ：只显示唯一的行</span></span></code></pre>
</div><h2>3 uniq 使用</h2>
<p>testfile的内容如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># cat testfile</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span></code></pre>
</div><p>直接删除未经排序的文件，将会发现没有任何行被删除:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#uniq testfile  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span></code></pre>
</div><p>排序文件，默认是去重:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#cat words | sort |uniq</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">world</span></span></code></pre>
</div><p>排序之后删除了重复行，同时在行首位置输出该行重复的次数:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -c</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#98C379;--shiki-dark:#98C379"> friend</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> world</span></span></code></pre>
</div><p>仅显示存在重复的行，并在行首显示该行重复的次数:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -dc</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#98C379;--shiki-dark:#98C379"> hello</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#98C379;--shiki-dark:#98C379"> world</span></span></code></pre>
</div><p>仅显示不重复的行:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#sort testfile | uniq -u</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">friend</span></span></code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>wc统计命令</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-k-wc.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-k-wc.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">wc统计命令</source>
      <description>wc统计命令 1 简介 统计文件里面有多少单词，多少行，多少字符。 2 wc语法 选项与参数： -l ：仅列出行； -w ：仅列出多少字(英文单字)； -m ：多少字符； 3 wc使用 258是行数，462是单词数，6919是字节数 wc的命令比较简单使用，每个参数使用如下：</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>统计文件里面有多少单词，多少行，多少字符。</p>
<h2>2 wc语法</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> wc [-lwm]</span></span></code></pre>
</div><p>选项与参数：<br>
-l  ：仅列出行；<br>
-w  ：仅列出多少字(英文单字)；<br>
-m  ：多少字符；</p>
<h2>3 wc使用</h2>
<div class="language-cmd" data-ext="cmd" data-title="cmd"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">wc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">etc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">passwd</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">25</span><span style="color:#D19A66;--shiki-dark:#D19A66">   35</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1095</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">etc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">passwd</span></span></code></pre>
</div><p>258是行数，462是单词数，6919是字节数</p>
<p>wc的命令比较简单使用，每个参数使用如下：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>#wc -l /etc/passwd   #统计行数，在对记录数时，很常用</span></span>
<span class="line"><span>/etc/passwd       #表示系统有40个账户</span></span>
<span class="line"><span>#wc -w /etc/passwd  #统计单词出现次数</span></span>
<span class="line"><span>/etc/passwd</span></span>
<span class="line"><span>#wc -m /etc/passwd  #统计文件的字节数</span></span></code></pre>
</div><h2></h2>
]]></content:encoded>
    </item>
    <item>
      <title>Linux下各种查找命令汇总</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-x-find-overview.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-x-find-overview.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux下各种查找命令汇总</source>
      <description>Linux下各种查找命令汇总 1. 简介 linux 常用的文件查找命令有（find, grep, which, whereis, locate） 2. 命令 2.1 find 2.1.1 简介 find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。 2.1.2 命令语法 path： 所要搜索的目录及其所有子目录。默认为当前目录。 exp...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>linux 常用的文件查找命令有（find, grep, which, whereis, locate）</p>
<p>|               | find                                           | which                                                  | whereis                                                   | locate                                             |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231051232.png" type="image/png"/>
    </item>
    <item>
      <title>Linux - 查找文件</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-x-find.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-x-find.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux - 查找文件</source>
      <description>Linux - 查找文件 1. 简介 find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。 2 命令语法 path： 所要搜索的目录及其所有子目录。默认为当前目录。 expression： 所要搜索的文件的特征。 cmd： 对搜索结果进行特定的处理。 如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p>
<h2>2 命令语法</h2>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt; </span><span style="color:#98C379;--shiki-dark:#98C379">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; &lt; </span><span style="color:#98C379;--shiki-dark:#98C379">expression</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; &lt; </span><span style="color:#98C379;--shiki-dark:#98C379">cmd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">指定目</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">录&gt; &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">指定条</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">件&gt; &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">指定动</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">作&gt;</span></span></code></pre>
</div><ul>
<li>path： 所要搜索的目录及其所有子目录。默认为当前目录。</li>
<li>expression： 所要搜索的文件的特征。</li>
<li>cmd： 对搜索结果进行特定的处理。</li>
</ul>
<p>如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。</p>
<h2>3 实例</h2>
<h3>3.1 按扩展名查找文件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> '*.ext'</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> /home</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> "*.txt"</span></span></code></pre>
</div><h3>3.2 在不区分大小写的模式下，查找与给定名称匹配的目录</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -type</span><span style="color:#98C379;--shiki-dark:#98C379"> d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -iname</span><span style="color:#98C379;--shiki-dark:#98C379"> '*lib*'</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> /home</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -type</span><span style="color:#98C379;--shiki-dark:#98C379"> d</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> "*service*"</span></span></code></pre>
</div><h3>3.3 通过匹配多个模式查找文件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> '*pattern_1*'</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -or</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> '*pattern_2*'</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#98C379;--shiki-dark:#98C379"> .</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> "*.txt"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -o</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -name</span><span style="color:#98C379;--shiki-dark:#98C379"> "*.pdf"</span></span></code></pre>
</div><h3>3.4 查找与路径模式匹配的文件:</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -path</span><span style="color:#98C379;--shiki-dark:#98C379"> '**/lib/**/*.ext'</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> find</span><span style="color:#98C379;--shiki-dark:#98C379"> /usr/</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -path</span><span style="color:#98C379;--shiki-dark:#98C379"> "*local*"</span></span></code></pre>
</div><h3>3.5查找与给定大小范围匹配的文件:</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -size</span><span style="color:#98C379;--shiki-dark:#98C379"> +500k</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -size</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -10M</span></span></code></pre>
</div><h3>3.6 找到最近7天修改过的文件，并删除它们:</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find</span><span style="color:#98C379;--shiki-dark:#98C379"> root_path</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -mtime</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -7</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -delete</span></span></code></pre>
</div><h3>3.7 根据文件类型进行搜索</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type 类型参数</span></span></code></pre>
</div><p>类型参数列表：</p>
<ul>
<li><strong>f</strong> 普通文件</li>
<li><strong>l</strong> 符号连接</li>
<li><strong>d</strong> 目录</li>
<li><strong>c</strong> 字符设备</li>
<li><strong>b</strong> 块设备</li>
<li><strong>s</strong> 套接字</li>
<li><strong>p</strong> Fifo</li>
</ul>
<h3>3.8 根据文件时间戳进行搜索</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f 时间戳</span></span></code></pre>
</div><p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>
<ul>
<li><strong>访问时间</strong>（-atime/天，-amin/分钟）：用户最近一次访问时间。</li>
<li><strong>修改时间</strong>（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>
<li><strong>变化时间</strong>（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>
</ul>
<p>搜索最近七天内被访问过的所有文件</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f -atime -7</span></span></code></pre>
</div><p>搜索恰好在七天前被访问过的所有文件</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f -atime 7</span></span></code></pre>
</div><p>搜索超过七天内被访问过的所有文件</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f -atime +7</span></span></code></pre>
</div><p>搜索访问时间超过10分钟的所有文件</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f -amin +10</span></span></code></pre>
</div><p>找出比<a href="http://man.linuxde.net/file" target="_blank" rel="noopener noreferrer">file</a>.log修改时间更长的所有文件</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find . -type f -newer file.log</span></span></code></pre>
</div><h3></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Linux-locate查找文件</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-x-locate.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-x-locate.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux-locate查找文件</source>
      <description>Linux-locate查找文件 1 简介 locate命令其实是“find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p>locate命令其实是“find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，<strong>而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息</strong>。Linux系统自动创建这个数据库，并且<strong>每天自动更新一次</strong>，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>
<h2>2 命令语法</h2>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [OPTION]… [PATTERN]…</span></span></code></pre>
</div><h2>3 命令参数（用得不多）</h2>
<p>在mlocate数据库中搜索条目.</p>
<ul>
<li>-A, --all 只显示匹配所有模式的条目</li>
<li>-b, --basename 匹配唯一的路径名称的基本文件名</li>
<li>-c, --count 只显示找到条目的号码</li>
<li>-d, --database DBPATH 用 DBPATH 替代默认的数据库(/var/lib/mlocate/mlocate.db)</li>
<li>-e, --existing 只显示当前存在的文件条目</li>
<li>-L, --follow 当文件存在时跟随蔓延的符号链接 (默认)</li>
<li>-h, --help 显示本帮助</li>
<li>-i, --ignore-case 匹配模式时忽略大小写区别</li>
<li>-l, --limit, -n LIMIT 限制为 LIMIT项目的输出 (或 计数)</li>
<li>-m, --mmap 忽略向后兼容性</li>
<li>-P, --nofollow, -H 当检查文件时不跟随蔓延的符号链接</li>
<li>-0, --null 输出时以 NUL 分隔项目</li>
<li>-S, --statistics 不搜索项目,显示有关每个已用数据库的统计信息</li>
<li>-q, --quiet 不报告关于读取数据库的错误消息</li>
<li>-r, --regexp REGEXP 搜索基本正则表达式 REGEXP 来代替模式<br>
--regex 模式是扩展正则表达式</li>
<li>-s, --stdio 忽略向后兼容性</li>
<li>-V, --version 显示版本信息</li>
<li>-w, --wholename 匹配完整路径名 (默认)</li>
</ul>
<h2>4 实例</h2>
<h3>4.1 查找包含某个字符串的相关文件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#98C379;--shiki-dark:#98C379"> redis</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054512.png" alt="image-20220419113313972" tabindex="0" loading="lazy"><figcaption>image-20220419113313972</figcaption></figure>
<h3>4.2 按文件名查找文件（不包含填充字符的模式被解释为 <em>关键字</em>）:</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 语法</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">/文件名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 示例</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> locate</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379">/redis</span></span></code></pre>
</div><p>这样过滤出的结果更加符合我们想要的</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054560.png" alt="image-20220419134741153" tabindex="0" loading="lazy"><figcaption>image-20220419134741153</figcaption></figure>
<h3>4.3 重新建立文件数据索引数据库。</h3>
<p>如果要查找最近添加的文件，则需要执行此操作:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sudo</span><span style="color:#98C379;--shiki-dark:#98C379"> updatedb</span></span></code></pre>
</div><h3>4.4 搜索目录下所有以 sh开头的文件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#98C379;--shiki-dark:#98C379"> /bin/sh</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054589.png" alt="image-20220419113440829" tabindex="0" loading="lazy"><figcaption>image-20220419113440829</figcaption></figure>
<h3>4.5 指定显示数量</h3>
<p>如果显示的内容过多，可以使用 -n 选项来限定显示数量。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#98C379;--shiki-dark:#98C379"> redis</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054623.png" alt="image-20220419113647925" tabindex="0" loading="lazy"><figcaption>image-20220419113647925</figcaption></figure>
<h2>5 locate 命令安装</h2>
<p>如果locate 搜索时提示命令不存在</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054667.png" alt="image-20220419112033248" tabindex="0" loading="lazy"><figcaption>image-20220419112033248</figcaption></figure>
<p>则需要先安装一下</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> mlocate</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">sudo</span><span style="color:#98C379;--shiki-dark:#98C379"> updatedb</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">locate</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">  *</span><span style="color:#98C379;--shiki-dark:#98C379">.doc</span></span></code></pre>
</div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054512.png" type="image/png"/>
    </item>
    <item>
      <title>Linux-whereis搜索二进制文件</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-x-whereis.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-x-whereis.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux-whereis搜索二进制文件</source>
      <description>Linux-whereis搜索二进制文件 1 简介 whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。 搜索来源是数据库索引 在搜索一些进程位置时， 如果是可执行文件，which的准确性会好一点 但如果只是普通程序，可能并不会加入PATH，可以使用...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p><strong>whereis命令只能用于程序名的搜索</strong>，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>
<p>搜索来源是数据库索引</p>
<blockquote>
<p>在搜索一些进程位置时，</p>
<ul>
<li>
<p>如果是可执行文件，which的准确性会好一点</p>
</li>
<li>
<p>但如果只是普通程序，可能并不会加入PATH，可以使用whereis 搜索</p>
</li>
</ul>
</blockquote>
<h2>2 文件支持</h2>
<ul>
<li>二进制文件</li>
<li>源文件</li>
<li>帮助文档</li>
</ul>
<h2>3 实例</h2>
<h3>3.1 java的二进制文件</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> whereis</span><span style="color:#98C379;--shiki-dark:#98C379">  java</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054387.png" alt="image-20220419105359735" tabindex="0" loading="lazy"><figcaption>image-20220419105359735</figcaption></figure>
<p>返回的结果就比which 多了很多</p>
<h3>3.2 查找redis的二进制文件</h3>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>whereis redis</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054430.png" alt="image-20220419105732272" tabindex="0" loading="lazy"><figcaption>image-20220419105732272</figcaption></figure>
<h3></h3>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231054387.png" type="image/png"/>
    </item>
    <item>
      <title>Linux-which查看可执行文件</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-x-which.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-x-which.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux-which查看可执行文件</source>
      <description>Linux-which查看可执行文件 1 简介 查看可执行文件的位置 which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。 也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 2 命令语法 which 可执行文件名称 3 命令参数 -a 如果有多个匹配结果则打...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1 简介</h2>
<p><strong>查看可执行文件的位置</strong></p>
<p>which命令的作用是，<strong>在PATH变量指定的路径中</strong>，搜索某个系统命令的位置，并且返回第一个搜索结果。</p>
<blockquote>
<p>也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
</blockquote>
<h2>2 命令语法</h2>
<p>which 可执行文件名称</p>
<h2>3 命令参数</h2>
<ul>
<li>-a 如果有多个匹配结果则打印所有结果:</li>
<li>-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li>
<li>-p 与-n参数相同，但此处的包括了文件的路径。</li>
<li>-w 指定输出时栏位的宽度。</li>
<li>-V 显示版本信息</li>
</ul>
<h2>4 实例</h2>
<h3>4.1 java 命令所在的位置</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">which</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -a</span><span style="color:#98C379;--shiki-dark:#98C379"> java</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231056344.png" alt="image-20220418174207332" tabindex="0" loading="lazy"><figcaption>image-20220418174207332</figcaption></figure>
<h3><strong>4.2 找出 cd 这个命令</strong></h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">which</span><span style="color:#98C379;--shiki-dark:#98C379"> cd</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231056390.png" alt="image-20220418174012154" tabindex="0" loading="lazy"><figcaption>image-20220418174012154</figcaption></figure>
<h3>4.3 找出 xx这个命令</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">which</span><span style="color:#98C379;--shiki-dark:#98C379"> xxx</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231056417.png" alt="image-20220418174248167" tabindex="0" loading="lazy"><figcaption>image-20220418174248167</figcaption></figure>
<h3>4.4 找出 redis 这个命令</h3>
<p>redis 只是软件，并不是命令</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> which redis</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231056451.png" alt="image-20220419105639815" tabindex="0" loading="lazy"><figcaption>image-20220419105639815</figcaption></figure>
<h3></h3>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231056344.png" type="image/png"/>
    </item>
    <item>
      <title>Linux查看哪些进程占用CPU内存资源多</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-y-cpu-top.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-y-cpu-top.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux查看哪些进程占用CPU内存资源多</source>
      <description>Linux查看哪些进程占用CPU内存资源多 1. 占用CPU资源最多的10个进程 2. 占用内存资源最多的10个进程 参考文章 Linux下如何查看哪些进程占用的CPU内存资源最多</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 占用CPU资源最多的10个进程</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head</span></span></code></pre>
</div><h2>2. 占用内存资源最多的10个进程</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://blog.csdn.net/h330531987/article/details/74356347" target="_blank" rel="noopener noreferrer">Linux下如何查看哪些进程占用的CPU内存资源最多</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Centos防火墙firewalld操作</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-y-firewalld.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-y-firewalld.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Centos防火墙firewalld操作</source>
      <description>Centos防火墙firewalld操作 1. firewalld的基本使用 启动： systemctl start firewalld 关闭： systemctl stop firewalld 查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld 开机启用 ： syst...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. firewalld的基本使用</h2>
<ul>
<li>
<p>启动： systemctl start firewalld</p>
</li>
<li>
<p>关闭： systemctl stop firewalld</p>
</li>
<li>
<p>查看状态： systemctl status firewalld</p>
</li>
<li>
<p>开机禁用 ： systemctl disable firewalld</p>
</li>
<li>
<p>开机启用 ： systemctl enable firewalld</p>
</li>
</ul>
<h2>2. systemctl 老版本操作</h2>
<p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p>
<ul>
<li>启动一个服务：systemctl start firewalld.service</li>
<li>关闭一个服务：systemctl stop firewalld.service</li>
<li>重启一个服务：systemctl restart firewalld.service</li>
<li>显示一个服务的状态：systemctl status firewalld.service</li>
<li>在开机时启用一个服务：systemctl enable firewalld.service</li>
<li>在开机时禁用一个服务：systemctl disable firewalld.service</li>
<li>查看服务是否开机启动：systemctl is-enabled firewalld.service</li>
<li>查看已启动的服务列表：systemctl list-unit-files|grep enabled</li>
<li>查看启动失败的服务列表：systemctl --failed</li>
</ul>
<h2>3. 配置firewalld-cmd</h2>
<ul>
<li>查看版本： firewall-cmd --version</li>
<li>查看帮助： firewall-cmd --help</li>
<li>显示状态： firewall-cmd --state</li>
<li>查看所有打开的端口： firewall-cmd --zone=public --list-ports</li>
<li>更新防火墙规则： firewall-cmd --reload</li>
<li>查看区域信息:  firewall-cmd --get-active-zones</li>
<li>查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0</li>
<li>拒绝所有包：firewall-cmd --panic-on</li>
<li>取消拒绝状态： firewall-cmd --panic-off</li>
<li>查看是否拒绝： firewall-cmd --query-panic</li>
</ul>
<h2>4. 开启端口</h2>
<ol>
<li>
<p>添加</p>
<p>firewall-cmd --zone=public --add-port=80/tcp --permanent   （--permanent永久生效，没有此参数重启后失效）</p>
</li>
<li>
<p>重新载入</p>
<p>firewall-cmd --reload</p>
</li>
<li>
<p>查看</p>
<p>firewall-cmd --zone= public --query-port=80/tcp</p>
</li>
<li>
<p>删除</p>
<p>firewall-cmd --zone= public --remove-port=80/tcp --permanent</p>
</li>
</ol>
<h2>5. Centos6.X 防火墙操作</h2>
<ul>
<li>
<p>开启命令：service iptables start</p>
</li>
<li>
<p>关闭命令：service iptables stop</p>
</li>
<li>
<p>永久关闭防火墙：chkconfig iptables off</p>
</li>
<li>
<p>查看防火墙状态：service iptables status</p>
</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://www.cnblogs.com/moxiaoan/p/5683743.html" target="_blank" rel="noopener noreferrer">CentOS7使用firewalld打开关闭防火墙与端口</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>安装FTP服务</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-y-ftp-install.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-y-ftp-install.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">安装FTP服务</source>
      <description>安装FTP服务 1.安装vsftpd 安装前先查看ftp 是否已经安装，使用yum 安装 2. 修改配置文件 根据自己的需求，修改ftp配置文件/etc/vsftpd/vsftpd.conf chroot_local_user 与 chroot_list_enable 的组合效果如下： 注意：如果设置了 local_enable=YES ，自带 3. ...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1.安装vsftpd</h2>
<p>安装前先查看ftp 是否已经安装，使用yum 安装</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vsftpd -v</span></span>
<span class="line"><span>yum -y install vsftpd</span></span></code></pre>
</div><h2>2. 修改配置文件</h2>
<p>根据自己的需求，修改ftp配置文件<code>/etc/vsftpd/vsftpd.conf</code></p>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">anonymous_enable=</span><span style="color:#C678DD;--shiki-dark:#C678DD">NO</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 是否允许匿名访问</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">local_enable=</span><span style="color:#C678DD;--shiki-dark:#C678DD">YES</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 是否允许使用本地帐户进行 FTP 用户登录验证</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">local_umask=</span><span style="color:#C678DD;--shiki-dark:#C678DD">022</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 设置本地用户默认文件掩码022</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">chroot_local_user=</span><span style="color:#C678DD;--shiki-dark:#C678DD">YES</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   # 是否限定用户在其主目录下（NO 表示允许切换到上级目录）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#chroot_list_enable=YES # 是否启用限制用户的名单（注释掉为禁用）</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">chroot_list_file=/</span><span style="color:#D19A66;--shiki-dark:#D19A66">etc/vsftpd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/chroot_list </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 用户列表文件（一行一个用户）</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">allow_writeable_chroot=YES </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果启用了限定用户在其主目录下需要添加这个配置，解决报错 500 OOPS: vsftpd: refusing to run with writable root inside chroot()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">xferlog_enable=YES     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启用上传和下载的日志功能，默认开启。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">use_localtime=YES     </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 是否使用本地时(自行添加)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">userlist_enable=YES</span></span></code></pre>
</div><p>chroot_local_user 与 chroot_list_enable 的组合效果如下：</p>
<p>|                        | chroot_local_user=YES                                        | chroot_local_user=NO                                         |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>根据端口号/进程号查项目位置</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-y-pid-localtion.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-y-pid-localtion.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">根据端口号/进程号查项目位置</source>
      <description>根据端口号/进程号查项目位置 1. 根据端口号查pid 仅有端口号时，需要根据端口号先查出进程号 方式一：losf ![image-20191023093133400](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-2019102309313340...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 根据端口号查pid</h2>
<p>仅有端口号时，需要根据端口号先查出进程号</p>
<ul>
<li>
<p>方式一：losf</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>losf -i:{port}</span></span></code></pre>
</div><p>![image-20191023093133400](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191023093133400.png)</p>
</li>
<li>
<p>方式二：netstat</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>netstat -tunlp|grep {port}</span></span></code></pre>
</div><p>![image-20191023093229618](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191023093229618.png)</p>
</li>
</ul>
<h2>2. 根据pid查路径</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ll /proc/9293</span></span></code></pre>
</div><p>可以查到所有pid相关的信息，其中cwd就是进程所在位置</p>
<p>![image-20191023093453433](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191023093453433.png)</p>
<p>当然也可以直接加上cwd查询位置</p>
<p>![image-20191023093531560](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191023093531560.png)</p>
]]></content:encoded>
      <enclosure url="https://mrjackc.github.io/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191023093133400.png" type="image/png"/>
    </item>
    <item>
      <title>Linux Swap交换分区</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-z-swap.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-z-swap.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux Swap交换分区</source>
      <description>Linux Swap交换分区 1. Swap交换分区概念 Linux内核为了提高读写效率与速度，会将文件在内存中进行缓存，这部分内存就是Cache Memory(缓存内存)。即使你的程序运行结束后，Cache Memory也不会自动释放。这就会导致你再Linux系统中程序频繁读写文件后，你会发现可用内存变少。当系统的无力内存不够用的时候，就需要将无力内...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Swap交换分区概念</h2>
<p>Linux内核为了提高读写效率与速度，会将文件在内存中进行缓存，这部分内存就是Cache Memory(缓存内存)。<strong>即使你的程序运行结束后，Cache Memory也不会自动释放。<strong>这就会导致你再Linux系统中</strong>程序频繁读写文件</strong>后，你会发现<strong>可用内存变少</strong>。当系统的无力内存不够用的时候，就需要将无力内存的一部分释放出来，以供当前运行的程序使用。</p>
<p>那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些**被释放的空间被临时保存到Swap空间中，**等到那些程序要运行时，再从Swap分区中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。</p>
<h2>2. 查看Swap分区大小</h2>
<p>查看Swap分区的大小以及使用情况，一般使用free命令。当前我们并没设置swap分区</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231103407.png" alt="image-20200206122221579" tabindex="0" loading="lazy"><figcaption>image-20200206122221579</figcaption></figure>
<p>我们可以使用swapon命令查看当前swap相关信息：例如swap空间是swap partition，Swap size，使用情况等详细信息</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>swapon -s</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231103449.png" alt="image-20200206130028437" tabindex="0" loading="lazy"><figcaption>image-20200206130028437</figcaption></figure>
<h2>3. 创建swap区分</h2>
<h3>3.1 创建swap文件</h3>
<div class="language-swift" data-ext="swift" data-title="swift"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">cd /</span><span style="color:#C678DD;--shiki-dark:#C678DD">var</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sudo mkdir swap</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sudo dd </span><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=/dev/zero of=swapfile bs=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1024</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> count=</span><span style="color:#D19A66;--shiki-dark:#D19A66">2000000</span></span></code></pre>
</div><p>count代表的是大小，我这里是2G。</p>
<h3>3.2 把文件转换为swap文件</h3>
<div class="language-csharp" data-ext="csharp" data-title="csharp"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75"> sudo</span><span style="color:#E06C75;--shiki-dark:#E06C75"> mkswap</span><span style="color:#E06C75;--shiki-dark:#E06C75"> swapfile</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231103480.png" alt="image-20200206124047741" tabindex="0" loading="lazy"><figcaption>image-20200206124047741</figcaption></figure>
<h3>3.3 激活swap文件</h3>
<p>这里可以直接用命令挂载上一个swap分区，但是重启后要重新挂载：</p>
<div class="language-csharp" data-ext="csharp" data-title="csharp"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">挂载： </span><span style="color:#E06C75;--shiki-dark:#E06C75">sudo</span><span style="color:#E06C75;--shiki-dark:#E06C75"> swapon</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">var</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">swapfile</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">如果不需要了，可以也可以卸载：</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">卸载：</span><span style="color:#E06C75;--shiki-dark:#E06C75">sudo</span><span style="color:#E06C75;--shiki-dark:#E06C75"> swapoff</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> /</span><span style="color:#E06C75;--shiki-dark:#E06C75">var</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">swapfile</span></span></code></pre>
</div><h3>3.4 开机启动后自动挂载</h3>
<p>如果需要开机启动后自动挂载的话，可以把它添加到/etc/fstab文件中。</p>
<p>开机自动挂载SWAP分区，</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vim /etc/fstab</span></span></code></pre>
</div><p>在文件末尾添加</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>/var/swapfile   swap  swap  defaults  0  0</span></span></code></pre>
</div><h3>3.5 查看使用成功</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231103515.png" alt="image-20200206125218923" tabindex="0" loading="lazy"><figcaption>image-20200206125218923</figcaption></figure>
<h2>4. swappiness属性</h2>
<h3>4.1 swappiness属性介绍</h3>
<p>swappiness的值得大小对如何使用swap分区是有很大联系的。Linux下设置swappiness<strong>参数来配置内存使用到多少才开始使用swap分区</strong></p>
<ul>
<li>swappiness=0:表示最大限度使用物理内存，然后才是swap空间</li>
<li>swappiness＝100:表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面</li>
</ul>
<h3>4.2 永久更改方法</h3>
<p>修改 /etc/sysctl.conf</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo vim /etc/sysctl.conf</span></span></code></pre>
</div><p>在末尾加上</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>vm.swappiness = 10</span></span></code></pre>
</div><p>生效</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>sudo sysctl -p</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://www.jianshu.com/p/04c7a9ab438c" target="_blank" rel="noopener noreferrer">Linux 开启 Swap分区 教程</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231103407.png" type="image/png"/>
    </item>
    <item>
      <title>Linux命令行学习-tldr</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-z-tldr.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-z-tldr.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Linux命令行学习-tldr</source>
      <description>Linux命令行学习-tldr 1. 背景 对于很多使用终端的Linux和Mac用户，使用Terminal最难的就是要记住众多的Linux命令了。比如：ssh，curl，grep等，经常会记不住参数的顺序。这个时候通常在使用的时候通过man阅读长长的文档，从中对比一个个参数，这样费时又费力。 今天要介绍的一个好用的工具叫tldr，tldr全称Too l...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>对于很多使用终端的Linux和Mac用户，使用Terminal最难的就是要记住众多的Linux命令了。比如：<code>ssh</code>，<code>curl</code>，<code>grep</code>等，经常会记不住参数的顺序。这个时候通常在使用的时候通过man阅读长长的文档，从中对比一个个参数，这样费时又费力。</p>
<p>今天要介绍的一个好用的工具叫<code>tldr</code>，tldr全称Too long, Don’t read，翻译成中文就是[太长不读]。<code>tldr</code>根据二八原则将命令的常用场景给出示例，让人一看就懂。</p>
<h2>2. 安装</h2>
<div class="language-shell" data-ext="shell" data-title="shell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">yum</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -y</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> npm</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">npm</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -g</span><span style="color:#98C379;--shiki-dark:#98C379"> tldr（有可能报错，报错则再执行一次）</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">tldr</span><span style="color:#98C379;--shiki-dark:#98C379"> ssh</span><span style="color:#98C379;--shiki-dark:#98C379"> //</span><span style="color:#98C379;--shiki-dark:#98C379"> 查询ssh命令</span></span></code></pre>
</div><h3>2.1 tldr 运行报错</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231104770.png" alt="image-20210402112659028" tabindex="0" loading="lazy"><figcaption>image-20210402112659028</figcaption></figure>
<p>如果你第一次安装node 版本可能只有6.* ，则执行时会报错，可以参考升级<a href="https://segmentfault.com/a/1190000015302680" target="_blank" rel="noopener noreferrer">在centos7安装nodejs并升级nodejs到最新版本</a></p>
<h2>3. 使用</h2>
<p>使用tldr 查看tar命令</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>tldr tar</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231104816.png" alt="image-20210402113016559" tabindex="0" loading="lazy"><figcaption>image-20210402113016559</figcaption></figure>
<p>使用man查看tar命令(又臭又长)</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>man tar</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231104848.png" alt="image-20210402113051584" tabindex="0" loading="lazy"><figcaption>image-20210402113051584</figcaption></figure>
<h2>参考文章</h2>
<p><a href="https://www.hi-linux.com/posts/16098.html" target="_blank" rel="noopener noreferrer">Linux命令行学习神器 TLDR</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404231104770.png" type="image/png"/>
    </item>
    <item>
      <title>centos7 - 查看内网ip和外网ip</title>
      <link>https://mrjackc.github.io/posts/Linux/linux-z-view-ip.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/linux-z-view-ip.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">centos7 - 查看内网ip和外网ip</source>
      <description>centos7 - 查看内网ip和外网ip 1. 查看内网IP 2. 查看外网的ip 参考文章 Linux 开启 Swap分区 教程</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 查看内网IP</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>ifconfig</span></span>
<span class="line"><span># 简化输出</span></span>
<span class="line"><span>ifconfig | grep inet</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>ip addr</span></span></code></pre>
</div><h2>2. 查看外网的ip</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>curl ifconfig.me</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://www.jianshu.com/p/04c7a9ab438c" target="_blank" rel="noopener noreferrer">Linux 开启 Swap分区 教程</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Unix/Linux 扫盲笔记</title>
      <link>https://mrjackc.github.io/posts/Linux/unix-linux-note.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/unix-linux-note.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Unix/Linux 扫盲笔记</source>
      <description>This document is not completed and will be updated anytime. Catagory Catagory Unix Unix-like Single UNIX Specification Apple iOS XNU Kernel Linux Linux Kernel GNU Project Androi...</description>
      <category>Linux</category>
      <pubDate>Tue, 14 Apr 2015 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>This document is not completed and will be updated anytime.</p>
</blockquote>
<h2>Catagory</h2>
<ul>
<li><a href="#catagory">Catagory</a></li>
<li><a href="#unix">Unix</a></li>
<li><a href="#unix-like">Unix-like</a>
<ul>
<li><a href="#single-unix-specification">Single UNIX Specification</a></li>
<li><a href="#apple-ios">Apple iOS</a></li>
<li><a href="#xnu-kernel">XNU Kernel</a></li>
</ul>
</li>
<li><a href="#linux">Linux</a>
<ul>
<li><a href="#linux-kernel">Linux Kernel</a></li>
<li><a href="#gnu-project">GNU Project</a></li>
<li><a href="#android">Android</a></li>
<li><a href="#android-kernel">Android Kernel</a></li>
<li><a href="#android-rom">Android ROM</a></li>
<li><a href="#chrome-os">Chrome OS</a></li>
<li><a href="#chromium-os">Chromium OS</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png" type="image/png"/>
    </item>
    <item>
      <title>更优雅强大的终端ZSH</title>
      <link>https://mrjackc.github.io/posts/Linux/zsh.html</link>
      <guid>https://mrjackc.github.io/posts/Linux/zsh.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">更优雅强大的终端ZSH</source>
      <description>MacOS 自带的 bash 作为几乎所有 Linux 发行版的默认终端，正常使用时没什么问题的 这里介绍一个更强大的终端神器 目录 背景介绍 在 unix 内核的操作系统中,当然现在衍生出好多分支,linux ,OS X 都算. shell 就算和上面这些系统内核指令打交道的一座桥梁,我们通过键盘输入一种自己容易记忆识别的符号标识(shell 命令)...</description>
      <category>Linux</category>
      <pubDate>Wed, 24 Jul 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>MacOS 自带的 bash 作为几乎所有 Linux 发行版的默认终端，正常使用时没什么问题的</p>
<p>这里介绍一个更强大的终端神器</p>
</blockquote>
<h2>目录</h2>

<h2>背景介绍</h2>
<p>在 unix 内核的操作系统中,当然现在衍生出好多分支,linux ,OS X 都算.</p>
<p>shell 就算和上面这些系统内核指令打交道的一座桥梁,我们通过键盘输入一种自己容易记忆识别的符号标识(shell 命令)</p>
<p>然后 shell 解析这种命令再反馈给内核去执行一系列操作.</p>
<p>zsh 和 shell 有什么关系呢?</p>
<p>其实 zsh 也是一种 shell ,但是并不是我们系统默认的 shell ,unix 衍生系统的默认 shell 都是 bash。</p>
<p>查看已安装 shell<br>
查看 Mac 上已有的 shell,一共有 6 种</p>
]]></content:encoded>
      <enclosure url="https://s2.ax1x.com/2019/11/15/MarNhq.md.png" type="image/png"/>
    </item>
    <item>
      <title>python爬取12306城市编码转换</title>
      <link>https://mrjackc.github.io/posts/Python/python-12306-coty-code.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-12306-coty-code.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">python爬取12306城市编码转换</source>
      <description>python爬取12306城市编码转换 1. 背景 在做项目的时候，遇到铁路城市编码问题。其中：BJP为北京站编码；TJP为天津站编码。 我们在信息查询-&amp;gt;正晚点-&amp;gt;可以看到station_name.js返回了城市编码信息 image-20210202094628947image-20210202094628947 请求地址：https://kyfw....</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>在做项目的时候，遇到铁路城市编码问题。其中：BJP为北京站编码；TJP为天津站编码。</p>
<p>我们在信息查询-&gt;正晚点-&gt;可以看到station_name.js返回了城市编码信息</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410131415320.png" alt="image-20210202094628947" tabindex="0" loading="lazy"><figcaption>image-20210202094628947</figcaption></figure>
<p><strong>请求地址</strong>：<a href="https://kyfw.12306.cn/otn/resources/js/framework/station_name.js" target="_blank" rel="noopener noreferrer">https://kyfw.12306.cn/otn/resources/js/framework/station_name.js</a></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410131415361.png" alt="image-20210202095058660" tabindex="0" loading="lazy"><figcaption>image-20210202095058660</figcaption></figure>
<h2>2. 爬虫</h2>
<p>爬虫目的： 从如上链接获取城市对应的三字码</p>
<ol>
<li>获取链接内容</li>
<li>去掉前20个无用字符</li>
<li>以|分隔，每5个是一组城市</li>
<li>取每组第二三个，返回dict</li>
</ol>
<p>代码如下：</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 由于火车站使用三字码，所以我们需要先获取站点对应的三字码</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">code_data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(code_data.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 处理获得的字符串，返回字典类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zip_dic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">code_data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 去除前20个字符</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    code_data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> code_data[</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # print(code_data)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 以竖线划分字符，每5个是一组城市信息，每组第二三个是城市编码和城市名称</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    list_code </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> code_data.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">split</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"|"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(list_code)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    a</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    b</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    t1</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    t2</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (a </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(list_code))):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        t1.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(list_code[a])</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        t2.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(list_code[b])</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        a </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> a</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66">5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        b </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> b</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66">5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    dic </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> dict</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">zip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(t1,t2))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> dic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">code_dic </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zip_dic</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(code_data.text)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(code_dic)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>3. 附录</h2>
<p>城市编码和城市转换json文件</p>
<div class="language-js" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"北京北"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"VAP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"北京东"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"BOP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"北京"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"BJP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"北京南"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"VNP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"北京西"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"BXP"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"广州南"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"IZQ"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"重庆北"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"CUW"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"重庆"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"CQW"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"重庆南"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"CRW"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"重庆西"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"CXW"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">	"广州东"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"GGQ"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	....</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
</div><p>链接：<a href="https://pan.baidu.com/s/1QYZnGQP7BadfvccHZq6ASA" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1QYZnGQP7BadfvccHZq6ASA</a><br>
提取码：v8cf<br>
复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<h2>参考文章</h2>
<p><a href="https://blog.csdn.net/kcyxws/article/details/105823767" target="_blank" rel="noopener noreferrer">python爬虫：获取12306网站火车站对应三字码</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410131415320.png" type="image/png"/>
    </item>
    <item>
      <title>Python优势</title>
      <link>https://mrjackc.github.io/posts/Python/python-advantage.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-advantage.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Python优势</source>
      <description>Python优势 2. 学习过程中感悟的python强大之处 文件处理强大 以上代码就直接保存文件，也不需要异常处理，关闭流等操作</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>2. 学习过程中感悟的python强大之处</h2>
<ol>
<li>
<p>文件处理强大</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>with open('index.html', 'wb') as f:</span></span>
<span class="line"><span>    f.write(req.content)</span></span></code></pre>
</div><p>以上代码就直接保存文件，也不需要异常处理，关闭流等操作</p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>python爬取包图网</title>
      <link>https://mrjackc.github.io/posts/Python/python-baotu.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-baotu.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">python爬取包图网</source>
      <description>python爬取包图网 1. 简介 下载包图网的视频资源到本地 2. 涉及知识点 isinstance() 判断对象类型 函数来判断一个对象是否是一个已知的类型 多线程 zip/unzip使用 zip()把两个或多个数组的所有元素按索引对齐，然后按索引合并成新数组。例如，你有一个Array保存了名字，另一个Array保存了分数，现在，要把名字和分数给对...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>下载包图网的视频资源到本地</p>
<h2>2. 涉及知识点</h2>
<ol>
<li>
<p>isinstance() 判断对象类型</p>
<p>函数来判断一个对象是否是一个已知的类型</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#C678DD;--shiki-dark:#C678DD"> not</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> isinstance</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.useragent, </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span></code></pre>
</div></li>
<li>
<p>多线程</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">t1 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> threading</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # request线程，进行生产者任务</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">t1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 线程启动</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">t1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 等待其他线程结束，再结束 线程</span></span></code></pre>
</div></li>
<li>
<p>zip/unzip使用</p>
</li>
</ol>
<p><code>zip()</code>把两个或多个数组的所有元素按索引对齐，然后按索引合并成新数组。例如，你有一个<code>Array</code>保存了名字，另一个<code>Array</code>保存了分数，现在，要把名字和分数给对上，用<code>zip()</code>轻松实现：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>'use strict';</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var names = ['Adam', 'Lisa', 'Bart'];</span></span>
<span class="line"><span>var scores = [85, 92, 59];</span></span>
<span class="line"><span>_.zip(names, scores);</span></span>
<span class="line"><span>// [['Adam', 85], ['Lisa', 92], ['Bart', 59]]</span></span></code></pre>
</div><p><code>unzip()</code>则是反过来：</p>
<ol start="4">
<li>
<p>进程间通信 queue队列</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> Baotu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">'https://ibaotu.com/shipin/'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">max_page</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">250</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">useragent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">None</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">      </span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 请求队列</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.fail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 失败队列</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">           ...</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">           self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">({</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'http:'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> _[</span><span style="color:#98C379;--shiki-dark:#98C379">'src'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: n[</span><span style="color:#98C379;--shiki-dark:#98C379">'alt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]})  </span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">         	...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	  </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> download</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=os.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">getcwd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()):  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 默认下载路径为当前文件夹下</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        while</span><span style="color:#C678DD;--shiki-dark:#C678DD"> not</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">empty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 判断如果队列不为空进行下载</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从队列中取出视频字典</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>保存文件</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">with</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(os.path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(path, data[</span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]), </span><span style="color:#98C379;--shiki-dark:#98C379">'wb'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(req.content)</span></span></code></pre>
</div></li>
<li>
<p>时间装饰器</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 时间装饰器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> usetime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> inner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(*</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, **</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">kwargs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        time_start </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(*args, **kwargs)  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 装饰的函数在此运行</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        time_run </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time_start</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(func.</span><span style="color:#E06C75;--shiki-dark:#E06C75">__name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#98C379;--shiki-dark:#98C379"> '用时 </span><span style="color:#D19A66;--shiki-dark:#D19A66">%.2f</span><span style="color:#98C379;--shiki-dark:#98C379"> 秒'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> %</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time_run)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> inner</span></span></code></pre>
</div><p>需要使用的地方</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 	@usetime</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    	pass</span></span></code></pre>
</div></li>
</ol>
<h2>3. 完整代码</h2>
<p>思路：</p>
<ol>
<li>初始化要爬取的内容参数（请求队列，页数，请求头，线程数量等）</li>
<li>爬取页面内容，将网站中的视频和图片地址取出，存在queue队列</li>
<li>从queue队列中取出对应的地址，下载到本地</li>
</ol>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">__author__ </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'Joynice'</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> os</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> threading</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bs4 </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> BeautifulSoup</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lxml </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 时间装饰器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> usetime</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> inner</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(*</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">args</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, **</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">kwargs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        time_start </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        func</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(*args, **kwargs)  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 装饰的函数在此运行</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        time_run </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">() </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time_start</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(func.</span><span style="color:#E06C75;--shiki-dark:#E06C75">__name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#98C379;--shiki-dark:#98C379"> '用时 </span><span style="color:#D19A66;--shiki-dark:#D19A66">%.2f</span><span style="color:#98C379;--shiki-dark:#98C379"> 秒'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> %</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time_run)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> inner</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> Baotu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    负责爬虫存储</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    TODO</span><span style="color:#98C379;--shiki-dark:#98C379">:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        目标网络有反爬虫机制，多线程下导致有些目标下载失败</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        1.解决多线程下网络错误：增加retry机制</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        2.异步进行</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    注意点：</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    requests.text与requests.context区别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    '''</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">'https://ibaotu.com/shipin/'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">max_page</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">250</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">useragent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">None</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param url:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param thread: 线程数</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param max_page: 爬取页数</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param useragent: 请求useragent</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> url</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.thread </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> thread</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> max_page</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.useragent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> useragent</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.header </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">_get_header</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 请求队列</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.fail </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> queue.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Queue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 失败队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">_get_maxpage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> page:</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> page</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        super</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(Baotu, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">__init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 如果用户没有设置浏览器类型将使用默认浏览器</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> _get_header</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#C678DD;--shiki-dark:#C678DD"> not</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> isinstance</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.useragent, </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.useragent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span><span style="color:#98C379;--shiki-dark:#98C379">'User-Agent'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.useragent}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 检测当前共有多少分页若用户输入大于当前页面分页则使用当前分页</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> _get_maxpage</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        req </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.header, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">timeout</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">verify</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).text</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTML</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(req)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"//div[@class='pagelist']/a[8]/text()"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># xpath找到class为pagelist的div标签下第8个a标签下的text文本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 获取请求列表</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    @usetime</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                req </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> '6-0-0-0-0-</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">.html'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i), </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.header, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">timeout</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">                                   verify</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'正在爬取第</span><span style="color:#D19A66;--shiki-dark:#D19A66">%d</span><span style="color:#98C379;--shiki-dark:#98C379">页的数据'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> %</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> req.status_code </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    bs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> BeautifulSoup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(req.text)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> _, n </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> zip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(bs.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'video'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">src</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">), bs.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'img'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                        'class'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'scrollLoading'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">})):  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># bs找到所有video、以及class为scrollLoading的img标签</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">                        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            {</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'http:'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> _[</span><span style="color:#98C379;--shiki-dark:#98C379">'src'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: n[</span><span style="color:#98C379;--shiki-dark:#98C379">'alt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]})  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将每个视频组成字典形式放入队列中，{url:视频url,name:视频的名字)}</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            except</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Exception </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> e:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(e)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                pass</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'共有</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">条视频需要下载！'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">qsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()))  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 计算队列的长度及存储多少视频字典</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 进行下载</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    @usetime</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> download</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">path</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=os.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">getcwd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()):  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 默认下载路径为当前文件夹下</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        while</span><span style="color:#C678DD;--shiki-dark:#C678DD"> not</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">empty</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 判断如果队列不为空进行下载</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.que.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从队列中取出视频字典</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                req </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">data[</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.header, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">verify</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> req.status_code </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'-'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, data[</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#98C379;--shiki-dark:#98C379">'-'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    if</span><span style="color:#C678DD;--shiki-dark:#C678DD"> not</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> os.path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">exists</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(path):  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果用户设置path不存在，则创建该path</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        os.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">mkdir</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">strip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">().</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">rstrip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\\</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    with</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(os.path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(path, data[</span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]), </span><span style="color:#98C379;--shiki-dark:#98C379">'wb'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(req.content)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    # 如果请求失败，等待2秒重新下载，感觉没用，继续完善</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    req2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">data[</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.header, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">verify</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> req2.status_code </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'+'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, data[</span><span style="color:#98C379;--shiki-dark:#98C379">'url'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">], </span><span style="color:#98C379;--shiki-dark:#98C379">'+'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                        with</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(os.path.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(path, data[</span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]), </span><span style="color:#98C379;--shiki-dark:#98C379">'wb'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(req.content)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">                        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.fail.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">put</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(data)  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 将失败的字典存入fail队列中</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(data[</span><span style="color:#98C379;--shiki-dark:#98C379">'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> '</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\t</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#98C379;--shiki-dark:#98C379"> '下载失败！'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            except</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Exception </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> e:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(e)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 控制线程，进行工作</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        t1 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> threading.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.request)  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># request线程，进行生产者任务</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        t1.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 线程启动</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        t1.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 等待其他线程结束，再结束线程</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        thread_list </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.thread):  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 创建多个download线程</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            t </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> threading.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Thread</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">target</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.download, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'D:</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\\</span><span style="color:#98C379;--shiki-dark:#98C379">video'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            thread_list.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(t)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> t </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> thread_list:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            t.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">start</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> __name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> ==</span><span style="color:#98C379;--shiki-dark:#98C379"> '__main__'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    a </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Baotu</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">max_page</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">thread</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># D:\video</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>BeautifulSoup入门</title>
      <link>https://mrjackc.github.io/posts/Python/python-beautiful-soup-started.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-beautiful-soup-started.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">BeautifulSoup入门</source>
      <description>BeautifulSoup入门 1. 简介 Beautiful Soup 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup 会帮你节省数小时甚至数天的工作时间. 2. 简单用法 将一段文档传入 BeautifulSoup 的构造方法,就...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p><strong>Beautiful Soup</strong> 是一个可以从 <strong>HTML</strong> 或 <strong>XML</strong> 文件中提取数据的 <strong>Python</strong> 库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.<strong>Beautiful Soup</strong> 会帮你节省数小时甚至数天的工作时间.</p>
<h2>2. 简单用法</h2>
<p>将一段文档传入 <strong>BeautifulSoup</strong> 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="color:#C678DD;--shiki-dark:#C678DD"> from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bs4 </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> BeautifulSoup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> soup </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> BeautifulSoup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"&lt;html&gt;&lt;body&gt;&lt;p&gt;data&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> soup</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">body</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">data</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&lt;/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">body</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&lt;/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> soup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'p'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">data</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">p</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span></code></pre>
</div><ol>
<li>
<p>首先传入一个 <strong>html</strong> 文档，<code>soup</code> 是获得文档的对象。</p>
</li>
<li>
<p>然后,文档被转换成 <strong>Unicode</strong> ,并且 <strong>HTML</strong> 的实例都被转换成 <strong>Unicode</strong> 编码。</p>
</li>
<li>
<p>然后,<strong>Beautiful Soup</strong> 选择最合适的解析器来解析这段文档,</p>
<p>如果手动指定解析器那么 <strong>Beautiful Soup</strong> 会选择指定的解析器来解析文档。但是一般最好手动指定解析器，</p>
</li>
</ol>
<ul>
<li>要解析的文档是什么类型: 目前支持, <strong>html, xml,</strong> 和 <strong>html5</strong></li>
<li>指定使用哪种解析器: 目前支持, <strong>lxml, html5lib,</strong> 和 <strong>html.parser</strong></li>
</ul>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bs4 </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> BeautifulSoup</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(‘http:</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">//</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">www.jianshu.com</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">’).content  </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">soup </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> BeautifulSoup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html, </span><span style="color:#98C379;--shiki-dark:#98C379">'html.parser'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">from_encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> soup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'div'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div><h2>3. 对象种类</h2>
<p><strong>Beautiful Soup</strong> 将复杂 <strong>HTML</strong> 文档转换成一个复杂的树形结构,每个节点都是 <strong>Python</strong> 对象,所有对象可以归纳为 4 种: <code>Tag , NavigableString , BeautifulSoup , Comment .</code></p>
<ul>
<li>
<p><code>Tag</code>：通俗点讲就是 <strong>HTML</strong> 中的一个个标签，像上面的 <code>div，p</code>。每个 <code>Tag</code> 有两个重要的属性 <code>name</code> 和 <code>attrs，name</code> 指标签的名字或者 <code>tag</code> 本身的 <code>name，attrs</code> 通常指一个标签的 <code>class</code>。</p>
</li>
<li>
<p><code>NavigableString</code>：获取标签内部的文字，如，<code>soup.p.string</code>。</p>
</li>
<li>
<p><code>BeautifulSoup</code>：表示一个文档的全部内容。</p>
</li>
<li>
<p><code>Comment：Comment</code> 对象是一个特殊类型的 <code>NavigableString</code> 对象，其输出的内容不包括注释符号.</p>
</li>
</ul>
<h2>4. 示例</h2>
<p>如下示例，<strong>Beautiful Soup</strong> 的常见用法</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sys  </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">reload</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sys)  </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sys.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">setdefaultencoding</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bs4 </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> BeautifulSoup</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html_doc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> """</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;meta charset="utf-8"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    &lt;title&gt;首页 - 简书&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/head&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;body class="output fluid zh cn win reader-day-mode reader-font2 " data-js-module="recommendation" data-locale="zh-CN"&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;ul class="article-list thumbnails"&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">  &lt;li class=have-img&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;a class="wrap-img" href="/p/49c4728c3ab2"&gt;&lt;img src="http://upload-images.jianshu.io/upload_images/2442470-745c6471c6f8258c.jpg?imageMogr2/auto-orient/strip%7CimageView2/1/w/300/h/300" alt="300" /&gt;&lt;/a&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;p class="list-top"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        &lt;a class="author-name blue-link" target="_blank" href="/users/0af6b163b687"&gt;阿随向前冲&lt;/a&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        &lt;em&gt;·&lt;/em&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        &lt;span class="time" data-shared-at="2016-07-27T07:03:54+08:00"&gt;&lt;/span&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;/p&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;h4 class="title"&gt;&lt;a target="_blank" href="/p/49c4728c3ab2"&gt; 只装了这六款软件，工作就高效到有时间逛某宝刷某圈&lt;/a&gt;&lt;/h4&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;div class="list-footer"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        &lt;a target="_blank" href="/p/49c4728c3ab2"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          阅读 1830</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/a&gt;        &lt;a target="_blank" href="/p/49c4728c3ab2#comments"&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">           · 评论 35</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/a&gt;        &lt;span&gt; · 喜欢 95&lt;/span&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">          &lt;span&gt; · 打赏 1&lt;/span&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        </span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">  &lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/ul&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">"""</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">soup </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> BeautifulSoup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html_doc, </span><span style="color:#98C379;--shiki-dark:#98C379">'html.parser'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">from_encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查找所有有关的节点</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">tags </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> soup.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'li'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">class_</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">"have-img"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tags:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        image </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.img[</span><span style="color:#98C379;--shiki-dark:#98C379">'src'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        article_user </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.p.a.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        article_user_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.p.a[</span><span style="color:#98C379;--shiki-dark:#98C379">'href'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]      </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        created </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.p.span[</span><span style="color:#98C379;--shiki-dark:#98C379">'data-shared-at'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]        </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        article_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.h4.a[</span><span style="color:#98C379;--shiki-dark:#98C379">'href'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 可以在查找的 tag 下继续使用 find_all()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        tag_span </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag.div.div.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'span'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        likes </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> tag_span[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">].</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">strip</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.1 find_all()</h3>
<p><strong>BeautifulSoup</strong> 主要用来遍历子节点及子节点的属性，通过点取属性的方式只能获得当前文档中的第一个 <code>tag</code>，例如，<code>soup.li</code>。如果想要得到所有的<code>&lt;li&gt;</code> 标签,或是通过名字得到比一个 <code>tag</code> 更多的内容的时候,就需要用到 <code>find_all()</code>，<code>find_all()</code> 方法搜索当前 tag 的所有 tag 子节点,并判断是否符合过滤器的条件<code>find_all()</code> 所接受的参数如下：</p>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">( name , attrs , recursive , string , </span><span style="color:#C678DD;--shiki-dark:#C678DD">**</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">kwargs )</span></span></code></pre>
</div><ol>
<li>
<p>按 <code>name</code> 搜索: <code>name</code> 参数可以查找所有名字为 <code>name</code> 的 <code>tag</code>,字符串对象会被自动忽略掉:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> soup.find_all(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">"li"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p>按 <code>id</code> 搜索: 如果包含一个名字为 <code>id</code> 的参数,搜索时会把该参数当作指定名字 <code>tag</code> 的属性来搜索:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> soup.find_all(id</span><span style="color:#98C379;--shiki-dark:#98C379">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">'link2'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p>按 <code>attr</code> 搜索：有些 <code>tag</code> 属性在搜索不能使用,比如 <strong>HTML5</strong> 中的 <code>data-*</code> 属性，但是可以通过 <code>find_all()</code> 方法的 <code>attrs</code> 参数定义一个字典参数来搜索包含特殊属性的 <code>tag</code>:</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> data_soup.find_all(attrs</span><span style="color:#98C379;--shiki-dark:#98C379">={</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">"</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">data-foo</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">": "</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">value</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">"})</span></span></code></pre>
</div></li>
<li>
<p>按 <code>CSS</code> 搜索: 按照 <code>CSS</code> 类名搜索 <code>tag</code> 的功能非常实用,但标识<code>CSS</code> 类名的关键字 <code>class</code> 在 <strong>Python</strong> 中是保留字,使用 <code>class</code> 做参数会导致语法错误.从 <strong>Beautiful Soup</strong> 的 4.1.1 版本开始,可以通过 <code>class_</code> 参数搜索有指定 <code>CSS</code> 类名的 <code>tag</code>:</p>
<div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> soup.find_all(</span><span style="color:#98C379;--shiki-dark:#98C379">'li'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, class_</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">"have-img"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p><code>string</code> 参数：通过 <code>string</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>string</code> 参数接受 字符串 , 正则表达式 , 列表, <code>True</code> 。 看例子:</p>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B"> soup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"a"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, string</span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#98C379;--shiki-dark:#98C379">"Elsie"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p><code>recursive</code> 参数：调用 <code>tag</code> 的 <code>find_all()</code> 方法时,<strong>Beautiful Soup</strong> 会检索当前 <code>tag</code> 的所有子孙节点,如果只想搜索 <code>tag</code> 的直接子节点,可以使用参数 <code>recursive=False</code> .</p>
<div class="language-php" data-ext="php" data-title="php"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> soup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"title"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> recursive</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
</ol>
<blockquote>
<p><strong>find_all()</strong> 几乎是 <strong>Beautiful Soup</strong>中最常用的搜索方法,也可以使用其简写方法，以下代码等价：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    soup.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_all</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"a"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    soup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"a"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></blockquote>
<h3>4.2 get_text()</h3>
<p>如果只想得到 <code>tag</code> 中包含的文本内容,那么可以用 <code>get_text()</code> 方法,这个方法获取到 <code>tag</code> 中包含的所有文版内容包括子孙 <code>tag</code> 中的内容,并将结果作为 <code>Unicode</code> 字符串返回:</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    tag</span><span style="color:#D19A66;--shiki-dark:#D19A66">.p.a</span><span style="color:#C678DD;--shiki-dark:#C678DD">.get_text(</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://www.jianshu.com/p/2b783f7914c6" target="_blank" rel="noopener noreferrer">python：BeautifulSoup 模块使用指南</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Python将数据库文档转DDL建表语句</title>
      <link>https://mrjackc.github.io/posts/Python/python-db-ddl.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-db-ddl.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Python将数据库文档转DDL建表语句</source>
      <description>Python将数据库文档转DDL建表语句 1. 背景 项目启动阶段先设计了数据库文档，再将数据库文档转化为建表语句（DDL）时，无论是手写sql还是用客户端工具，都需要涉及大量的复制操作。十分劳累 2. 思路 将数据库word的word 复制到excel，读取excel。根据自己的业务规则读取 读取整份数据库文档word，读取word 格式影响较大。而...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>项目启动阶段先设计了数据库文档，再将数据库文档转化为建表语句（DDL）时，无论是手写sql还是用客户端工具，都需要涉及大量的复制操作。十分劳累</p>
<h2>2. 思路</h2>
<p>将数据库word的word 复制到excel，读取excel。根据自己的业务规则读取</p>
<blockquote>
<p>读取整份数据库文档word，读取word 格式影响较大。而且涉及到的数据表太多，我们批量替换很容易出问题。还是单表操作更保险</p>
</blockquote>
<p>数据库word</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230952967.png" alt="image-20210518101735640" tabindex="0" loading="lazy"><figcaption>image-20210518101735640</figcaption></figure>
<p>复制后的excel</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230952016.png" alt="image-20210518101832347" tabindex="0" loading="lazy"><figcaption>image-20210518101832347</figcaption></figure>
<h2>3. 代码实现</h2>
<p>提供一个思路，每个公司的数据库文档格式并不一致，适当改动即可</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> xlrd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> __name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> ==</span><span style="color:#98C379;--shiki-dark:#98C379"> '__main__'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    data_file </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> xlrd.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">open_workbook</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'temp.xls'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 查看工作表</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    data_file.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sheet_names</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # print("sheets：" + str(data_file.sheet_names()))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 遍历所有工作表，获取对应的下标位置</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> num </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(data_file.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sheet_names</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">())):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 按照下标读取对应工作表</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        sheet </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data_file.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sheet_by_index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(num)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 拼接建表语句</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "CREATE TABLE "</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        table_wz_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        table_primary_key </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sheet.nrows):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                table_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">split</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"T_"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                table_zw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_name[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> "T_"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_name[</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> "(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                zwm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i, </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                ywm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i, </span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                gs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i, </span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                bz </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i, </span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> zwm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#98C379;--shiki-dark:#98C379"> '主键'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        table_primary_key </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\t</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> gs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " NOT NULL"</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\t</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> gs</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (sheet.nrows </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> ",</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            count </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ddlSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> ");"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"DROP TABLE "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> ";"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(ddlSql)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_primary_key:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                "ALTER TABLE "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " ADD CONSTRAINT PK_"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " PRIMARY KEY ("</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_primary_key </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> ");"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        commentSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        commentSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "COMMENT ON TABLE "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " IS '"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_zw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> "';</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        count2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 拼接字段注释和表注释</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> j </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sheet.nrows):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> count2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                zwm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(j, </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                ywm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(j, </span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                gs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(j, </span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                bz </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sheet.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cell_value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(j, </span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    commentSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "COMMENT ON COLUMN "</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> table_yw_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> "."</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ywm </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> " IS '"</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> zwm</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bz:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        commentSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> "("</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> bz </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> ")';</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        commentSql </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#98C379;--shiki-dark:#98C379"> ";</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">"</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            count2 </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(commentSql)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果</p>
<div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">DROP</span><span style="color:#C678DD;--shiki-dark:#C678DD"> TABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> T_SYS_USER;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">CREATE</span><span style="color:#C678DD;--shiki-dark:#C678DD"> TABLE</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> T_SYS_USER</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	USER_ID </span><span style="color:#C678DD;--shiki-dark:#C678DD">NUMBER</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	DEPT_ID </span><span style="color:#C678DD;--shiki-dark:#C678DD">NUMBER</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	USER_NAME </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">30</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	NICK_NAME </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">30</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	USER_TYPE </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	EMAIL </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	PHONENUMBER </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	SEX </span><span style="color:#C678DD;--shiki-dark:#C678DD">CHAR</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	AVATAR </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">	PASSWORD</span><span style="color:#C678DD;--shiki-dark:#C678DD"> VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">	STATUS</span><span style="color:#C678DD;--shiki-dark:#C678DD"> CHAR</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	DEL_FLAG </span><span style="color:#C678DD;--shiki-dark:#C678DD">CHAR</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	LOGIN_IP </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">128</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	LOGIN_DATE </span><span style="color:#C678DD;--shiki-dark:#C678DD">DATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	CREATE_BY </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">64</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	CREATE_TIME </span><span style="color:#C678DD;--shiki-dark:#C678DD">DATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	UPDATE_BY </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">64</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	UPDATE_TIME </span><span style="color:#C678DD;--shiki-dark:#C678DD">DATE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">	REMARK </span><span style="color:#C678DD;--shiki-dark:#C678DD">VARCHAR2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">500</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON TABLE T_SYS_USER IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户信息表'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.USER_ID IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户ID;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.DEPT_ID IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">部门ID;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.USER_NAME IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户账号;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.NICK_NAME IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">用户名字;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.USER_TYPE IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户类型(00：系统用户)'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.EMAIL IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户邮箱;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.PHONENUMBER IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">手机号码;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.SEX IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户性别(0：男，1：女，2：未知)'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.AVATAR IS </span><span style="color:#98C379;--shiki-dark:#98C379">'用户头像;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.PASSWORD IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">密码;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.STATUS IS </span><span style="color:#98C379;--shiki-dark:#98C379">'帐号状态(0：正常，1：停用)'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.DEL_FLAG IS </span><span style="color:#98C379;--shiki-dark:#98C379">'删除标志(0：代表存在，2：代表删除)'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.LOGIN_IP IS </span><span style="color:#98C379;--shiki-dark:#98C379">'最后登录IP;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.LOGIN_DATE IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">最后登录时间;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.CREATE_BY IS </span><span style="color:#98C379;--shiki-dark:#98C379">'创建者;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.CREATE_TIME IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">创建时间;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.UPDATE_BY IS </span><span style="color:#98C379;--shiki-dark:#98C379">'更新者;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">COMMENT ON COLUMN T_SYS_USER.UPDATE_TIME IS '</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">更新时间;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">COMMENT ON COLUMN T_SYS_USER.REMARK IS </span><span style="color:#98C379;--shiki-dark:#98C379">'备注;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230952967.png" type="image/png"/>
    </item>
    <item>
      <title>python爬取豆瓣影评分析</title>
      <link>https://mrjackc.github.io/posts/Python/python-douban-rating.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-douban-rating.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">python爬取豆瓣影评分析</source>
      <description>python爬取豆瓣影评分析 1. 简介 读取豆瓣影评，并根据影评分析出影评关键词 2. 涉及知识点 requests.Session() 会话保持 requests库的session会话对象可以跨请求保持某些参数，说白了，就是比如你使用session成功的登录了某个网站，则在再次使用该session对象求求该网站的其他网页都会默认使用该session...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>读取豆瓣影评，并根据影评分析出影评关键词</p>
<h2>2. 涉及知识点</h2>
<ol>
<li>
<p>requests.Session() 会话保持</p>
<blockquote>
<p>requests库的session会话对象可以跨请求保持某些参数，说白了，就是比如你使用session成功的登录了某个网站，则在再次使用该session对象求求该网站的其他网页都会默认使用该session之前使用的cookie等参数</p>
</blockquote>
</li>
<li>
<p>requests 请求网络代理</p>
<p>如果需要使用代理，你可以通过为任意请求方法提供 proxies 参数来配置单个请求:</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>import requests </span></span>
<span class="line"><span>proxies = { "http": "http://10.10.1.10:3128", "https": "http://10.10.1.10:1080", } </span></span>
<span class="line"><span>requests.get("http://example.org", proxies=proxies)</span></span></code></pre>
</div></li>
<li>
<p>输入</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>kind = int(input("请选择搜索类型：1.根据电影链接 2.根据电影id 3.根据电影名："))</span></span></code></pre>
</div></li>
<li>
<p>selenium 模拟操作,通过xpath查找元素</p>
</li>
</ol>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span> drive = webdriver.Chrome()</span></span>
<span class="line"><span>    drive.get(html.url)</span></span>
<span class="line"><span>    first_result = drive.find_element_by_xpath('//*[@id="root"]/div/div[2]/div[1]/div[1]/div[1]/div/div/div[1]/a').get_attribute('href')</span></span></code></pre>
</div><ol start="5">
<li>
<p>使用lxml 解析评论数据</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>  from lxml import etree</span></span>
<span class="line"><span>  path_tree = etree.HTML(html.text)</span></span>
<span class="line"><span>  comment_divs = xpath_tree.xpath('//*[@id="comments"]/div')</span></span></code></pre>
</div></li>
<li>
<p>PIL图像处理</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>from PIL import Image</span></span>
<span class="line"><span>Image.open('Emile.jpg')</span></span></code></pre>
</div></li>
<li>
<p>jieba 结巴中文分词</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>import jieba</span></span>
<span class="line"><span>jieba.cut(comment_txt)</span></span></code></pre>
</div></li>
<li>
<p>词云</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>def create_word_cloud():</span></span>
<span class="line"><span>    # 设置词云形状图片,numpy+PIL方式读取图片</span></span>
<span class="line"><span>    wc_mask = np.array(Image.open('Emile.jpg'))</span></span>
<span class="line"><span>    # 数据清洗词列表</span></span>
<span class="line"><span>    stop_words = ['的','是','我','都','了','有','在','给','吗','和','就是', '不是', '但是', '还是', '只是', '这样', '这个', '一个', '什么', '电影', '没有']</span></span>
<span class="line"><span>    # 设置词云的一些配置，如：字体，背景色，词云形状，大小,生成词云对象</span></span>
<span class="line"><span>    wc = WordCloud(mask=wc_mask,font_path=WC_FONT_PATH,  background_color="white", stopwords=stop_words, max_words=50, scale=4,</span></span>
<span class="line"><span>                   max_font_size=50, random_state=42)</span></span>
<span class="line"><span>    # 生成词云</span></span>
<span class="line"><span>    wc.generate(cut_word())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 在只设置mask的情况下,你将会得到一个拥有图片形状的词云</span></span>
<span class="line"><span>    # 开始画图</span></span>
<span class="line"><span>    plt.imshow(wc, interpolation="bilinear")</span></span>
<span class="line"><span>    # 为云图去掉坐标轴</span></span>
<span class="line"><span>    plt.axis("off")</span></span>
<span class="line"><span>    plt.figure()</span></span>
<span class="line"><span>    plt.show()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>matplotlib绘图</p>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>from matplotlib import pyplot as plt</span></span>
<span class="line"><span>plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签</span></span>
<span class="line"><span>plt.rcParams['axes.unicode_minus']=False #用来正常显示负号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def data_show():</span></span>
<span class="line"><span>    f = open('result.txt', 'r', encoding='UTF-8')</span></span>
<span class="line"><span>    list = f.readlines()</span></span>
<span class="line"><span>    sentimentslist = []</span></span>
<span class="line"><span>    for i in list:</span></span>
<span class="line"><span>        s = SnowNLP(i)</span></span>
<span class="line"><span>        sentimentslist.append(s.sentiments)</span></span>
<span class="line"><span>    print(sentimentslist)</span></span>
<span class="line"><span>    print(len(sentimentslist))</span></span>
<span class="line"><span>    plt.hist(sentimentslist, bins=10, facecolor='g')</span></span>
<span class="line"><span>    plt.xlabel('情感概率')</span></span>
<span class="line"><span>    plt.ylabel('数量')</span></span>
<span class="line"><span>    plt.title('情感分析')</span></span>
<span class="line"><span>    plt.show()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<h2>3. 完整代码</h2>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lxml </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> random</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> jieba</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> numpy </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> np</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#D19A66;--shiki-dark:#D19A66"> PIL</span><span style="color:#C678DD;--shiki-dark:#C678DD"> import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Image</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> matplotlib </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> pyplot </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> plt</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">plt.rcParams[</span><span style="color:#98C379;--shiki-dark:#98C379">'font.sans-serif'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span><span style="color:#98C379;--shiki-dark:#98C379">'SimHei'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#用来正常显示中文标签</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">plt.rcParams[</span><span style="color:#98C379;--shiki-dark:#98C379">'axes.unicode_minus'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">False</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #用来正常显示负号</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> wordcloud </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> WordCloud</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> selenium </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> webdriver</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> urllib.parse </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> urlencode</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> snownlp </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> SnowNLP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> io</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> sys</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">sys.stdout </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> io.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">TextIOWrapper</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sys.stdout.buffer,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'gb18030'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf8')</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 设置词云路径</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">WC_FONT_PATH</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#C678DD;--shiki-dark:#C678DD"> r</span><span style="color:#E06C75;--shiki-dark:#E06C75">'C:\Windows</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\F</span><span style="color:#E06C75;--shiki-dark:#E06C75">onts\simfang.ttf'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">session </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Session</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "http"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"http://218.95.37.252:3128"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        "http"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"http://60.205.159.195:3128"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span><span style="color:#98C379;--shiki-dark:#98C379">"User-Agent"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">               "Referer"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'https://accounts.douban.com/passport/login'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">           }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> login</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> "https://accounts.douban.com/j/mobile/login/basic"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'13616008640'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'password'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'zsz123456'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'remember'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'false'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 设置代理，从西刺免费代理网站上找出一个可用的代理IP</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    user </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> session.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">post</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">headers, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">data</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">data, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(user.text)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> spider_lianjie</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">lianjie</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'result.txt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'a+'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">"utf-8"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">seek</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">truncate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#D19A66;--shiki-dark:#D19A66"> True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        comment_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lianjie[:</span><span style="color:#D19A66;--shiki-dark:#D19A66">42</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379">'comments'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        params </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'start'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:page</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'limit'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'sort'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'new_score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'status'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'P'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> session.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">comment_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">params</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">params, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"开始爬取第</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页***********************************************************************："</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page))</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        xpath_tree </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTML</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.text)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        comment_divs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> xpath_tree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//*[@id="comments"]/div'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment_divs) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 获取每一条评论的具体内容</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_divs:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                comment </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'./div[2]/p/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> '</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(random.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">choice</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">([</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">close</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"大约共</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页评论"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            break</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> spider_id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'result.txt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'a+'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">seek</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">truncate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#D19A66;--shiki-dark:#D19A66"> True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        move_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/subject/'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+id+</span><span style="color:#98C379;--shiki-dark:#98C379">'/comments?'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        params </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'start'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:page</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'limit'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'sort'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'new_score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'status'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#98C379;--shiki-dark:#98C379">'P'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> session.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">move_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">params</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">params, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"开始爬取第</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页***********************************************************************："</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page))</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        xpath_tree </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTML</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.text)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        comment_divs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> xpath_tree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//*[@id="comments"]/div'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment_divs) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 获取每一条评论的具体内容</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_divs:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                comment </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'./div[2]/p/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> '</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(random.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">choice</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">([</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">close</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"大约共</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页评论"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            break</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> spider_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    params </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> urlencode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">({</span><span style="color:#98C379;--shiki-dark:#98C379">'search_text'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:name})</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    move_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/subject_search'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">move_url,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> headers, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">params</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">params,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 利用selenium模拟浏览器，找到电影的url</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    drive </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> webdriver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Chrome</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    drive.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    first_result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> drive.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_element_by_xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//*[@id="root"]/div/div[2]/div[1]/div[1]/div[1]/div/div/div[1]/a'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_attribute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'href'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 每次写入前清空文件</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'result.txt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'a+'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html.encoding)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">seek</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">truncate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#D19A66;--shiki-dark:#D19A66"> True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        move_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> first_result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379"> '/comments?'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        params </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'start'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'limit'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'sort'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'new_score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            'status'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'P'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> session.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">move_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> headers, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">params</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">params, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proxies</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">proxies)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"开始爬取第</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页***********************************************************************："</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page))</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.url)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        xpath_tree </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTML</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html.text)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        comment_divs </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> xpath_tree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//*[@id="comments"]/div'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment_divs) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 获取每一条评论的具体内容</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_divs:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                comment </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> comment_div.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'./div[2]/p/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379">''</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">\n</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(random.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">choice</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">([</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">0.3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">])))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">close</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"大约共</span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">页评论"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            break</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 定义搜索类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> spider_kind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    kind </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">input</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"请选择搜索类型：1.根据电影链接 2.根据电影id 3.根据电影名："</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> kind </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        lianjie </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> input</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"请输入电影链接:"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        spider_lianjie</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(lianjie)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> kind </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> input</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"请输入电影id:"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        spider_id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> kind </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> input</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"请输入电影名:"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        spider_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(name)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    else</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"sorry,输入错误！"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> cut_word</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    with</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'result.txt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'r'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#E06C75;--shiki-dark:#E06C75"> file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 读取文件里面的全部内容</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        comment_txt </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> file</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">read</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 使用jieba进行分割</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        wordlist </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> jieba.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(comment_txt)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">        print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'***********'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,wordlist)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        wl </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> "/"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">join</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(wordlist)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # print(wl)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> wl</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> create_word_cloud</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 设置词云形状图片,numpy+PIL方式读取图片</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    wc_mask </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> np.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">array</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(Image.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'Emile.jpg'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 数据清洗词列表</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    stop_words </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#98C379;--shiki-dark:#98C379">'的'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'我'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'都'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'了'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'有'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'在'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'给'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'吗'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'和'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#98C379;--shiki-dark:#98C379">'就是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'不是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'但是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'还是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'只是'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'这样'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'这个'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'一个'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'什么'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'电影'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'没有'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 设置词云的一些配置，如：字体，背景色，词云形状，大小,生成词云对象</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    wc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> WordCloud</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">mask</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">wc_mask,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">font_path</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">WC_FONT_PATH</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,  </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">background_color</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">"white"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">stopwords</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">stop_words, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">max_words</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">scale</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">                   max_font_size</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">random_state</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">42</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 生成词云</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    wc.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">generate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">cut_word</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 在只设置mask的情况下,你将会得到一个拥有图片形状的词云</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 开始画图</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">imshow</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(wc, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">interpolation</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">"bilinear"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 为云图去掉坐标轴</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">axis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"off"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">figure</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">show</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> data_show</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    f </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'result.txt'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'r'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">encoding</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'UTF-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">readlines</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    sentimentslist </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> []</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> i </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        s </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> SnowNLP</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(i)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        sentimentslist.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">append</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(s.sentiments)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sentimentslist)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">len</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sentimentslist))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">hist</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(sentimentslist, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">bins</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">facecolor</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379">'g'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xlabel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'情感概率'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">ylabel</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'数量'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">title</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'情感分析'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    plt.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">show</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> __name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> ==</span><span style="color:#98C379;--shiki-dark:#98C379"> '__main__'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    login</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    spider_kind</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    create_word_cloud</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    data_show</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>lxml入门</title>
      <link>https://mrjackc.github.io/posts/Python/python-lxml.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-lxml.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">lxml入门</source>
      <description>lxml入门 1. 简介 lxml 是一个流行的解析库，使用Xpath语法 2. Xpath常用语法 XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 2.1 选取节点 下面列出了最有用的路径表达式： XPath 通配符可用来选取未知的 XML 元素。 通过在路径表达式中使用“|”运算符，可以选取若干个...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>lxml 是一个流行的解析库，使用Xpath语法</p>
<h2>2. Xpath常用语法</h2>
<p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。</p>
<h3>2.1 选取节点</h3>
<p>下面列出了最有用的路径表达式：</p>
<p>| 表达式   | 描述                                                       |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>python爬取脉脉</title>
      <link>https://mrjackc.github.io/posts/Python/python-maimai.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-maimai.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">python爬取脉脉</source>
      <description>python爬取脉脉 1. 简介 该项目主要是根据github项目爬取脉脉网 学习，并根据自己的业务需求改造 1.1 页面爬取的内容 这是一个基于python3而写的爬虫，爬取的网站的脉脉网(https://maimai.cn/)，在搜索框中搜索“CHO”，并切换到“人脉”选项卡，点击姓名，进入详情页，爬取其详细信息 image-20210701215...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>该项目主要是根据<a href="https://github.com/Joezhangs/PythonSpider/tree/master/Item5%EF%BC%9Aspider_maimai" target="_blank" rel="noopener noreferrer">github项目爬取脉脉网</a> 学习，并根据自己的业务需求改造</p>
<h3>1.1 页面爬取的内容</h3>
<blockquote>
<p>这是一个基于python3而写的爬虫，爬取的网站的脉脉网(<a href="https://maimai.cn/" target="_blank" rel="noopener noreferrer">https://maimai.cn/</a>)，在搜索框中搜索“CHO”，并切换到“人脉”选项卡，点击姓名，进入详情页，爬取其详细信息</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953775.png" alt="image-20210701215737588" tabindex="0" loading="lazy"><figcaption>image-20210701215737588</figcaption></figure>
<h3>1.2 爬取的接口分析</h3>
<div class="language-apl" data-ext="apl" data-title="apl"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">https://</span><span style="color:#E06C75;--shiki-dark:#E06C75">maimai</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">cn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">contacts</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">?</span><span style="color:#E06C75;--shiki-dark:#E06C75">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">page</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">query</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#E06C75;--shiki-dark:#E06C75">Cho</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">dist</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">searchTokens</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">highlight</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#E06C75;--shiki-dark:#E06C75">true</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">jsononly</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">pc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span></span></code></pre>
</div><p>根据开发者模式下的接口信息可以看到</p>
<p>请求接口：<a href="https://maimai.cn/search/contacts" target="_blank" rel="noopener noreferrer">https://maimai.cn/search/contacts</a></p>
<p>参数为</p>
<ul>
<li>count：20
<ul>
<li>单次查询条数20条</li>
</ul>
</li>
<li>page=0
<ul>
<li>当前页数，第0页</li>
</ul>
</li>
<li>query=Cho
<ul>
<li>查询的关键词</li>
</ul>
</li>
<li>dist=0</li>
<li>searchTokens=</li>
<li>highlight=true
<ul>
<li>是否高亮</li>
</ul>
</li>
<li>jsononly=1
<ul>
<li>是否以json格式返回</li>
</ul>
</li>
<li>pc=1
<ul>
<li>是否为电脑端数据</li>
</ul>
</li>
</ul>
<h3>1.3 接口返回结果分析</h3>
<p>该接口的返回结果为</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953817.png" alt="image-20210701221518719" tabindex="0" loading="lazy"><figcaption>image-20210701221518719</figcaption></figure>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>	"result": "ok",</span></span>
<span class="line"><span>	"data": {</span></span>
<span class="line"><span>		"contacts": [{</span></span>
<span class="line"><span>			"uid": "a9f9b8c4-3c9d-46ac-b32e-0a1bfeefc2ea",</span></span>
<span class="line"><span>			"contact": {</span></span>
<span class="line"><span>				"id": "a9f9b8c4-3c9d-46ac-b32e-0a1bfeefc2ea",</span></span>
<span class="line"><span>				"name": "wing",</span></span>
<span class="line"><span>				"py": "wing",</span></span>
<span class="line"><span>				"avatar": "https://i9.taou.com/maimai/p/25657/400_42_2jgEOv22b8xMTrtp-a160",</span></span>
<span class="line"><span>				"line1": "法大大CHO",</span></span>
<span class="line"><span>				"line3": "法大大CHO(广东)",</span></span>
<span class="line"><span>				"line4": "IT互联网 | 高管, 影响力: 79",</span></span>
<span class="line"><span>				"rank": 79,</span></span>
<span class="line"><span>				"compos": "法大大CHO",</span></span>
<span class="line"><span>				"loc": "广东",</span></span>
<span class="line"><span>				"short_compos": "法大大CHO",</span></span>
<span class="line"><span>				"company": "法大大",</span></span>
<span class="line"><span>				"career": "法大大CHO",</span></span>
<span class="line"><span>				"gender": 2,</span></span>
<span class="line"><span>				"position": "CHO",</span></span>
<span class="line"><span>				"short_career": "法大大CHO",</span></span>
<span class="line"><span>				"mmid": "231791658",</span></span>
<span class="line"><span>				"status": 1,</span></span>
<span class="line"><span>				"province": "广东",</span></span>
<span class="line"><span>				"city": "深圳",</span></span>
<span class="line"><span>				"user_pfmj": {</span></span>
<span class="line"><span>					"major1": "0104",</span></span>
<span class="line"><span>					"profession1": "0108",</span></span>
<span class="line"><span>					"pf_path1": "01,0108",</span></span>
<span class="line"><span>					"pf_name1": "企业级软件",</span></span>
<span class="line"><span>					"mj_name1": "CEO/创始人/企业高管",</span></span>
<span class="line"><span>					"src_type": 3</span></span>
<span class="line"><span>				},</span></span>
<span class="line"><span>				</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}],</span></span>
<span class="line"><span>		"contacts_total": 756,</span></span>
<span class="line"><span>		"searchTokens": ["cho", "hrvp"],</span></span>
<span class="line"><span>		"more": 746,</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>	"ab_conf": {</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>	"env": {</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>	"auth_info": {</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果过多，此处只截取部分关键字段</p>
<p>我们需要的数据</p>
<ul>
<li>用户结果列表：在data-&gt;contacts-&gt;contact 下</li>
<li>搜索的关键词："searchTokens": ["cho", "hrvp"],
<ul>
<li>这里并不一定只有你搜索的结果</li>
</ul>
</li>
</ul>
<h4>1.3.1 <strong>contact</strong>的数据结构分析</h4>
<ul>
<li>name: "wing"
<ul>
<li>用户名为wing</li>
</ul>
</li>
<li>company: "法大大"
<ul>
<li>公司名：法大大</li>
</ul>
</li>
<li>career: "法大大CHO"
<ul>
<li>职业：法大大CHO</li>
</ul>
</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://github.com/Joezhangs/PythonSpider/tree/master/Item5%EF%BC%9Aspider_maimai" target="_blank" rel="noopener noreferrer">爬取的网站的脉脉网</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953775.png" type="image/png"/>
    </item>
    <item>
      <title>小象代理</title>
      <link>https://mrjackc.github.io/posts/Python/python-proxy.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-proxy.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">小象代理</source>
      <description>小象代理 1. 背景 反爬虫技术中最常见的技术就是封ip，那么我们如何对抗呢？我们可以使用高匿ip。这个高匿ip只存活1-2分钟。我们每格10秒换一个ip 2. 使用 https://www.xiaoxiangdaili.com/ip-short/guide 申请试用 image-20210302095623043image-2021030209562...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>反爬虫技术中最常见的技术就是封ip，那么我们如何对抗呢？我们可以使用高匿ip。这个高匿ip只存活1-2分钟。我们每格10秒换一个ip</p>
<h2>2. 使用</h2>
<p><a href="https://www.xiaoxiangdaili.com/ip-short/guide" target="_blank" rel="noopener noreferrer">https://www.xiaoxiangdaili.com/ip-short/guide</a></p>
<ol>
<li>
<p>申请试用</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953800.png" alt="image-20210302095623043" tabindex="0" loading="lazy"><figcaption>image-20210302095623043</figcaption></figure>
</li>
<li>
<p>获取代理的ip</p>
<p><a href="https://api.xiaoxiangdaili.com/ip/get?appKey=683854977391022080&amp;appSecret=IXhGvwsx&amp;cnt=20&amp;wt=json" target="_blank" rel="noopener noreferrer">https://api.xiaoxiangdaili.com/ip/get?appKey=683854977391022080&amp;appSecret=IXhGvwsx&amp;cnt=20&amp;wt=json</a></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953845.png" alt="image-20210302100007951" tabindex="0" loading="lazy"><figcaption>image-20210302100007951</figcaption></figure>
</li>
</ol>
<h2>3. 项目集成</h2>
<p>思路：</p>
<ol>
<li>每隔4s取一次高匿ip</li>
<li>将高匿ip保存到redis list</li>
<li>当redis中的ip&gt;=20 的时候，不再往里添加</li>
<li>每次请求消耗一个ip</li>
</ol>
<p>代码</p>
<ol>
<li>
<p>redis 代码: db_handle_redis.py</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> redis</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DbHandleRedis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">db_host</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">'127.0.0.1'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">db_port</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">db_index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_host </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_host</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_port </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_port</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_index </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_index</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.redis_conn </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> redis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">StrictRedis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_host,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_port,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_index,</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">decode_responses</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __del__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.redis_conn.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">close</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> rpush_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.redis_conn.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">rpush</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'ip_proxy_list'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,json.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">dumps</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(ip_proxy))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> lpop_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ip_proxy_json </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.redis_conn.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">lpop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'ip_proxy_list'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy_json </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> None</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            return</span><span style="color:#D19A66;--shiki-dark:#D19A66"> None</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ip_proxy_json </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> json.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">loads</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(ip_proxy_json)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy_json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> llen_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.redis_conn.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">llen</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'ip_proxy_list'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>获取高匿ip代码：  ip_proxy_handle.py</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_handle_redis </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DbHandleRedis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> get_proxy_ip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">db_redis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    base_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://api.xiaoxiangdaili.com/ip/get?appKey=683854977391022080&amp;appSecret=IXhGvwsx&amp;cnt=20&amp;wt=json'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'User-Agent'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#D19A66;--shiki-dark:#D19A66"> True</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 间隔4s轮询</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # redis 中的ip如果大于20个，则不再往里添加</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ip_proxy_len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_redis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">llen_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy_len </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'redis中的高匿ip超过20个'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            continue</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        try</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            resp </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">base_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">headers, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">timeout</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp.status_code </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                resp_data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">json</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp_data[</span><span style="color:#98C379;--shiki-dark:#98C379">'code'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 200</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    # 提取出ip和端口，记录当前时间。保存在数据库中</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ip_data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp_data[</span><span style="color:#98C379;--shiki-dark:#98C379">'data'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">][</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">][</span><span style="color:#98C379;--shiki-dark:#98C379">'ip'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    port_data </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp_data[</span><span style="color:#98C379;--shiki-dark:#98C379">'data'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">][</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">][</span><span style="color:#98C379;--shiki-dark:#98C379">'port'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ip_proxy </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> '</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(ip_data, port_data)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    current_time </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">time</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ip_info </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ip_info[</span><span style="color:#98C379;--shiki-dark:#98C379">'ip_proxy'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    ip_info[</span><span style="color:#98C379;--shiki-dark:#98C379">'time'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> current_time</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    db_redis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">rpush_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(ip_info)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'ip代理信息：'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                elif</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> resp_data[</span><span style="color:#98C379;--shiki-dark:#98C379">'code'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1003</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">                    print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'ip proxy is over.'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                    break</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        except</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Exception </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> e:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'e:'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, e)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> __name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> ==</span><span style="color:#98C379;--shiki-dark:#98C379"> '__main__'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    db_redis </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DbHandleRedis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    get_proxy_ip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(db_redis)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>具体的抓包设置代理：<a href="http://crawler.py" target="_blank" rel="noopener noreferrer">crawler.py</a></p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> time</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> CrawlerApp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">db_redis</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_redis </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> db_redis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> get_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ip_proxy_info </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.db_redis.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">lpop_ip_proxy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ip_proxy_info </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#D19A66;--shiki-dark:#D19A66"> None</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'</span></span></code></pre>
</div></li>
</ol>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230953800.png" type="image/png"/>
    </item>
    <item>
      <title>Scrapy入门（四）-抓取AJAX异步加载网页</title>
      <link>https://mrjackc.github.io/posts/Python/python-scrapy-ajax.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-scrapy-ajax.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Scrapy入门（四）-抓取AJAX异步加载网页</source>
      <description>Scrapy入门（四）-抓取AJAX异步加载网页 1. 什么是AJAX? AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。 AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。 AJAX 是一种用于创建快速动态网页的技术。...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 什么是AJAX?</h2>
<blockquote>
<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。</p>
<p>AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
</blockquote>
<h2>2. 两个Chrome插件</h2>
<ul>
<li>
<p>Toggle JavaScript</p>
<p>这个插件可以帮助我们快速直观地检测网页里哪些信息是通过AJAX异步加载而来的</p>
<p>chrome商店下载地址：<a href="https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo%3Futm_source%3Dchrome-app-launcher-info-dialog" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo?utm_source=chrome-app-launcher-info-dialog</a></p>
</li>
<li>
<p>JSON-handle</p>
<p>这个插件可以帮我们格式化Json串,从而让我们以一个更友好的方式查看Json内的信息。 chrome商店下载地址：<a href="https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj</a></p>
</li>
</ul>
<h2>3. 分析过程（分析页面是否采用AJAX）</h2>
<p>首先我们打<a href="https://link.zhihu.com/?target=https%3A//movie.douban.com/typerank%3Ftype_name%3D%E5%8A%A8%E4%BD%9C%26type%3D5%26interval_id%3D100%3A90%26action%3D" target="_blank" rel="noopener noreferrer">开豆瓣电影分类排行榜 - 动作片</a>栏目。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954446.png" alt="image-20210311151244551" tabindex="0" loading="lazy"><figcaption>image-20210311151244551</figcaption></figure>
<ul>
<li>
<p>方案1：</p>
<p>如果网络慢，会看到影片列表在别的页面显示后才慢慢展示出来，试着把界面往下滑会不断有新的电影信息更新出来。 遇到这种情况初步就可以认定这个页面是采用AJAX异步加载的</p>
</li>
<li>
<p>方案2：</p>
<p>右键查看网页源码来鉴别。比如说你右键查看源码ctrl+f搜索这个杀手不太冷这几个字，你会发现源码里没有。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954489.png" alt="image-20210311152003444" tabindex="0" loading="lazy"><figcaption>image-20210311152003444</figcaption></figure>
</li>
<li>
<p>方案3：</p>
<p>方案1和2，虽然能用，但是都不太方便，还记得上面推荐的那个chrome插件Toggle JavaScript吗？</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954514.png" alt="image-20210311152349107" tabindex="0" loading="lazy"><figcaption>image-20210311152349107</figcaption></figure>
<p>安好这个插件它就会出现在chrome浏览器的右边，试着轻轻点一下。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954534.png" alt="image-20210311152426689" tabindex="0" loading="lazy"><figcaption>image-20210311152426689</figcaption></figure>
<p>刚才的电影信息都不见了！还记得AJAX的介绍吗？AJAX = 异步 JavaScript和XML。当我们点击了插件就代表这个我们封禁了JavaScript,这个页面里的JavaScript代码无法执行，那么通过AJAX异步加载而来的信息当然就无法出现了。通过这种方法我们能快速精确地知道哪些信息是异步加载而来的。</p>
</li>
</ul>
<h2>4. 如何抓取AJAX异步加载页面</h2>
<p>对于这种网页我们一般会采用两种方法：</p>
<ol>
<li>通过抓包找到AJAX异步加载的请求地址；</li>
<li>通过使用PhantomJS等无头浏览器执行JS代码后再对网页进行抓取。</li>
</ol>
<p>通常情况下我会采用第一种方法，因为使用无头浏览器会大大降低抓取效率，而且第一种方法得到的数据格式往往以Json为主，非常干净。在这里我只讲解第一种方法，第二种方法作为爬虫的终极武器我会在后续的教程中进行讲解。<br>
回到我们需要抓取的页面，还记得我说过页面的一个细节吗，下拉更新。进入页面后我们按F12打开chrome浏览器的开发者工具选择Network，然后实现一次下拉更新。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954555.png" alt="image-20210311152726896" tabindex="0" loading="lazy"><figcaption>image-20210311152726896</figcaption></figure>
<p>你会在Network里发现一个Response为Json格式的请求，仔细看看Json里的内容你会明白这些都是网页上显示的电影信息。右键该请求地址选择Open Link in New Tab,如果你装了JSON-handle插件你会以下面这种更友好的方式查看这个Json串。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954581.png" alt="image-20210311152753926" tabindex="0" loading="lazy"><figcaption>image-20210311152753926</figcaption></figure>
<p>接着再让我们看一该请求的Header信息</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954602.png" alt="image-20210311152818193" tabindex="0" loading="lazy"><figcaption>image-20210311152818193</figcaption></figure>
<p>首先我们可以看出这是一个get请求，多看几个下拉请求的地址后你会发现地中的start=xxx在不断变化，每次增加20。所以我们只用更改这个参数就可以实现翻页不断获取新数据</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># @Time     : 2017/4/9 14:32</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># @Author   : woodenrobot</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> re</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Request</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapyspider.items </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DoubanMovieItem</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanAJAXSpider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_ajax'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'User-Agent'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> start_requests</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20'</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        yield</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        datas </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> json.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">loads</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(response.body)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        item </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> datas:</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> datas:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                item[</span><span style="color:#98C379;--shiki-dark:#98C379">'ranking'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data[</span><span style="color:#98C379;--shiki-dark:#98C379">'rank'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                item[</span><span style="color:#98C379;--shiki-dark:#98C379">'movie_name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data[</span><span style="color:#98C379;--shiki-dark:#98C379">'title'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data[</span><span style="color:#98C379;--shiki-dark:#98C379">'score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score_num'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data[</span><span style="color:#98C379;--shiki-dark:#98C379">'vote_count'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                yield</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 如果datas存在数据则对下一页进行采集</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            page_num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> re.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">search</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#C678DD;--shiki-dark:#C678DD">r</span><span style="color:#E06C75;--shiki-dark:#E06C75">'start=</span><span style="color:#D19A66;--shiki-dark:#D19A66">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">\d</span><span style="color:#D19A66;--shiki-dark:#D19A66">+)</span><span style="color:#E06C75;--shiki-dark:#E06C75">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, response.url).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">group</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            page_num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'start='</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> str</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(page_num)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66">20</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            next_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> re.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sub</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#C678DD;--shiki-dark:#C678DD">r</span><span style="color:#E06C75;--shiki-dark:#E06C75">'start=\d</span><span style="color:#D19A66;--shiki-dark:#D19A66">+</span><span style="color:#E06C75;--shiki-dark:#E06C75">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, page_num, response.url)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            yield</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(next_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Scrapy工程文件的spiders里写好爬虫文件后在settings.py所在的目录下打开终端运行以下代码就能输出相应的电影数据。</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">scrapy crawl douban_ajax </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">o douban_movie.csv</span></span></code></pre>
</div><h2>5. 更好的查看json</h2>
<ol>
<li>
<p>点击JSON-handle 查看</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954625.png" alt="image-20210311153418508" tabindex="0" loading="lazy"><figcaption>image-20210311153418508</figcaption></figure>
</li>
<li>
<p>将JSON文本复制进来，点击确定</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954648.png" alt="image-20210311153308124" tabindex="0" loading="lazy"><figcaption>image-20210311153308124</figcaption></figure>
</li>
<li>
<p>查看结果</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954673.png" alt="image-20210311153405800" tabindex="0" loading="lazy"><figcaption>image-20210311153405800</figcaption></figure>
</li>
</ol>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/26257790" target="_blank" rel="noopener noreferrer">Scrapy爬虫框架教程（四）-- 抓取AJAX异步加载网页</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954446.png" type="image/png"/>
    </item>
    <item>
      <title>Scrapy入门（三）-调试(Debugging)Spiders</title>
      <link>https://mrjackc.github.io/posts/Python/python-scrapy-debugging-spiders.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-scrapy-debugging-spiders.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Scrapy入门（三）-调试(Debugging)Spiders</source>
      <description>Scrapy入门（三）-调试(Debugging)Spiders 1. 背景 而Scrapy的爬虫通常是在命令行中启动的，我们怎么去调试呢？ 2. 调试部署 首先在setting.py同级目录下创建run.py文件。 image-20210311105958418image-20210311105958418 写入以下代码 其中name参数为spide...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>而Scrapy的爬虫通常是在命令行中启动的，我们怎么去调试呢？</p>
<h2>2. 调试部署</h2>
<ol>
<li>
<p>首先在setting.py同级目录下创建run.py文件。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954313.png" alt="image-20210311105958418" tabindex="0" loading="lazy"><figcaption>image-20210311105958418</figcaption></figure>
</li>
</ol>
<p>写入以下代码</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> cmdline</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_movie_top250'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">cmd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'scrapy crawl </span><span style="color:#D19A66;--shiki-dark:#D19A66">{0}</span><span style="color:#98C379;--shiki-dark:#98C379">'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(name)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">cmdline.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">execute</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(cmd.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">split</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">())</span></span></code></pre>
</div><p>其中name参数为spider的name。<br>
接着在spider文件中设置断点。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954357.png" alt="image-20210311110405697" tabindex="0" loading="lazy"><figcaption>image-20210311110405697</figcaption></figure>
<p>返回run.py文件中右键选择Debug。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954385.png" alt="image-20210311110423296" tabindex="0" loading="lazy"><figcaption>image-20210311110423296</figcaption></figure>
<p>最后程序就会在断点处暂停，我们就可以查看相应的内容从而进行调试 。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954404.png" alt="image-20210311110438767" tabindex="0" loading="lazy"><figcaption>image-20210311110438767</figcaption></figure>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/25200262" target="_blank" rel="noopener noreferrer">Scrapy爬虫框架教程（三）-- 调试(Debugging)Spiders</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230954313.png" type="image/png"/>
    </item>
    <item>
      <title>Scrapy入门（二）-爬取豆瓣电影TOP250</title>
      <link>https://mrjackc.github.io/posts/Python/python-scrapy-douban-top250.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-scrapy-douban-top250.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Scrapy入门（二）-爬取豆瓣电影TOP250</source>
      <description>Scrapy入门（二）-爬取豆瓣电影TOP250 1. 简介 上一篇我们已经大致了解了Scrapy的基本情况，并写了一个简单的小demo。这次我会以爬取豆瓣电影TOP250为例进一步为大家讲解一个完整爬虫的流程。 2. 观察页面结构 豆瓣电影 Top250 image-20210311085829131image-20210311085829131 观...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>上一篇我们已经大致了解了Scrapy的基本情况，并写了一个简单的小demo。这次我会以爬取豆瓣电影TOP250为例进一步为大家讲解一个完整爬虫的流程。</p>
<h2>2. 观察页面结构</h2>
<p><a href="https://movie.douban.com/top250" target="_blank" rel="noopener noreferrer">豆瓣电影 Top250</a></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955032.png" alt="image-20210311085829131" tabindex="0" loading="lazy"><figcaption>image-20210311085829131</figcaption></figure>
<p>观察页面我们决定让爬虫获取每一部电影的排名</p>
<p>、电影名称、评分和评分的人数。</p>
<h2>3. 声明Item</h2>
<p>什么是Items？<a href="https://link.zhihu.com/?target=http%3A//scrapy-chs.readthedocs.io/zh_CN/1.0/topics/items.html" target="_blank" rel="noopener noreferrer">官方文档Items定义</a>如下：</p>
<blockquote>
<p>Items<br>
爬取的主要目标就是从非结构性的数据源提取结构性数据，例如网页。 Scrapy spider可以以python的dict来返回提取的数据.虽然dict很方便，并且用起来也熟悉，但是其缺少结构性，容易打错字段的名字或者返回不一致的数据，尤其在具有多个spider的大项目中。<br>
为了定义常用的输出数据，Scrapy提供了 Item 类。 Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。<br>
许多Scrapy组件使用了Item提供的额外信息: exporter根据Item声明的字段来导出数据、 序列化可以通过Item字段的元数据(metadata)来定义、 trackref 追踪Item实例来帮助寻找内存泄露 (see 使用 trackref 调试内存泄露) 等等。</p>
</blockquote>
<p>Item使用简单的class定义语法以及Field对象来声明。我们打开scrapyspider目录下的items.py文件写入下列代码声明Item：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">scrapy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Item</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 排名</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    ranking </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Field</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 电影名称</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    movie_name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Field</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 评分</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    score </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Field</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 评论人数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    score_num </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Field</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
</div><h2>4. 爬虫程序</h2>
<p>在scrapyspider/spiders目录下创建douban_spider.py文件，并写入初步的代码：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapyspider.items </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DoubanMovieItem</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanMovieTop250Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_movie_top250'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    start_urls </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#98C379;--shiki-dark:#98C379">'https://movie.douban.com/top250'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        item </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
</div><p>这个一个基本的scrapy的spider的model，首先我们要导入Scrapy.spiders中的Spider类，以及scrapyspider.items中我们刚刚定义好的DoubanMovieItem。 接着创建我们自己的爬虫类DoubanMovieTop250Spider并继承Spider类，scrapy.spiders中有很多不同的爬虫类可供我们继承，一般情况下使用Spider类就可以满足要求。（其他爬虫类的使用可以去参考<a href="https://link.zhihu.com/?target=http%3A//scrapy-chs.readthedocs.io/zh_CN/1.0/topics/spiders.html" target="_blank" rel="noopener noreferrer">官方文档</a>）。</p>
<blockquote>
<p>Spider<br>
class scrapy.spider.Spider<br>
Spider是最简单的spider。每个其他的spider必须继承自该类(包括Scrapy自带的其他spider以及您自己编写的spider)。 Spider并没有提供什么特殊的功能。 其仅仅请求给定的 start_urls/start_requests ，并根据返回的结果(resulting responses)调用spider的 parse 方法。<br>
name 定义spider名字的字符串(string)。spider的名字定义了Scrapy如何定位(并初始化)spider，所以其必须是唯一的。 不过您可以生成多个相同的spider实例(instance)，这没有任何限制。 name是spider最重要的属性，而且是必须的。<br>
如果该spider爬取单个网站(single domain)，一个常见的做法是以该网站(domain)(加或不加 后缀 )来命名spider。 例如，如果spider爬取 <a href="https://link.zhihu.com/?target=http%3A//mywebsite.com/" target="_blank" rel="noopener noreferrer">mywebsite.com</a> ，该spider通常会被命名为 mywebsite 。<br>
allowed_domains 可选。包含了spider允许爬取的域名(domain)列表(list)。 当 OffsiteMiddleware 启用时， 域名不在列表中的URL不会被跟进。<br>
start_urls URL列表。当没有制定特定的URL时，spider将从该列表中开始进行爬取。 因此，第一个被获取到的页面的URL将是该列表之一。 后续的URL将会从获取到的数据中提取。<br>
start_requests() 该方法必须返回一个可迭代对象(iterable)。该对象包含了spider用于爬取的第一个Request。<br>
当spider启动爬取并且未制定URL时，该方法被调用。 当指定了URL时，make_requests_from_url() 将被调用来创建Request对象。 该方法仅仅会被Scrapy调用一次，因此您可以将其实现为生成器。<br>
该方法的默认实现是使用 start_urls 的url生成Request。<br>
如果您想要修改最初爬取某个网站的Request对象，您可以重写(override)该方法。 例如，如果您需要在启动时以POST登录某个网站，你可以这么写:</p>
</blockquote>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> start_requests</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [scrapy.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">FormRequest</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"http://www.example.com/login"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">                               formdata</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span><span style="color:#98C379;--shiki-dark:#98C379">'user'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'john'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">'pass'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'secret'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">                               callback</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.logged_in)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> logged_in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # here you would extract links to follow and return Requests for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # each of them, with another callback</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    pass</span></span></code></pre>
</div><blockquote>
<p>make_requests_from_url(url) 该方法接受一个URL并返回用于爬取的 Request 对象。 该方法在初始化request时被 start_requests() 调用，也被用于转化url为request。<br>
默认未被复写(overridden)的情况下，该方法返回的Request对象中， parse() 作为回调函数，dont_filter参数也被设置为开启。 (详情参见 Request).<br>
parse(response) 当response没有指定回调函数时，该方法是Scrapy处理下载的response的默认方法。<br>
parse 负责处理response并返回处理的数据以及(/或)跟进的URL。 Spider 对其他的Request的回调函数也有相同的要求。<br>
该方法及其他的Request回调函数必须返回一个包含 Request 及(或) Item 的可迭代的对象。<br>
参数:	response (Response) – 用于分析的response<br>
log(message[, level, component]) 使用 scrapy.log.msg() 方法记录(log)message。 log中自动带上该spider的 name 属性。 更多数据请参见 Logging 。<br>
closed(reason) 当spider关闭时，该函数被调用。 该方法提供了一个替代调用signals.connect()来监听 spider_closed 信号的快捷方式。</p>
</blockquote>
<p>提取网页信息</p>
<p>我们使用xpath语法来提取我们所需的信息。</p>
<ol>
<li>
<p>首先我们在chrome浏览器里进入豆瓣电影TOP250页面并按F12打开开发者工具。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955077.png" alt="image-20210311101541138" tabindex="0" loading="lazy"><figcaption>image-20210311101541138</figcaption></figure>
</li>
</ol>
<p>点击工具栏左上角的类鼠标符号图标或者Ctrl + Shift + c在页面中点击我们想要的元素即可在工具栏中看到它在网页HTML源码中所处的位置。 一般抓取时会以先抓大再抓小的原则来抓取。通过观察我们看到该页面所有影片的信息都位于一个class属性为grid_view的ol标签内的li标签内。</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">ol</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"grid_view"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"pic"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">em</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">em</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://movie.douban.com/subject/1292052/"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">img</span><span style="color:#D19A66;--shiki-dark:#D19A66"> alt</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"肖申克的救赎"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> src</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://img3.doubanio.com/view/movie_poster_cover/ipst/public/p480747492.jpg"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"info"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"hd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"https://movie.douban.com/subject/1292052/"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"title"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;肖申克的救赎&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"title"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">The Shawshank Redemption&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"other"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">月黑高飞(港)  /  刺激1995(台)&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"playable"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;[可播放]&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"bd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">""</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            导演: 弗兰克·德拉邦特 Frank Darabont</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">主演: 蒂姆·罗宾斯 Tim Robbins /...&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">br</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            1994</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">美国</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">&amp;nbsp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">犯罪 剧情</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"star"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"rating5-t"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"rating_num"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"v:average"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;9.6&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> property</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"v:best"</span><span style="color:#D19A66;--shiki-dark:#D19A66"> content</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"10.0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;766719人评价&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"quote"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                                &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"inq"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;希望让人自由。&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">span</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">p</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">ol</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此我们根据以上原则对所需信息进行抓取</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapyspider.items </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DoubanMovieItem</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanMovieTop250Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_movie_top250'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    start_urls </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#98C379;--shiki-dark:#98C379">'https://movie.douban.com/top250'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        item </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        movies </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//ol[@class="grid_view"]/li'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movies:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'ranking'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="pic"]/em/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'movie_name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="hd"]/a/span[1]/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span[@class="rating_num"]/text()'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score_num'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">re</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">ur</span><span style="color:#E06C75;--shiki-dark:#E06C75">'</span><span style="color:#D19A66;--shiki-dark:#D19A66">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">\d</span><span style="color:#D19A66;--shiki-dark:#D19A66">+)</span><span style="color:#E06C75;--shiki-dark:#E06C75">人评价'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            yield</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> item</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>5. 运行爬虫</h2>
<p>在项目文件夹内打开cmd运行下列命令：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>scrapy crawl douban_movie_top250 -o douban.csv</span></span></code></pre>
</div><p>注意此处的douban_movie_top250即为我们刚刚写的爬虫的name, 而-o douban.csv是scrapy提供的将item输出为csv格式的快捷方式</p>
<p>试着运行一下爬虫怎么什么也没输出呢？！！！</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955106.png" alt="image-20210311102306053" tabindex="0" loading="lazy"><figcaption>image-20210311102306053</figcaption></figure>
<p>辛辛苦苦到了这里难道要失败了吗？！！！ 不要急我们看下一控制台输出的信息，原来是403错误了。这是因为豆瓣对爬虫设了一个小小的门槛，我们只需要更改一下发送请求时的请求头user-agent即可。</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Request</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapyspider.items </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DoubanMovieItem</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanMovieTop250Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_movie_top250'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'User-Agent'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> start_requests</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/top250'</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        yield</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        item </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        movies </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//ol[@class="grid_view"]/li'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movies:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'ranking'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="pic"]/em/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'movie_name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="hd"]/a/span[1]/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span[@class="rating_num"]/text()'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score_num'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">re</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">ur</span><span style="color:#E06C75;--shiki-dark:#E06C75">'</span><span style="color:#D19A66;--shiki-dark:#D19A66">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">\d</span><span style="color:#D19A66;--shiki-dark:#D19A66">+)</span><span style="color:#E06C75;--shiki-dark:#E06C75">人评价'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            yield</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> item</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改后的代码是不是觉得有些地方不太一样了？start_urls怎么不见了？start_requests函数又是干什么的？还记得刚才对Spider类的介绍吗？先回过头复习一下上面关于start_urls和start_requests函数的介绍。简单的说就是使用start_requests函数我们对初始URL的处理就有了更多的权利，比如这次给初始URL增加请求头user_agent。</p>
<p>再次运行爬虫，我们想要的信息都被下载到douban.scv文件夹里了。直接用WPS打开即可查看信息。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955131.png" alt="image-20210311102347247" tabindex="0" loading="lazy"><figcaption>image-20210311102347247</figcaption></figure>
<h2>6. 自动翻页</h2>
<p>先别急着高兴，你难道没有发现一个问题吗?这样的话我们还是只能爬到当前页的25个电影的内容。怎么样才能把剩下的也一起爬下来呢？ 实现自动翻页一般有两种方法：</p>
<ol>
<li>在页面中找到下一页的地址；</li>
<li>自己根据URL的变化规律构造所有页面地址。</li>
</ol>
<p>一般情况下我们使用第一种方法，第二种方法适用于页面的下一页地址为JS加载的情况。今天我们只说第一种方法。 首先利用Chrome浏览器的开发者工具找到下一页的地址</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955154.png" alt="image-20210311102449642" tabindex="0" loading="lazy"><figcaption>image-20210311102449642</figcaption></figure>
<p>然后在解析该页面时获取下一页的地址并将地址交给调度器(Scheduler)</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Request</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapyspider.items </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> DoubanMovieItem</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> DoubanMovieTop250Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'douban_movie_top250'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        'User-Agent'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> start_requests</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/top250'</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        yield</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        item </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> DoubanMovieItem</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        movies </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//ol[@class="grid_view"]/li'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movies:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'ranking'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="pic"]/em/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'movie_name'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="hd"]/a/span[1]/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span[@class="rating_num"]/text()'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            ).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            item[</span><span style="color:#98C379;--shiki-dark:#98C379">'score_num'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">] </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> movie.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">                './/div[@class="star"]/span/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">re</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">ur</span><span style="color:#E06C75;--shiki-dark:#E06C75">'</span><span style="color:#D19A66;--shiki-dark:#D19A66">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">\d</span><span style="color:#D19A66;--shiki-dark:#D19A66">+)</span><span style="color:#E06C75;--shiki-dark:#E06C75">人评价'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            yield</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        next_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//span[@class="next"]/a/@href'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> next_url:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            next_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'https://movie.douban.com/top250'</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> next_url[</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            yield</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> Request</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(next_url, </span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后再运行一下爬虫，打开douban.csv。是不是发现所有的影片信息都获取到了，250个一个不多一个不少。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955177.png" alt="image-20210311102831664" tabindex="0" loading="lazy"><figcaption>image-20210311102831664</figcaption></figure>
<p>最后，利用WPS的筛选功能你可以筛选任意符合你要求的影片。</p>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/24769534" target="_blank" rel="noopener noreferrer">Scrapy爬虫框架教程（二）-- 爬取豆瓣电影TOP250</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955032.png" type="image/png"/>
    </item>
    <item>
      <title>Scrapy入门</title>
      <link>https://mrjackc.github.io/posts/Python/python-scrapy-started.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-scrapy-started.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Scrapy入门</source>
      <description>Scrapy入门 1. 简介 Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 1.1 与Requests+BeautifulSoup 的区别 Requests+BeautifulSoup 适合快速实现的小项目 scrapy 大的工程化项目 2. 架构概览 image-20210310164531835image-20210310...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。</p>
<h3>1.1 与Requests+BeautifulSoup 的区别</h3>
<ul>
<li>
<p>Requests+BeautifulSoup</p>
<p>适合快速实现的小项目</p>
</li>
<li>
<p>scrapy</p>
<p>大的工程化项目</p>
</li>
</ul>
<h2>2. 架构概览</h2>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955513.png" alt="image-20210310164531835" tabindex="0" loading="lazy"><figcaption>image-20210310164531835</figcaption></figure>
<h3>2.1 Scrapy Engine</h3>
<blockquote>
<p>引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 详细内容查看下面的数据流(Data Flow)部分。</p>
</blockquote>
<p>此组件相当于爬虫的“大脑”，是整个爬虫的调度中心。</p>
<h3>2.2 调度器（Scheduler）</h3>
<blockquote>
<p>调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。</p>
</blockquote>
<p>初始的爬取URL和后续在页面中获取的待爬取的URL将放入调度器中，等待爬取。同时调度器会自动去除重复的URL（如果特定的URL不需要去重也可以通过设置实现，如post请求的URL）</p>
<h3>2.3 下载器（Downloader）</h3>
<p>下载器负责获取页面数据并提供给引擎，而后提供给spider。</p>
<h3>2.4 Spiders</h3>
<p>Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。</p>
<h3>2.5 Item Pipeline</h3>
<blockquote>
<p>Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、 验证及持久化(例如存取到数据库中)。</p>
</blockquote>
<p>当页面被爬虫解析所需的数据存入Item后，将被发送到项目管道(Pipeline)，并经过几个特定的次序处理数据，最后存入本地文件或存入数据库。</p>
<h3>2.6 下载器中间件(Downloader middlewares)</h3>
<blockquote>
<p>下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p>
</blockquote>
<p>通过设置下载器中间件可以实现爬虫自动更换user-agent、IP等功能。</p>
<h3>2.7 Spider中间件(Spider middlewares)</h3>
<blockquote>
<p>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p>
</blockquote>
<h3>2.8 数据流(Data flow)</h3>
<ol>
<li>引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</li>
<li>引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</li>
<li>引擎向调度器请求下一个要爬取的URL。</li>
<li>调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</li>
<li>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。</li>
<li>引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。</li>
<li>Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。</li>
<li>引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。</li>
<li>(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。</li>
</ol>
<h2>3. 建立Scrapy爬虫项目流程</h2>
<h3>3.1 创建项目</h3>
<p>在开始爬取之前，首先要创建一个新的Scrapy项目。这里以爬取博客为例，进入你打算存储代码的目录中，运行下列命令:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>scrapy startproject scrapyspider</span></span></code></pre>
</div><p>该命令将会创建包含下列内容的scrapyspider目录:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>scrapyspider/</span></span>
<span class="line"><span>    scrapy.cfg</span></span>
<span class="line"><span>    scrapyspider/</span></span>
<span class="line"><span>        __init__.py</span></span>
<span class="line"><span>        items.py</span></span>
<span class="line"><span>        pipelines.py</span></span>
<span class="line"><span>        settings.py</span></span>
<span class="line"><span>        spiders/</span></span>
<span class="line"><span>            __init__.py</span></span>
<span class="line"><span>            ...</span></span></code></pre>
</div><p>这些文件分别是:</p>
<ul>
<li>scrapy.cfg: 项目的配置文件。</li>
<li>scrapyspider/: 该项目的python模块。之后您将在此加入代码。</li>
<li>scrapyspider/items.py: 项目中的item文件。</li>
<li>scrapyspider/pipelines.py: 项目中的pipelines文件。</li>
<li>scrapyspider/settings.py: 项目的设置文件。</li>
<li>scrapyspider/spiders/: 放置spider代码的目录。</li>
</ul>
<h3>3.2 编写第一个爬虫(Spider)</h3>
<blockquote>
<p>Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。</p>
<p>其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 item 的方法。</p>
<p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p>
<ul>
<li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>
<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>
<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>
</ul>
</blockquote>
<p>以下为我们的第一个Spider代码，保存在scrapyspider/spiders目录下的blog_spider.py文件中:</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> scrapy.spiders </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> Spider</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> BlogSpider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">Spider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    name </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> 'woodenrobot'</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    start_urls </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#98C379;--shiki-dark:#98C379">'http://woodenrobot.me'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">response</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        titles </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">xpath</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'//a[@class="post-title-link"]/text()'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">extract</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> title </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> titles:</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">            print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(title.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">strip</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">())</span></span></code></pre>
</div><h3>3.3 启动爬虫</h3>
<p>打开终端进入项目所在路径(即:scrapyspider路径下)运行下列命令：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>scrapy crawl woodenrobot</span></span></code></pre>
</div><p>启动爬虫后就可以看到打印出来当前页所有文章标题了。</p>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/24669128" target="_blank" rel="noopener noreferrer">Scrapy爬虫框架教程（一）-- Scrapy入门</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955513.png" type="image/png"/>
    </item>
    <item>
      <title>Selenium入门</title>
      <link>https://mrjackc.github.io/posts/Python/python-selenium-started.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-selenium-started.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Selenium入门</source>
      <description>Selenium入门 1. 简介 Selenium是 自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器。主要用电脑模拟人操作浏览器网页，可以实现自动化，测试等 2. 初步体验 忽略安装Selenium 和 浏览器驱动安装和配置，如有需求自行百度 运行如下代码，会自动打开浏览器，然后访问百度。 ima...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>Selenium是 自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器。主要用电脑模拟人操作浏览器网页，可以实现自动化，测试等</p>
<h2>2. 初步体验</h2>
<blockquote>
<p>忽略安装Selenium 和 浏览器驱动安装和配置，如有需求自行百度</p>
</blockquote>
<p>运行如下代码，会自动打开浏览器，然后访问百度。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>from selenium import webdriver</span></span>
<span class="line"><span></span></span>
<span class="line"><span>browser = webdriver.Chrome()</span></span>
<span class="line"><span># browser = webdriver.Chrome(r"C:\Users\Administrator\Downloads\chromedriver_win32\chromedriver.exe")</span></span>
<span class="line"><span>browser.get('http://www.baidu.com/')</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955271.png" alt="image-20210204133157683" tabindex="0" loading="lazy"><figcaption>image-20210204133157683</figcaption></figure>
<h2>3. 模拟提交</h2>
<p>下面的代码实现模拟提交搜索功能，首先等页面加载完成，然后输入到搜索框文本，点击提交。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>from selenium import webdriver</span></span>
<span class="line"><span>from selenium.webdriver.common.keys import Keys</span></span>
<span class="line"><span></span></span>
<span class="line"><span># driver = webdriver.Firefox()</span></span>
<span class="line"><span>driver = webdriver.Chrome(r"C:\Users\Administrator\Downloads\chromedriver_win32\chromedriver.exe")</span></span>
<span class="line"><span>driver.get("http://www.python.org")</span></span>
<span class="line"><span>assert "Python" in driver.title</span></span>
<span class="line"><span>elem = driver.find_element_by_name("q")</span></span>
<span class="line"><span>elem.clear()</span></span>
<span class="line"><span>elem.send_keys("pycon")</span></span>
<span class="line"><span>elem.send_keys(Keys.RETURN)</span></span>
<span class="line"><span>assert "No results found." not in driver.page_source</span></span>
<span class="line"><span>driver.close()</span></span></code></pre>
</div><ul>
<li>
<p>其中 driver.get 方法会打开请求的 URL，WebDriver 会等待页面完全加载完成之后才会返回，即程序会等待页面的所有内容加载完成，JS 渲染完毕之后才继续往下执行。注意：如果这里用到了特别多的 Ajax 的话，程序可能不知道是否已经完全加载完毕。</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">driver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"http://www.python.org"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p>WebDriver 提供了大量的方法让你去查询页面中的元素，这些方法形如： find_element_by_*。 例如：包含 name 属性的input输入框可以通过 find_element_by_name 方法查找到， 详细的查找方法可以在第四节元素查找中查看</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">elem </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> driver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_element_by_name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"q"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
<li>
<p>我们发送了一个关键字，这个方法的作用类似于你用键盘输入关键字</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">elem.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">clear</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">elem.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">send_keys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"pycon"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">elem.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">send_keys</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(Keys.</span><span style="color:#D19A66;--shiki-dark:#D19A66">RETURN</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div></li>
</ul>
<h2>4. 元素定位</h2>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>find_element_by_id()</span></span>
<span class="line"><span>find_element_by_name()</span></span>
<span class="line"><span>find_element_by_class_name()</span></span>
<span class="line"><span>find_element_by_tag_name()</span></span>
<span class="line"><span>find_element_by_link_text()</span></span>
<span class="line"><span>find_element_by_partial_link_text()</span></span>
<span class="line"><span>find_element_by_xpath()</span></span>
<span class="line"><span>find_element_by_css_selector()</span></span></code></pre>
</div><p>在<code>element</code>变成<code>elements</code>就是找所有满足的条件，返回数组。</p>
<p>一般我都自己采用 <strong>xpath</strong> 获取元素的，复制即可</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955312.png" alt="image-20210204134742935" tabindex="0" loading="lazy"><figcaption>image-20210204134742935</figcaption></figure>
<h2>5. 控制浏览器操作</h2>
<ul>
<li>控制浏览器窗口大小</li>
</ul>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>driver.set_window_size(480, 800)</span></span></code></pre>
</div><ul>
<li>浏览器后退，前进</li>
</ul>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># 后退 driver.back()</span></span>
<span class="line"><span># 前进 driver.forward()</span></span></code></pre>
</div><ul>
<li>刷新</li>
</ul>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>driver.refresh() # 刷新</span></span></code></pre>
</div><h2>6. Webelement常用方法</h2>
<ul>
<li>点击和输入</li>
</ul>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>driver.find_element_by_id("kw").clear() # 清除文本 driver.find_element_by_id("kw").send_keys("selenium") # 模拟按键输入 driver.find_element_by_id("su").click() # 单机元素</span></span></code></pre>
</div><ul>
<li>提交</li>
</ul>
<p>可以在搜索框模拟回车操作</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>search_text = driver.find_element_by_id('kw') search_text.send_keys('selenium') search_text.submit()</span></span></code></pre>
</div><ul>
<li>其他</li>
</ul>
<p>size： 返回元素的尺寸。</p>
<p>text： 获取元素的文本。</p>
<p>get_attribute(name)： 获得属性值。</p>
<p>is_displayed()： 设置该元素是否用户可见。</p>
<h2>7. 鼠标操作</h2>
<p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p>
<p>ActionChains 类提供了鼠标操作的常用方法：</p>
<ul>
<li>perform()： 执行所有 ActionChains 中存储的行为；</li>
<li>context_click()： 右击；</li>
<li>double_click()： 双击；</li>
<li>drag_and_drop()： 拖动；</li>
<li>move_to_element()： 鼠标悬停。</li>
</ul>
<p>举个例子：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> selenium </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> webdriver</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 引入 ActionChains 类</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> selenium.webdriver.common.action_chains </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> ActionChains</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">driver </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> webdriver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Chrome</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">driver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"https://www.baidu.cn"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 定位到要悬停的元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">above </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> driver.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">find_element_by_link_text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"设置"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 对定位到的元素执行鼠标悬停操作</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ActionChains</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(driver).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">move_to_element</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(above).</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">perform</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
</div><h2>8. 键盘事件</h2>
<p>以下为常用的键盘操作：</p>
<ul>
<li>send_keys(Keys.BACK_SPACE) 删除键（BackSpace）</li>
<li>send_keys(Keys.SPACE) 空格键(Space)</li>
<li>send_keys(Keys.TAB) 制表键(Tab)</li>
<li>send_keys(Keys.ESCAPE) 回退键（Esc）</li>
<li>send_keys(Keys.ENTER) 回车键（Enter）</li>
<li>send_keys(Keys.CONTROL,'a') 全选（Ctrl+A）</li>
<li>send_keys(Keys.CONTROL,'c') 复制（Ctrl+C）</li>
<li>send_keys(Keys.CONTROL,'x') 剪切（Ctrl+X）</li>
<li>send_keys(Keys.CONTROL,'v') 粘贴（Ctrl+V）</li>
<li>send_keys(Keys.F1) 键盘 F1</li>
<li>……</li>
<li>send_keys(Keys.F12) 键盘 F12</li>
</ul>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># 输入框输入内容</span></span>
<span class="line"><span>driver.find_element_by_id("kw").send_keys("seleniumm")</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除多输入的一个 m</span></span>
<span class="line"><span>driver.find_element_by_id("kw").send_keys(Keys.BACK_SPACE)</span></span></code></pre>
</div><h2>9. 警告框处理</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>alert = driver.switch_to_alert()</span></span></code></pre>
</div><ul>
<li>text：返回 alert/confirm/prompt 中的文字信息。</li>
<li>accept()：接受现有警告框。</li>
<li>dismiss()：解散现有警告框。</li>
<li>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</li>
</ul>
<h2>10. 下拉框选择</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>from selenium import webdriver</span></span>
<span class="line"><span>from selenium.webdriver.support.select import Select</span></span>
<span class="line"><span>from time import sleep</span></span>
<span class="line"><span></span></span>
<span class="line"><span>driver = webdriver.Chrome()</span></span>
<span class="line"><span>driver.implicitly_wait(10)</span></span>
<span class="line"><span>driver.get('http://www.baidu.com')</span></span>
<span class="line"><span>sel = driver.find_element_by_xpath("//select[@id='nr']")</span></span>
<span class="line"><span>Select(sel).select_by_value('50')  # 显示50条</span></span></code></pre>
</div><h2>11. 文件上传</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>driver.find_element_by_name("file").send_keys('D:\\upload_file.txt')  # # 定位上传按钮，添加本地文件</span></span></code></pre>
</div><h2>12. cookie操作</h2>
<p>WebDriver操作cookie的方法：</p>
<ul>
<li>get_cookies()： 获得所有cookie信息。</li>
<li>get_cookie(name)： 返回字典的key为“name”的cookie信息。</li>
<li>add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。</li>
<li>delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。</li>
<li>delete_all_cookies()： 删除所有cookie信息</li>
</ul>
<h2>13. 调用JavaScript代码</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>js="window.scrollTo(100,450);"</span></span>
<span class="line"><span>driver.execute_script(js) # 通过javascript设置浏览器窗口的滚动条位置</span></span></code></pre>
</div><p>通过execute_script()方法执行JavaScripts代码来移动滚动条的位置。</p>
<h2>14. 窗口截图</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>driver.get_screenshot_as_file("D:\\baidu_img.jpg") # 截取当前窗口，并指定截图图片的保存位置</span></span></code></pre>
</div><h2>15. 关闭浏览器</h2>
<ul>
<li>close() 关闭单个窗口</li>
<li>quit() 关闭所有窗口</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://zhuanlan.zhihu.com/p/111859925" target="_blank" rel="noopener noreferrer">Selenium Python 教程</a></p>
<p><a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html" target="_blank" rel="noopener noreferrer">selenium官方文档</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230955271.png" type="image/png"/>
    </item>
    <item>
      <title>免费短信注册各平台</title>
      <link>https://mrjackc.github.io/posts/Python/python-sms.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-sms.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">免费短信注册各平台</source>
      <description>免费短信注册各平台 1. 背景 我们在做某些网站的测试或者爬虫的时候，需要注册该平台。但并不希望暴露自己的手机号，那么这些免费短信平台就派上用场了 2. 使用 隐私短信 首页有非常多的手机号也已选择 image-20210302093933352image-20210302093933352 复制手机号到各平台注册 详情查看验证码 image-2021...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 背景</h2>
<p>我们在做某些网站的测试或者爬虫的时候，需要注册该平台。但并不希望暴露自己的手机号，那么这些免费短信平台就派上用场了</p>
<h2>2. 使用</h2>
<p><a href="https://www.yinsiduanxin.com/china-phone-number.html" target="_blank" rel="noopener noreferrer">隐私短信</a></p>
<ol>
<li>
<p>首页有非常多的手机号也已选择</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230956884.png" alt="image-20210302093933352" tabindex="0" loading="lazy"><figcaption>image-20210302093933352</figcaption></figure>
</li>
<li>
<p>复制手机号到各平台注册</p>
</li>
<li>
<p>详情查看验证码</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230956929.png" alt="image-20210302094047504" tabindex="0" loading="lazy"><figcaption>image-20210302094047504</figcaption></figure>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230956884.png" type="image/png"/>
    </item>
    <item>
      <title>python爬取百度贴吧（难度1星）</title>
      <link>https://mrjackc.github.io/posts/Python/python-tieba.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-tieba.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">python爬取百度贴吧（难度1星）</source>
      <description>python爬取百度贴吧（难度1星） 1. 简介 指定贴吧名和需要的条数，将贴吧内容下载到本地 2. 涉及知识点 requests 发起网络请求 python文件操作 open() 函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。 f.write(&amp;quot;hello\n&amp;quot;)：写入数据 3. 完整代码 参考文章 开源项目ECom...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>指定贴吧名和需要的条数，将贴吧内容下载到本地</p>
<h2>2. 涉及知识点</h2>
<ul>
<li>requests 发起网络请求</li>
<li>python文件操作
<ul>
<li>open() 函数用于打开一个文件，创建一个 <strong>file</strong> 对象，相关的方法才可以调用它进行读写。</li>
<li>f.write("hello\n")：写入数据</li>
</ul>
</li>
</ul>
<h2>3. 完整代码</h2>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">#!/usr/bin/python3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">class</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> TiebaSpider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> __init__</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">kw</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">max_pn</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.max_pn </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> max_pn</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.kw </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> kw</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.base_url </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> "https://tieba.baidu.com/f?kw=</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">&amp;ie=utf-8&amp;pn=</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            "User-Agent"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">: </span><span style="color:#98C379;--shiki-dark:#98C379">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> get_url_list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        获取 url 列表</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :return:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 写法一</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        url_list = []</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        for pn in range(0,self.max_pn,50):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            url = self.base_url.format(self.kw,pn)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">            url_list.append(url)</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        return url_list</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 写法二</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> [</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.base_url.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.kw, pn) </span><span style="color:#C678DD;--shiki-dark:#C678DD">for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> pn </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> range</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.max_pn, </span><span style="color:#D19A66;--shiki-dark:#D19A66">50</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> get_content</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">url</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        发送请求获取响应内容</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param url:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :return:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        response </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">            url</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">url,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">            headers</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.headers</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> response.content</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> get_items</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">content</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        从响应内容中提取数据</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param content:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :return:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        with</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> open</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'tieba-</span><span style="color:#D19A66;--shiki-dark:#D19A66">{}</span><span style="color:#98C379;--shiki-dark:#98C379">.html'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">format</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(index), </span><span style="color:#98C379;--shiki-dark:#98C379">'wb'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">as</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            f.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">write</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(content)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#D19A66;--shiki-dark:#D19A66"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> save_items</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;font-style:italic;--shiki-dark:#D19A66;--shiki-dark-font-style:italic">items</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        保存数据</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :param items:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        :return:</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">        '''</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    def</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic">self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 1. 获取 url 列表</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        url_list </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_url_list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> url </span><span style="color:#C678DD;--shiki-dark:#C678DD">in</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> url_list:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 2. 发送请求获取响应</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            content </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_content</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(url)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 3. 从响应中提取数据</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            items </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">get_items</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(content, url_list.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">index</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(url) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">+</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            # 4. 保存数据</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            self</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">save_items</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(items)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> __name__</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> ==</span><span style="color:#98C379;--shiki-dark:#98C379"> '__main__'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    spider </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> TiebaSpider</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"英雄联盟"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">150</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    spider.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>参考文章</h2>
<p><a href="https://github.com/DropsDevopsOrg/ECommerceCrawlers/tree/master/OthertCrawler/0x01baidutieba" target="_blank" rel="noopener noreferrer">开源项目ECommerceCrawlers</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>wordcloud入门</title>
      <link>https://mrjackc.github.io/posts/Python/python-wordcloud.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-wordcloud.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">wordcloud入门</source>
      <description>wordcloud入门 1. 简介 基于Python的词云生成类库,很好用,而且功能强大。可以根据文本的词条内容划分出词组的 github: https://github.com/amueller/word_cloud 效果如下： image-20210204151203285image-20210204151203285 2. 集成使用 可以参考官网...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 简介</h2>
<p>基于Python的词云生成类库,很好用,而且功能强大。可以根据文本的词条内容划分出词组的</p>
<p>github: <a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener noreferrer">https://github.com/amueller/word_cloud</a></p>
<p>效果如下：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957262.png" alt="image-20210204151203285" tabindex="0" loading="lazy"><figcaption>image-20210204151203285</figcaption></figure>
<h2>2. 集成使用</h2>
<p>可以参考官网的simple</p>
<blockquote>
<p>解决中文乱码问题，手动指定字体</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>font = r'C:\Windows\Fonts\simfang.ttf'</span></span>
<span class="line"><span>WordCloud( font_path=font</span></span></code></pre>
</div></blockquote>
<div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span># -*- coding: utf-8 -*-</span></span>
<span class="line"><span></span></span>
<span class="line"><span>from wordcloud import WordCloud</span></span>
<span class="line"><span>import matplotlib.pyplot as plt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>text = '''文案 文案</span></span>
<span class="line"><span>The  抱抱 Zen of LOVE 抱抱 Python, 快乐 by Tim Peters</span></span>
<span class="line"><span>公众号 公众号 Python 最好的 语言 语言</span></span>
<span class="line"><span>一辈子 is better LOVE than 一辈子.</span></span>
<span class="line"><span>喵小姐 is 爱你 than  implicit.爱你 喵小姐</span></span>
<span class="line"><span>蟹先生 is 爱你 than complex.</span></span>
<span class="line"><span>一辈子 is 蟹先生  than complicated.</span></span>
<span class="line"><span>二中 is 喵小姐 我想你了 than nested. 二中 蟹先生</span></span>
<span class="line"><span>清湖 is 胜于 than 清湖.</span></span>
<span class="line"><span>思旺 counts. 想你</span></span>
<span class="line"><span>Special 喵小姐 我想你了 aren't special enough 思旺 break 思旺 rules.</span></span>
<span class="line"><span>别生气 practicality beats 厨艺好.</span></span>
<span class="line"><span>Errors should 我想你了 never pass 小龙虾 silently. 运营</span></span>
<span class="line"><span>别生气 explicitly 好不好. LOVE</span></span>
<span class="line"><span>In the face of ambiguity, 程序员 the 厨艺好 to guess.龙华 龙华</span></span>
<span class="line"><span>There 快乐 should be one-- 我想你了 and preferably 红烧肉 only one 小龙虾--obvious way to do it.运营</span></span>
<span class="line"><span>Although 共享单车 way may not 我想你了 be obvious at first unless you're Dutch. 新媒体 地铁</span></span>
<span class="line"><span>Now is better 红烧肉 than never.</span></span>
<span class="line"><span>程序员 Although 共享单车 is often 高铁 than 东莞 now. 高铁 地铁</span></span>
<span class="line"><span>If the implementation 想你 is hard to explain, it's a bad idea. 想你了</span></span>
<span class="line"><span>If 成都 implementation is 想你 easy to explain, it may be a good idea.</span></span>
<span class="line"><span>Namespaces are 端午one 端午 honking great idea -- 成都 do more of those! 想你了</span></span>
<span class="line"><span>深圳 晚安 深圳 新媒体</span></span>
<span class="line"><span>'''</span></span>
<span class="line"><span></span></span>
<span class="line"><span># the font from github: https://github.com/adobe-fonts</span></span>
<span class="line"><span>font = r'C:\Windows\Fonts\simfang.ttf'</span></span>
<span class="line"><span>wc = WordCloud(collocations=False, font_path=font, width=1400, height=1400, margin=2).generate(text.lower())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plt.imshow(wc)</span></span>
<span class="line"><span>plt.axis("off")</span></span>
<span class="line"><span>plt.show()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>wc.to_file('show_Chinese.png')  # 把词云保存下来</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957262.png" type="image/png"/>
    </item>
    <item>
      <title>Python环境 - Anaconda使用指南</title>
      <link>https://mrjackc.github.io/posts/Python/python-x-anaconda.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-x-anaconda.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Python环境 - Anaconda使用指南</source>
      <description>Python环境 - Anaconda使用指南 1. 概述 很多学习python的初学者甚至学了有一段时间的人接触到anaconda或者其他虚拟环境工具时觉得无从下手, 其主要原因就是不明白这些工具究竟有什么用, 是用来做什么的, 为什么要这么做, 比如笔者一开始也是不明白为啥除了python之外我还需要这么一个东西, 他和python到底有啥联系和区...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 概述</h2>
<p>很多学习python的初学者甚至学了有一段时间的人接触到anaconda或者其他虚拟环境工具时觉得无从下手, 其主要原因就是不明白这些工具究竟有什么用, 是用来做什么的, 为什么要这么做, 比如笔者一开始也是不明白为啥除了python之外我还需要这么一个东西, 他和python到底有啥联系和区别, 为啥能用来管理python.</p>
<p>在使用过之后我才逐渐发现其实anaconda等环境管理工具究竟在做啥, 以及为什么我们需要他们来管理我们的python环境</p>
<p>首先我们需要先去了解Anaconda诞生的目的.再去了解Anaconda的使用方法.</p>
<h3>1.1 Python本身</h3>
<p>首先我们需要从python本身说起, 从根源寻找问题, 我们在使用python语言编写程序之前需要下载一个python解释器, 这才是python的本体, 没了python解释器, 我们即使写了无比正确优雅的python脚本也没办法运行, 那这个解释器在哪呢.就在你安装python的地方,比如我的在<code>C:\Users\Acring\AppData\Local\Programs\Python\Python36-32</code></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957563.png" alt="image-20230216220342762" tabindex="0" loading="lazy"><figcaption>image-20230216220342762</figcaption></figure>
<p>项目结构如上图,这里有我们很熟悉的python.exe, 也就是Python解释器</p>
<p>除此之外还有个很重要的东西, Lib, 也就是python包文件, 包括自带的包和第三方包</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957608.png" alt="image-20230216220446994" tabindex="0" loading="lazy"><figcaption>image-20230216220446994</figcaption></figure>
<p>Lib目录如上图, 这里有python自带的包, 如笔者常用的日志包logging, 异步包 concurrent, 而所有的第三方包都放在site-packages文件夹里面</p>
<p>了解了这些我们就对整个python环境有了大概的了解, 其实最关键的, 一个python环境中需要有一个<strong>解释器</strong>, 和一个<strong>包集合</strong>.</p>
<h3>1.2 解释器</h3>
<p>解释器根据python的版本大概分为2和3. python2和3之间无法互相兼容, 也就是说用python2语法写出来的脚本不一定能在python3的解释器中运行.</p>
<h3>1.3 包集合</h3>
<p>包集合中包含了自带的包和第三方包, 第三方包我们一般通过pip或者easy_install来下载, 当一个python环境中不包含这个包, 那么引用了这个包的程序不能在该python环境中运行.</p>
<p>比如说一个爬虫脚本用到了第三方的requests包,而另一台计算机是刚刚装好原始python的, 也就是说根本没有任何第三方包, 那么这个爬虫脚本是无法在另一台机器上运行的.</p>
<h2>2. 问题所在</h2>
<p>python环境解释完了, 那么接下来就要说明这样的环境究竟产生哪些问题, 因为anaconda正式为了解决这些问题而诞生的</p>
<ol>
<li>到底该装 Python2 呢还是 Python3</li>
</ol>
<p>python2和python3在语法上是不兼容的, 那我的机器上应该装python2还是python3呢, 可能一开始选一个学习就好了, 但是如果你要开发的程序必须使用python2而不能使用python3,那这时候你就不得不再下载一个python2, 那这时候环境变量该设谁的目录呢, 如果还是切换环境变量岂不是很麻烦.</p>
<ol>
<li>包管理</li>
</ol>
<p>如果我在本地只有一个python环境那我所有程序用到的各种包都只能放到同一个环境中, 导致环境混乱, 另外当我将写好的程序放到另一电脑上运行时又会遇到缺少相关包, 需要自己手动一个个下载的情况, 实在是烦人, 要是能每个程序开发都选用不同的环境, 而开发好之后又能将该程序需要的环境(第三方包)都独立打包出来就好了.</p>
<h2>3. Anaconda</h2>
<p>那么接下来就到我们的anaconda上场了, 先让我们安装好Anaconda然后我再来告诉你如何用Anaconda一个个解决我们上面的问题吧.</p>
<h3>3.1 下载</h3>
<p><a href="https://link.jianshu.com?t=https%3A%2F%2Fwww.anaconda.com%2Fdownload%2F" target="_blank" rel="noopener noreferrer">官网下载</a></p>
<p>推荐下载python3版本, 毕竟未来python2是要停止维护的.</p>
<h3>3.2 安装</h3>
<p>按照安装程序提示一步步安装就好了, 安装完成之后会多几个应用</p>
<blockquote>
<ul>
<li><strong>Anaconda Navigtor</strong> ：用于管理工具包和环境的图形用户界面，后续涉及的众多管理命令也可以在 Navigator 中手工实现。</li>
<li><strong>Jupyter notebook</strong> ：基于web的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</li>
<li><strong>qtconsole</strong> ：一个可执行 IPython 的仿终端图形界面程序，相比 Python Shell 界面，qtconsole 可以直接显示代码生成的图形，实现多行代码输入执行，以及内置许多有用的功能和函数。</li>
<li><strong>spyder</strong> ：一个使用Python语言、跨平台的、科学运算集成开发环境。</li>
</ul>
</blockquote>
<p>暂时先不用管, 了解一下就行了</p>
<h3>3.3 配置环境变量</h3>
<p>如果是windows的话需要去 <code>控制面板\系统和安全\系统\高级系统设置\环境变量\用户变量\PATH</code> 中添加 anaconda的安装目录的Scripts文件夹, 比如我的路径是<code>D:\Software\Anaconda\Scripts</code>, 看个人安装路径不同需要自己调整.</p>
<p>之后就可以打开命令行(最好用管理员模式打开) 输入 <code>conda --version</code></p>
<p>如果输出<code>conda 4.4.11</code>之类的就说明环境变量设置成功了.</p>
<p>为了避免可能发生的错误, 我们在命令行输入<code>conda upgrade --all</code> 先把所有工具包进行升级</p>
<h2>4. 管理虚拟环境</h2>
<p>接下来我们就可以用anaconda来创建我们一个个独立的python环境了.接下来的例子都是在命令行操作的,请打开你的命令行吧.</p>
<h3>4.1 activate</h3>
<p>activate 能将我们引入anaconda设定的虚拟环境中, 如果你后面什么参数都不加那么会进入anaconda自带的base环境,</p>
<p>你可以输入python试试, 这样会进入base环境的python解释器, <em>如果你把原来环境中的python环境去除掉会更能体会到</em>, 这个时候在命令行中使用的已经不是你原来的python而是base环境下的python.而命令行前面也会多一个<code>(base)</code> 说明当前我们处于的是base环境下.</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957632.png" alt="image-20230216223451017" tabindex="0" loading="lazy"><figcaption>image-20230216223451017</figcaption></figure>
<h3>4.2 创建自己的虚拟环境</h3>
<p>我们当然不满足一个base环境, 我们应该为自己的程序安装单独的虚拟环境.</p>
<p>创建一个名称为learn的虚拟环境并指定python版本为3(这里conda会自动找3中最新的版本下载)</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> create</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -n</span><span style="color:#98C379;--shiki-dark:#98C379"> learn</span><span style="color:#98C379;--shiki-dark:#98C379"> python=</span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957658.png" alt="image-20230216223643336" tabindex="0" loading="lazy"><figcaption>image-20230216223643336</figcaption></figure>
<p>于是我们就有了一个learn的虚拟环境, 接下来我们切换到这个环境, 一样还是用activae命令 后面加上要切换的环境名称</p>
<h3>4.3 切换环境</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">activate</span><span style="color:#98C379;--shiki-dark:#98C379"> learn</span></span></code></pre>
</div><p>如果忘记了名称我们可以先用</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> env</span><span style="color:#98C379;--shiki-dark:#98C379"> list</span></span></code></pre>
</div><p>去查看所有的环境</p>
<p>现在的learn环境除了python自带的一些官方包之外是没有其他包的, 一个比较干净的环境我们可以试试</p>
<p>先输入<code>python</code>打开python解释器然后输入</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="color:#C678DD;--shiki-dark:#C678DD"> import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> requests</span></span></code></pre>
</div><p>会报错找不到requests包, 很正常.接下来我们就要演示如何去安装requests包</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">exit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">()</span></span></code></pre>
</div><p>退出python解释器</p>
<h3>4.4 安装第三方包</h3>
<p>输入</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> requests</span></span></code></pre>
</div><p>或者</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pip</span><span style="color:#98C379;--shiki-dark:#98C379"> install</span><span style="color:#98C379;--shiki-dark:#98C379"> requests</span></span></code></pre>
</div><p>来安装requests包.</p>
<p>安装完成之后我们再输入<code>python</code>进入解释器并import requests包, 这次一定就是成功的了.</p>
<h3>4.5 卸载第三方包</h3>
<p>那么怎么卸载一个包呢</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> remove</span><span style="color:#98C379;--shiki-dark:#98C379"> requests</span></span></code></pre>
</div><p>或者</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">pip</span><span style="color:#98C379;--shiki-dark:#98C379"> uninstall</span><span style="color:#98C379;--shiki-dark:#98C379"> requests</span></span></code></pre>
</div><p>就行啦.</p>
<h3>4.6 查看环境包信息</h3>
<p>要查看当前环境中所有安装了的包可以用</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> list</span></span></code></pre>
</div><h3>4.7 导入导出环境</h3>
<p>如果想要导出当前环境的包信息可以用</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> env</span><span style="color:#98C379;--shiki-dark:#98C379"> export</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt; </span><span style="color:#98C379;--shiki-dark:#98C379">environment.yaml</span></span></code></pre>
</div><p>将包信息存入yaml文件中.</p>
<p>当需要重新创建一个相同的虚拟环境时可以用</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">conda</span><span style="color:#98C379;--shiki-dark:#98C379"> env</span><span style="color:#98C379;--shiki-dark:#98C379"> create</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -f</span><span style="color:#98C379;--shiki-dark:#98C379"> environment.yaml</span></span></code></pre>
</div><h2>5. 常用命令汇总</h2>
<p>其实命令很简单对不对, 我把一些常用的在下面给出来, 相信自己多打两次就能记住</p>
<blockquote>
<p>activate // 切换到base环境</p>
<p>activate learn // 切换到learn环境</p>
<p>conda create -n learn python=3 // 创建一个名为learn的环境并指定python版本为3(的最新版本)</p>
<p>conda env list // 列出conda管理的所有环境</p>
<p>conda list // 列出当前环境的所有包</p>
<p>conda install requests 安装requests包</p>
<p>conda remove requests 卸载requets包</p>
<p>conda remove -n learn --all // 删除learn环境及下属所有包</p>
<p>conda update requests 更新requests包</p>
<p>conda env export &gt; environment.yaml // 导出当前环境的包信息</p>
<p>conda env create -f environment.yaml // 用配置文件创建新的虚拟环境</p>
</blockquote>
<h2>6. 深入一下</h2>
<p>或许你会觉得奇怪为啥anaconda能做这些事, 他的原理到底是什么, 我们来看看anaconda的安装目录</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957685.png" alt="image-20230216224210339" tabindex="0" loading="lazy"><figcaption>image-20230216224210339</figcaption></figure>
<p>这里只截取了一部分, 但是我们和本文章最开头的python环境目录比较一下, 可以发现其实十分的相似, 其实这里就是base环境. 里面有着一个基本的python解释器, lLib里面也有base环境下的各种包文件.</p>
<p>那我们自己创建的环境去哪了呢, 我们可以看见一个envs, 这里就是我们自己创建的各种虚拟环境的入口, 点进去看看</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957707.png" alt="image-20230216224422272" tabindex="0" loading="lazy"><figcaption>image-20230216224422272</figcaption></figure>
<p>可以发现我们之前创建的learn目录就在下面, 再点进去</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957732.png" alt="image-20230216224447576" tabindex="0" loading="lazy"><figcaption>image-20230216224447576</figcaption></figure>
<p>这不就是一个标准的python环境目录吗?</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202404230957563.png" type="image/png"/>
    </item>
    <item>
      <title>Python爬虫 - XPath详解</title>
      <link>https://mrjackc.github.io/posts/Python/python-x-xpath.html</link>
      <guid>https://mrjackc.github.io/posts/Python/python-x-xpath.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Python爬虫 - XPath详解</source>
      <description>Python爬虫 - XPath详解 1. 概述 XPath，全称 XML Path Language，即 XML 路径语言，它是一门在XML文档中查找信息的语言。XPath 最初设计是用来搜寻XML文档的，但是它同样适用于 HTML 文档的搜索。 所以在做爬虫时，我们完全可以使用 XPath 来做相应的信息抽取，本节我们来介绍一下 XPath 的基本...</description>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 概述</h2>
<p>XPath，全称 XML Path Language，即 XML 路径语言，它是一门在XML文档中查找信息的语言。XPath 最初设计是用来搜寻XML文档的，但是它同样适用于 HTML 文档的搜索。</p>
<p>所以在做爬虫时，我们完全可以使用 XPath 来做相应的信息抽取，本节我们来介绍一下 XPath 的基本用法。</p>
<blockquote>
<p>XPath 的选择功能十分强大，它提供了非常简洁明了的路径选择表达式，另外它还提供了超过 100 个内建函数用于字符串、数值、时间的匹配以及节点、序列的处理等等，几乎所有我们想要定位的节点都可以用XPath来选择。</p>
<p>XPath 于 1999 年 11 月 16 日 成为 W3C 标准，它被设计为供 XSLT、XPointer 以及其他 XML 解析软件使用，更多的文档可以访问其官方网站：<a href="https://link.zhihu.com/?target=https%3A//www.w3.org/TR/xpath/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/xpath/</a>。</p>
</blockquote>
<h2>2. XPath常用规则</h2>
<p>我们现用表格列举一下几个常用规则：</p>
<p>表达式描述</p>
<ul>
<li>nodename选取此节点的所有子节点</li>
<li>/从当前节点选取直接子节点</li>
<li>//从当前节点选取子孙节点</li>
<li>.选取当前节点</li>
<li>..选取当前节点的父节点</li>
<li>@选取属性</li>
</ul>
<blockquote>
<p>在这里列出了XPath的常用匹配规则，例如 / 代表选取直接子节点，// 代表选择所有子孙节点，. 代表选取当前节点，.. 代表选取当前节点的父节点，@ 则是加了属性的限定，选取匹配属性的特定节点。</p>
</blockquote>
<p>例如：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>//title[@lang=’eng’]</span></span></code></pre>
</div><p>这就是一个 XPath 规则，它就代表选择所有名称为 title，同时属性 lang 的值为 eng 的节点。</p>
<p>在后文我们会介绍 XPath 的详细用法，通过 Python 的 LXML 库利用 XPath 进行 HTML 的解析。</p>
<h2>3. 准备工作</h2>
<p>在使用之前我们首先要确保安装好了 LXML 库</p>
<h2>4. 实例引入</h2>
<p>我们现用一个实例来感受一下使用 XPath 来对网页进行解析的过程，代码如下：</p>
<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lxml </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">text </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#98C379;--shiki-dark:#98C379"> '''</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">&lt;div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">    &lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">         &lt;li class="item-0"&gt;&lt;a href="https://ask.hellobi.com/link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">         &lt;li class="item-1"&gt;&lt;a href="https://ask.hellobi.com/link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">         &lt;li class="item-inactive"&gt;&lt;a href="https://ask.hellobi.com/link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">         &lt;li class="item-1"&gt;&lt;a href="https://ask.hellobi.com/link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">         &lt;li class="item-0"&gt;&lt;a href="https://ask.hellobi.com/link5.html"&gt;fifth item&lt;/a&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">     &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379"> &lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;--shiki-dark:#98C379">'''</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTML</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(text)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">tostring</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(result.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">decode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们首先导入了 LXML 库的 etree 模块，然后声明了一段 HTML 文本，调用 HTML 类进行初始化，这样我们就成功构造了一个 XPath 解析对象，在这里注意到 HTML 文本中的最后一个 li 节点是没有闭合的，但是 etree 模块可以对 HTML 文本进行自动修正。</p>
<p>在这里我们调用 tostring() 方法即可输出修正后的 HTML 代码，但是结果是 bytes 类型，在这里我们利用 decode() 方法转成 str 类型，结果如下：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link1.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;first item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link2.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;second item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-inactive"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link3.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;third item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link4.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fourth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link5.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fifth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
</div><p>我们可以看到经过处理之后 li 节点标签被补全，并且还自动添加了 body、html 节点。</p>
<p>另外我们也可以直接读取文本文件进行解析，示例如下：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lxml </span><span style="color:#C678DD;--shiki-dark:#C678DD">import</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">html </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">parse</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'./test.html'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">HTMLParser</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">result </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> etree.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">tostring</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(html)</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">print</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(result.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">decode</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">'utf-8'</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span></code></pre>
</div><p>其中 test.html 的内容就是上面例子中的 HTML 代码，内容如下：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link1.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;first item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link2.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;second item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-inactive"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link3.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;third item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link4.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fourth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link5.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fifth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
</div><p>这次的输出结果略有不同，多了一个 DOCTYPE 的声明，不过对解析无任何影响，结果如下：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;!</span><span style="color:#E06C75;--shiki-dark:#E06C75">DOCTYPE</span><span style="color:#D19A66;--shiki-dark:#D19A66"> html</span><span style="color:#D19A66;--shiki-dark:#D19A66"> PUBLIC</span><span style="color:#98C379;--shiki-dark:#98C379"> "-//W3C//DTD HTML 4.0 Transitional//EN"</span><span style="color:#98C379;--shiki-dark:#98C379"> "http://www.w3.org/TR/REC-html40/loose.dtd"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link1.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;first item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link2.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;second item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-inactive"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link3.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;third item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link4.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fourth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">         &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#D19A66;--shiki-dark:#D19A66"> class</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"item-0"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#D19A66;--shiki-dark:#D19A66"> href</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">=</span><span style="color:#98C379;--shiki-dark:#98C379">"link5.html"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;fifth item&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">a</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">     &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">li</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">ul</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">div</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">body</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75">html</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Redis入门 - 3种特殊类型详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-data-type-special.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-data-type-special.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis入门 - 3种特殊类型详解</source>
      <description>Redis入门 - 3种特殊类型详解 很少使用，了解有这么个东西就可以了 Redis除了上文中5种基础数据类型，还有三种特殊的数据类型，分别是 HyperLogLogs（基数统计）， Bitmaps (位图) 和 geospatial （地理位置） 1. HyperLogLogs（基数统计） Redis 2.8.9 版本更新了 Hyperloglog ...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>很少使用，了解有这么个东西就可以了</p>
</blockquote>
<blockquote>
<p>Redis除了上文中5种基础数据类型，还有三种特殊的数据类型，分别是 <strong>HyperLogLogs</strong>（基数统计）， <strong>Bitmaps</strong> (位图) 和 <strong>geospatial</strong> （地理位置）</p>
</blockquote>
<h2>1. HyperLogLogs（基数统计）</h2>
<blockquote>
<p>Redis 2.8.9 版本更新了 Hyperloglog 数据结构！</p>
</blockquote>
<ul>
<li><strong>什么是基数？</strong></li>
</ul>
<p>举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</p>
<ul>
<li><strong>HyperLogLogs 基数统计用来解决什么问题</strong>？</li>
</ul>
<p>这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时UV、在线用户数，共同好友数等。</p>
<ul>
<li><strong>它的优势体现在哪</strong>？</li>
</ul>
<p>一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值（对于可以接受一定容错的业务场景，比如IP数统计，UV等，是可以忽略不计的）。</p>
<ul>
<li><strong>相关命令使用</strong></li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfadd</span><span style="color:#98C379;--shiki-dark:#98C379"> key1</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#98C379;--shiki-dark:#98C379"> b</span><span style="color:#98C379;--shiki-dark:#98C379"> c</span><span style="color:#98C379;--shiki-dark:#98C379"> d</span><span style="color:#98C379;--shiki-dark:#98C379"> e</span><span style="color:#98C379;--shiki-dark:#98C379"> f</span><span style="color:#98C379;--shiki-dark:#98C379"> g</span><span style="color:#98C379;--shiki-dark:#98C379"> h</span><span style="color:#98C379;--shiki-dark:#98C379"> i</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	# 创建第一组元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfcount</span><span style="color:#98C379;--shiki-dark:#98C379"> key1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">					# 统计元素的基数数量</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">9</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfadd</span><span style="color:#98C379;--shiki-dark:#98C379"> key2</span><span style="color:#98C379;--shiki-dark:#98C379"> c</span><span style="color:#98C379;--shiki-dark:#98C379"> j</span><span style="color:#98C379;--shiki-dark:#98C379"> k</span><span style="color:#98C379;--shiki-dark:#98C379"> l</span><span style="color:#98C379;--shiki-dark:#98C379"> m</span><span style="color:#98C379;--shiki-dark:#98C379"> e</span><span style="color:#98C379;--shiki-dark:#98C379"> g</span><span style="color:#98C379;--shiki-dark:#98C379"> a</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">		# 创建第二组元素</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfcount</span><span style="color:#98C379;--shiki-dark:#98C379"> key2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfmerge</span><span style="color:#98C379;--shiki-dark:#98C379"> key3</span><span style="color:#98C379;--shiki-dark:#98C379"> key1</span><span style="color:#98C379;--shiki-dark:#98C379"> key2</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">			# 合并两组：key1 key2 -&gt; key3 并集</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">pfcount</span><span style="color:#98C379;--shiki-dark:#98C379"> key3</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">13</span></span></code></pre>
</div><h2>2. Bitmap （位存储）</h2>
<blockquote>
<p>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</p>
</blockquote>
<ul>
<li><strong>用来解决什么问题</strong>？</li>
</ul>
<p>比如：统计用户信息，活跃，不活跃！ 登录，未登录！ 打卡，不打卡！ <strong>两个状态的，都可以使用 Bitmaps</strong>！</p>
<p>如果存储一年的打卡状态需要多少内存呢？ 365 天 = 365 bit 1字节 = 8bit 46 个字节左右！</p>
<ul>
<li><strong>相关命令使用</strong></li>
</ul>
<p>使用bitmap 来记录 周一到周日的打卡！ 周一：1 周二：0 周三：0 周四：1 ......</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">setbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span></code></pre>
</div><p>查看某一天是否有打卡！</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">getbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">getbit</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span></code></pre>
</div><p>统计操作，统计 打卡的天数！</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">bitcount</span><span style="color:#98C379;--shiki-dark:#98C379"> sign</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 统计这周的打卡记录，就可以看到是否有全勤！</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span></code></pre>
</div><h2>3. geospatial (地理位置)</h2>
<blockquote>
<p>Redis 的 Geo 在 Redis 3.2 版本就推出了! 这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人</p>
</blockquote>
<h3>3.1 geoadd</h3>
<blockquote>
<p>添加地理位置</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geoadd</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 118.76</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 32.04</span><span style="color:#98C379;--shiki-dark:#98C379"> manjing</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 112.55</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 37.86</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 123.43</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 41.80</span><span style="color:#98C379;--shiki-dark:#98C379"> shenyang</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geoadd</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 144.05</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22.52</span><span style="color:#98C379;--shiki-dark:#98C379"> shengzhen</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 120.16</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30.24</span><span style="color:#98C379;--shiki-dark:#98C379"> hangzhou</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 108.96</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 34.26</span><span style="color:#98C379;--shiki-dark:#98C379"> xian</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span></span></code></pre>
</div><p><strong>规则</strong></p>
<p>两级无法直接添加，我们一般会下载城市数据(这个网址可以查询 GEO： <a href="http://www.jsons.cn/lngcode" target="_blank" rel="noopener noreferrer">http://www.jsons.cn/lngcode</a>)！</p>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度。</li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geoadd</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 39.90</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 116.40</span><span style="color:#98C379;--shiki-dark:#98C379"> beijin</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">ERR</span><span style="color:#98C379;--shiki-dark:#98C379"> invalid</span><span style="color:#98C379;--shiki-dark:#98C379"> longitude,latitude</span><span style="color:#98C379;--shiki-dark:#98C379"> pair</span><span style="color:#98C379;--shiki-dark:#98C379"> 39.900000,116.400000</span></span></code></pre>
</div><h3>3.2 geopos</h3>
<blockquote>
<p>获取指定的成员的经度和纬度</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geopos</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#98C379;--shiki-dark:#98C379"> manjing</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"112.54999905824661255"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"37.86000073876942196"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"118.75999957323074341"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"32.03999960287850968"</span></span></code></pre>
</div><p>获得当前定位, 一定是一个坐标值!</p>
<h3>3.3 geodist</h3>
<blockquote>
<p>如果不存在, 返回空</p>
</blockquote>
<p>单位如下</p>
<ul>
<li>m</li>
<li>km</li>
<li>mi 英里</li>
<li>ft 英尺</li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geodist</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#98C379;--shiki-dark:#98C379"> shenyang</span><span style="color:#98C379;--shiki-dark:#98C379"> m</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"1026439.1070"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geodist</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#98C379;--shiki-dark:#98C379"> shenyang</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"1026.4391"</span></span></code></pre>
</div><h3>3.4 georadius</h3>
<blockquote>
<p>附近的人 ==&gt; 获得所有附近的人的地址, 定位, 通过半径来查询</p>
</blockquote>
<p>获得指定数量的人</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadius</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 110</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span><span style="color:#98C379;--shiki-dark:#98C379">			以</span><span style="color:#98C379;--shiki-dark:#98C379"> 100,30</span><span style="color:#98C379;--shiki-dark:#98C379"> 这个坐标为中心,</span><span style="color:#98C379;--shiki-dark:#98C379"> 寻找半径为1000km的城市</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"hangzhou"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"manjing"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"taiyuan"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadius</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 110</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 500</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadius</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 110</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 500</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span><span style="color:#98C379;--shiki-dark:#98C379"> withdist</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"483.8340"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadius</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 110</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 30</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span><span style="color:#98C379;--shiki-dark:#98C379"> withcoord</span><span style="color:#98C379;--shiki-dark:#98C379"> withdist</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"483.8340"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"108.96000176668167114"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"34.25999964418929977"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"manjing"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"864.9816"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"118.75999957323074341"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"32.03999960287850968"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 key 经度 纬度 半径 单位 [显示结果的经度和纬度] [显示结果的距离] [显示的结果的数量]</p>
<h3>3.5 georadiusbymember</h3>
<blockquote>
<p>显示与指定成员一定半径范围内的其他成员</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadiusbymember</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"manjing"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"taiyuan"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">georadiusbymember</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span><span style="color:#98C379;--shiki-dark:#98C379"> km</span><span style="color:#98C379;--shiki-dark:#98C379"> withcoord</span><span style="color:#98C379;--shiki-dark:#98C379"> withdist</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"taiyuan"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"0.0000"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"112.54999905824661255"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"37.86000073876942196"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"514.2264"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"108.96000176668167114"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"34.25999964418929977"</span></span></code></pre>
</div><p>参数与 georadius 一样</p>
<h3>3.6 geohash(较少使用)</h3>
<blockquote>
<p>该命令返回11个字符的hash字符串</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">geohash</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> taiyuan</span><span style="color:#98C379;--shiki-dark:#98C379"> shenyang</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"ww8p3hhqmp0"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"wxrvb9qyxk0"</span></span></code></pre>
</div><p>将二维的经纬度转换为一维的字符串, 如果两个字符串越接近, 则距离越近</p>
<h3>3.7 底层</h3>
<blockquote>
<p>geo底层的实现原理实际上就是Zset, 我们可以通过Zset命令来操作geo</p>
</blockquote>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">type</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">zset</span></span></code></pre>
</div><p>查看全部元素 删除指定的元素</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">zrange</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -1</span><span style="color:#98C379;--shiki-dark:#98C379"> withscores</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"4040115445396757"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"hangzhou"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"4054133997236782"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"manjing"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"4066006694128997"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"taiyuan"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"4068216047500484"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"shenyang"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)  </span><span style="color:#98C379;--shiki-dark:#98C379">"4072519231994779"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)  </span><span style="color:#98C379;--shiki-dark:#98C379">"shengzhen"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)  </span><span style="color:#98C379;--shiki-dark:#98C379">"4154606886655324"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">zrem</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#98C379;--shiki-dark:#98C379"> manjing</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">zrange</span><span style="color:#98C379;--shiki-dark:#98C379"> china:city</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"hangzhou"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"taiyuan"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"shenyang"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"shengzhen"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-data-type-special.html" target="_blank" rel="noopener noreferrer"><strong>Redis入门 - 数据类型：3种特殊类型详解</strong></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Redis进阶 - 数据类型：Stream详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-data-type-stream.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-data-type-stream.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 数据类型：Stream详解</source>
      <description>Redis进阶 - 数据类型：Stream详解 Redis5.0 中还增加了一个数据类型Stream，它借鉴了Kafka的设计，是一个新的强大的支持多播的可持久化的消息队列。 1. 为什么会设计Stream Redis5.0 中还增加了一个数据结构Stream，从字面上看是流类型，但其实从功能上看，应该是Redis对消息队列（MQ，Message Qu...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis5.0 中还增加了一个数据类型Stream，它借鉴了Kafka的设计，是一个新的强大的支持多播的可持久化的消息队列。</p>
</blockquote>
<h2>1. 为什么会设计Stream</h2>
<blockquote>
<p>Redis5.0 中还增加了一个数据结构Stream，从字面上看是流类型，但其实从功能上看，应该是Redis对消息队列（MQ，Message Queue）的完善实现。</p>
</blockquote>
<p>用过Redis做消息队列的都了解，基于Reids的消息队列实现有很多种，例如：</p>
<ul>
<li>PUB/SUB，订阅/发布模式
<ul>
<li>但是发布订阅模式是无法持久化的，如果出现网络断开、Redis 宕机等，消息就会被丢弃；</li>
</ul>
</li>
<li>基于<strong>List LPUSH+BRPOP</strong> 或者 基于<strong>Sorted-Set</strong>的实现
<ul>
<li>支持了持久化，但是不支持多播，分组消费等</li>
</ul>
</li>
</ul>
<p>为什么上面的结构无法满足广泛的MQ场景？ 这里便引出一个核心的问题：如果我们期望设计一种数据结构来实现消息队列，最重要的就是要理解<strong>设计一个消息队列需要考虑什么</strong>？初步的我们很容易想到</p>
<ul>
<li>消息的生产</li>
<li>消息的消费
<ul>
<li>单播和多播（多对多）</li>
<li>阻塞和非阻塞读取</li>
</ul>
</li>
<li>消息有序性</li>
<li>消息的持久化</li>
</ul>
<p>其它还要考虑啥嗯？</p>
<figure><img src="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202405132144209.png" alt="image-20220623201858393.png" tabindex="0" loading="lazy"><figcaption>image-20220623201858393.png</figcaption></figure>
<p><strong>我们不妨看看Redis考虑了哪些设计</strong>？</p>
<ul>
<li>消息ID的序列化生成</li>
<li>消息遍历</li>
<li>消息的阻塞和非阻塞读取</li>
<li>消息的分组消费</li>
<li>未完成消息的处理</li>
<li>消息队列监控</li>
<li>...</li>
</ul>
<blockquote>
<p>这也是我们需要理解Stream的点，但是结合上面的图，我们也应该理解Redis Stream也是一种超轻量MQ并没有完全实现消息队列所有设计要点，这决定着它适用的场景。</p>
</blockquote>
<h2>2. Stream详解</h2>
<blockquote>
<p>经过梳理总结，我认为从以下几个大的方面去理解Stream是比较合适的，总结如下</p>
</blockquote>
<ul>
<li>Stream的结构设计</li>
<li>生产和消费
<ul>
<li>基本的增删查改</li>
<li>单一消费者的消费</li>
<li>消费组的消费</li>
</ul>
</li>
<li>监控状态</li>
</ul>
<h3>2.1 Stream的结构</h3>
<p>每个 Stream 都有唯一的名称，它就是 Redis 的 key，在我们首次使用 xadd 指令追加消息时自动创建。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013199.png" alt="image-20220623202132225" tabindex="0" loading="lazy"><figcaption>image-20220623202132225</figcaption></figure>
<p>上图解析：</p>
<ul>
<li><code>Consumer Group</code> ：消费组，使用 XGROUP CREATE 命令创建，一个消费组有多个消费者(Consumer), 这些消费者之间是竞争关系。</li>
<li><code>last_delivered_id</code> ：游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。</li>
<li><code>pending_ids</code> ：消费者(Consumer)的状态变量，作用是维护消费者的未确认的 id。 pending_ids 记录了当前已经被客户端读取的消息，但是还没有 <code>ack</code> (Acknowledge character：确认字符）。如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack，它就开始减少。这个pending_ids变量在Redis官方被称之为PEL，也就是Pending Entries List，这是一个很核心的数据结构，它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理。</li>
</ul>
<p>此外我们还需要理解两点：</p>
<ul>
<li><code>消息ID</code>: 消息ID的形式是timestampInMillis-sequence，例如1527846880572-5，它表示当前的消息在毫米时间戳1527846880572时产生，并且是该毫秒内产生的第5条消息。消息ID可以由服务器自动生成，也可以由客户端自己指定，但是形式必须是整数-整数，而且必须是后面加入的消息的ID要大于前面的消息ID。</li>
<li><code>消息内容</code>: 消息内容就是键值对，形如hash结构的键值对，这没什么特别之处。</li>
</ul>
<h3>2.2 增删改查</h3>
<p>消息队列相关命令：</p>
<ul>
<li>XADD - 添加消息到末尾</li>
<li>XTRIM - 对流进行修剪，限制长度</li>
<li>XDEL - 删除消息</li>
<li>XLEN - 获取流包含的元素数量，即消息长度</li>
<li>XRANGE - 获取消息列表，会自动过滤已经删除的消息</li>
<li>XREVRANGE - 反向获取消息列表，ID 从大到小</li>
<li>XREAD - 以阻塞或非阻塞方式获取消息列表</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75"># </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">号表示服务器自动生成ID，后面顺序跟着一堆key</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">/</span><span style="color:#E06C75;--shiki-dark:#E06C75">value</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xadd codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75"> name laoqian age </span><span style="color:#D19A66;--shiki-dark:#D19A66">30</span><span style="color:#E06C75;--shiki-dark:#E06C75">  #  名字叫laoqian，年龄30岁</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1527849609889</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 生成的消息ID</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xadd codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75"> name xiaoyu age </span><span style="color:#D19A66;--shiki-dark:#D19A66">29</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xadd codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75"> name xiaoqian age </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1527849637634</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xlen codehole</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">(integer) </span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xrange codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#E06C75;--shiki-dark:#E06C75">表示最小值</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75">表示最大值</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xrange codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849609889</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"laoqian"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"30"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoyu"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849637634</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoqian"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xrange codehole </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 指定最小消息ID的列表</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoyu"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849637634</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoqian"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xrange codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 指定最大消息ID的列表</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849609889</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"laoqian"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"30"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoyu"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xdel codehole </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849609889</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">(integer) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xlen codehole  # 长度不受影响</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">(integer) </span><span style="color:#D19A66;--shiki-dark:#D19A66">3</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> xrange codehole </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> +</span><span style="color:#E06C75;--shiki-dark:#E06C75">  # 被删除的消息没了</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849629172</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoyu"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1527849637634</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">   2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      2</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoqian"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      3</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">      4</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">127.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">1</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> del codehole  # 删除整个Stream</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">(integer) </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.3 独立消费</h3>
<p>我们可以在不定义消费组的情况下进行Stream消息的独立消费，当Stream没有新消息时，甚至可以阻塞等待。Redis设计了一个单独的消费指令xread，可以将Stream当成普通的消息队列(list)来使用。使用xread时，我们可以完全忽略消费组(Consumer Group)的存在，就好比Stream就是一个普通的列表(list)。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从Stream头部读取两条消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xread</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> 0-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527851486781-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"laoqian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"30"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1527851493405-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"yurui"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从Stream尾部读取一条消息，毫无疑问，这里不会返回任何消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xread</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从尾部阻塞等待新消息到来，下面的指令会堵住，直到新消息到来</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xread</span><span style="color:#98C379;--shiki-dark:#98C379"> block</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 我们从新打开一个窗口，在这个窗口往Stream里塞消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xadd</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span><span style="color:#98C379;--shiki-dark:#98C379"> youming</span><span style="color:#98C379;--shiki-dark:#98C379"> age</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 60</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1527852774092-0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 再切换到前面的窗口，我们可以看到阻塞解除了，返回了新的消息内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 而且还显示了一个等待时间，这里我们等待了93s</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xread</span><span style="color:#98C379;--shiki-dark:#98C379"> block</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527852774092-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"youming"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"60"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">93.11s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端如果想要使用xread进行顺序消费，一定要记住当前消费到哪里了，也就是返回的消息ID。下次继续调用xread时，将上次返回的最后一个消息ID作为参数传递进去，就可以继续消费后续的消息。</p>
<p>block 0表示永远阻塞，直到消息到来，block 1000表示阻塞1s，如果1s内没有任何消息到来，就返回nil</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xread</span><span style="color:#98C379;--shiki-dark:#98C379"> block</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1000</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1.07s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span></code></pre>
</div><h3>2.4 消费组消费</h3>
<ul>
<li><strong>消费组消费图</strong></li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013261.png" alt="image-20220623202747788" tabindex="0" loading="lazy"><figcaption>image-20220623202747788</figcaption></figure>
<ul>
<li>相关命令：
<ul>
<li>XGROUP CREATE - 创建消费者组</li>
<li>XREADGROUP GROUP - 读取消费者组中的消息</li>
<li>XACK - 将消息标记为"已处理"</li>
<li>XGROUP SETID - 为消费者组设置新的最后递送消息ID</li>
<li>XGROUP DELCONSUMER - 删除消费者</li>
<li>XGROUP DESTROY - 删除消费者组</li>
<li>XPENDING - 显示待处理消息的相关信息</li>
<li>XCLAIM - 转移消息的归属权</li>
<li>XINFO - 查看流和消费者组的相关信息；</li>
<li>XINFO GROUPS - 打印消费者组的信息；</li>
<li>XINFO STREAM - 打印流信息</li>
</ul>
</li>
<li><strong>创建消费组</strong></li>
</ul>
<p>Stream通过xgroup create指令创建消费组(Consumer Group)，需要传递起始消息ID参数用来初始化last_delivered_id变量。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> create</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> 0-0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  #  表示从头开始消费</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># $表示从尾部开始消费，只接受新消息，当前Stream消息会全部忽略</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> create</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> $</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> stream</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 获取Stream信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) length</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 3  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 共3个消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) radix-tree-keys</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) radix-tree-nodes</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) groups</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 2  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 两个消费组</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) first-entry  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 第一个消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1527851486781-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"laoqian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"30"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) last-entry  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 最后一个消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1527851498956-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoqian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> groups</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 获取Stream的消费组信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"cg1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) consumers</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 该消费组还没有消费者</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 该消费组没有正在处理的消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"cg2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) consumers  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 该消费组还没有消费者</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 该消费组没有正在处理的消息</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>消费组消费</strong></li>
</ul>
<p>Stream提供了xreadgroup指令可以进行消费组的组内消费，需要提供消费组名称、消费者名称和起始消息ID。它同xread一样，也可以阻塞等待新消息。读到新消息后，对应的消息ID就会进入消费者的PEL(正在处理的消息)结构里，客户端处理完毕后使用xack指令通知服务器，本条消息已经处理完毕，该消息ID就会从PEL中移除。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># &gt;号表示从当前消费组的last_delivered_id后面开始读</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 每当消费者读取一条消息，last_delivered_id变量就会前进</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527851486781-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"laoqian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"30"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527851493405-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"yurui"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"29"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527851498956-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"xiaoqian"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1527852774092-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"youming"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"60"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 再继续读取，就没有新消息了</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 那就阻塞等待吧</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> block</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 开启另一个窗口，往里塞消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xadd</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> name</span><span style="color:#98C379;--shiki-dark:#98C379"> lanying</span><span style="color:#98C379;--shiki-dark:#98C379"> age</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 61</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1527854062442-0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 回到前一个窗口，发现阻塞解除，收到新消息了</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xreadgroup</span><span style="color:#98C379;--shiki-dark:#98C379"> GROUP</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> block</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#98C379;--shiki-dark:#98C379"> count</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> streams</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &gt;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"codehole"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) 1527854062442-0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">         2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"lanying"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"age"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"61"</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">36.54s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> groups</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 观察消费组信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"cg1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) consumers</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 一个消费者</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 共5条正在处理的信息还有没有ack</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"cg2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) consumers</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 消费组cg2没有任何变化，因为前面我们一直在操纵cg1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果同一个消费组有多个消费者，我们可以通过xinfo consumers指令观察每个消费者的状态</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> consumers</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 目前还有1个消费者</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 共5条待处理消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) idle</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 418715  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 空闲了多长时间ms没有读取消息了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 接下来我们ack一条消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xack</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> 1527851486781-0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> consumers</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 4  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 变成了5条</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) idle</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 668504</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 下面ack所有消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xack</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span><span style="color:#98C379;--shiki-dark:#98C379"> 1527851493405-0</span><span style="color:#98C379;--shiki-dark:#98C379"> 1527851498956-0</span><span style="color:#98C379;--shiki-dark:#98C379"> 1527852774092-0</span><span style="color:#98C379;--shiki-dark:#98C379"> 1527854062442-0</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> consumers</span><span style="color:#98C379;--shiki-dark:#98C379"> codehole</span><span style="color:#98C379;--shiki-dark:#98C379"> cg1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) name</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) pending</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 0  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># pel空了</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) idle</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 745505</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.5 信息监控</h3>
<p>Stream提供了XINFO来实现对服务器信息的监控，可以查询：</p>
<ul>
<li>查看队列信息</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> stream</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"length"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 7</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"radix-tree-keys"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"radix-tree-nodes"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"groups"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF"> 9</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"last-generated-id"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-9"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">11</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"first-entry"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-3"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"msg"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"4"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"last-entry"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">14</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-9"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"msg"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">       2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"10"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>消费组信息</li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">Xinfo</span><span style="color:#98C379;--shiki-dark:#98C379"> groups</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"mqGroup"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumers"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pending"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"last-delivered-id"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-4"</span></span></code></pre>
</div><ul>
<li>消费者组成员信息</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XINFO</span><span style="color:#98C379;--shiki-dark:#98C379"> CONSUMERS</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pending"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"idle"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 18949894</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerB"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pending"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"idle"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 3092719</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"name"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerC"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pending"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"idle"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 23683256</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，消息队列的操作说明大体结束！</p>
<h2>3. 更深入理解</h2>
<blockquote>
<p>我们结合MQ中常见问题，看Redis是如何解决的，来进一步理解Redis。</p>
</blockquote>
<h3>3.1 Stream用在什么样场景</h3>
<p>可用作时通信等，大数据分析，异地数据备份等</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013302.png" alt="image-20220623203113285" tabindex="0" loading="lazy"><figcaption>image-20220623203113285</figcaption></figure>
<p>客户端可以平滑扩展，提高处理能力</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013334.png" alt="image-20220623203132557" tabindex="0" loading="lazy"><figcaption>image-20220623203132557</figcaption></figure>
<h3>3.2 消息ID的设计是否考虑了时间回拨的问题？</h3>
<blockquote>
<p>在 <a href="">分布式算法 - ID算法</a>设计中, 一个常见的问题就是时间回拨问题，那么Redis的消息ID设计中是否考虑到这个问题呢？</p>
</blockquote>
<p>XADD生成的1553439850328-0，就是Redis生成的消息ID，由两部分组成:<strong>时间戳-序号</strong>。时间戳是毫秒级单位，是生成消息的Redis服务器时间，它是个64位整型（int64）。序号是在这个毫秒时间点内的消息序号，它也是个64位整型。</p>
<p>可以通过multi批处理，来验证序号的递增：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XADD</span><span style="color:#98C379;--shiki-dark:#98C379"> memberMessage</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> msg</span><span style="color:#98C379;--shiki-dark:#98C379"> one</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XADD</span><span style="color:#98C379;--shiki-dark:#98C379"> memberMessage</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> msg</span><span style="color:#98C379;--shiki-dark:#98C379"> two</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XADD</span><span style="color:#98C379;--shiki-dark:#98C379"> memberMessage</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> msg</span><span style="color:#98C379;--shiki-dark:#98C379"> three</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XADD</span><span style="color:#98C379;--shiki-dark:#98C379"> memberMessage</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> msg</span><span style="color:#98C379;--shiki-dark:#98C379"> four</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XADD</span><span style="color:#98C379;--shiki-dark:#98C379"> memberMessage</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> *</span><span style="color:#98C379;--shiki-dark:#98C379"> msg</span><span style="color:#98C379;--shiki-dark:#98C379"> five</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">EXEC</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553441006884-0"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553441006884-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553441006884-2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553441006884-3"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553441006884-4"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于一个redis命令的执行很快，所以可以看到在同一时间戳内，是通过序号递增来表示消息的。</p>
<p>为了保证消息是有序的，因此Redis生成的ID是单调递增有序的。由于ID中包含时间戳部分，为了避免服务器时间错误而带来的问题（例如服务器时间延后了），Redis的每个Stream类型数据都维护一个latest_generated_id属性，用于记录最后一个消息的ID。<strong>若发现当前时间戳退后（小于latest_generated_id所记录的），则采用时间戳不变而序号递增的方案来作为新消息ID</strong>（这也是序号为什么使用int64的原因，保证有足够多的的序号），从而保证ID的单调递增性质。</p>
<p>强烈建议使用Redis的方案生成消息ID，因为这种时间戳+序号的单调递增的ID方案，几乎可以满足你全部的需求。但同时，记住ID是支持自定义的，别忘了！</p>
<h3>3.3 消费者崩溃带来的会不会消息丢失问题?</h3>
<p>为了解决组内消息读取但处理期间消费者崩溃带来的消息丢失问题，STREAM 设计了 Pending 列表，用于记录读取但并未处理完毕的消息。命令XPENDIING 用来获消费组或消费内消费者的未处理完毕的消息。演示如下：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # mpGroup的Pending情况</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 5个已读取但未处理的消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-0"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 起始ID</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-4"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 结束ID</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消费者A有3个</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"3"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerB"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消费者B有1个</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerC"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消费者C有1个</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 使用 start end count 选项可以获取详细信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-0"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消息ID</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消费者</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1654355 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从读取到现在经历了1654355ms，IDLE</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 消息被读取了5次，delivery counter</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1654355</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 共5个，余下3个省略 ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#98C379;--shiki-dark:#98C379"> consumerA</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 在加上消费者参数，获取具体某个消费者的Pending列表</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-0"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1641083</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 共3个，余下2个省略 ...</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个Pending的消息有4个属性：</p>
<ul>
<li>消息ID</li>
<li>所属消费者</li>
<li>IDLE，已读取时长</li>
<li>delivery counter，消息被读取次数</li>
</ul>
<p>上面的结果我们可以看到，我们之前读取的消息，都被记录在Pending列表中，说明全部读到的消息都没有处理，仅仅是读取了。那如何表示消费者处理完毕了消息呢？使用命令 XACK 完成告知消息处理完成，演示如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XACK</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> 1553585533795-0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 通知消息处理结束，用消息ID标识</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 再次查看Pending列表</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 4 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 已读取但未处理的消息已经变为4个</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-4"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 消费者A，还有2个消息处理</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerB"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerC"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
</div><p>有了这样一个Pending机制，就意味着在某个消费者读取消息但未处理后，消息是不会丢失的。等待消费者再次上线后，可以读取该Pending列表，就可以继续处理该消息了，保证消息的有序和不丢失。</p>
<h3>3.4 消费者彻底宕机后如何转移给其它消费者处理？</h3>
<blockquote>
<p>还有一个问题，就是若某个消费者宕机之后，没有办法再上线了，那么就需要将该消费者Pending的消息，转义给其他的消费者处理，就是消息转移。</p>
</blockquote>
<p>消息转移的操作时将某个消息转移到自己的Pending列表中。使用语法XCLAIM来实现，需要设置组、转移的目标消费者和消息ID，同时需要提供IDLE（已被读取时长），只有超过这个时长，才能被转移。演示如下：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当前属于消费者A的消息1553585533795-1，已经15907,787ms未处理了</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerA"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 15907787</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 转移超过3600s的消息1553585533795-1到消费者B的Pending列表</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XCLAIM</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> consumerB</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3600000</span><span style="color:#98C379;--shiki-dark:#98C379"> 1553585533795-1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"msg"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"2"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 消息1553585533795-1已经转移到消费者B的Pending中。</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XPENDING</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"consumerB"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 84404 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 注意IDLE，被重置了</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5 </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 注意，读取次数也累加了1次</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，完成了一次消息转移。转移除了要指定ID外，还需要指定IDLE，保证是长时间未处理的才被转移。被转移的消息的IDLE会被重置，用以保证不会被重复转移，以为可能会出现将过期的消息同时转移给多个消费者的并发操作，设置了IDLE，则可以避免后面的转移不会成功，因为IDLE不满足条件。例如下面的连续两条转移，第二条不会成功。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XCLAIM</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> consumerB</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3600000</span><span style="color:#98C379;--shiki-dark:#98C379"> 1553585533795-1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XCLAIM</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> mqGroup</span><span style="color:#98C379;--shiki-dark:#98C379"> consumerC</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3600000</span><span style="color:#98C379;--shiki-dark:#98C379"> 1553585533795-1</span></span></code></pre>
</div><p>这就是消息转移。至此我们使用了一个Pending消息的ID，所属消费者和IDLE的属性，还有一个属性就是消息被读取次数，delivery counter，该属性的作用由于统计消息被读取的次数，包括被转移也算。这个属性主要用在判定是否为错误数据上。</p>
<h3>3.5 坏消息问题，Dead Letter，死信问题</h3>
<p>正如上面所说，如果某个消息，不能被消费者处理，也就是不能被XACK，这是要长时间处于Pending列表中，即使被反复的转移给各个消费者也是如此。此时该消息的delivery counter就会累加（上一节的例子可以看到），当累加到某个我们预设的临界值时，我们就认为是坏消息（也叫死信，DeadLetter，无法投递的消息），由于有了判定条件，我们将坏消息处理掉即可，删除即可。删除一个消息，使用XDEL语法，演示如下：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 删除队列中的消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XDEL</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> 1553585533795-1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看队列中再无此消息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">XRANGE</span><span style="color:#98C379;--shiki-dark:#98C379"> mq</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-0"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"msg"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"1553585533795-2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"msg"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"3"</span></span></code></pre>
</div><p>注意本例中，并没有删除Pending中的消息因此你查看Pending，消息还会在。可以执行XACK标识其处理完毕！</p>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-data-type-stream.html" target="_blank" rel="noopener noreferrer"><strong>Redis入门 - 数据类型：Stream详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/MrJackC/PicGoImages/main/other/202405132144209.png" type="image/png"/>
    </item>
    <item>
      <title>Redis入门 - 数据类型：5种基础数据类型详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-data-types.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-data-types.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis入门 - 数据类型：5种基础数据类型详解</source>
      <description>Redis入门 - 数据类型：5种基础数据类型详解 1. Redis数据结构简介 首先对redis来说，所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：String、List、Set、Zset、Hash。 image-20220622210134108image-20220622210...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Redis数据结构简介</h2>
<p>首先对redis来说，所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：String、List、Set、Zset、Hash。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013259.png" alt="image-20220622210134108" tabindex="0" loading="lazy"><figcaption>image-20220622210134108</figcaption></figure>
<p>| 结构类型         | 结构存储的值                               | 结构的读写能力                                               |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013259.png" type="image/png"/>
    </item>
    <item>
      <title>Redis集群：hash寻址算法</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-hash.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-hash.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis集群：hash寻址算法</source>
      <description>Redis集群：hash寻址算法 1. 普通hash 普通hash也就是最简单的hash算法，即 index表示机器的索引，N表示机器的数量，假设有三台机器，即N=3，那么普通hash结果如下图，很简单是吧 image-20220701202555551.pngimage-20220701202555551.png 那如果现在增加了一台机器呢？ ima...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 普通hash</h2>
<p>普通hash也就是最简单的hash算法，即</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>index = hash(key) % N</span></span></code></pre>
</div><p>index表示机器的索引，N表示机器的数量，假设有三台机器，即N=3，那么普通hash结果如下图，很简单是吧</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181100114.png" alt="image-20220701202555551.png" tabindex="0" loading="lazy"><figcaption>image-20220701202555551.png</figcaption></figure>
<p>那如果现在增加了一台机器呢？</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013529.png" alt="image-20220701202611289" tabindex="0" loading="lazy"><figcaption>image-20220701202611289</figcaption></figure>
<p>情况似乎变得复杂起来，因为新增加了一个节点4，即N=4，那么所有key取模的结果都变了，导致所有的数据都要重新迁移一遍，如果节点4下线了呢？那么毫无疑问所有数据都要还原回去，就redis而言，这就叫大量缓存的重建，那么有没有新增/删除节点影响不那么大的hash算法呢？答案肯定是有，下面轮到一致性hash出场。</p>
<h2>2. 一致性hash</h2>
<blockquote>
<p>一致哈希由MIT的Karger及其合作者提出，现在这一思想已经扩展到其它领域。在这篇1997年发表的学术论文中介绍了“一致哈希”如何应用于用户易变的分布式Web服务中。哈希表中的每一个代表分布式系统中一个节点，在系统添加或删除节点只需要移动K/n （方法K是总key的个数，n是节点个数）</p>
</blockquote>
<p>一致性hash的特性</p>
<ul>
<li><strong>平衡性</strong>：尽可能让数据尽可能分散到所有节点上，避免造成极其不均匀</li>
<li><strong>单调性</strong>：要求在新增或者减少节点的时候，原有的结果绝大部分不受影响，而新增的数据尽可能分配到新加的节点</li>
<li><strong>分散性</strong>：好的算法在不同终端，针对相同的数据的计算，得到的结果应该是一样的，一致性要很强</li>
<li><strong>负载</strong>：针对相同的节点，避免被不同终端映射不同的内容</li>
<li><strong>平滑性</strong>：对于增加节点或者减少节点，应该能够平滑过渡</li>
</ul>
<h3>2.1 hash环</h3>
<p>普通hash算法导致大量数据迁移的根本原因是N的不确定性，有没有在N变化的时候影响范围更小的算法呢？有人提出了<strong>环</strong>的概念</p>
<blockquote>
<p>一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得DHT可以在P2P环境中真正得到应用</p>
</blockquote>
<p>hash环通过构建环状的hash空间代替线性hash空间的方法解决了上面的问题，假设将0~2^32-1的hash空间分布到一个环上</p>
<ul>
<li>节点加入环：将节点通过hash(节点的信息如ip端口等) % 2^32-1取节点在环上位置</li>
<li>数据读写：读写数据时同样取key的hash，即hash(key) % 2^32-1落到环上的某一位置，再<strong>顺时针</strong>找到离环最近的那个节点进行读写</li>
</ul>
<p>整个过程如下图</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181059472.png" alt="image-20220701202831442" tabindex="0" loading="lazy"><figcaption>image-20220701202831442</figcaption></figure>
<p>假设现在新增一个节点4，只会影响到节点2到节点4之间的数据，其他的数据不会被影响到，这也是<strong>一致性</strong>的体现</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181059523.png" alt="image-20220701202903831" tabindex="0" loading="lazy"><figcaption>image-20220701202903831</figcaption></figure>
<p>删除一个节点也是同样的道理，假设删除节点4，也只是会影响到节点2到原节点4之间的数据，总之不管新增还是删除线路都只会影响到变动节点到变动节点逆时针找到的最近一个节点的数据。</p>
<p>当然hash环也不是没有问题的，假设节点分布不均匀（hash算法并不能保证绝对的平衡性），那么大部分数据都会落在一个节点上，导致请求和数据倾斜，这样就不能很好的保证负载均衡。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181059563.png" alt="image-20220701202933471" tabindex="0" loading="lazy"><figcaption>image-20220701202933471</figcaption></figure>
<p>那么解决办法就是增加虚拟节点（注意，此时环上<strong>全部都是虚拟节点</strong>），对每一个节点计算多个hash，尽量保证环上的节点是均匀的，如下图</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181059609.png" alt="image-20220701203001093" tabindex="0" loading="lazy"><figcaption>image-20220701203001093</figcaption></figure>
<h2>3. hash槽</h2>
<p>redis默认分配16384个hash槽位，然后将槽位均匀分配到不同的redis实例中去，找数据的时候通过CRC16算法计算后再取模找到对应的槽位（CRC16我们应该不陌生，这个winrar里面使用的CRC32是一样的，只是校验长度不一样而已），算法如下</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>CRC16(key) % 16384</span></span></code></pre>
</div><p>再看槽位在哪台实例上，最后去实例上取数据，如下图所示</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013574.png" alt="image-20220701203055236" tabindex="0" loading="lazy"><figcaption>image-20220701203055236</figcaption></figure>
<p>如果该槽位不在请求的实例上呢？此时该实例会返回重定向指令：MOVED 槽位 目标实例，能这么做的基础是每一台redis实例上都有全量的hash槽的映射表，如下图所示为重定向的例子</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013616.png" alt="image-20220701203120231" tabindex="0" loading="lazy"><figcaption>image-20220701203120231</figcaption></figure>
<p>使用槽位将具体的数据与redis实例解耦，当新增或者减少redis实例的时候用redis cluster总线通过Ping/Pong报文进行广播，告知整个redis集群新节点上线/下线，并迁移槽位和更新集群中的槽位映射表，整个过程尽量保证hash槽的平均分布</p>
<h3>3.1 那么是基于什么样的考虑，redis的作者没有用hash环呢？</h3>
<ul>
<li>redis的作者认为他的CRC16(key) mod 16384的效果已经不错了，虽然没有一致性hash灵活，但实现很简单，节点增删时处理起来也很方便</li>
<li>当然还有个原因是hash槽的分布更加均匀，如果有N个节点，那么每个节点都负载1/N，</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://www.modb.pro/db/64646" target="_blank" rel="noopener noreferrer">Redis Cluster集群原理+实战</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202410181100114.png" type="image/png"/>
    </item>
    <item>
      <title>Redis入门 - Redis概念和基础</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-introduce.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-introduce.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis入门 - Redis概念和基础</source>
      <description>Redis入门 - Redis概念和基础 1. 什么是redis Redis是一款内存高速缓存数据库。Redis全称为：Remote Dictionary Server（远程数据(字典)服务），使用C语言编写，Redis是一个key-value存储系统（键值存储系统），支持丰富的数据类型，如：String、list、set、zset、hash。 Red...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 什么是redis</h2>
<p>Redis是一款内存高速缓存数据库。Redis全称为：<strong>Remote Dictionary Server</strong>（远程数据(字典)服务），使用C语言编写，Redis是一个key-value存储系统（键值存储系统），支持丰富的数据类型，如：String、list、set、zset、hash。</p>
<p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p>
<h2>2. 为什么要使用Redis</h2>
<blockquote>
<p>一个产品的使用场景肯定是需要根据产品的特性，先列举一下Redis的特点：</p>
</blockquote>
<ul>
<li>读写性能优异
<ul>
<li>Redis能读的速度是110000次/s,写的速度是81000次/s （测试条件见下一节）。</li>
</ul>
</li>
<li>数据类型丰富
<ul>
<li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
</ul>
</li>
<li>原子性
<ul>
<li>Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li>
</ul>
</li>
<li>丰富的特性
<ul>
<li>Redis支持 publish/subscribe, 通知, key 过期等特性。</li>
</ul>
</li>
<li>持久化
<ul>
<li>Redis支持RDB, AOF等持久化方式</li>
</ul>
</li>
<li>发布订阅
<ul>
<li>Redis支持发布/订阅模式</li>
</ul>
</li>
<li>分布式
<ul>
<li>Redis Cluster</li>
</ul>
</li>
</ul>
<h2>3. Redis的使用场景</h2>
<blockquote>
<p>redis应用场景总结redis平时我们用到的地方蛮多的，下面就了解的应用场景做个总结：</p>
</blockquote>
<h3>3.1 热点数据的缓存</h3>
<p>缓存是Redis最常见的应用场景，之所有这么使用，主要是因为Redis读写性能优异。而且逐渐有取代memcached，成为首选服务端缓存的组件。而且，Redis内部是支持事务的，在使用时候能有效保证数据的一致性。</p>
<p>作为缓存使用时，一般有两种方式保存数据：</p>
<h4>3.1.1 写入数据时机--方案一：</h4>
<p><strong>读取前，先去读Redis，如果没有数据，读取数据库，将数据拉入Redis。</strong></p>
<p>实施起来简单，但是有两个需要注意的地方：</p>
<ul>
<li>避免缓存击穿。（数据库没有就需要命中的数据，导致Redis一直没有数据，而一直命中数据库。）</li>
<li>数据的实时性相对会差一点。</li>
</ul>
<h4>3.1.2 写入数据时机--方案二：</h4>
<p><strong>插入数据时，同时写入Redis。</strong></p>
<p>数据实时性强，但是开发时不便于统一处理。</p>
<h4>3.1.3 两种写入方案如何选择</h4>
<p>当然，两种方式根据实际情况来适用。如：</p>
<ul>
<li>方案一适用于对于数据实时性要求不是特别高的场景。</li>
<li>方案二适用于字典表、数据量不大的数据存储。</li>
</ul>
<blockquote>
<p>在项目中一般两种插入时机都用，增删改完成后都写入缓存。</p>
<p>查的时候无数据，查完数据库后还要再写入缓存</p>
</blockquote>
<h3>3.2 限时业务的运用</h3>
<p>redis中可以使用expire命令设置一个键的生存时间，到时间后redis会删除它。利用这一特性可以运用在限时的优惠活动信息、手机验证码，登录token 过期时间等业务场景。</p>
<blockquote>
<p>在若依中主要应用于</p>
<ul>
<li>登录的token过期</li>
<li>图片验证码</li>
<li>限流算法也有用到</li>
</ul>
</blockquote>
<h3>3.3 计数器相关问题</h3>
<p>redis由于incrby命令可以实现原子性的递增，所以可以运用于高并发的秒杀活动、分布式序列号的生成、具体业务还体现在比如限制一个手机号发多少条短信、一个接口一分钟限制多少请求、一个接口一天限制调用多少次等等。</p>
<blockquote>
<p>若依中</p>
<ul>
<li>限流：使用reids lua 脚本递增访问次数</li>
</ul>
<p>自己项目中</p>
<ul>
<li>分布式序列号生成/ 商城订单id</li>
</ul>
</blockquote>
<h3>3.4 分布式锁</h3>
<p>这个主要利用redis的setnx命令进行，setnx："set if not exists"就是如果不存在则成功设置缓存同时返回1，否则返回0 ，这个特性在很多后台中都有所运用，因为我们服务器是集群的，定时任务可能在两台机器上都会运行，所以在定时任务中首先 通过setnx设置一个lock， 如果成功设置则执行，如果没有成功设置，则表明该定时任务已执行。 当然结合具体业务，我们可以给这个lock加一个过期时间，比如说30分钟执行一次的定时任务，那么这个过期时间设置为小于30分钟的一个时间就可以，这个与定时任务的周期以及定时任务执行消耗时间相关。</p>
<p>在分布式锁的场景中，主要用在比如秒杀系统等。</p>
<blockquote>
<p>若依中本身对分布式支持是比较差的，并没有分布式锁的应用</p>
<p>实际自己项目中</p>
<ul>
<li>多人同时处理同一个工作流节点问题</li>
<li>定时任务重复执行问题等</li>
</ul>
</blockquote>
<h3>3.5 延时操作</h3>
<p>比如在订单生产后我们占用了库存，10分钟后去检验用户是否真正购买，如果没有购买将该单据设置无效，同时还原库存。 由于redis自2.8.0之后版本提供Keyspace Notifications功能，允许客户订阅Pub/Sub频道，以便以某种方式接收影响Redis数据集的事件。 所以我们对于上面的需求就可以用以下解决方案，我们在订单生产时，设置一个key，同时设置10分钟后过期， 我们在后台实现一个监听器，监听key的实效，监听到key失效时将后续逻辑加上。</p>
<p>当然我们也可以利用rabbitmq、activemq等消息中间件的延迟队列服务实现该需求。</p>
<blockquote>
<p>在项目中很少使用</p>
</blockquote>
<h3>3.6 排行榜相关问题</h3>
<p>关系型数据库在排行榜方面查询速度普遍偏慢，所以可以借助redis的SortedSet进行热点数据的排序。</p>
<p>比如点赞排行榜，做一个SortedSet, 然后以用户的openid作为上面的username, 以用户的点赞数作为上面的score, 然后针对每个用户做一个hash, 通过zrangebyscore就可以按照点赞数获取排行榜，然后再根据username获取用户的hash信息，这个当时在实际运用中性能体验也蛮不错的。</p>
<blockquote>
<p>没在项目中使用过，可以尝试</p>
</blockquote>
<h3>3.7 点赞、好友等相互关系的存储</h3>
<p>Redis 利用集合的一些命令，比如求交集、并集、差集等。</p>
<p>在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。</p>
<blockquote>
<p>没在项目中使用过，可以尝试</p>
</blockquote>
<h3>3.8 简单队列</h3>
<p>由于Redis有list push和list pop这样的命令，所以能够很方便的执行队列操作。</p>
<blockquote>
<p>在redis客户端redisson中，已经实现各种集合和分布式队列</p>
</blockquote>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-introduce.html" target="_blank" rel="noopener noreferrer"><strong>Redis入门 - Redis概念和基础</strong></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Redis进阶 -  Redis缓存问题：一致性, 穿击, 穿透, 雪崩, 污染等</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-cache.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-cache.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 -  Redis缓存问题：一致性, 穿击, 穿透, 雪崩, 污染等</source>
      <description>Redis进阶 - Redis缓存问题：一致性, 穿击, 穿透, 雪崩, 污染等 Redis最常用的一个场景就是作为缓存，本文主要探讨Redis作为缓存，在实践中可能会有哪些问题？比如一致性, 穿击, 穿透, 雪崩, 污染等。 1. 为什么要理解Redis缓存问题 在高并发的业务场景下，数据库大多数情况都是用户并发访问最薄弱的环节。所以，就需要使用re...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis最常用的一个场景就是作为缓存，本文主要探讨Redis作为缓存，在实践中可能会有哪些问题？比如一致性, 穿击, 穿透, 雪崩, 污染等。</p>
</blockquote>
<h2>1. 为什么要理解Redis缓存问题</h2>
<p>在高并发的业务场景下，数据库大多数情况都是用户并发访问最薄弱的环节。所以，就需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问Mysql等数据库。这样可以大大缓解数据库的压力。</p>
<p>当缓存库出现时，必须要考虑如下问题：</p>
<ul>
<li>缓存穿透</li>
<li>缓存穿击</li>
<li>缓存雪崩</li>
<li>缓存污染（或者满了）</li>
<li>缓存和数据库一致性</li>
</ul>
<h2>2. 缓存穿透</h2>
<ul>
<li><strong>问题来源</strong></li>
</ul>
<p>缓存穿透是指<strong>缓存和数据库中都没有的数据</strong>，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>
<p>在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>
<p>如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p>
<ul>
<li><strong>解决方案</strong></li>
</ul>
<ol>
<li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</li>
<li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li>
<li>布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，</li>
</ol>
<h2>3. 缓存击穿</h2>
<ul>
<li><strong>问题来源</strong></li>
</ul>
<p>缓存击穿是指<strong>缓存中没有但数据库中有的数据</strong>（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p>
<ul>
<li><strong>解决方案</strong></li>
</ul>
<p>1、设置热点数据永远不过期。</p>
<p>2、接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些 服务 不可用时候，进行熔断，失败快速返回机制。</p>
<p>3、加互斥锁</p>
<h2>4. 缓存雪崩</h2>
<ul>
<li><strong>问题来源</strong></li>
</ul>
<p>缓存雪崩是指缓存中<strong>数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机</strong>。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p>
<ul>
<li><strong>解决方案</strong></li>
</ul>
<ol>
<li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li>
<li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li>
<li>设置热点数据永远不过期。</li>
</ol>
<h2>5. 缓存污染（或满了）</h2>
<p>缓存污染问题说的是缓存中一些只会被访问一次或者几次的的数据，被访问完后，再也不会被访问到，但这部分数据依然留存在缓存中，消耗缓存空间。</p>
<p>缓存污染会随着数据的持续增加而逐渐显露，随着服务的不断运行，缓存中会存在大量的永远不会再次被访问的数据。缓存空间是有限的，如果缓存空间满了，再往缓存里写数据时就会有额外开销，影响Redis性能。这部分额外开销主要是指写的时候判断淘汰策略，根据淘汰策略去选择要淘汰的数据，然后进行删除操作。</p>
<h3>5.1 最大缓存设置多大</h3>
<p>系统的设计选择是一个权衡的过程：大容量缓存是能带来性能加速的收益，但是成本也会更高，而小容量缓存不一定就起不到加速访问的效果。一般来说，<strong>我会建议把缓存容量设置为总数据量的 15% 到 30%，兼顾访问性能和内存空间开销</strong>。</p>
<p>对于 Redis 来说，一旦确定了缓存最大容量，比如 4GB，你就可以使用下面这个命令来设定缓存的大小了：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">CONFIG</span><span style="color:#98C379;--shiki-dark:#98C379"> SET</span><span style="color:#98C379;--shiki-dark:#98C379"> maxmemory</span><span style="color:#98C379;--shiki-dark:#98C379"> 4gb</span></span></code></pre>
</div><p>不过，缓存被写满是不可避免的, 所以需要数据淘汰策略</p>
<h3>5.2 缓存淘汰策略</h3>
<p>Redis共支持八种淘汰策略，分别是noeviction、volatile-random、volatile-ttl、volatile-lru、volatile-lfu、allkeys-lru、allkeys-random 和 allkeys-lfu 策略。</p>
<p><strong>怎么理解呢</strong>？主要看分三类看：</p>
<ul>
<li>不淘汰
<ul>
<li>noeviction （v4.0后默认的）</li>
</ul>
</li>
<li>对设置了过期时间的数据中进行淘汰
<ul>
<li>随机：volatile-random</li>
<li>ttl：volatile-ttl</li>
<li>lru：volatile-lru</li>
<li>lfu：volatile-lfu</li>
</ul>
</li>
<li>全部数据进行淘汰
<ul>
<li>随机：allkeys-random</li>
<li>lru：allkeys-lru</li>
<li>lfu：allkeys-lfu</li>
</ul>
</li>
</ul>
<blockquote>
<p>具体对照下：</p>
</blockquote>
<ol>
<li>
<p><strong>noeviction</strong></p>
<p>该策略是Redis的默认策略。在这种策略下，一旦缓存被写满了，再有写请求来时，Redis 不再提供服务，而是直接返回错误。这种策略不会淘汰数据，所以无法解决缓存污染问题。一般生产环境不建议使用。</p>
<p>其他七种规则都会根据自己相应的规则来选择数据进行删除操作。</p>
</li>
<li>
<p><strong>volatile-random</strong></p>
<p>这个算法比较简单，在设置了过期时间的键值对中，进行随机删除。因为是随机删除，无法把不再访问的数据筛选出来，所以可能依然会存在缓存污染现象，无法解决缓存污染问题。</p>
</li>
<li>
<p><strong>volatile-ttl</strong></p>
<p>这种算法判断淘汰数据时参考的指标比随机删除时多进行一步过期时间的排序。Redis在筛选需删除的数据时，越早过期的数据越优先被选择。</p>
</li>
<li>
<p><strong>volatile-lru</strong></p>
<p>LRU算法：LRU 算法的全称是 Least Recently Used，按照最近最少使用的原则来筛选数据。这种模式下会使用 LRU 算法筛选设置了过期时间的键值对。</p>
<p>Redis优化的<strong>LRU算法实现</strong>：</p>
<p>Redis会记录每个数据的最近一次被访问的时间戳。在Redis在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。通过随机读取待删除集合，可以让Redis不用维护一个巨大的链表，也不用操作链表，进而提升性能。</p>
<p>Redis 选出的数据个数 N，通过 配置参数 maxmemory-samples 进行配置。个数N越大，则候选集合越大，选择到的最久未被使用的就更准确，N越小，选择到最久未被使用的数据的概率也会随之减小。</p>
</li>
<li>
<p><strong>volatile-lfu</strong></p>
<p>会使用 LFU 算法选择设置了过期时间的键值对。</p>
<p><strong>LFU 算法</strong>：LFU 缓存策略是在 LRU 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。当使用 LFU 策略筛选淘汰数据时，首先会根据数据的访问次数进行筛选，把访问次数最低的数据淘汰出缓存。如果两个数据的访问次数相同，LFU 策略再比较这两个数据的访问时效性，把距离上一次访问时间更久的数据淘汰出缓存。 Redis的LFU算法实现:</p>
<p>当 LFU 策略筛选数据时，Redis 会在候选集合中，根据数据 lru 字段的后 8bit 选择访问次数最少的数据进行淘汰。当访问次数相同时，再根据 lru 字段的前 16bit 值大小，选择访问时间最久远的数据进行淘汰。</p>
<p>Redis 只使用了 8bit 记录数据的访问次数，而 8bit 记录的最大值是 255，这样在访问快速的情况下，如果每次被访问就将访问次数加一，很快某条数据就达到最大值255，可能很多数据都是255，那么退化成LRU算法了。所以Redis为了解决这个问题，实现了一个更优的计数规则，并可以通过配置项，来控制计数器增加的速度。</p>
<p><strong>参数</strong> ：</p>
<ul>
<li>
<p><code>lfu-log-factor</code> ，用计数器当前的值乘以配置项 lfu_log_factor 再加 1，再取其倒数，得到一个 p 值；然后，把这个 p 值和一个取值范围在（0，1）间的随机数 r 值比大小，只有 p 值大于 r 值时，计数器才加 1。</p>
</li>
<li>
<p><code>lfu-decay-time</code>， 控制访问次数衰减。LFU 策略会计算当前时间和数据最近一次访问时间的差值，并把这个差值换算成以分钟为单位。然后，LFU 策略再把这个差值除以 lfu_decay_time 值，所得的结果就是数据 counter 要衰减的值。</p>
</li>
<li>
<p><code>lfu-log-factor</code>设置越大，递增概率越低，lfu-decay-time设置越大，衰减速度会越慢。</p>
<p>我们在应用 LFU 策略时，一般可以将 lfu_log_factor 取值为 10。 如果业务应用中有短时高频访问的数据的话，建议把 lfu_decay_time 值设置为 1。可以快速衰减访问次数。</p>
</li>
</ul>
<blockquote>
<p>volatile-lfu 策略是 Redis 4.0 后新增。</p>
</blockquote>
</li>
<li>
<p><strong>allkeys-lru</strong></p>
<p>使用 LRU 算法在所有数据中进行筛选。具体LFU算法跟上述 volatile-lru 中介绍的一致，只是筛选的数据范围是全部缓存，这里就不在重复。</p>
</li>
<li>
<p><strong>allkeys-random</strong></p>
<p>从所有键值对中随机选择并删除数据。volatile-random 跟 allkeys-random算法一样，随机删除就无法解决缓存污染问题。</p>
</li>
<li>
<p><strong>allkeys-lfu</strong></p>
<p>使用 LFU 算法在所有数据中进行筛选。具体LFU算法跟上述 volatile-lfu 中介绍的一致，只是筛选的数据范围是全部缓存，这里就不在重复。</p>
<p>allkeys-lfu 策略是 Redis 4.0 后新增。</p>
</li>
</ol>
<h2>6. 数据库和缓存一致性</h2>
<ul>
<li><strong>问题来源</strong></li>
</ul>
<p>使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问MySQL等数据库：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013972.png" alt="image-20220627204654535" tabindex="0" loading="lazy"><figcaption>image-20220627204654535</figcaption></figure>
<p>读取缓存步骤一般没有什么问题，但是一旦涉及到数据更新：数据库和缓存更新，就容易出现缓存(Redis)和数据库（MySQL）间的数据一致性问题。</p>
<p><strong>不管是先写MySQL数据库，再删除Redis缓存；还是先删除缓存，再写库，都有可能出现数据不一致的情况</strong>。举一个例子：</p>
<ol>
<li>如果删除了缓存Redis，还没有来得及写库MySQL，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。</li>
<li>如果先写了库，在删除缓存前，写库的线程宕机了，没有删除掉缓存，则也会出现数据不一致情况。</li>
</ol>
<p>因为写和读是并发的，没法保证顺序,就会出现缓存和数据库的数据不一致的问题。</p>
<h3>6.1 四种相关模式</h3>
<blockquote>
<p>更新缓存的的Design Pattern有四种：Cache aside, Read through, Write through, Write behind caching; 我强烈建议你看看这篇，左耳朵耗子的文章：<a href="https://coolshell.cn/articles/17416.html" target="_blank" rel="noopener noreferrer">缓存更新的套路</a></p>
</blockquote>
<p><strong>节选最最常用的Cache Aside Pattern, 总结来说就是</strong></p>
<ul>
<li>
<p><strong>读的时候</strong>，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</p>
</li>
<li>
<p><strong>更新的时候</strong>，先更新数据库，<strong>然后再删除缓存</strong>。</p>
<blockquote>
<p>注意！！！这里<strong>是删除缓存！是删除缓存！是删除缓存！</strong>，我们项目中大部分是更新立马写入数据</p>
</blockquote>
</li>
</ul>
<p>其具体逻辑如下：</p>
<ul>
<li><strong>失效</strong>：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
<li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li>
<li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013019.png" alt="image-20220627205349486" tabindex="0" loading="lazy"><figcaption>image-20220627205349486</figcaption></figure>
<p>注意，我们的更新是先更新数据库，成功后，让缓存失效。那么，这种方式是否可以没有文章前面提到过的那个问题呢？我们可以脑补一下。</p>
<p>一个是查询操作，一个是更新操作的并发，首先，没有了删除cache数据的操作了，而是先更新了数据库中的数据，此时，缓存依然有效，所以，并发的查询操作拿的是没有更新的数据，但是，更新操作马上让缓存的失效了，后续的查询操作再把数据从数据库中拉出来。而<strong>不会像文章开头的那个逻辑产生的问题，后续的查询操作一直都在取老的数据</strong>。</p>
<p>这是标准的design pattern，包括Facebook的论文《<a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf" target="_blank" rel="noopener noreferrer">Scaling Memcache at Facebook  (opens new window)</a>》也使用了这个策略。为什么不是写完数据库后更新缓存？你可以看一下Quora上的这个问答《<a href="https://www.quora.com/Why-does-Facebook-use-delete-to-remove-the-key-value-pair-in-Memcached-instead-of-updating-the-Memcached-during-write-request-to-the-backend" target="_blank" rel="noopener noreferrer">Why does Facebook use delete to remove the key-value pair in Memcached instead of updating the Memcached during write request to the backend?  (opens new window)</a>》，主要是怕两个并发的写操作导致脏数据。</p>
<p>那么，是不是Cache Aside这个就不会有并发问题了？不是的，比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。</p>
<p>但，这个case理论上会出现，不过，实际上出现的概率可能非常低，因为这个条件需要发生在读缓存时缓存失效，而且并发着有一个写操作。而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。</p>
<p>所以，这也就是Quora上的那个答案里说的，要么通过2PC或是Paxos协议保证一致性，要么就是拼命的降低并发时脏数据的概率，<strong>而Facebook使用了这个降低概率的玩法，因为2PC太慢，而Paxos太复杂</strong>。当然，最好还是为缓存设置上过期时间。</p>
<h3>6.2 方案：队列 + 重试机制</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220627210026227.png" alt="image-20220627210026227" tabindex="0" loading="lazy"><figcaption>image-20220627210026227</figcaption></figure>
<p>流程如下所示</p>
<ul>
<li>更新数据库数据；</li>
<li>缓存因为种种问题删除失败</li>
<li>将需要删除的key发送至消息队列</li>
<li>自己消费消息，获得需要删除的key</li>
<li>继续重试删除操作，直到成功</li>
</ul>
<p>然而，该方案有一个缺点，对业务线代码造成大量的侵入。于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</p>
<h3>6.3 方案：异步更新缓存(基于订阅binlog的同步机制)</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013052.png" alt="image-20220627210130898" tabindex="0" loading="lazy"><figcaption>image-20220627210130898</figcaption></figure>
<ol>
<li><strong>技术整体思路</strong>：</li>
</ol>
<p>MySQL binlog增量订阅消费+消息队列+增量数据更新到redis</p>
<p>1）读Redis：热数据基本都在Redis</p>
<p>2）写MySQL: 增删改都是操作MySQL</p>
<p>3）更新Redis数据：MySQ的数据操作binlog，来更新到Redis</p>
<ol>
<li><strong>Redis更新</strong></li>
</ol>
<p>1）<strong>数据操作</strong>主要分为两大块：</p>
<ul>
<li>一个是全量(将全部数据一次写入到redis)</li>
<li>一个是增量（实时更新）</li>
</ul>
<p>这里说的是增量,指的是mysql的update、insert、delate变更数据。</p>
<p>2）<strong>读取binlog后分析 ，利用消息队列,推送更新各台的redis缓存数据</strong>。</p>
<p>这样一旦MySQL中产生了新的写入、更新、删除等操作，就可以把binlog相关的消息推送至Redis，Redis再根据binlog中的记录，对Redis进行更新。</p>
<p>其实这种机制，很类似MySQL的主从备份机制，因为MySQL的主备也是通过binlog来实现的数据一致性。</p>
<p>这里可以结合使用canal(阿里的一款开源框架)，通过该框架可以对MySQL的binlog进行订阅，而canal正是模仿了mysql的slave数据库的备份请求，使得Redis的数据更新达到了相同的效果。</p>
<p>当然，这里的消息推送工具你也可以采用别的第三方：kafka、rabbitMQ等来实现推送更新Redis。</p>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-cache.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 缓存问题：一致性, 穿击, 穿透, 雪崩, 污染等</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131013972.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 高可拓展：分片技术（Redis Cluster）详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-cluster.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-cluster.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 高可拓展：分片技术（Redis Cluster）详解</source>
      <description>Redis进阶 - 高可拓展：分片技术（Redis Cluster）详解 前面两篇文章，主从复制和哨兵机制保障了高可用，就读写分离而言虽然slave节点扩展了主从的读并发能力，但是写能力和存储能力是无法进行扩展，就只能是master节点能够承载的上限。如果面对海量数据那么必然需要构建master（主节点分片)之间的集群，同时必然需要吸收高可用（主从复制...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>前面两篇文章，<a href="">主从复制</a>和<a href="">哨兵机制</a>保障了高可用，就读写分离而言虽然slave节点扩展了主从的读并发能力，但是<strong>写能力</strong>和<strong>存储能力</strong>是无法进行扩展，就只能是master节点能够承载的上限。如果面对海量数据那么必然需要构建master（主节点分片)之间的集群，同时必然需要吸收高可用（主从复制和哨兵机制）能力，即每个master分片节点还需要有slave节点，这是分布式系统中典型的纵向扩展（集群的分片技术）的体现；所以在Redis 3.0版本中对应的设计就是Redis Cluster。</p>
</blockquote>
<h2>1. Redis 集群的设计目标</h2>
<blockquote>
<p>Redis-cluster是一种服务器Sharding技术，Redis3.0以后版本正式提供支持。Redis Cluster在设计时考虑了什么？我们不妨看下官网的介绍 <a href="https://redis.io/topics/cluster-spec#redis-cluster-goals" target="_blank" rel="noopener noreferrer">Redis Cluster Specification</a></p>
</blockquote>
<h3>1.1 Redis 集群设计目标</h3>
<p>高性能可线性扩展至最多1000节点。集群中没有代理，（集群节点间）使用异步复制，没有归并操作(merge operations on values)</p>
<p><strong>可接受的写入安全</strong>:系统尝试(采用best-effort方式)保留所有连接到master节点的client发起的写操作。通常会有一个小的时间窗，时间窗内的已确认写操作可能丢失(即，在发生failover之前的小段时间窗内的写操作可能在failover中丢失)。而在(网络)分区故障下，对少数派master的写入，发生写丢失的时间窗会很大。</p>
<p><strong>可用性</strong>：Redis Cluster在以下场景下集群总是可用：大部分master节点可用，并且对少部分不可用的master，每一个master至少有一个当前可用的slave。更进一步，通过使用 replicas migration 技术，当前没有slave的master会从当前拥有多个slave的master接受到一个新slave来确保可用性。</p>
<h3>1.2 Redis集群协议中的客户端和服务器角色</h3>
<p>Redis Cluster的节点负责维护数据，和获取集群状态，这包括将keys映射到正确的节点。集群节点同样可以自动发现其他节点、检测不工作节点、以及在发现故障发生时晋升slave节点到master</p>
<p>所有集群节点通过由TCP和二进制协议组成的称为 Redis Cluster Bus 的方式来实现集群的节点自动发现、故障节点探测、slave升级为master等任务。每个节点通过cluster bus连接所有其他节点。节点间使用<strong>gossip协议</strong>进行集群信息传播，以此来实现新节点发现，发送ping包以确认对端工作正常，以及发送cluster消息用来标记特定状态。cluster bus还被用来在集群中创建Pub/Sub消息，以及在接收到用户请求后编排手动failover。</p>
<h3>1.3 写安全</h3>
<p>Redis Cluster在节点间采用了异步复制，以及 last failover wins 隐含合并功能(implicit merge function)（【译注】不存在合并功能，而是总是认为最近一次failover的节点是最新的）。这意味着最后被选举出的master所包含的数据最终会替代（同一前master下）所有其他备份(replicas/slaves)节点（包含的数据）。当发生分区问题时，总是会有一个时间窗内会发生写入丢失。然而，对连接到多数派master（majority of masters）的client，以及连接到少数派master（mimority of masters）的client，这个时间窗是不同的。</p>
<p>相比较连接到少数master(minority of masters)的client，对连接到多数master(majority of masters)的client发起的写入，Redis cluster会更努力地尝试将其保存。 下面的场景将会导致在主分区的master上，已经确认的写入在故障期间发生丢失：</p>
<p>写入请求达到master，但是当master执行完并回复client时，写操作可能还没有通过异步复制传播到它的slave。如果master在写操作抵达slave之前挂了，并且master无法触达(unreachable)的时间足够长而导致了slave节点晋升，那么这个写操作就永远地丢失了。通常很难直接观察到，因为master尝试回复client(写入确认)和传播写操作到slave通常几乎是同时发生。然而，这却是真实世界中的故障方式。（【译注】不考虑返回后宕机的场景，因为宕机导致的写入丢失，在单机版redis上同样存在，这不是redis cluster引入的目的及要解决的问题）</p>
<p>另一种理论上可能发生写入丢失的模式是：</p>
<ul>
<li>master因为分区原因不可用（unreachable）</li>
<li>该master被某个slave替换(failover)</li>
<li>一段时间后，该master重新可用</li>
<li>在该old master变为slave之前，一个client通过过期的路由表对该节点进行写入。</li>
</ul>
<p>上述第二种失败场景通常难以发生，因为：</p>
<ul>
<li>少数派master(minority master)无法与多数派master(majority master)通信达到一定的时间后，它将拒绝写入，并且当分区恢复后，该master在重新与多数派master建立连接后，还将保持拒绝写入状态一小段时间来感知集群配置变化。留给client可写入的时间窗很小。</li>
<li>发生这种错误还有一个前提是，client一直都在使用过期的路由表（而实际上集群因为发生了failover，已有slave发生了晋升）。</li>
</ul>
<p>写入少数派master(minority side of a partition)会有一个更长的时间窗会导致数据丢失。因为如果最终导致了failover，则写入少数派master的数据将会被多数派一侧(majority side)覆盖（在少数派master作为slave重新接入集群后）。</p>
<p>特别地，如果要发生failover，master必须至少在NODE_TIMEOUT时间内无法被多数masters(majority of maters)连接，因此如果分区在这一时间内被修复，则不会发生写入丢失。当分区持续时间超过NODE_TIMEOUT时，所有在这段时间内对少数派master(minority side)的写入将会丢失。然而少数派一侧(minority side)将会在NODE_TIMEOUT时间之后如果还没有连上多数派一侧，则它会立即开始拒绝写入，因此对少数派master而言，存在一个进入不可用状态的最大时间窗。在这一时间窗之外，不会再有写入被接受或丢失。</p>
<h3>1.4 可用性(Availability)</h3>
<p>Redis Cluster在少数派分区侧不可用。在多数派分区侧，假设由多数派masters存在并且不可达的master有一个slave，cluster将会在NODE_TIMEOUT外加重新选举所需的一小段时间(通常1～2秒)后恢复可用。</p>
<p>这意味着，Redis Cluster被设计为可以忍受一小部分节点的故障，但是如果需要在大网络分裂(network splits)事件中(【译注】比如发生多分区故障导致网络被分割成多块，且不存在多数派master分区)保持可用性，它不是一个合适的方案(【译注】比如，不要尝试在多机房间部署redis cluster，这不是redis cluster该做的事)。</p>
<p>假设一个cluster由N个master节点组成并且每个节点仅拥有一个slave，在多数侧只有一个节点出现分区问题时，cluster的多数侧(majority side)可以保持可用，而当有两个节点出现分区故障时，只有 1-(1/(N<em>2-1)) 的可能性保持集群可用。 也就是说，如果有一个由5个master和5个slave组成的cluster，那么当两个节点出现分区故障时，它有 1/(5</em>2-1)=11.11%的可能性发生集群不可用。</p>
<p>Redis cluster提供了一种成为 Replicas Migration 的有用特性，它通过自动转移备份节点到孤master节点，在真实世界的常见场景中提升了cluster的可用性。在每次成功的failover之后，cluster会自动重新配置slave分布以尽可能保证在下一次failure中拥有更好的抵御力</p>
<h3>1.5 性能(Performance)</h3>
<p>Redis Cluster不会将命令路由到其中的key所在的节点，而是向client发一个重定向命令 (- MOVED) 引导client到正确的节点。 最终client会获得一个最新的cluster(hash slots分布)展示，以及哪个节点服务于命令中的keys，因此clients就可以获得正确的节点并用来继续执行命令。</p>
<p>因为master和slave之间使用异步复制，节点不需要等待其他节点对写入的确认（除非使用了WAIT命令）就可以回复client。 同样，因为multi-key命令被限制在了临近的key(near keys)(【译注】即同一hash slot内的key，或者从实际使用场景来说，更多的是通过hash tag定义为具备相同hash字段的有相近业务含义的一组keys)，所以除非触发resharding，数据永远不会在节点间移动。</p>
<p>普通的命令(normal operations)会像在单个redis实例那样被执行。这意味着一个拥有N个master节点的Redis Cluster，你可以认为它拥有N倍的单个Redis性能。同时，query通常都在一个round trip中执行，因为client通常会保留与所有节点的持久化连接（连接池），因此延迟也与客户端操作单台redis实例没有区别。</p>
<p>在对数据安全性、可用性方面提供了合理的弱保证的前提下，提供极高的性能和可扩展性，这是Redis Cluster的主要目标。</p>
<h3>1.6 避免合并(merge)操作</h3>
<p>Redis Cluster设计上避免了在多个拥有相同key-value对的节点上的版本冲突（及合并/merge），因为在redis数据模型下这是不需要的。Redis的值同时都非常大；一个拥有数百万元素的list或sorted set是很常见的。同样，数据类型的语义也很复杂。传输和合并这类值将会产生明显的瓶颈，并可能需要对应用侧的逻辑做明显的修改，比如需要更多的内存来保存meta-data等。</p>
<p>这里(【译注】刻意避免了merge)并没有严格的技术限制。CRDTs或同步复制状态机可以塑造与redis类似的复杂的数据类型。然而，这类系统运行时的行为与Redis Cluster其实是不一样的。Redis Cluster被设计用来支持非集群redis版本无法支持的一些额外的场景。</p>
<h2>2. 主要模块介绍</h2>
<blockquote>
<p><a href="https://redis.io/topics/cluster-spec#redis-cluster-goals" target="_blank" rel="noopener noreferrer">Redis Cluster Specification</a>同时还介绍了Redis Cluster中主要模块，这里面包含了很多基础和概念，我们需要先了解下。</p>
</blockquote>
<h3>2.1 哈希槽(Hash Slot)</h3>
<p>Redis-cluster没有使用一致性hash，而是引入了<strong>哈希槽</strong>的概念。Redis-cluster中有16384(即2的14次方）个哈希槽，每个key通过CRC16校验后对16383取模来决定放置哪个槽。Cluster中的每个节点负责一部分hash槽（hash slot）。</p>
<p>比如集群中存在三个节点，则可能存在的一种分配如下：</p>
<ul>
<li>节点A包含0到5500号哈希槽；</li>
<li>节点B包含5501到11000号哈希槽；</li>
<li>节点C包含11001 到 16384号哈希槽。</li>
</ul>
<h3>2.2 Keys hash tags</h3>
<p>Hash tags提供了一种途径，<strong>用来将多个(相关的)key分配到相同的hash slot中</strong>。这时Redis Cluster中实现multi-key操作的基础。</p>
<p>hash tag规则如下，如果满足如下规则，{和}之间的字符将用来计算HASH_SLOT，以保证这样的key保存在同一个slot中。</p>
<ul>
<li>key包含一个{字符</li>
<li>并且 如果在这个{的右面有一个}字符</li>
<li>并且 如果在{和}之间存在至少一个字符</li>
</ul>
<p>例如：</p>
<ul>
<li>{user1000}.following和{user1000}.followers这两个key会被hash到相同的hash slot中，因为只有user1000会被用来计算hash slot值。</li>
<li>foo{}{bar}这个key不会启用hash tag因为第一个{和}之间没有字符。</li>
<li>foozap这个key中的{bar部分会被用来计算hash slot</li>
<li>foo{bar}{zap}这个key中的bar会被用来计算计算hash slot，而zap不会</li>
</ul>
<h3>2.3 Cluster nodes属性</h3>
<p>每个<strong>节点在cluster中有一个唯一的名字</strong>。这个名字由160bit随机十六进制数字表示，并在节点启动时第一次获得(通常通过/dev/urandom)。节点在配置文件中保留它的ID，并永远地使用这个ID，直到被管理员使用CLUSTER RESET HARD命令hard reset这个节点。</p>
<p>节点ID被用来在整个cluster中标识每个节点。一个节点可以修改自己的IP地址而不需要修改自己的ID。Cluster可以检测到IP /port的改动并通过运行在cluster bus上的gossip协议重新配置该节点。</p>
<p>节点ID不是唯一与节点绑定的信息，但是他是唯一的一个总是保持全局一致的字段。每个节点都拥有一系列相关的信息。一些信息时关于本节点在集群中配置细节，并最终在cluster内部保持一致的。而其他信息，比如节点最后被ping的时间，是节点的本地信息。</p>
<p>每个节点维护着集群内其他节点的以下信息：<code>node id</code>, <code>节点的IP和port</code>，<code>节点标签</code>，<code>master node id</code>（如果这是一个slave节点），<code>最后被挂起的ping的发送时间</code>(如果没有挂起的ping则为0)，<code>最后一次收到pong的时间</code>，<code>当前的节点configuration epoch</code> ，<code>链接状态</code>，以及最后是该节点服务的<code>hash slots</code>。</p>
<p>对节点字段更详细的描述，可以参考对命令 CLUSTER NODES的描述。</p>
<p>CLUSTER NODES命令可以被发送到集群内的任意节点，他会提供基于该节点视角(view)下的集群状态以及每个节点的信息。</p>
<p>下面是一个发送到一个拥有3个节点的小集群的master节点的CLUSTER NODES输出的例子。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> redis-cli</span><span style="color:#98C379;--shiki-dark:#98C379"> cluster</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d1861060fe6a534d42d8a19aeb36600e18785e04</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1:6379</span><span style="color:#98C379;--shiki-dark:#98C379"> myself</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1318428930</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 0-1364</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3886e65cc906bfd9b1f7e7bde468726a052d1dae</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1:6380</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1318428930</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1318428931</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 1365-2729</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">d289c575dcbc4bdd2931585fd4339089e461a27d</span><span style="color:#98C379;--shiki-dark:#98C379"> 127.0.0.1:6381</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1318428931</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1318428931</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 2730-4095</span></span></code></pre>
</div><p>在上面的例子中，按顺序列出了不同的字段：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">node</span><span style="color:#98C379;--shiki-dark:#98C379"> id,</span><span style="color:#98C379;--shiki-dark:#98C379"> address:port,</span><span style="color:#98C379;--shiki-dark:#98C379"> flags,</span><span style="color:#98C379;--shiki-dark:#98C379"> last</span><span style="color:#98C379;--shiki-dark:#98C379"> ping</span><span style="color:#98C379;--shiki-dark:#98C379"> sent,</span><span style="color:#98C379;--shiki-dark:#98C379"> last</span><span style="color:#98C379;--shiki-dark:#98C379"> pong</span><span style="color:#98C379;--shiki-dark:#98C379"> received,</span><span style="color:#98C379;--shiki-dark:#98C379"> configuration</span><span style="color:#98C379;--shiki-dark:#98C379"> epoch,</span><span style="color:#98C379;--shiki-dark:#98C379"> link</span><span style="color:#98C379;--shiki-dark:#98C379"> state,</span><span style="color:#98C379;--shiki-dark:#98C379"> slots.</span></span></code></pre>
</div><h3>2.4 Cluster总线</h3>
<p>每个Redis Cluster节点有一个额外的TCP端口用来接受其他节点的连接。这个端口与用来接收client命令的普通TCP端口有一个固定的offset。该端口等于普通命令端口加上10000.例如，一个Redis街道口在端口6379建立客户端连接，那么它的集群总线端口16379也会被打开。</p>
<p><strong>节点到节点的通讯只使用集群总线</strong>，同时使用集群总线协议：有不同的类型和大小的帧组成的二进制协议。集群总线的二进制协议没有被公开文档话，因为他不希望被外部软件设备用来预计群节点进行对话。</p>
<h3>2.5 集群拓扑</h3>
<p>Redis Cluster是一张全网拓扑，节点与其他每个节点之间都保持着TCP连接。 在一个拥有N个节点的集群中，每个节点由N-1个TCP传出连接，和N-1个TCP传入连接。 这些TCP连接总是保持活性(be kept alive)。当一个节点在集群总线上发送了ping请求并期待对方回复pong，（如果没有得到回复）在等待足够成时间以便将对方标记为不可达之前，它将先尝试重新连接对方以刷新与对方的连接。 而在全网拓扑中的Redis Cluster节点，节点使用gossip协议和配置更新机制来避免在正常情况下节点之间交换过多的消息，因此集群内交换的消息数目(相对节点数目)不是指数级的。</p>
<h3>2.6 节点握手</h3>
<p>节点总是接受集群总线端口的链接，并且总是会回复ping请求，即使ping来自一个不可信节点。然而，如果发送节点被认为不是当前集群的一部分，所有其他包将被抛弃。</p>
<p>节点认定其他节点是当前集群的一部分有两种方式：</p>
<ol>
<li>
<p>如果一个节点出现在了一条MEET消息中。一条meet消息非常像一个PING消息，但是它会强制接收者接受一个节点作为集群的一部分。节点只有在接收到系统管理员的如下命令后，才会向其他节点发送MEET消息：</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>CLUSTER MEET ip port</span></span></code></pre>
</div></li>
<li>
<p>如果一个被信任的节点gossip了某个节点，那么接收到gossip消息的节点也会那个节点标记为集群的一部分。也就是说，如果在集群中，A知道B，而B知道C，最终B会发送gossip消息到A，告诉A节点C是集群的一部分。这时，A会把C注册未网络的一部分，并尝试与C建立连接。</p>
</li>
</ol>
<p>这意味着，一旦我们把某个节点加入了连接图(connected graph)，它们最终会自动形成一张全连接图(fully connected graph)。这意味着只要系统管理员强制加入了一条信任关系（在某个节点上通过meet命令加入了一个新节点），集群可以自动发现其他节点。</p>
<h2>3. 请求重定向</h2>
<blockquote>
<p>Redis cluster采用去中心化的架构，集群的主节点各自负责一部分槽，客户端如何确定key到底会映射到哪个节点上呢？这就是我们要讲的请求重定向。</p>
</blockquote>
<p>在cluster模式下，<strong>节点对请求的处理过程</strong>如下：</p>
<ul>
<li>检查当前key是否存在当前NODE？
<ul>
<li>通过crc16（key）/16384计算出slot</li>
<li>查询负责该slot负责的节点，得到节点指针</li>
<li>该指针与自身节点比较</li>
</ul>
</li>
<li>若slot不是由自身负责，则返回MOVED重定向</li>
<li>若slot由自身负责，且key在slot中，则返回该key对应结果</li>
<li>若key不存在此slot中，检查该slot是否正在迁出（MIGRATING）？</li>
<li>若key正在迁出，返回ASK错误重定向客户端到迁移的目的服务器上</li>
<li>若Slot未迁出，检查Slot是否导入中？</li>
<li>若Slot导入中且有ASKING标记，则直接操作</li>
<li>否则返回MOVED重定向</li>
</ul>
<p>这个过程中有两点需要具体理解下： <strong>MOVED重定向</strong> 和 <strong>ASK重定向</strong>。</p>
<h3>3.1 Moved 重定向</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014421.png" alt="image-20220626201534646" tabindex="0" loading="lazy"><figcaption>image-20220626201534646</figcaption></figure>
<ul>
<li>槽命中：直接返回结果</li>
<li>槽不命中：即当前键命令所请求的键不在当前请求的节点中，则当前节点会向客户端发送一个Moved 重定向，客户端根据Moved 重定向所包含的内容找到目标节点，再一次发送命令。</li>
</ul>
<p>从下面可以看出 php 的槽位9244不在当前节点中，所以会重定向到节点 192.168.2.23:7001中。redis-cli会帮你自动重定向（如果没有集群方式启动，即没加参数 -c，redis-cli不会自动重定向），并且编写程序时，寻找目标节点的逻辑需要交予程序员手动完成。</p>
<div class="language-" data-ext="" data-title=""><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span>cluster keyslot keyName # 得到keyName的槽</span></span></code></pre>
</div><figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014466.png" alt="image-20220626201657777" tabindex="0" loading="lazy"><figcaption>image-20220626201657777</figcaption></figure>
<h3>3.2 ASK 重定向</h3>
<p>Ask重定向发生于集群伸缩时，集群伸缩会导致槽迁移，当我们去源节点访问时，此时数据已经可能已经迁移到了目标节点，使用Ask重定向来解决此种情况。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014501.png" alt="image-20220626201804388" tabindex="0" loading="lazy"><figcaption>image-20220626201804388</figcaption></figure>
<h3>3.3 smart客户端</h3>
<p>上述两种重定向的机制使得客户端的实现更加复杂，提供了smart客户端（JedisCluster）来<strong>减低复杂性，追求更好的性能</strong>。客户端内部负责计算/维护键-&gt; 槽 -&gt; 节点映射，用于快速定位目标节点。</p>
<p>实现原理：</p>
<ul>
<li>从集群中选取一个可运行节点，使用 cluster slots得到槽和节点的映射关系</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/20220626202106087.png" alt="20220626202106087" tabindex="0" loading="lazy"><figcaption>20220626202106087</figcaption></figure>
<ul>
<li>将上述映射关系存到本地，通过映射关系就可以直接对目标节点进行操作（CRC16(key) -&gt; slot -&gt; node），很好地避免了Moved重定向，并为每个节点创建JedisPool</li>
<li>至此就可以用来进行命令操作</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014534.png" alt="image-20220626202204697" tabindex="0" loading="lazy"><figcaption>image-20220626202204697</figcaption></figure>
<h2>4. 状态检测及维护</h2>
<blockquote>
<p>Redis Cluster中节点状态如何维护呢？这里便涉及 <strong>有哪些状态</strong>，<strong>底层协议Gossip</strong>，及<strong>具体的通讯（心跳）机制</strong>。</p>
</blockquote>
<p>Cluster中的每个节点都维护一份在自己看来当前整个集群的状态，主要包括：</p>
<ul>
<li>当前集群状态</li>
<li>集群中各节点所负责的slots信息，及其migrate状态</li>
<li>集群中各节点的master-slave状态</li>
<li>集群中各节点的存活状态及不可达投票</li>
</ul>
<p>当集群状态变化时，如<code>新节点加入</code>、<code>slot迁移</code>、<code>节点宕机</code>、<code>slave提升为新Master</code>，我们希望这些变化尽快的被发现，传播到整个集群的所有节点并达成一致。节点之间相互的<strong>心跳</strong>（PING，PONG，MEET）及其携带的数据是集群状态传播最主要的途径。</p>
<h3>4.1 Gossip协议</h3>
<blockquote>
<p>Redis Cluster 通讯底层是Gossip协议，所以需要对Gossip协议有一定的了解。</p>
</blockquote>
<p>gossip 协议（gossip protocol）又称 epidemic 协议（epidemic protocol），是基于流行病传播方式的节点或者进程之间信息交换的协议。 在分布式系统中被广泛使用，比如我们可以使用 gossip 协议来确保网络中所有节点的数据一样。</p>
<p>Gossip协议已经是P2P网络中比较成熟的协议了。Gossip协议的最大的好处是，<strong>即使集群节点的数量增加，每个节点的负载也不会增加很多，几乎是恒定的。这就允许Consul管理的集群规模能横向扩展到数千个节点</strong>。</p>
<p>Gossip算法又被称为反熵（Anti-Entropy），熵是物理学上的一个概念，代表杂乱无章，而反熵就是在杂乱无章中寻求一致，这充分说明了Gossip的特点：在一个有界网络中，每个节点都随机地与其他节点通信，经过一番杂乱无章的通信，最终所有节点的状态都会达成一致。每个节点可能知道所有其他节点，也可能仅知道几个邻居节点，只要这些节可以通过网络连通，最终他们的状态都是一致的，当然这也是疫情传播的特点。<a href="https://www.backendcloud.cn/2017/11/12/raft-gossip/" target="_blank" rel="noopener noreferrer">https://www.backendcloud.cn/2017/11/12/raft-gossip/</a></p>
<p>上面的描述都比较学术，其实Gossip协议对于我们吃瓜群众来说一点也不陌生，Gossip协议也称为流言协议，说白了就是八卦协议，这种传播规模和传播速度都是非常快的，你可以体会一下。所以计算机中的很多算法都是源自生活，而又高于生活的。</p>
<h4>4.1.1 Gossip协议的使用</h4>
<p>Redis 集群是去中心化的，彼此之间状态同步靠 gossip 协议通信，集群的消息有以下几种类型：</p>
<ul>
<li><code>Meet</code> 通过「cluster meet ip port」命令，已有集群的节点会向新的节点发送邀请，加入现有集群。</li>
<li><code>Ping</code> 节点每秒会向集群中其他节点发送 ping 消息，消息中带有自己已知的两个节点的地址、槽、状态信息、最后一次通信时间等。</li>
<li><code>Pong</code> 节点收到 ping 消息后会回复 pong 消息，消息中同样带有自己已知的两个节点信息。</li>
<li><code>Fail</code> 节点 ping 不通某节点后，会向集群所有节点广播该节点挂掉的消息。其他节点收到消息后标记已下线。</li>
</ul>
<h4>4.1.2 基于Gossip协议的故障检测</h4>
<p>集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此交换各个节点状态信息，检测各个节点状态：<strong>在线状态</strong>、<strong>疑似下线状态PFAIL</strong>、<strong>已下线状态FAIL</strong>。</p>
<p><strong>自己保存信息</strong>：当主节点A通过消息得知主节点B认为主节点D进入了疑似下线(PFAIL)状态时,主节点A会在自己的clusterState.nodes字典中找到主节点D所对应的clusterNode结构，并将主节点B的下线报告添加到clusterNode结构的fail_reports链表中，并后续关于结点D疑似下线的状态通过Gossip协议通知其他节点。</p>
<p><strong>一起裁定</strong>：如果集群里面，半数以上的主节点都将主节点D报告为疑似下线，那么主节点D将被标记为已下线(FAIL)状态，将主节点D标记为已下线的节点会向集群广播主节点D的FAIL消息，所有收到FAIL消息的节点都会立即更新nodes里面主节点D状态标记为已下线。</p>
<p><strong>最终裁定</strong>：将 node 标记为 FAIL 需要满足以下两个条件：</p>
<ul>
<li>有半数以上的主节点将 node 标记为 PFAIL 状态。</li>
<li>当前节点也将 node 标记为 PFAIL 状态。</li>
</ul>
<h3>4.2 通讯状态和维护</h3>
<blockquote>
<p>我们理解了Gossip协议基础后，就可以进一步理解Redis节点之间相互的通讯<strong>心跳</strong>（PING，PONG，MEET）实现和维护了。我们通过几个问题来具体理解。</p>
</blockquote>
<h4>4.2.1 什么时候进行心跳？</h4>
<p>Redis节点会记录其向每一个节点上一次发出ping和收到pong的时间，心跳发送时机与这两个值有关。通过下面的方式既能保证及时更新集群状态，又不至于使心跳数过多：</p>
<ul>
<li>每次Cron向所有未建立链接的节点发送ping或meet</li>
<li>每1秒从所有已知节点中随机选取5个，向其中上次收到pong最久远的一个发送ping</li>
<li>每次Cron向收到pong超过timeout/2的节点发送ping</li>
<li>收到ping或meet，立即回复pong</li>
</ul>
<h4>4.2.2 发送哪些心跳数据？</h4>
<ul>
<li>Header，发送者自己的信息
<ul>
<li>所负责slots的信息</li>
<li>主从信息</li>
<li>ip port信息</li>
<li>状态信息</li>
</ul>
</li>
<li>Gossip，发送者所了解的部分其他节点的信息
<ul>
<li>ping_sent, pong_received</li>
<li>ip, port信息</li>
<li>状态信息，比如发送者认为该节点已经不可达，会在状态信息中标记其为PFAIL或FAIL</li>
</ul>
</li>
</ul>
<h4>4.2.3 如何处理心跳？</h4>
<p>1，<strong>新节点加入</strong></p>
<ul>
<li>发送meet包加入集群</li>
<li>从pong包中的gossip得到未知的其他节点</li>
<li>循环上述过程，直到最终加入集群</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014568.png" alt="image-20220626204216536" tabindex="0" loading="lazy"><figcaption>image-20220626204216536</figcaption></figure>
<p>2，<strong>Slots信息</strong></p>
<ul>
<li>判断发送者声明的slots信息，跟本地记录的是否有不同</li>
<li>如果不同，且发送者epoch较大，更新本地记录</li>
<li>如果不同，且发送者epoch小，发送Update信息通知发送者</li>
</ul>
<p>3，<strong>Master slave信息</strong></p>
<p>发现发送者的master、slave信息变化，更新本地状态</p>
<p>4，<strong>节点Fail探测(故障发现)</strong></p>
<ul>
<li>超过超时时间仍然没有收到pong包的节点会被当前节点标记为PFAIL</li>
<li>PFAIL标记会随着gossip传播</li>
<li>每次收到心跳包会检测其中对其他节点的PFAIL标记，当做对该节点FAIL的投票维护在本机</li>
<li>对某个节点的PFAIL标记达到大多数时，将其变为FAIL标记并广播FAIL消息</li>
</ul>
<blockquote>
<p>注：Gossip的存在使得集群状态的改变可以更快的达到整个集群。每个心跳包中会包含多个Gossip包，那么多少个才是合适的呢，redis的选择是N/10，其中N是节点数，这样可以保证在PFAIL投票的过期时间内，节点可以收到80%机器关于失败节点的gossip，从而使其顺利进入FAIL状态。</p>
</blockquote>
<h4>4.2.4 将信息广播给其它节点？</h4>
<p>当需要发布一些非常重要需要立即送达的信息时，上述心跳加Gossip的方式就显得捉襟见肘了，这时就需要向所有集群内机器的广播信息，使用广播发的场景：</p>
<ul>
<li><strong>节点的Fail信息</strong>：当发现某一节点不可达时，探测节点会将其标记为PFAIL状态，并通过心跳传播出去。当某一节点发现这个节点的PFAIL超过半数时修改其为FAIL并发起广播。</li>
<li><strong>Failover Request信息</strong>：slave尝试发起FailOver时广播其要求投票的信息</li>
<li><strong>新Master信息</strong>：Failover成功的节点向整个集群广播自己的信息</li>
</ul>
<h2>5. 故障恢复（Failover）</h2>
<blockquote>
<p>master节点挂了之后，如何进行故障恢复呢？</p>
</blockquote>
<p>当slave发现自己的master变为FAIL状态时，便尝试进行Failover，以期成为新的master。由于挂掉的master可能会有多个slave。Failover的过程需要经过类Raft协议的过程在整个集群内达到一致， 其过程如下：</p>
<ul>
<li>slave发现自己的master变为FAIL</li>
<li>将自己记录的集群currentEpoch加1，并广播Failover Request信息</li>
<li>其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个epoch只发送一次ack</li>
<li>尝试failover的slave收集FAILOVER_AUTH_ACK</li>
<li>超过半数后变成新Master</li>
<li>广播Pong通知其他集群节点</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/20220626204607046.png" alt="20220626204607046" tabindex="0" loading="lazy"><figcaption>20220626204607046</figcaption></figure>
<h2>6. 扩容&amp;缩容</h2>
<blockquote>
<p>Redis Cluster是如何进行扩容和缩容的呢？</p>
</blockquote>
<h3>6.1 扩容</h3>
<p>当集群出现容量限制或者其他一些原因需要扩容时</p>
<ul>
<li>redis cluster可以实现对节点的灵活上下线控制</li>
<li>3个主节点分别维护自己负责的槽和对应的数据，如果希望加入一个节点实现扩容，就需要把一部分槽和数据迁移到新节点</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/20220701193315441.png" alt="20220701193315441" tabindex="0" loading="lazy"><figcaption>20220701193315441</figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220701193332382.png" alt="image-20220701193332382" tabindex="0" loading="lazy"><figcaption>image-20220701193332382</figcaption></figure>
<p><strong>每个master把一部分槽和数据迁移到新的节点node04</strong></p>
<h4>6.1.1 新节点加入集群</h4>
<blockquote>
<p>首先将新节点加入到集群中，</p>
<ul>
<li>集群中任何一个客户端执行cluster meet 新节点ip:端口，</li>
<li>通过redis-trib add node添加，新添加的节点默认在集群中都是主节点。</li>
</ul>
</blockquote>
<h5>6.1.1 方式一：cluster meet</h5>
<p>在原有集群任意节点内执行以下命令</p>
<div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">root</span><span style="color:#E06C75;--shiki-dark:#E06C75">@node01</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> opt]</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># redis-cli -c -h 10.0.0.100 -p 6380</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> cluster meet </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.103</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">OK</span></span>
<span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> cluster meet </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.103</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6380</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">OK</span></span></code></pre>
</div><p>集群内新旧节点经过一段时间的通信之后，所有节点会更新它们的状态并保存到本地</p>
<div class="language-ruby" data-ext="ruby" data-title="ruby"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> cluster nodes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 可以看到新加入两个服务(10.0.0.103:6379/10.0.0.103:6380)都是master，它们还没有管理slot</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">4fb4c538d5f29255f6212f2eae8a761fbe364a89 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.101</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> master </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048391000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">5460</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">690b2e1f604a0227068388d3e5b1f1940524c565 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.102</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> master </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048389000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected </span><span style="color:#D19A66;--shiki-dark:#D19A66">10923</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">16383</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">1be5d1aaaa9e9542224554f461694da9cba7c2b8 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.101</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> master </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048392055</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected </span><span style="color:#D19A66;--shiki-dark:#D19A66">5461</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">10922</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">724a8a15f4efe5a01454cb971d7471d6e84279f3 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.103</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> master </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048388000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 8</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ed9b72fffd04b8a7e5ad20afdaf1f53e0eb95011 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.103</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> master </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048391046</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">89f52bfbb8803db19ab0c5a90adc4099df8287f7 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> slave 4fb4c538d5f29255f6212f2eae8a761fbe364a89 </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048388000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">86e1881611440012c87fbf3fa98b7b6d79915e25 </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.102</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> slave 1be5d1aaaa9e9542224554f461694da9cba7c2b8 </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048389033</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">8c13a2afa76194ef9582bb06675695bfef76b11d </span><span style="color:#D19A66;--shiki-dark:#D19A66">10.0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#D19A66;--shiki-dark:#D19A66">0.100</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">:</span><span style="color:#D19A66;--shiki-dark:#D19A66">6380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">@</span><span style="color:#D19A66;--shiki-dark:#D19A66">16380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> myself,slave 690b2e1f604a0227068388d3e5b1f1940524c565 </span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585048390000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> connected</span></span></code></pre>
</div><p>新节点刚开始都是master节点，但是由于没有负责的槽，所以不能接收任何读写操作，对新节点的后续操作，一般有两种选择：</p>
<ul>
<li>从其他的节点迁移槽和数据给新节点</li>
<li>作为其他节点的slave负责故障转移</li>
</ul>
<h5>1.1.2 方式二：redis-trib add node添加 ()</h5>
<p>redis-trib.rb工具也实现了为现有集群添加新节点的命令，同时也实现了直接添加为slave的支持：</p>
<div class="language-python" data-ext="python" data-title="python"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 新节点加入集群</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">redis</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">trib.rb add</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">node new_host:new_port old_host:old_port</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 新节点加入集群并作为指定master的slave</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">redis</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">trib.rb add</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">node new_host:new_port old_host:old_port </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">--</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">slave </span><span style="color:#FFFFFF;--shiki-dark:#FFFFFF">--</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">master</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-id</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> &lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">master</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-id&gt;</span></span></code></pre>
</div><p>建议使用<code>redis-trib.rb add-node</code>将新节点添加到集群中，该命令会检查新节点的状态，如果新节点已经加入了其他集群或者已经包含数据，则会报错，而使用<code>cluster meet</code>命令则不会做这样的检查，假如新节点已经存在数据，则会合并到集群中，造成数据不一致</p>
<h4>6.1.2 迁移slot和数据</h4>
<blockquote>
<p>无需要求每个master的slot编号是连续的，只要每个master管理的slot的数量均衡就可以。</p>
</blockquote>
<ul>
<li>slot迁移是集群伸缩的最核心步骤</li>
<li>假设原有3个master，每个master负责10384 / 3 ≈ 5461个slot</li>
<li>加入一个新的master之后，每个master负责10384 / 4 = 4096个slot</li>
<li>确定好迁移计划之后，例如，每个master将超过4096个slot的部分迁移到新的master中，然后开始以slot为单位进行迁移</li>
<li>每个slot的迁移过程如下所示：</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220701200253514.png" alt="image-20220701200253514" tabindex="0" loading="lazy"><figcaption>image-20220701200253514</figcaption></figure>
<ol>
<li>对目标节点发送导入命令，让目标节点准备导入槽的数据。</li>
<li>对源节点发送导出命令，让源节点准备迁出槽的数据。</li>
<li>源节点循环执行迁移命令，将槽跟数据迁移到目标节点。</li>
<li>向集群广播槽已经迁移到B节点</li>
</ol>
<h5>6.1.2.1 redis-trib.rb工具完成slot迁移</h5>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">redis-trib.rb</span><span style="color:#98C379;--shiki-dark:#98C379"> reshard</span><span style="color:#98C379;--shiki-dark:#98C379"> host:port</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --from</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">g&gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66">--to</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">g&gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66">--slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">g&gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66">--yes</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --timeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">g&gt; </span><span style="color:#D19A66;--shiki-dark:#D19A66">--pipeline</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">ar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">g&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">host:port：随便指定一个集群中的host:port，用以获取全部集群的信息</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--from：源节点的id，提示用户输入</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--to：目标节点的id，提示用户输入</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--slots：需要迁移的slot的总数量，提示用户输入</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--yes：当打印出slot迁移计划后是否需要用户输入yes确认后执行</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--timeout：控制每次migrate操作的超时时间，默认60000ms</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">--pipeline：控制每次批量迁移的key的数量，默认10</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[root@node01 redis]# redis-trib.rb reshard 10.0.0.100:6379</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Performing</span><span style="color:#98C379;--shiki-dark:#98C379"> Cluster</span><span style="color:#98C379;--shiki-dark:#98C379"> Check</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (using </span><span style="color:#98C379;--shiki-dark:#98C379">node</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.100:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">S:</span><span style="color:#98C379;--shiki-dark:#98C379"> 89f52bfbb8803db19ab0c5a90adc4099df8287f7</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.100:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) slave</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   replicates</span><span style="color:#98C379;--shiki-dark:#98C379"> 4fb4c538d5f29255f6212f2eae8a761fbe364a89</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">S:</span><span style="color:#98C379;--shiki-dark:#98C379"> 8c13a2afa76194ef9582bb06675695bfef76b11d</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.100:6380</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) slave</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   replicates</span><span style="color:#98C379;--shiki-dark:#98C379"> 690b2e1f604a0227068388d3e5b1f1940524c565</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 690b2e1f604a0227068388d3e5b1f1940524c565</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.102:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:10923-16383</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5461 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 4fb4c538d5f29255f6212f2eae8a761fbe364a89</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6380</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:0-5460</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5461 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">M:</span><span style="color:#98C379;--shiki-dark:#98C379"> ed9b72fffd04b8a7e5ad20afdaf1f53e0eb95011</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.103:6380</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   0</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">S:</span><span style="color:#98C379;--shiki-dark:#98C379"> 86e1881611440012c87fbf3fa98b7b6d79915e25</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.102:6380</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) slave</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   replicates</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:5461-10922</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5462 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 724a8a15f4efe5a01454cb971d7471d6e84279f3</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.103:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   0</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[OK] All nodes agree about slots configuration.</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Check</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> open</span><span style="color:#98C379;--shiki-dark:#98C379"> slots...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">Check</span><span style="color:#98C379;--shiki-dark:#98C379"> slots</span><span style="color:#98C379;--shiki-dark:#98C379"> coverage...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[OK] All 16384 slots covered.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 要迁移多少个slot？</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">How</span><span style="color:#98C379;--shiki-dark:#98C379"> many</span><span style="color:#98C379;--shiki-dark:#98C379"> slots</span><span style="color:#98C379;--shiki-dark:#98C379"> do</span><span style="color:#98C379;--shiki-dark:#98C379"> you</span><span style="color:#98C379;--shiki-dark:#98C379"> want</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> move</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (from </span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 16384</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)? 4096</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 迁移到那个master？</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">What</span><span style="color:#98C379;--shiki-dark:#98C379"> is</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> receiving</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#98C379;--shiki-dark:#98C379"> ID?</span><span style="color:#98C379;--shiki-dark:#98C379"> 724a8a15f4efe5a01454cb971d7471d6e84279f3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Please</span><span style="color:#98C379;--shiki-dark:#98C379"> enter</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> source</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#98C379;--shiki-dark:#98C379"> IDs.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Type</span><span style="color:#98C379;--shiki-dark:#98C379"> 'all'</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> use</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes</span><span style="color:#98C379;--shiki-dark:#98C379"> as</span><span style="color:#98C379;--shiki-dark:#98C379"> source</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes</span><span style="color:#98C379;--shiki-dark:#98C379"> for</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> hash</span><span style="color:#98C379;--shiki-dark:#98C379"> slots.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Type</span><span style="color:#98C379;--shiki-dark:#98C379"> 'done'</span><span style="color:#98C379;--shiki-dark:#98C379"> once</span><span style="color:#98C379;--shiki-dark:#98C379"> you</span><span style="color:#98C379;--shiki-dark:#98C379"> entered</span><span style="color:#98C379;--shiki-dark:#98C379"> all</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> source</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes</span><span style="color:#98C379;--shiki-dark:#98C379"> IDs.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 从哪里迁移？</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Source</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #1:4fb4c538d5f29255f6212f2eae8a761fbe364a89</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Source</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #2:690b2e1f604a0227068388d3e5b1f1940524c565</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Source</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #3:1be5d1aaaa9e9542224554f461694da9cba7c2b8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Source</span><span style="color:#98C379;--shiki-dark:#98C379"> node</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> #4:done</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Ready</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> move</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4096</span><span style="color:#98C379;--shiki-dark:#98C379"> slots.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Source</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 4fb4c538d5f29255f6212f2eae8a761fbe364a89</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6380</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:0-5460</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5461 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 690b2e1f604a0227068388d3e5b1f1940524c565</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.102:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:10923-16383</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5461 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:5461-10922</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (5462 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   1</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Destination</span><span style="color:#98C379;--shiki-dark:#98C379"> node:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    M:</span><span style="color:#98C379;--shiki-dark:#98C379"> 724a8a15f4efe5a01454cb971d7471d6e84279f3</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.103:6379</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   slots:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (0 </span><span style="color:#98C379;--shiki-dark:#98C379">slots</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) master</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   0</span><span style="color:#98C379;--shiki-dark:#98C379"> additional</span><span style="color:#98C379;--shiki-dark:#98C379"> replica</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">s</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">  Resharding</span><span style="color:#98C379;--shiki-dark:#98C379"> plan:</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    Moving</span><span style="color:#98C379;--shiki-dark:#98C379"> slot</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5461</span><span style="color:#98C379;--shiki-dark:#98C379"> from</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    Moving</span><span style="color:#98C379;--shiki-dark:#98C379"> slot</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5462</span><span style="color:#98C379;--shiki-dark:#98C379"> from</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    Moving</span><span style="color:#98C379;--shiki-dark:#98C379"> slot</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5463</span><span style="color:#98C379;--shiki-dark:#98C379"> from</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">    ......</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">10.0.0.100:6380</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">cluster</span><span style="color:#98C379;--shiki-dark:#98C379"> nodes</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1be5d1aaaa9e9542224554f461694da9cba7c2b8</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6379@16379</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053959158</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 6827-10922</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 可以看到新加入的一个节点已经分配到了slot</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">724a8a15f4efe5a01454cb971d7471d6e84279f3</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.103:6379@16379</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053957000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 8</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 0-1364</span><span style="color:#98C379;--shiki-dark:#98C379"> 5461-6826</span><span style="color:#98C379;--shiki-dark:#98C379"> 10923-12287</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4fb4c538d5f29255f6212f2eae8a761fbe364a89</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.101:6380@16380</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053960166</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 1365-5460</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">ed9b72fffd04b8a7e5ad20afdaf1f53e0eb95011</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.103:6380@16380</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053957000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">690b2e1f604a0227068388d3e5b1f1940524c565</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.102:6379@16379</span><span style="color:#98C379;--shiki-dark:#98C379"> master</span><span style="color:#98C379;--shiki-dark:#98C379"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053959000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span><span style="color:#98C379;--shiki-dark:#98C379"> 12288-16383</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">89f52bfbb8803db19ab0c5a90adc4099df8287f7</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.100:6379@16379</span><span style="color:#98C379;--shiki-dark:#98C379"> slave</span><span style="color:#98C379;--shiki-dark:#98C379"> 4fb4c538d5f29255f6212f2eae8a761fbe364a89</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053958149</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">86e1881611440012c87fbf3fa98b7b6d79915e25</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.102:6380@16380</span><span style="color:#98C379;--shiki-dark:#98C379"> slave</span><span style="color:#98C379;--shiki-dark:#98C379"> 1be5d1aaaa9e9542224554f461694da9cba7c2b8</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053958000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">8c13a2afa76194ef9582bb06675695bfef76b11d</span><span style="color:#98C379;--shiki-dark:#98C379"> 10.0.0.100:6380@16380</span><span style="color:#98C379;--shiki-dark:#98C379"> myself,slave</span><span style="color:#98C379;--shiki-dark:#98C379"> 690b2e1f604a0227068388d3e5b1f1940524c565</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1585053954000</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#98C379;--shiki-dark:#98C379"> connected</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>6.2 缩容</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220701200752061.png" alt="image-20220701200752061" tabindex="0" loading="lazy"><figcaption>image-20220701200752061</figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014602.png" alt="image-20220701200806168" tabindex="0" loading="lazy"><figcaption>image-20220701200806168</figcaption></figure>
<ul>
<li>需要判断下线的节点是否是主节点，以及主节点上是否有槽
<ul>
<li>如果下线的是master，那么将此master的slot迁移到其他master之后，通知其他节点忘记此master节点</li>
<li>如果下线的是slave，那么通知其他节点忘记下线的节点</li>
</ul>
</li>
<li>其他节点都忘记了下线的节点之后，此节点就可以正常停止服务了</li>
</ul>
<blockquote>
<p>最后需要将该下线主节点的从节点指向其他主节点，当然最好是先将从节点下线。</p>
</blockquote>
<h2>7. 更深入理解</h2>
<blockquote>
<p>通过几个例子，再深入理解Redis Cluster</p>
</blockquote>
<h3>7.1 为什么Redis Cluster的Hash Slot 是16384？</h3>
<p>我们知道一致性hash算法是2的16次方，为什么hash slot是2的14次方呢？</p>
<ol>
<li>
<p>如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。</p>
<p>如上所述，在消息头中，最占空间的是myslots[CLUSTER_SLOTS/8]。 当槽位为65536时，这块的大小是: 65536÷8÷1024=8kb 因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽。</p>
</li>
<li>
<p>redis的集群主节点数量基本不可能超过1000个。</p>
<p>如上所述，集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。因此redis作者，不建议redis cluster节点数量超过1000个。 那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。</p>
</li>
<li>
<p>槽位越小，节点少的情况下，压缩比高</p>
<p>Redis主节点的配置信息中，它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中，会对bitmap进行压缩，但是如果bitmap的填充率slots / N很高的话(N表示节点数)，bitmap的压缩率就很低。 如果节点数很少，而哈希槽数量很多的话，bitmap的压缩率就很低。</p>
</li>
</ol>
<h3>7.2 为什么Redis Cluster中不建议使用发布订阅呢？</h3>
<p>在集群模式下，所有的publish命令都会向所有节点（包括从节点）进行广播，造成每条publish数据都会在集群内所有节点传播一次，加重了带宽负担，对于在有大量节点的集群中频繁使用pub，会严重消耗带宽，不建议使用。（虽然官网上讲有时候可以使用Bloom过滤器或其他算法进行优化的）</p>
<h2>8. 其它常见方案</h2>
<blockquote>
<p>还有一些方案出现在历史舞台上，我挑了几个经典的。简单了解下，增强下关联的知识体系。</p>
</blockquote>
<h3>8.1 Redis Sentinel 集群 + Keepalived/Haproxy</h3>
<p>底层是 Redis Sentinel 集群，代理着 Redis 主从，Web 端通过 VIP 提供服务。当主节点发生故障，比如机器故障、Redis 节点故障或者网络不可达，Redis 之间的切换通过 Redis Sentinel 内部机制保障，VIP 切换通过 Keepalived 保障。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014629.png" alt="image-20220626205712239" tabindex="0" loading="lazy"><figcaption>image-20220626205712239</figcaption></figure>
<p>优点：</p>
<ul>
<li>秒级切换</li>
<li>对应用透明</li>
</ul>
<p>缺点：</p>
<ul>
<li>维护成本高</li>
<li>存在脑裂</li>
<li>Sentinel 模式存在短时间的服务不可用</li>
</ul>
<h3>8.2 Twemproxy</h3>
<p>多个同构 Twemproxy（配置相同）同时工作，接受客户端的请求，根据 hash 算法，转发给对应的 Redis。</p>
<p>Twemproxy 方案比较成熟了，但是效果并不是很理想。一方面是定位问题比较困难，另一方面是它对自动剔除节点的支持不是很友好。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014657.png" alt="image-20220626205806784" tabindex="0" loading="lazy"><figcaption>image-20220626205806784</figcaption></figure>
<p>优点：</p>
<ul>
<li>开发简单，对应用几乎透明</li>
<li>历史悠久，方案成熟</li>
</ul>
<p>缺点：</p>
<ul>
<li>代理影响性能</li>
<li>LVS 和 Twemproxy 会有节点性能瓶颈</li>
<li>Redis 扩容非常麻烦</li>
<li>Twitter 内部已放弃使用该方案，新使用的架构未开源</li>
</ul>
<h3>8.3 Codis</h3>
<p>Codis 是由豌豆荚开源的产品，涉及组件众多，其中 ZooKeeper 存放路由表和代理节点元数据、分发 Codis-Config 的命令；Codis-Config 是集成管理工具，有 Web 界面供使用；Codis-Proxy 是一个兼容 Redis 协议的无状态代理；Codis-Redis 基于 Redis 2.8 版本二次开发，加入 slot 支持，方便迁移数据。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014685.png" alt="image-20220626205916174" tabindex="0" loading="lazy"><figcaption>image-20220626205916174</figcaption></figure>
<p>优点：</p>
<ul>
<li>开发简单，对应用几乎透明</li>
<li>性能比 Twemproxy 好</li>
<li>有图形化界面，扩容容易，运维方便</li>
</ul>
<p>缺点：</p>
<ul>
<li>代理依旧影响性能</li>
<li>组件过多，需要很多机器资源</li>
<li>修改了 Redis 代码，导致和官方无法同步，新特性跟进缓慢</li>
<li>开发团队准备主推基于 Redis 改造的 reborndb</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-cluster.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 高可拓展：分片技术（Redis Cluster）详解</strong></a></p>
<p><a href="https://juejin.cn/post/7005083244886491166" target="_blank" rel="noopener noreferrer">Redis - Redis 哈希槽的概念？</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131014421.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 如何保障MySQL和Redis的数据一致性？</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-consistency.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-consistency.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 如何保障MySQL和Redis的数据一致性？</source>
      <description>Redis进阶 - 如何保障MySQL和Redis的数据一致性？ 0. 前言 直接先抛一下结论：在满足实时性的条件下，不存在两者完全保存一致的方案，只有最终一致性方案。 根据网上的众多解决方案，总结出 6 种，直接看目录： image-20221129233458742image-20221129233458742 1 不好的方案 1.1 先写 MyS...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>0. 前言</h2>
<p>直接先抛一下结论：<strong>在满足实时性的条件下，不存在两者完全保存一致的方案，只有最终一致性方案。</strong> 根据网上的众多解决方案，总结出 6 种，直接看目录：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015166.png" alt="image-20221129233458742" tabindex="0" loading="lazy"><figcaption>image-20221129233458742</figcaption></figure>
<h2>1 不好的方案</h2>
<h3>1.1 先写 MySQL，再写 Redis</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015214.png" alt="image-20221129233531099" tabindex="0" loading="lazy"><figcaption>image-20221129233531099</figcaption></figure>
<blockquote>
<p>图解说明：</p>
<ul>
<li>这是一副时序图，描述请求的先后调用顺序；</li>
<li>橘黄色的线是请求 A，黑色的线是请求 B；</li>
<li>橘黄色的文字，是 MySQL 和 Redis 最终不一致的数据；</li>
<li>数据是从 10 更新为 11；</li>
<li>后面所有的图，都是这个含义，不再赘述。</li>
</ul>
</blockquote>
<p>请求 A、B 都是先写 MySQL，然后再写 Redis，在高并发情况下，如果请求 A 在写 Redis 时卡了一会，请求 B 已经依次完成数据的更新，就会出现图中的问题。</p>
<p>这个图已经画的很清晰了，我就不用再去啰嗦了吧，<strong>不过这里有个前提，就是对于读请求，先去读 Redis，如果没有，再去读 DB，但是读请求不会再回写 Redis。</strong> 大白话说一下，就是读请求不会更新 Redis。</p>
<h3>1.2 先写 Redis，再写 MySQL</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015246.png" alt="image-20221129233651886" tabindex="0" loading="lazy"><figcaption>image-20221129233651886</figcaption></figure>
<p>同“先写 MySQL，再写 Redis”，看图可秒懂。</p>
<h3>1.3 先删除 Redis，再写 MySQL</h3>
<p>这幅图和上面有些不一样，前面的请求 A 和 B 都是更新请求，这里的请求 A 是更新请求，<strong>但是请求 B 是读请求，且请求 B 的读请求会回写 Redis。</strong></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015285.png" alt="image-20221129233801952" tabindex="0" loading="lazy"><figcaption>image-20221129233801952</figcaption></figure>
<p>请求 A 先删除缓存，可能因为卡顿，数据一直没有更新到 MySQL，导致两者数据不一致。</p>
<p><strong>这种情况出现的概率比较大，因为请求 A 更新 MySQL 可能耗时会比较长，而请求 B 的前两步都是查询，会非常快。</strong></p>
<h2>2. 好的方案</h2>
<h3>1.4 先删除 Redis，再写 MySQL，再删除 Redis</h3>
<p>对于“先删除 Redis，再写 MySQL”，如果要解决最后的不一致问题，其实再对 Redis 重新删除即可，<strong>这个也是大家常说的“缓存双删”。</strong></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015340.png" alt="image-20221129233931661" tabindex="0" loading="lazy"><figcaption>image-20221129233931661</figcaption></figure>
<p>为了便于大家看图，对于蓝色的文字，“删除缓存 10”必须在“回写缓存10”后面，那如何才能保证一定是在后面呢？<strong>网上给出的第一个方案是，让请求 A 的最后一次删除，等待 500ms。</strong></p>
<p>对于这种方案，看看就行，反正我是不会用，太 Low 了，风险也不可控。</p>
<p><strong>那有没有更好的方案呢，我建议异步串行化删除，即删除请求入队列</strong></p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015382.png" alt="image-20221129234009705" tabindex="0" loading="lazy"><figcaption>image-20221129234009705</figcaption></figure>
<p>异步删除对线上业务无影响，串行化处理保障并发情况下正确删除。</p>
<p>如果双删失败怎么办，网上有给 Redis 加一个缓存过期时间的方案，这个不敢苟同。<strong>个人建议整个重试机制，可以借助消息队列的重试机制，也可以自己整个表，记录重试次数</strong>，方法很多。</p>
<blockquote>
<p>简单小结一下：</p>
<ul>
<li>“缓存双删”不要用无脑的 sleep 500 ms；</li>
<li>通过消息队列的异步&amp;串行，实现最后一次缓存删除；</li>
<li>缓存删除失败，增加重试机制。</li>
</ul>
</blockquote>
<h3>1.5. 先写 MySQL，再删除 Redis</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015418.png" alt="image-20221129234057440" tabindex="0" loading="lazy"><figcaption>image-20221129234057440</figcaption></figure>
<p>对于上面这种情况，对于第一次查询，请求 B 查询的数据是 10，但是 MySQL 的数据是 11，<strong>只存在这一次不一致的情况，对于不是强一致性要求的业务，可以容忍。</strong>（那什么情况下不能容忍呢，比如秒杀业务、库存服务等。）</p>
<p>当请求 B 进行第二次查询时，因为没有命中 Redis，会重新查一次 DB，然后再回写到 Reids。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015445.png" alt="image-20221129234242330" tabindex="0" loading="lazy"><figcaption>image-20221129234242330</figcaption></figure>
<p>这里需要满足 2 个条件：</p>
<ul>
<li>缓存刚好自动失效；</li>
<li>请求 B 从数据库查出 10，回写缓存的耗时，比请求 A 写数据库，并且删除缓存的还长。</li>
</ul>
<p>对于第二个条件，我们都知道更新 DB 肯定比查询耗时要长，所以出现这个情况的概率很小，同时满足上述条件的情况更小。</p>
<h3>1.6 先写 MySQL，通过 Binlog，异步更新 Redis</h3>
<p>这种方案，主要是监听 MySQL 的 Binlog，然后通过异步的方式，将数据更新到 Redis，这种方案有个前提，查询的请求，不会回写 Redis。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015476.png" alt="image-20221129234344095" tabindex="0" loading="lazy"><figcaption>image-20221129234344095</figcaption></figure>
<p>这个方案，会保证 MySQL 和 Redis 的最终一致性，但是如果中途请求 B 需要查询数据，如果缓存无数据，就直接查 DB；如果缓存有数据，查询的数据也会存在不一致的情况。</p>
<p><strong>所以这个方案，是实现最终一致性的终极解决方案，但是不能保证实时性。</strong></p>
<h2>3. 几种方案比较</h2>
<p>我们对比上面讨论的 6 种方案：</p>
<ol>
<li>先写 Redis，再写 MySQL</li>
</ol>
<ul>
<li><strong>这种方案，我肯定不会用</strong>，万一 DB 挂了，你把数据写到缓存，DB 无数据，这个是灾难性的；</li>
<li>我之前也见同学这么用过，如果写 DB 失败，对 Redis 进行逆操作，那如果逆操作失败呢，是不是还要搞个重试？</li>
</ul>
<ol>
<li>先写 MySQL，再写 Redis</li>
</ol>
<ul>
<li><strong>对于并发量、一致性要求不高的项目，很多就是这么用的</strong>，我之前也经常这么搞，但是不建议这么做；</li>
<li>当 Redis 瞬间不可用的情况，需要报警出来，然后线下处理。</li>
</ul>
<ol>
<li>先删除 Redis，再写 MySQL</li>
</ol>
<ul>
<li>这种方式，我还真没用过，<strong>直接忽略吧。</strong></li>
</ul>
<ol>
<li>先删除 Redis，再写 MySQL，再删除 Redis</li>
</ol>
<ul>
<li>这种方式虽然可行，但是<strong>感觉好复杂</strong>，还要搞个消息队列去异步删除 Redis。</li>
</ul>
<ol>
<li>先写 MySQL，再删除 Redis</li>
</ol>
<ul>
<li><strong>比较推荐这种方式</strong>，删除 Redis 如果失败，可以再多重试几次，否则报警出来；</li>
<li>这个方案，是实时性中最好的方案，在一些高并发场景中，推荐这种。</li>
</ul>
<ol>
<li>先写 MySQL，通过 Binlog，异步更新 Redis</li>
</ol>
<ul>
<li><strong>对于异地容灾、数据汇总等，建议会用这种方式</strong>，比如 binlog + kafka，数据的一致性也可以达到秒级；</li>
<li>纯粹的高并发场景，不建议用这种方案，比如抢购、秒杀等。</li>
</ul>
<h3>3.1 <strong>个人结论：</strong></h3>
<ul>
<li><strong>实时一致性方案</strong>：采用“先写 MySQL，再删除 Redis”的策略，这种情况虽然也会存在两者不一致，但是需要满足的条件有点苛刻，<strong>所以是满足实时性条件下，能尽量满足一致性的最优解。</strong></li>
<li><strong>最终一致性方案</strong>：采用“先写 MySQL，通过 Binlog，异步更新 Redis”，可以通过 Binlog，结合消息队列异步更新 Redis，<strong>是最终一致性的最优解。</strong></li>
</ul>
<h2>参考文章</h2>
<p><a href="https://tobebetterjavaer.com/mysql/redis-shuju-yizhixing.html" target="_blank" rel="noopener noreferrer">如何保障MySQL和Redis的数据一致性？</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131015166.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 高可用：主从复制详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-copy.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-copy.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 高可用：主从复制详解</source>
      <description>Redis进阶 - 高可用：主从复制详解 我们知道要避免单点故障，即保证高可用，便需要冗余（副本）方式提供集群服务。而Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。本文主要阐述Redis的主从复制。 1. 主从复制概述 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(ma...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>我们知道要避免单点故障，即保证高可用，便需要冗余（副本）方式提供集群服务。而Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。本文主要阐述Redis的主从复制。</p>
</blockquote>
<h2>1. 主从复制概述</h2>
<blockquote>
<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p>
</blockquote>
<p><strong>主从复制的作用</strong>主要包括：</p>
<ul>
<li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li><strong>故障恢复</strong>：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li>
<li><strong>负载均衡</strong>：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li>
<li><strong>高可用基石</strong>：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li>
</ul>
<p>主从库之间采用的是<strong>读写分离</strong>的方式。</p>
<ul>
<li>读操作：主库、从库都可以接收；</li>
<li>写操作：首先到主库执行，然后，主库将写操作同步给从库。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018898.png" alt="image-20220625212112011" tabindex="0" loading="lazy"><figcaption>image-20220625212112011</figcaption></figure>
<h2>2. 主从复制原理</h2>
<blockquote>
<p>注意：在2.8版本之前只有全量复制，而2.8版本后有全量和增量复制：</p>
</blockquote>
<ul>
<li><code>全量（同步）复制</code>：比如第一次同步时</li>
<li><code>增量（同步）复制</code>：只会把主从库网络断连期间主库收到的命令，同步给从库</li>
</ul>
<h3>2.1 全量复制</h3>
<blockquote>
<p>当我们启动多个 Redis 实例的时候，它们相互之间就可以通过 replicaof（Redis 5.0 之前使用 slaveof）命令形成主库和从库的关系，之后会按照三个阶段完成数据的第一次同步。</p>
</blockquote>
<ul>
<li><strong>确立主从关系</strong></li>
</ul>
<p>例如，现在有实例 1（ip：172.16.19.3）和实例 2（ip：172.16.19.5），我们在实例 2 上执行以下这个命令后，实例 2 就变成了实例 1 的从库，并从实例 1 上复制数据：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">replicaof</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 172.16.19.3</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span></span></code></pre>
</div><ul>
<li><strong>全量复制的三个阶段</strong></li>
</ul>
<p>你可以先看一下下面这张图，有个整体感知，接下来我再具体介绍。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018946.png" alt="image-20220625212409651" tabindex="0" loading="lazy"><figcaption>image-20220625212409651</figcaption></figure>
<ul>
<li>
<p><strong>第一阶段是主从库间建立连接、协商同步的过程</strong>，主要是为全量复制做准备。在这一步，从库和主库建立起连接，并告诉主库即将进行同步，主库确认回复后，主从库间就可以开始同步了。</p>
<blockquote>
<p>具体来说，从库给主库发送 psync 命令，表示要进行数据同步，主库根据这个命令的参数来启动复制。psync 命令包含了主库的 runID 和复制进度 offset 两个参数。runID，是每个 Redis 实例启动时都会自动生成的一个随机 ID，用来唯一标记这个实例。当从库和主库第一次复制时，因为不知道主库的 runID，所以将 runID 设为“？”。offset，此时设为 -1，表示第一次复制。主库收到 psync 命令后，会用 FULLRESYNC 响应命令带上两个参数：主库 runID 和主库目前的复制进度 offset，返回给从库。从库收到响应后，会记录下这两个参数。这里有个地方需要注意，FULLRESYNC 响应表示第一次复制采用的全量复制，也就是说，主库会把当前所有的数据都复制给从库。</p>
</blockquote>
</li>
<li>
<p><strong>第二阶段，主库将所有数据同步给从库</strong>。从库收到数据后，在本地完成数据加载。这个过程依赖于内存快照生成的 RDB 文件。</p>
<blockquote>
<p>具体来说，主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。从库接收到 RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。这是因为从库在通过 replicaof 命令开始和主库同步前，可能保存了其他数据。为了避免之前数据的影响，从库需要先把当前数据库清空。在主库将数据同步给从库的过程中，主库不会被阻塞，仍然可以正常接收请求。否则，Redis 的服务就被中断了。但是，这些请求中的写操作并没有记录到刚刚生成的 RDB 文件中。为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作。</p>
</blockquote>
</li>
<li>
<p><strong>第三个阶段，主库会把第二阶段执行过程中新收到的写命令，再发送给从库</strong>。</p>
<blockquote>
<p>具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了。</p>
</blockquote>
</li>
</ul>
<h3>2.2 增量复制</h3>
<blockquote>
<p>在 Redis 2.8 版本引入了增量复制。</p>
</blockquote>
<ul>
<li><strong>为什么会设计增量复制</strong>？</li>
</ul>
<p>如果主从库在命令传播时出现了网络闪断，那么，从库就会和主库重新进行一次全量复制，开销非常大。从 Redis 2.8 开始，网络断了之后，主从库会采用增量复制的方式继续同步。</p>
<ul>
<li><strong>增量复制的流程</strong></li>
</ul>
<p>你可以先看一下下面这张图，有个整体感知，接下来我再具体介绍。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018005.png" alt="image-20220625212923450" tabindex="0" loading="lazy"><figcaption>image-20220625212923450</figcaption></figure>
<p>先看两个概念： <code>repl_backlog_buffer</code> 和 <code>replication buffer</code></p>
<ul>
<li><code>repl_backlog_buffer</code>：它是为了从库断开之后，如何找到主从差异数据而设计的环形缓冲区，从而避免全量复制带来的性能开销。如果从库断开时间太久，repl_backlog_buffer环形缓冲区被主库的写命令覆盖了，那么从库连上主库后只能乖乖地进行一次全量复制，所以<strong>repl_backlog_buffer配置尽量大一些，可以降低主从断开后全量复制的概率</strong>。而在repl_backlog_buffer中找主从差异的数据后，如何发给从库呢？这就用到了replication buffer。</li>
<li><code>replication buffer</code>：Redis和客户端通信也好，和从库通信也好，Redis都需要给分配一个 内存buffer进行数据交互，客户端是一个client，从库也是一个client，我们每个client连上Redis后，Redis都会分配一个client buffer，所有数据交互都是通过这个buffer进行的：Redis先把数据写到这个buffer中，然后再把buffer中的数据发到client socket中再通过网络发送出去，这样就完成了数据交互。所以主从在增量同步时，从库作为一个client，也会分配一个buffer，只不过这个buffer专门用来传播用户的写命令到从库，保证主从数据一致，我们通常把它叫做replication buffer。</li>
</ul>
<h4>2.2.1 repl_backlog_size环形缓冲区写满之后</h4>
<p><strong>如果在网络断开期间，repl_backlog_size环形缓冲区写满之后，从库是会丢失掉那部分被覆盖掉的数据，还是直接进行全量复制呢</strong>？</p>
<p>对于这个问题来说，有两个关键点：</p>
<ol>
<li>一个从库如果和主库断连时间过长，造成它在主库repl_backlog_buffer的slave_repl_offset位置上的数据已经被覆盖掉了，此时从库和主库间将进行全量复制。</li>
<li>每个从库会记录自己的slave_repl_offset，每个从库的复制进度也不一定相同。在和主库重连进行恢复时，从库会通过psync命令把自己记录的slave_repl_offset发给主库，主库会根据从库各自的复制进度，来决定这个从库可以进行增量复制，还是全量复制。</li>
</ol>
<h3>2.3 命令传播</h3>
<p>经过上面同步操作，此时主从的数据库状态其实已经一致了，但这种一致的状态的并不是一成不变的。 在完成同步之后，也许主服务器马上就接受到了新的写命令，执行完该命令后，主从的数据库状态又不一致。</p>
<p>数据同步阶段完成后，主从节点进入命令传播阶段；在这个阶段主节点将自己执行的写命令发送给从节点，从节点接收命令并执行，从而保证主从节点数据的一致性。</p>
<p>另外命令转播我们需要关注两个点： 延迟与不一致 和 心跳机制 我们下面介绍一下</p>
<p><strong>延迟与不一致</strong> 需要注意的是，命令传播是<strong>异步</strong>的过程，即主节点发送写命令后并不会等待从节点的回复；因此实际上主从节点之间很难保持实时的一致性，延迟在所难免。数据不一致的程度，与主从节点之间的网络状况、主节点写命令的执行频率、以及主节点中的repl-disable-tcp-nodelay配置等有关。</p>
<p>repl-disable-tcp-nodelay 配置如下：</p>
<ul>
<li>假如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延迟（40ms），造成master与slave数据不一致</li>
<li><strong>假如设置成no，则redis master会立即发送同步数据，没有延迟（多数情况，强调一致性）</strong></li>
</ul>
<p>概括来说就是：前者关注性能，后者关注一致性</p>
<p>具体发送频率与Linux内核的配置有关，默认配置为40ms。当设置为no时，TCP会立马将主节点的数据发送给从节点，带宽增加但延迟变小。</p>
<p>一般来说，只有当应用对Redis数据不一致的容忍度较高，且主从节点之间网络状况不好时，才会设置为yes；多数情况使用默认值no</p>
<h2>3. 更深入理解</h2>
<blockquote>
<p>我们通过几个问题来深入理解主从复制。</p>
</blockquote>
<h3>3.1 当主服务器不进行持久化时复制的安全性</h3>
<blockquote>
<p>在进行主从复制设置时，强烈建议在主服务器上开启持久化，当不能这么做时，比如考虑到延迟的问题，应该将实例配置为避免自动重启。</p>
</blockquote>
<p><strong>为什么不持久化的主服务器自动重启非常危险呢</strong>？为了更好的理解这个问题，看下面这个失败的例子，其中主服务器和从服务器中数据库都被删除了。</p>
<ul>
<li>我们设置节点A为主服务器，关闭持久化，节点B和C从节点A复制数据。</li>
<li>这时出现了一个崩溃，但Redis具有自动重启系统，重启了进程，因为关闭了持久化，节点重启后只有一个空的数据集。</li>
<li>节点B和C从节点A进行复制，现在节点A是空的，所以节点B和C上的复制数据也会被删除。</li>
<li>当在高可用系统中使用Redis Sentinel，关闭了主服务器的持久化，并且允许自动重启，这种情况是很危险的。比如主服务器可能在很短的时间就完成了重启，以至于Sentinel都无法检测到这次失败，那么上面说的这种失败的情况就发生了。</li>
</ul>
<p>如果数据比较重要，并且在使用主从复制时关闭了主服务器持久化功能的场景中，都应该禁止实例自动重启。</p>
<h3>3.2 为什么主从全量复制使用RDB而不使用AOF？</h3>
<ol>
<li><strong>RDB文件内容是经过压缩的二进制数据（不同数据类型数据做了针对性优化），文件很小</strong>。而AOF文件记录的是每一次写操作的命令，写操作越多文件会变得很大，其中还包括很多对同一个key的多次冗余操作。在主从全量数据同步时，传输RDB文件可以尽量降低对主库机器网络带宽的消耗，从库在加载RDB文件时，一是文件小，读取整个文件的速度会很快，二是因为RDB文件存储的都是二进制数据，从库直接按照RDB协议解析还原数据即可，速度会非常快，而AOF需要依次重放每个写命令，这个过程会经历冗长的处理逻辑，恢复速度相比RDB会慢得多，所以使用RDB进行主从全量复制的成本最低。</li>
<li>假设要使用AOF做全量复制，意味着必须打开AOF功能，打开AOF就要选择文件刷盘的策略，选择不当会严重影响Redis性能。而RDB只有在需要定时备份和主从全量复制数据时才会触发生成一次快照。而在很多丢失数据不敏感的业务场景，其实是不需要开启AOF的。</li>
</ol>
<h3>3.3 为什么还有无磁盘复制模式？</h3>
<p>Redis 默认是磁盘复制，但是<strong>如果使用比较低速的磁盘，这种操作会给主服务器带来较大的压力</strong>。Redis从2.8.18版本开始尝试支持无磁盘的复制。使用这种设置时，子进程直接将RDB通过网络发送给从服务器，不使用磁盘作为中间存储。</p>
<p><strong>无磁盘复制模式</strong>：master创建一个新进程直接dump RDB到slave的socket，不经过主进程，不经过硬盘。适用于disk较慢，并且网络较快的时候。</p>
<p>使用<code>repl-diskless-sync</code>配置参数来启动无磁盘复制。</p>
<p>使用<code>repl-diskless-sync-delay</code> 参数来配置传输开始的延迟时间；master等待一个<code>repl-diskless-sync-delay</code>的秒数，如果没slave来的话，就直接传，后来的得排队等了; 否则就可以一起传。</p>
<h3>3.4 为什么还会有从库的从库的设计？</h3>
<p>通过分析主从库间第一次数据同步的过程，你可以看到，一次全量复制中，对于主库来说，需要完成两个耗时的操作：<strong>生成 RDB 文件和传输 RDB 文件</strong>。</p>
<p>如果从库数量很多，而且都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量复制。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。此外，传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力。那么，有没有好的解决方法可以分担主库压力呢？</p>
<p>其实是有的，这就是“主 - 从 - 从”模式。</p>
<p>在刚才介绍的主从库模式中，所有的从库都是和主库连接，所有的全量复制也都是和主库进行的。现在，我们可以通过“主 - 从 - 从”模式<strong>将主库生成 RDB 和传输 RDB 的压力，以级联的方式分散到从库上</strong>。</p>
<p>简单来说，我们在部署主从集群的时候，可以手动选择一个从库（比如选择内存资源配置较高的从库），用于级联其他的从库。然后，我们可以再选择一些从库（例如三分之一的从库），在这些从库上执行如下命令，让它们和刚才所选的从库，建立起主从关系。</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">replicaof</span><span style="color:#98C379;--shiki-dark:#98C379"> 所选从库的IP</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span></span></code></pre>
</div><p>这样一来，这些从库就会知道，在进行同步时，不用再和主库进行交互了，只要和级联的从库进行写操作同步就行了，这就可以减轻主库上的压力，如下图所示：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018047.png" alt="image-20220625214600577" tabindex="0" loading="lazy"><figcaption>image-20220625214600577</figcaption></figure>
<p>级联的“主-从-从”模式好了，到这里，我们了解了主从库间通过全量复制实现数据同步的过程，以及通过“主 - 从 - 从”模式分担主库压力的方式。那么，一旦主从库完成了全量复制，它们之间就会一直维护一个网络连接，主库会通过这个连接将后续陆续收到的命令操作再同步给从库，这个过程也称为基于长连接的命令传播，可以避免频繁建立连接的开销。</p>
<h2>4. 读写分离及其中的问题</h2>
<p>在主从复制基础上实现的读写分离，可以实现Redis的读负载均衡：由主节点提供写服务，由一个或多个从节点提供读服务（多个从节点既可以提高数据冗余程度，也可以最大化读负载能力）；在读负载较大的应用场景下，可以大大提高Redis服务器的并发量。下面介绍在使用Redis读写分离时，需要注意的问题。</p>
<h3>4.1 <strong>延迟与不一致问题</strong></h3>
<p>前面已经讲到，<strong>由于主从复制的命令传播是异步的，延迟与数据的不一致不可避免。</strong></p>
<p>如果应用对数据不一致的接受程度程度较低，可能的优化措施包括：</p>
<ul>
<li>优化主从节点之间的网络环境（如在同机房部署）；</li>
<li>监控主从节点延迟（通过offset）判断，如果从节点延迟过大，通知应用不再通过该从节点读取数据；</li>
<li>使用集群同时扩展写负载和读负载等。</li>
</ul>
<p>在<strong>命令传播阶段以外的其他情况下，从节点的数据不一致可能更加严重</strong>，例如连接在数据同步阶段，或从节点失去与主节点的连接时等。<strong>从节点的slave-serve-stale-data参数便与此有关</strong>：它控制这种情况下从节点的表现；如果为yes（默认值），则从节点仍能够响应客户端的命令，<strong>如果为no，则从节点只能响应info、slaveof等少数命令</strong>。该参数的设置与应用对数据一致性的要求有关；如果对数据一致性要求很高，则应设置为no。</p>
<blockquote>
<p>对于分布式的场景，不一致是极有可能发生的。CAP 原理，在P 分区的情况下。C 一致性和 A高可用 只能二选一。如果数据强一致性，那么必然就没有高可用。然后高可用必然没有了一致性。我们只能保证做到最终一致性。减少延迟</p>
</blockquote>
<h3>4.2 数据过期问题（过期键的删除策略）</h3>
<p>在单机版Redis中，存在两种删除策略：</p>
<ul>
<li><code>惰性删除</code>：服务器不会主动删除数据，只有当客户端查询某个数据时，服务器判断该数据是否过期，如果过期则删除。</li>
<li><code>定期删除</code>：服务器执行定时任务删除过期数据，但是考虑到内存和CPU的折中（删除会释放内存，但是频繁的删除操作对CPU不友好），该删除的频率和执行时间都受到了限制。</li>
</ul>
<p>在主从复制场景下，为了主从节点的数据一致性，从节点不会主动删除数据，而是由主节点控制从节点中过期数据的删除。由于主节点的惰性删除和定期删除策略，都不能保证主节点及时对过期数据执行删除操作，因此，当客户端通过Redis从节点读取数据时，<strong>很容易读取到已经过期的数据</strong>。</p>
<blockquote>
<p>Redis 3.2中，从节点在读取数据时，增加了对数据是否过期的判断：如果该数据已过期，则不返回给客户端；将Redis升级到3.2可以解决数据过期问题。</p>
</blockquote>
<h3>4.3 <strong>故障切换问题</strong></h3>
<p>在没有使用哨兵的读写分离场景下，应用针对读和写分别连接不同的Redis节点；当主节点或从节点出现问题而发生更改时，需要及时修改应用程序读写Redis数据的连接；连接的切换可以手动进行，或者自己写监控程序进行切换，但前者响应慢、容易出错，后者实现复杂，成本都不算低。</p>
<h2>5. <strong>总结</strong></h2>
<p>在使用读写分离之前，可以考虑其他方法增加Redis的读负载能力：如尽量优化主节点（减少慢查询、减少持久化等其他情况带来的阻塞等）提高负载能力；使用Redis集群同时提高读负载能力和写负载能力等。如果使用读写分离，可以使用哨兵，使主从节点的故障切换尽可能自动化，并减少对应用程序的侵入。</p>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-copy.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 高可用：主从复制详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018898.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 事件：Redis事件机制详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-event.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-event.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 事件：Redis事件机制详解</source>
      <description>Redis进阶 - 事件：Redis事件机制详解 Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event 1. 事件机制 Redis中的事件驱动库只关注网络IO，以及定时器。 该事件库处理下面两类事件： 文件事件(file event...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event</p>
</blockquote>
<h2>1. 事件机制</h2>
<blockquote>
<p>Redis中的事件驱动库只关注网络IO，以及定时器。</p>
</blockquote>
<p>该事件库处理下面两类事件：</p>
<ul>
<li><strong>文件事件</strong>(file event)：用于处理 Redis 服务器和客户端之间的网络IO。</li>
<li><strong>时间事件</strong>(time eveat)：Redis 服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是处理这类定时操作的。</li>
</ul>
<p>事件驱动库的代码主要是在<code>src/ae.c</code>中实现的，其示意图如下所示。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018659.png" alt="image-20220624203703513" tabindex="0" loading="lazy"><figcaption>image-20220624203703513</figcaption></figure>
<p><code>aeEventLoop</code>是整个事件驱动的核心，它管理着文件事件表和时间事件列表，不断地循环处理着就绪的文件事件和到期的时间事件。</p>
<h3>1.1 文件事件</h3>
<blockquote>
<p>Redis基于<strong>Reactor模式</strong>开发了自己的网络事件处理器，也就是文件事件处理器。文件事件处理器使用<strong>IO多路复用技术</strong>（建议先看下 <a href="https://pdai.tech/md/java/io/java-io-nio-select-epoll.html" target="_blank" rel="noopener noreferrer">Java IO多路复用详解</a> ），同时监听多个套接字，并为套接字关联不同的事件处理函数。当套接字的可读或者可写事件触发时，就会调用相应的事件处理函数。</p>
</blockquote>
<h4>1.1.1 为什么单线程的 Redis 能那么快？</h4>
<p>Redis的瓶颈主要在IO而不是CPU，所以为了省开发量，在6.0版本前是单线程模型；其次，Redis 是单线程主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的</strong>，这也是 Redis 对外提供键值存储服务的主要流程。（但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的）。</p>
<p>Redis 采用了多路复用机制使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。</p>
<h4>1.1.2. Redis事件响应框架ae_event及文件事件处理器</h4>
<blockquote>
<p>Redis并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event。</p>
</blockquote>
<p>Redis 使用的IO多路复用技术主要有：<code>select</code>、<code>epoll</code>、<code>evport</code>和<code>kqueue</code>等。每个IO多路复用函数库在 Redis 源码中都对应一个单独的文件，比如<code>ae_select.c</code>，<code>ae_epoll.c</code>， <code>ae_kqueue.c</code>等。Redis 会根据不同的操作系统，按照不同的优先级选择多路复用技术。事件响应框架一般都采用该架构，比如 netty 和 libevent。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018722.png" alt="image-20220624204444366" tabindex="0" loading="lazy"><figcaption>image-20220624204444366</figcaption></figure>
<p>如下图所示，文件事件处理器有四个组成部分，它们分别是套接字、I/O多路复用程序、文件事件分派器以及事件处理器。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018748.png" alt="image-20220624204549096" tabindex="0" loading="lazy"><figcaption>image-20220624204549096</figcaption></figure>
<ol>
<li>文件事件是对套接字操作的抽象，每当一个套接字准备好执行 <code>accept</code>、<code>read</code>、<code>write</code>和 <code>close</code> 等操作时，就会产生一个文件事件。因为 Redis 通常会连接多个套接字，所以多个文件事件有可能并发的出现。</li>
<li>I/O多路复用程序负责监听多个套接字，并向文件事件派发器传递那些产生了事件的套接字。</li>
<li>尽管多个文件事件可能会并发地出现，但I/O多路复用程序总是会将所有产生的套接字都放到同一个队列(也就是后文中描述的aeEventLoop的fired就绪事件表)里边，然后文件事件处理器会以有序、同步、单个套接字的方式处理该队列中的套接字，也就是处理就绪的文件事件。</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018788.png" alt="image-20220624205014871" tabindex="0" loading="lazy"><figcaption>image-20220624205014871</figcaption></figure>
<p>所以，一次 Redis 客户端与服务器进行连接并且发送命令的过程如上图所示。</p>
<ul>
<li>客户端向服务端发起<strong>建立 socket 连接的请求</strong>，那么监听套接字将产生 AE_READABLE 事件，触发连接应答处理器执行。处理器会对客户端的连接请求</li>
<li>进行<strong>应答</strong>，然后创建客户端套接字，以及客户端状态，并将客户端套接字的 AE_READABLE 事件与命令请求处理器关联。</li>
<li>客户端建立连接后，向服务器<strong>发送命令</strong>，那么客户端套接字将产生 AE_READABLE 事件，触发命令请求处理器执行，处理器读取客户端命令，然后传递给相关程序去执行。</li>
<li><strong>执行命令获得相应的命令回复</strong>，为了将命令回复传递给客户端，服务器将客户端套接字的 AE_WRITEABLE 事件与命令回复处理器关联。当客户端试图读取命令回复时，客户端套接字产生 AE_WRITEABLE 事件，触发命令回复处理器将命令回复全部写入到套接字中。</li>
</ul>
<h4>1.1.3 Redis IO多路复用模型</h4>
<blockquote>
<p>PS：了解处理流程后，我们有必要深入看下Redis IO多路复用的模型，正好我看到极客时间中《Redis核心技术与实战》中相关内容讲的挺容易理解的，就转过来了</p>
</blockquote>
<p>在 Redis 只运行单线程的情况下，<strong>该机制允许内核中，同时存在多个监听套接字和已连接套接字</strong>。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</p>
<p>下图就是基于多路复用的 Redis IO 模型。图中的多个 FD 就是刚才所说的多个套接字。Redis 网络框架调用 epoll 机制，让内核监听这些套接字。此时，Redis 线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018824.png" alt="image-20220624205452379" tabindex="0" loading="lazy"><figcaption>image-20220624205452379</figcaption></figure>
<p>基于多路复用的Redis高性能IO模型为了在请求到达时能通知到 Redis 线程，select/epoll 提供了基于事件的回调机制，即针对不同事件的发生，调用相应的处理函数。那么，回调机制是怎么工作的呢？</p>
<p>其实，select/epoll 一旦监测到 FD 上有请求到达时，就会触发相应的事件。这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升 Redis 的响应性能。</p>
<p>为了方便你理解，我再以连接请求和读数据请求为例，具体解释一下。</p>
<p>这两个请求分别对应 Accept 事件和 Read 事件，Redis 分别对这两个事件注册 accept 和 get 回调函数。当 Linux 内核监听到有连接请求或读数据请求时，就会触发 Accept 事件和 Read 事件，此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。</p>
<blockquote>
<p>这就像病人去医院瞧病。在医生实际诊断前，每个病人（等同于请求）都需要先分诊、测体温、登记等。如果这些工作都由医生来完成，医生的工作效率就会很低。所以，医院都设置了分诊台，分诊台会一直处理这些诊断前的工作（类似于 Linux 内核监听请求），然后再转交给医生做实际诊断。这样即使一个医生（相当于 Redis 单线程），效率也能提升。</p>
</blockquote>
<h3>1.2 时间事件</h3>
<blockquote>
<p>Redis 的时间事件分为以下两类：</p>
</blockquote>
<ul>
<li><strong>定时事件</strong>：让一段程序在指定的时间之后执行一次。</li>
<li><strong>周期性事件</strong>：让一段程序每隔指定时间就执行一次。</li>
</ul>
<p>Redis 的时间事件的具体定义结构如下所示。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">typedef</span><span style="color:#C678DD;--shiki-dark:#C678DD"> struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> aeTimeEvent {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 全局唯一ID */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    long</span><span style="color:#C678DD;--shiki-dark:#C678DD"> long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> id;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* time event identifier. */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 秒精确的UNIX时间戳，记录时间事件到达的时间*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> when_sec;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* seconds */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 毫秒精确的UNIX时间戳，记录时间事件到达的时间*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    long</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> when_ms;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* milliseconds */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 时间处理器 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    aeTimeProc </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">timeProc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 事件结束回调函数，析构一些资源*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    aeEventFinalizerProc </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">finalizerProc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 私有数据 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    void</span><span style="color:#C678DD;--shiki-dark:#C678DD"> *</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">clientData;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 前驱节点 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> aeTimeEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">prev;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 后继节点 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> aeTimeEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">next;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">} aeTimeEvent;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个时间事件是定时事件还是周期性事件取决于时间处理器的返回值：</p>
<ul>
<li>如果返回值是 <code>AE_NOMORE</code>，那么这个事件是一个定时事件，该事件在达到后删除，之后不会再重复。</li>
<li>如果返回值是非 <code>AE_NOMORE</code> 的值，那么这个事件为周期性事件，当一个时间事件到达后，服务器会根据时间处理器的返回值，对时间事件的 when 属性进行更新，让这个事件在一段时间后再次达到。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018865.png" alt="image-20220624210057150" tabindex="0" loading="lazy"><figcaption>image-20220624210057150</figcaption></figure>
<p>服务器所有的时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就遍历整个链表，查找所有已到达的时间事件，并调用相应的事件处理器。正常模式下的Redis服务器只使用serverCron一个时间事件，而在benchmark模式下，服务器也只使用两个时间事件，所以不影响事件执行的性能。</p>
<h2>3. aeEventLoop的具体实现</h2>
<blockquote>
<p>介绍完文件事件和时间事件，我们接下来看一下 aeEventLoop的具体实现; 强烈建议先看下 <a href="https://pdai.tech/md/java/io/java-io-nio-select-epoll.html" target="_blank" rel="noopener noreferrer">Java IO多路复用详解</a>，再来理解。</p>
</blockquote>
<h3>3.1 创建事件管理器</h3>
<p>Redis 服务端在其初始化函数 initServer中，会创建事件管理器aeEventLoop对象。</p>
<p>函数aeCreateEventLoop将创建一个事件管理器，主要是初始化 aeEventLoop的各个属性值，比如events、fired、timeEventHead和apidata：</p>
<ul>
<li>首先创建aeEventLoop对象。</li>
<li>初始化未就绪文件事件表、就绪文件事件表。events指针指向未就绪文件事件表、fired指针指向就绪文件事件表。表的内容在后面添加具体事件时进行初变更。</li>
<li>初始化时间事件列表，设置timeEventHead和timeEventNextId属性。</li>
<li>调用aeApiCreate 函数创建epoll实例，并初始化 apidata。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">aeCreateEventLoop</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#C678DD;--shiki-dark:#C678DD">int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> setsize) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 创建事件状态结构 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> ((eventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop))) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL) </span><span style="color:#C678DD;--shiki-dark:#C678DD">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 创建未就绪事件表、就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75">(aeFileEvent)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75">(aeFiredEvent)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">||</span><span style="color:#E06C75;--shiki-dark:#E06C75"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL) </span><span style="color:#C678DD;--shiki-dark:#C678DD">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 设置数组大小 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">setsize </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 初始化执行最近一次执行时间 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">lastTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> time</span><span style="color:#E06C75;--shiki-dark:#E06C75">(NULL)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 初始化时间事件结构 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">timeEventHead </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">timeEventNextId </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">stop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">maxfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">beforesleep </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">aftersleep </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 将多路复用io与事件管理器关联起来 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">aeApiCreate</span><span style="color:#E06C75;--shiki-dark:#E06C75">(eventLoop) </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">goto</span><span style="color:#E06C75;--shiki-dark:#E06C75"> err</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 初始化监听事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    for</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> i </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">++</span><span style="color:#E06C75;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events[i]</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">mask</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75"> AE_NONE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">err</span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">   .....</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>aeApiCreate 函数首先创建了aeApiState对象，初始化了epoll就绪事件表；然后调用epoll_create创建了epoll实例，最后将该aeApiState赋值给apidata属性。</p>
<p>aeApiState对象中epfd存储epoll的标识，events是一个epoll就绪事件数组，当有epoll事件发生时，所有发生的epoll事件和其描述符将存储在这个数组中。这个就绪事件数组由应用层开辟空间、内核负责把所有发生的事件填充到该数组。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">static</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeApiCreate</span><span style="color:#E06C75;--shiki-dark:#E06C75">(aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    aeApiState </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">state </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75">(aeApiState))</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#E06C75;--shiki-dark:#E06C75">state) </span><span style="color:#C678DD;--shiki-dark:#C678DD">return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 初始化epoll就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    state</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> zmalloc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sizeof</span><span style="color:#E06C75;--shiki-dark:#E06C75">(struct epoll_event)</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">setsize)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#E06C75;--shiki-dark:#E06C75">state</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75">(state)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 创建 epoll 实例 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    state</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">epfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> epoll_create</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">1024</span><span style="color:#E06C75;--shiki-dark:#E06C75">)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* 1024 is just a hint for the kernel */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (state</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">epfd </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#E06C75;--shiki-dark:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75">(state</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75">(state)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 事件管理器与epoll关联 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">apidata </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">typedef struct aeApiState {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* epoll_event 实例描述符*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 存储epoll就绪事件表 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    struct epoll_event </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">} aeApiState</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.2 创建文件事件</h3>
<p>aeFileEvent是文件事件结构，对于每一个具体的事件，都有读处理函数和写处理函数等。Redis 调用aeCreateFileEvent函数针对不同的套接字的读写事件注册对应的文件事件。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">typedef struct aeFileEvent {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 监听事件类型掩码,值可以是 AE_READABLE 或 AE_WRITABLE */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 读事件处理器 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    aeFileProc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 写事件处理器 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    aeFileProc </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">wfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 多路复用库的私有数据 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    void</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">} aeFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 使用typedef定义的处理器函数的函数类型 */</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">typedef </span><span style="color:#C678DD;--shiki-dark:#C678DD">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeFileProc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(struct aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> void</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> *</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> mask)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span></code></pre>
</div><p>比如说，Redis 进行主从复制时，从服务器需要主服务器建立连接，它会发起一个 socekt连接，然后调用aeCreateFileEvent函数针对发起的socket的读写事件注册了对应的事件处理器，也就是syncWithMaster函数。</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">aeCreateFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">server.el</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75">AE_READABLE</span><span style="color:#C678DD;--shiki-dark:#C678DD">|</span><span style="color:#E06C75;--shiki-dark:#E06C75">AE_WRITABLE</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75">syncWithMaster</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;--shiki-dark:#D19A66">NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 符合aeFileProc的函数定义 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> syncWithMaster</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">el</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> void</span><span style="color:#C678DD;--shiki-dark:#C678DD"> *</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">privdata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {....}</span></span></code></pre>
</div><p>aeCreateFileEvent的参数fd指的是具体的socket套接字，proc指fd产生事件时，具体的处理函数，clientData则是回调处理函数时需要传入的数据。</p>
<p>aeCreateFileEvent主要做了三件事情：</p>
<ul>
<li>以fd为索引，在events未就绪事件表中找到对应事件。</li>
<li>调用aeApiAddEvent函数，该事件注册到具体的底层 I/O 多路复用中，本例为epoll。</li>
<li>填充事件的回调、参数、事件类型等参数。</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeCreateFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                       aeFileProc </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">proc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> void</span><span style="color:#C678DD;--shiki-dark:#C678DD"> *</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 取出 fd 对应的文件事件结构, fd 代表具体的 socket 套接字 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    aeFileEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">fe </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[fd];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 监听指定 fd 的指定事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">aeApiAddEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop, fd, mask) </span><span style="color:#C678DD;--shiki-dark:#C678DD">==</span><span style="color:#C678DD;--shiki-dark:#C678DD"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_ERR;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 置文件事件类型，以及事件的处理器 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_READABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">rfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> proc;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> proc;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 私有数据 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> clientData;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (fd </span><span style="color:#C678DD;--shiki-dark:#C678DD">&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">maxfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">        eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">maxfd</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> fd;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_OK;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上文所说，<strong>Redis 基于的底层 I/O 多路复用库有多套</strong>，所以aeApiAddEvent也有多套实现，下面的源码是epoll下的实现。其核心操作就是调用epoll的epoll_ctl函数来向epoll注册响应事件。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">static</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeApiAddEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    aeApiState </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">state </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">apidata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> epoll_event ee </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">};</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* avoid valgrind warning */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 如果 fd 没有关联任何事件，那么这是一个 ADD 操作。如果已经关联了某个/某些事件，那么这是一个 MOD 操作。 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> op </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[fd].</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> ==</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_NONE </span><span style="color:#C678DD;--shiki-dark:#C678DD">?</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            EPOLL_CTL_ADD </span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLL_CTL_MOD;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 注册事件到 epoll */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">    ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">|=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[fd].</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* Merge old events */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_READABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLIN;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE) </span><span style="color:#E5C07B;--shiki-dark:#E5C07B">ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> |=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">    ee</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> fd;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 调用epoll_ctl 系统调用，将事件加入epoll中 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">epoll_ctl</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,op,fd,</span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ee) </span><span style="color:#C678DD;--shiki-dark:#C678DD">==</span><span style="color:#C678DD;--shiki-dark:#C678DD"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">return</span><span style="color:#C678DD;--shiki-dark:#C678DD"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.3 事件处理</h3>
<p>因为 Redis 中同时存在文件事件和时间事件两个事件类型，所以服务器必须对这两个事件进行调度，决定何时处理文件事件，何时处理时间事件，以及如何调度它们。</p>
<p>aeMain函数以一个无限循环不断地调用aeProcessEvents函数来处理所有的事件。</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeMain</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">    eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">stop</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">stop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* 如果有需要在事件处理前执行的函数，那么执行它 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">beforesleep</span><span style="color:#C678DD;--shiki-dark:#C678DD"> !=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">beforesleep</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* 开始处理事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        aeProcessEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop, AE_ALL_EVENTS</span><span style="color:#C678DD;--shiki-dark:#C678DD">|</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">AE_CALL_AFTER_SLEEP);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
</div><p>下面是aeProcessEvents的伪代码，它会首先计算距离当前时间最近的时间事件，以此计算一个超时时间；然后调用aeApiPoll函数去等待底层的I/O多路复用事件就绪；aeApiPoll函数返回之后，会处理所有已经产生文件事件和已经达到的时间事件。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 伪代码 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeProcessEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> flags</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 获取到达时间距离当前时间最接近的时间事件*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    time_event </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeSearchNearestTimer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 计算最接近的时间事件距离到达还有多少毫秒*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> time_event</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">when</span><span style="color:#C678DD;--shiki-dark:#C678DD"> -</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> unix_ts_now</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 如果事件已经到达，那么remaind_ms为负数，将其设置为0 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) remaind_ms </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 根据 remaind_ms 的值，创建 timeval 结构*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    timeval </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> create_timeval_with_ms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(remaind_ms);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 结构决定，如果remaind_ms 的值为0，则aeApiPoll 调用后立刻返回，不阻塞*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* aeApiPoll调用epoll_wait函数，等待I/O事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    aeApiPoll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(timeval);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 处理所有已经产生的文件事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    processFileEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 处理所有已经到达的时间事件*/</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">    processTimeEvents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与aeApiAddEvent类似，aeApiPoll也有多套实现，它其实就做了两件事情，调用epoll_wait阻塞等待epoll的事件就绪，超时时间就是之前根据最快达到时间事件计算而来的超时时间；然后将就绪的epoll事件转换到fired就绪事件。aeApiPoll就是上文所说的I/O多路复用程序。具体过程如下图所示。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624210951908.png" alt="image-20220624210951908" tabindex="0" loading="lazy"><figcaption>image-20220624210951908</figcaption></figure>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">static</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> aeApiPoll</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E06C75;--shiki-dark:#E06C75">aeEventLoop </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#C678DD;--shiki-dark:#C678DD"> struct</span><span style="color:#E06C75;--shiki-dark:#E06C75"> timeval </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    aeApiState </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">state </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">apidata</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> retval, numevents </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 调用epoll_wait函数，等待时间为最近达到时间事件的时间计算而来。</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    retval </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> epoll_wait</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">epfd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">setsize</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            tvp </span><span style="color:#C678DD;--shiki-dark:#C678DD">?</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">tv_sec</span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#D19A66;--shiki-dark:#D19A66">1000</span><span style="color:#C678DD;--shiki-dark:#C678DD"> +</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> tvp</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">tv_usec</span><span style="color:#C678DD;--shiki-dark:#C678DD">/</span><span style="color:#D19A66;--shiki-dark:#D19A66">1000</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#C678DD;--shiki-dark:#C678DD">:</span><span style="color:#C678DD;--shiki-dark:#C678DD"> -</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 有至少一个事件就绪？</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (retval </span><span style="color:#C678DD;--shiki-dark:#C678DD">&gt;</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> j;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /*为已就绪事件设置相应的模式，并加入到 eventLoop 的 fired 数组中*/</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        numevents </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> retval;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (j </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">; j </span><span style="color:#C678DD;--shiki-dark:#C678DD">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> numevents; j</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> epoll_event </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">e </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD">+</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">j;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLIN)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_READABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLOUT)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLERR) </span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> EPOLLHUP)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">|=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            /* 设置就绪事件表元素 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> e</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">            eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 返回已就绪事件个数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> numevents;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>processFileEvent是处理就绪文件事件的伪代码，也是上文所述的文件事件分派器，它其实就是遍历fired就绪事件表，然后根据对应的事件类型来调用事件中注册的不同处理器，读事件调用rfileProc，而写事件调用wfileProc。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">void</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> processFileEvent</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#C678DD;--shiki-dark:#C678DD">int</span><span style="color:#E06C75;font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> numevents</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (j </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">; j </span><span style="color:#C678DD;--shiki-dark:#C678DD">&lt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> numevents; j</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            /* 从已就绪数组中获取事件 */</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            aeFileEvent </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">fe </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">events</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> fd </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">fired</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">[j].</span><span style="color:#E06C75;--shiki-dark:#E06C75">fd</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> fired </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> invert </span><span style="color:#C678DD;--shiki-dark:#C678DD">=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_BARRIER;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            /* 读事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">invert </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_READABLE) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                /* 调用读处理函数 */</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">                fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                fired</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            /* 写事件. */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_WRITABLE) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">||</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD"> !=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">                    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">wfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    fired</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (invert </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">mask</span><span style="color:#C678DD;--shiki-dark:#C678DD"> &amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> mask </span><span style="color:#C678DD;--shiki-dark:#C678DD">&amp;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> AE_READABLE) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">                if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">fired </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">||</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">wfileProc</span><span style="color:#C678DD;--shiki-dark:#C678DD"> !=</span><span style="color:#E5C07B;--shiki-dark:#E5C07B"> fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">                    fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">rfileProc</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(eventLoop,fd,</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">fe</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,mask);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                    fired</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">            processed</span><span style="color:#C678DD;--shiki-dark:#C678DD">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而processTimeEvents是处理时间事件的函数，它会遍历aeEventLoop的事件事件列表，如果时间事件到达就执行其timeProc函数，并根据函数的返回值是否等于AE_NOMORE来决定该时间事件是否是周期性事件，并修改器到达时间。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">static</span><span style="color:#C678DD;--shiki-dark:#C678DD"> int</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> processTimeEvents</span><span style="color:#E06C75;--shiki-dark:#E06C75">(aeEventLoop </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">eventLoop) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> processed </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    aeTimeEvent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">te</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    long</span><span style="color:#C678DD;--shiki-dark:#C678DD"> long</span><span style="color:#E06C75;--shiki-dark:#E06C75"> maxId</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    time_t now </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> time</span><span style="color:#E06C75;--shiki-dark:#E06C75">(NULL)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    ....</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">lastTime </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> now</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">timeEventHead</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    maxId </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">timeEventNextId</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">-</span><span style="color:#D19A66;--shiki-dark:#D19A66">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* 遍历时间事件链表 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    while</span><span style="color:#E06C75;--shiki-dark:#E06C75">(te) {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        long</span><span style="color:#E06C75;--shiki-dark:#E06C75"> now_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75"> now_ms</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        long</span><span style="color:#C678DD;--shiki-dark:#C678DD"> long</span><span style="color:#E06C75;--shiki-dark:#E06C75"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* 删除需要删除的时间事件 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#E06C75;--shiki-dark:#E06C75"> AE_DELETED_EVENT_ID) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            aeTimeEvent </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">*</span><span style="color:#E06C75;--shiki-dark:#E06C75">next </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">prev)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">prev</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            else</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                eventLoop</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">timeEventHead </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">prev </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">prev</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">finalizerProc)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">finalizerProc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">            zfree</span><span style="color:#E06C75;--shiki-dark:#E06C75">(te)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            continue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* id 大于最大maxId,是该循环周期生成的时间事件，不处理 */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> maxId) {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            continue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        }</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">        aeGetTime</span><span style="color:#E06C75;--shiki-dark:#E06C75">(</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">now_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2"> &amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">now_ms)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* 事件已经到达，调用其timeProc函数*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">        if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (now_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">when_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            (now_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">==</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">when_sec </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75"> now_ms </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&gt;=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">when_ms))</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            int</span><span style="color:#E06C75;--shiki-dark:#E06C75"> retval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            retval </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">timeProc</span><span style="color:#E06C75;--shiki-dark:#E06C75">(eventLoop</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75"> id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">clientData)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            processed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">            /* 如果返回值不等于 AE_NOMORE,表示是一个周期性事件，修改其when_sec和when_ms属性*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">            if</span><span style="color:#E06C75;--shiki-dark:#E06C75"> (retval </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">!=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> AE_NOMORE) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">                aeAddMillisecondsToNow</span><span style="color:#E06C75;--shiki-dark:#E06C75">(retval</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">when_sec</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#56B6C2;--shiki-dark:#56B6C2">&amp;</span><span style="color:#E06C75;--shiki-dark:#E06C75">te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">when_ms)</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            } </span><span style="color:#C678DD;--shiki-dark:#C678DD">else</span><span style="color:#E06C75;--shiki-dark:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                /* 一次性事件，标记为需删除，下次遍历时会删除*/</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">                te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">id </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> AE_DELETED_EVENT_ID</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">        te </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#E06C75;--shiki-dark:#E06C75"> te</span><span style="color:#C678DD;--shiki-dark:#C678DD">-&gt;</span><span style="color:#E06C75;--shiki-dark:#E06C75">next</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    return</span><span style="color:#E06C75;--shiki-dark:#E06C75"> processed</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.4 删除事件</h3>
<p>当不在需要某个事件时，需要把事件删除掉。例如: 如果fd同时监听读事件、写事件。当不在需要监听写事件时，可以把该fd的写事件删除。</p>
<p>aeDeleteEventLoop函数的执行过程总结为以下几个步骤</p>
<ul>
<li>根据fd在未就绪表中查找到事件</li>
<li>取消该fd对应的相应事件标识符</li>
<li>调用aeApiFree函数，内核会将epoll监听红黑树上的相应事件监听取消。</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-event.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 事件：Redis事件机制详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131018659.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - Redis热key问题</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-hot-key.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-hot-key.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - Redis热key问题</source>
      <description>Redis进阶 - Redis热key问题 0. 引言 其实热key问题说来也很简单，就是瞬间有几十万的请求去访问redis上某个固定的key，从而压垮缓存服务的情情况。 其实生活中也是有不少这样的例子。比如XX明星结婚。那么关于XX明星的Key就会瞬间增大，就会出现热数据问题。 ps:hot key和big key问题，大家一定要有所了解。 本文预计...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>0. 引言</h2>
<p>其实热key问题说来也很简单，就是瞬间有几十万的请求去访问redis上某个固定的key，从而压垮缓存服务的情情况。<br>
其实生活中也是有不少这样的例子。比如XX明星结婚。那么关于XX明星的Key就会瞬间增大，就会出现热数据问题。</p>
<blockquote>
<p><code>ps:</code>hot key和big key问题，大家一定要有所了解。</p>
</blockquote>
<p>本文预计分为如下几个部分</p>
<ul>
<li>热key问题</li>
<li>如何发现</li>
<li>业内方案</li>
</ul>
<h2>1. 热Key问题</h2>
<p>上面提到，所谓热key问题就是，突然有几十万的请求去访问redis上的某个特定key。那么，这样会造成流量过于集中，达到物理网卡上限，从而导致这台redis的服务器宕机。<br>
那接下来这个key的请求，就会直接怼到你的数据库上，导致你的服务不可用。</p>
<h2>2. 怎么发现热key</h2>
<ul>
<li><em>方法一:凭借业务经验，进行预估哪些是热key</em><br>
其实这个方法还是挺有可行性的。比如某商品在做秒杀，那这个商品的key就可以判断出是热key。缺点很明显，并非所有业务都能预估出哪些key是热key。</li>
<li><em>方法二:在客户端进行收集</em><br>
这个方式就是在操作redis之前，加入一行代码进行数据统计。那么这个数据统计的方式有很多种，也可以是给外部的通讯系统发送一个通知信息。缺点就是对客户端代码造成入侵。</li>
<li><em>方法三:在Proxy层做收集</em><br>
有些集群架构是下面这样的，Proxy可以是Twemproxy，是统一的入口。可以在Proxy层做收集上报，但是缺点很明显，并非所有的redis集群架构都有proxy。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019429.png" alt="image-20221128232245563" tabindex="0" loading="lazy"><figcaption>image-20221128232245563</figcaption></figure>
<ul>
<li><em>方法四:用redis自带命令</em><br>
(1)monitor命令，该命令可以实时抓取出redis服务器接收到的命令，然后写代码统计出热key是啥。当然，也有现成的分析工具可以给你使用，比如<code>redis-faina</code>。但是该命令在高并发的条件下，有内存增暴增的隐患，还会降低redis的性能。<br>
(2)hotkeys参数，redis 4.0.3提供了redis-cli的热点key发现功能，执行redis-cli时加上–hotkeys选项即可。但是该参数在执行的时候，如果key比较多，执行起来比较慢。</li>
<li><em>方法五:自己抓包评估</em><br>
Redis客户端使用TCP协议与服务端进行交互，通信协议采用的是RESP。自己写程序监听端口，按照RESP协议规则解析数据，进行分析。缺点就是开发成本高，维护困难，有丢包可能性。</li>
</ul>
<p>以上五种方案，各有优缺点。根据自己业务场景进行抉择即可。那么发现热key后，如何解决呢？</p>
<h2>3. 如何解决</h2>
<p>目前业内的方案有两种</p>
<h3><em>3.1 利用二级缓存</em></h3>
<p>比如利用<code>ehcache</code>，或者一个<code>HashMap</code>都可以。在你发现热key以后，把热key加载到系统的JVM中。<br>
针对这种热key请求，会直接从jvm中取，而不会走到redis层。<br>
假设此时有十万个针对同一个key的请求过来,如果没有本地缓存，这十万个请求就直接怼到同一台redis上了。<br>
现在假设，你的应用层有50台机器，OK，你也有jvm缓存了。这十万个请求平均分散开来，每个机器有2000个请求，会从JVM中取到value值，然后返回数据。避免了十万个请求怼到同一台redis上的情形。</p>
<h3><em>3.2 备份热key</em></h3>
<p>这个方案也很简单。不要让key走到同一台redis上不就行了。我们把这个key，在多个redis上都存一份不就好了。接下来，有热key请求进来的时候，我们就在有备份的redis上随机选取一台，进行访问取值，返回数据。<br>
假设redis的集群数量为N，步骤如下图所示</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019478.png" alt="image-20221128232534600" tabindex="0" loading="lazy"><figcaption>image-20221128232534600</figcaption></figure>
<p>注:不一定是2N，你想取3N，4N都可以，看要求。<br>
伪代码如下</p>
<div class="language-haskell" data-ext="haskell" data-title="haskell"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">const </span><span style="color:#D19A66;--shiki-dark:#D19A66">M</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> = </span><span style="color:#D19A66;--shiki-dark:#D19A66">N</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> * </span><span style="color:#D19A66;--shiki-dark:#D19A66">2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">//生成随机数</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">random = </span><span style="color:#D19A66;--shiki-dark:#D19A66">GenRandom</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#D19A66;--shiki-dark:#D19A66">M</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">//构造备份新key</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">bakHotKey = hotKey + “_” + random</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> = redis.</span><span style="color:#D19A66;--shiki-dark:#D19A66">GET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#C678DD;--shiki-dark:#C678DD">bakHotKey</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">if</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> data == </span><span style="color:#D19A66;--shiki-dark:#D19A66">NULL</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75">    data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> = </span><span style="color:#D19A66;--shiki-dark:#D19A66">GetFromDB()</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    redis.</span><span style="color:#D19A66;--shiki-dark:#D19A66">SET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(bakHotKey, expireTime + </span><span style="color:#D19A66;--shiki-dark:#D19A66">GenRandom</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#D19A66;--shiki-dark:#D19A66">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">,</span><span style="color:#D19A66;--shiki-dark:#D19A66">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">}</span></span></code></pre>
</div><h2>4. 业内方案</h2>
<p>OK，其实看完上面的内容，大家可能会有一个疑问。</p>
<blockquote>
<p><strong>有办法在项目运行过程中，自动发现热key，然后程序自动处理么？</strong></p>
</blockquote>
<p>嗯，好问题，那我们来讲讲业内怎么做的。其实只有两步<br>
(1)监控热key<br>
(2)通知系统做处理<br>
正巧，前几天有赞出了一篇《有赞透明多级缓存解决方案（TMC）》，里头也有提到热点key问题，我们刚好借此说明</p>
<h3>4.1 监控热key</h3>
<p>在监控热key方面，有赞用的是方式二：<strong>在客户端进行收集</strong>。<br>
在《有赞透明多级缓存解决方案（TMC）》中有一句话提到</p>
<blockquote>
<p><strong>TMC 对原生jedis包的JedisPool和Jedis类做了改造，在JedisPool初始化过程中集成TMC“热点发现”+“本地缓存”功能Hermes-SDK包的初始化逻辑。</strong></p>
</blockquote>
<p>也就说人家改写了jedis原生的jar包，加入了Hermes-SDK包。<br>
那Hermes-SDK包用来干嘛？<br>
OK，就是做<strong>热点发现</strong>和<strong>本地缓存</strong>。<br>
从监控的角度看，该包对于Jedis-Client的每次key值访问请求，Hermes-SDK 都会通过其通信模块将key访问事件异步上报给Hermes服务端集群，以便其根据上报数据进行“热点探测”。</p>
<p>当然，这只是其中一种方式，有的公司在监控方面用的是方式五:<strong>自己抓包评估</strong>。<br>
具体是这么做的，先利用flink搭建一套流式计算系统。然后自己写一个抓包程序抓redis监听端口的数据，抓到数据后往kafka里丢。<br>
接下来，流式计算系统消费kafka里的数据，进行数据统计即可，也能达到监控热key的目的。</p>
<h3>4.2 通知系统做处理</h3>
<p>在这个角度，有赞用的是上面的解决方案一:利用二级缓存进行处理。<br>
有赞在监控到热key后，Hermes服务端集群会通过各种手段通知各业务系统里的Hermes-SDK，告诉他们:"老弟，这个key是热key，记得做本地缓存。"<br>
于是Hermes-SDK就会将该key缓存在本地，对于后面的请求。Hermes-SDK发现这个是一个热key，直接从本地中拿，而不会去访问集群。</p>
<p>除了这种通知方式以外。我们也可以这么做，比如你的流式计算系统监控到热key了，往zookeeper里头的某个节点里写。然后你的业务系统监听该节点，发现节点数据变化了，就代表发现热key。最后往本地缓存里写，也是可以的。</p>
<p>通知方式各种各样，大家可以自由发挥。本文只是提供一个思路。</p>
<h2>参考文章</h2>
<p><a href="https://www.cnblogs.com/rjzheng/p/10874537.html" target="_blank" rel="noopener noreferrer">谈谈redis的热key问题如何解决</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019429.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 性能调优：Redis性能调优详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-performance.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-performance.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 性能调优：Redis性能调优详解</source>
      <description>Redis进阶 - 性能调优：Redis性能调优详解 Redis 的性能问题，涉及到的知识点非常广，几乎涵盖了 CPU、内存、网络、甚至磁盘的方方面面；同时还需要对上文中一些基础或底层有详细的了解。 1. 前言 Redis 作为优秀的内存数据库，其拥有非常高的性能，单个实例的 OPS 能够达到 10W 左右。但也正因此如此，当我们在使用 Redis 时...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis 的性能问题，涉及到的知识点非常广，几乎涵盖了 CPU、内存、网络、甚至磁盘的方方面面；同时还需要对上文中一些基础或底层有详细的了解。</p>
</blockquote>
<h2>1. 前言</h2>
<blockquote>
<p>Redis 作为优秀的内存数据库，其拥有非常高的性能，单个实例的 OPS 能够达到 10W 左右。但也正因此如此，当我们在使用 Redis 时，如果发现操作延迟变大的情况，就会与我们的预期不符。</p>
</blockquote>
<p>你也许或多或少地，也遇到过以下这些场景：</p>
<ul>
<li>在 Redis 上执行同样的命令，为什么有时响应很快，有时却很慢？</li>
<li>为什么 Redis 执行 SET、DEL 命令耗时也很久？</li>
<li>为什么我的 Redis 突然慢了一波，之后又恢复正常了？</li>
<li>为什么我的 Redis 稳定运行了很久，突然从某个时间点开始变慢了？</li>
<li>...</li>
</ul>
<p>如果你并不清楚 Redis 内部的实现原理，那么在排查这种延迟问题时就会一头雾水。</p>
<p>如果你也遇到了以上情况，那么，这篇文章将会给你一个「全面」的问题排查思路，并且针对这些导致变慢的场景，我还会给你一个高效的解决方案。</p>
<h2>2. Redis真的变慢了吗？</h2>
<blockquote>
<p>首先，在开始之前，你需要弄清楚 Redis 是否真的变慢了？</p>
</blockquote>
<p>如果你发现你的业务服务 API 响应延迟变长，首先你需要先排查服务内部，究竟是哪个环节拖慢了整个服务。</p>
<p>比较高效的做法是，在服务内部集成链路追踪，也就是在服务访问外部依赖的出入口，记录下每次请求外部依赖的响应延时。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220627222146095.png" alt="image-20220627222146095" tabindex="0" loading="lazy"><figcaption>image-20220627222146095</figcaption></figure>
<p>如果你发现确实是操作 Redis 的这条链路耗时变长了，那么此刻你需要把焦点关注在业务服务到 Redis 这条链路上。</p>
<p>从你的业务服务到 Redis 这条链路变慢的原因可能也有 2 个：</p>
<ul>
<li>业务服务器到 Redis 服务器之间的网络存在问题，例如网络线路质量不佳，网络数据包在传输时存在延迟、丢包等情况</li>
<li>Redis 本身存在问题，需要进一步排查是什么原因导致 Redis 变慢</li>
</ul>
<p>通常来说，第一种情况发生的概率比较小，如果是服务器之间网络存在问题，那部署在这台业务服务器上的所有服务都会发生网络延迟的情况，此时你需要联系网络运维同事，让其协助解决网络问题。</p>
<p>我们这篇文章，重点关注的是第二种情况。</p>
<p>也就是从 Redis 角度来排查，是否存在导致变慢的场景，以及都有哪些因素会导致 Redis 的延迟增加，然后针对性地进行优化。</p>
<p>排除网络原因，如何确认你的 Redis 是否真的变慢了？</p>
<p>首先，你需要对 Redis 进行基准性能测试，了解你的 Redis 在生产环境服务器上的基准性能。</p>
<h3>2.1 <strong>什么是基准性能</strong>？</h3>
<p>简单来讲，基准性能就是指 Redis 在一台负载正常的机器上，其最大的响应延迟和平均响应延迟分别是怎样的？</p>
<p>为什么要测试基准性能？我参考别人提供的响应延迟，判断自己的 Redis 是否变慢不行吗？</p>
<p>答案是否定的。</p>
<p>因为 Redis 在不同的软硬件环境下，它的性能是各不相同的。</p>
<p>例如，我的机器配置比较低，当延迟为 2ms 时，我就认为 Redis 变慢了，但是如果你的硬件配置比较高，那么在你的运行环境下，可能延迟是 0.5ms 时就可以认为 Redis 变慢了。</p>
<p>所以，你只有了解了你的 Redis 在生产环境服务器上的基准性能，才能进一步评估，当其延迟达到什么程度时，才认为 Redis 确实变慢了。</p>
<h3>2.2 <strong>具体如何做</strong>？</h3>
<p>为了避免业务服务器到 Redis 服务器之间的网络延迟，你需要直接在 Redis 服务器上测试实例的响应延迟情况。执行以下命令，就可以测试出这个实例 60 秒内的最大响应延迟：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> redis-cli</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -h</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --intrinsic-latency</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 60</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 15</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 17</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 18</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 31</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 32</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 59</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Max</span><span style="color:#98C379;--shiki-dark:#98C379"> latency</span><span style="color:#98C379;--shiki-dark:#98C379"> so</span><span style="color:#98C379;--shiki-dark:#98C379"> far:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 72</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds.</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1428669267</span><span style="color:#98C379;--shiki-dark:#98C379"> total</span><span style="color:#98C379;--shiki-dark:#98C379"> runs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (avg </span><span style="color:#98C379;--shiki-dark:#98C379">latency:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.0420</span><span style="color:#98C379;--shiki-dark:#98C379"> microseconds</span><span style="color:#98C379;--shiki-dark:#98C379"> /</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 42.00</span><span style="color:#98C379;--shiki-dark:#98C379"> nanoseconds</span><span style="color:#98C379;--shiki-dark:#98C379"> per</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">).</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Worst</span><span style="color:#98C379;--shiki-dark:#98C379"> run</span><span style="color:#98C379;--shiki-dark:#98C379"> took</span><span style="color:#98C379;--shiki-dark:#98C379"> 1429x</span><span style="color:#98C379;--shiki-dark:#98C379"> longer</span><span style="color:#98C379;--shiki-dark:#98C379"> than</span><span style="color:#98C379;--shiki-dark:#98C379"> the</span><span style="color:#98C379;--shiki-dark:#98C379"> average</span><span style="color:#98C379;--shiki-dark:#98C379"> latency.</span></span></code></pre>
</div><p>从输出结果可以看到，这 60 秒内的最大响应延迟为 72 微秒（0.072毫秒）。</p>
<p>你还可以使用以下命令，查看一段时间内 Redis 的最小、最大、平均访问延迟：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> redis-cli</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -h</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --latency-history</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (100 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.01 seconds range</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.12</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (99 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.01 seconds range</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (99 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.01 seconds range</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.10</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (99 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.01 seconds range</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.13</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (98 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.00 seconds range</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">min:</span><span style="color:#98C379;--shiki-dark:#98C379"> 0,</span><span style="color:#98C379;--shiki-dark:#98C379"> max:</span><span style="color:#98C379;--shiki-dark:#98C379"> 1,</span><span style="color:#98C379;--shiki-dark:#98C379"> avg:</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.08</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (99 </span><span style="color:#98C379;--shiki-dark:#98C379">samples</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) -- 1.01 seconds range</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span></code></pre>
</div><p>以上输出结果是，每间隔 1 秒，采样 Redis 的平均操作耗时，其结果分布在 0.08 ~ 0.13 毫秒之间。</p>
<p>了解了基准性能测试方法，那么你就可以按照以下几步，来判断你的 Redis 是否真的变慢了：</p>
<ul>
<li>在相同配置的服务器上，测试一个正常 Redis 实例的基准性能</li>
<li>找到你认为可能变慢的 Redis 实例，测试这个实例的基准性能</li>
<li>如果你观察到，这个实例的运行延迟是正常 Redis 基准性能的 2 倍以上，即可认为这个 Redis 实例确实变慢了</li>
</ul>
<p>确认是 Redis 变慢了，那如何排查是哪里发生了问题呢？</p>
<p>下面跟着我的思路，我们从易到难，一步步来分析可能导致 Redis 变慢的因素。</p>
<h2>3. 使用复杂度过高的命令</h2>
<blockquote>
<p>首先，第一步，你需要去查看一下 Redis 的慢日志（slowlog）。</p>
</blockquote>
<p>Redis 提供了慢日志命令的统计功能，它记录了有哪些命令在执行时耗时比较久。</p>
<p>查看 Redis 慢日志之前，你需要设置慢日志的阈值。例如，设置慢日志的阈值为 5 毫秒，并且保留最近 500 条慢日志记录：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"># 命令执行耗时超过 </span><span style="color:#D19A66;--shiki-dark:#D19A66">5</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 毫秒，记录慢日志</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">CONFIG </span><span style="color:#C678DD;--shiki-dark:#C678DD">SET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> slowlog-</span><span style="color:#C678DD;--shiki-dark:#C678DD">log</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">-slower-than </span><span style="color:#D19A66;--shiki-dark:#D19A66">5000</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"># 只保留最近 </span><span style="color:#D19A66;--shiki-dark:#D19A66">500</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> 条慢日志</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">CONFIG </span><span style="color:#C678DD;--shiki-dark:#C678DD">SET</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> slowlog-max-len </span><span style="color:#D19A66;--shiki-dark:#D19A66">500</span></span></code></pre>
</div><p>设置完成之后，所有执行的命令如果操作耗时超过了 5 毫秒，都会被 Redis 记录下来。</p>
<p>此时，你可以执行以下命令，就可以查询到最近记录的慢日志：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">SLOWLOG</span><span style="color:#98C379;--shiki-dark:#98C379"> get</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 32693       </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 慢日志ID</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1593763337  </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 执行时间戳</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5299        </span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 执行耗时(微秒)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"LRANGE"</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">           # 具体执行的命令和参数</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"user_list:2000"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"0"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"-1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 32692</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1593763337</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 5044</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">   4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1) </span><span style="color:#98C379;--shiki-dark:#98C379">"GET"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">      2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"user_info:1000"</span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span></code></pre>
</div><p>通过查看慢日志，我们就可以知道在什么时间点，执行了哪些命令比较耗时。</p>
<p>如果你的应用程序执行的 Redis 命令有以下特点，那么有可能会导致操作延迟变大：</p>
<ul>
<li><strong>经常使用 O(N) 以上复杂度的命令，例如 SORT、SUNION、ZUNIONSTORE 聚合类命令</strong></li>
<li>使用 O(N) 复杂度的命令，但 N 的值非常大</li>
</ul>
<p><strong>第一种情况导致变慢的原因在于，Redis 在操作内存数据时，时间复杂度过高，要花费更多的 CPU 资源。</strong></p>
<p><strong>第二种情况导致变慢的原因在于，Redis 一次需要返回给客户端的数据过多，更多时间花费在数据协议的组装和网络传输过程中。</strong></p>
<p>另外，我们还可以从资源使用率层面来分析，如果你的应用程序操作 Redis 的 OPS 不是很大，但 Redis 实例的 CPU 使用率却很高，那么很有可能是使用了复杂度过高的命令导致的。</p>
<p>除此之外，我们都知道，Redis 是单线程处理客户端请求的，如果你经常使用以上命令，那么当 Redis 处理客户端请求时，一旦前面某个命令发生耗时，就会导致后面的请求发生排队，对于客户端来说，响应延迟也会变长。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019556.png" alt="image-20220627223154759" tabindex="0" loading="lazy"><figcaption>image-20220627223154759</figcaption></figure>
<p>针对这种情况如何解决呢？</p>
<p>答案很简单，你可以使用以下方法优化你的业务：</p>
<ul>
<li>尽量不使用 O(N) 以上复杂度过高的命令，对于数据的聚合操作，放在客户端做</li>
<li>执行 O(N) 命令，保证 N 尽量的小（推荐 N &lt;= 300），每次获取尽量少的数据，让 Redis 可以及时处理返回</li>
</ul>
<h2>4. 操作bigkey</h2>
<blockquote>
<p>如果你查询慢日志发现，并不是复杂度过高的命令导致的，而都是 SET / DEL 这种简单命令出现在慢日志中，那么你就要怀疑你的实例否写入了 bigkey。</p>
</blockquote>
<p>Redis 在写入数据时，需要为新的数据分配内存，相对应的，当从 Redis 中删除数据时，它会释放对应的内存空间。</p>
<p><strong>如果一个 key 写入的 value 非常大，那么 Redis 在分配内存时就会比较耗时</strong>。同样的，当删除这个 key 时，释放内存也会比较耗时，这种类型的 key 我们一般称之为 bigkey。</p>
<p>此时，你需要检查你的业务代码，是否存在写入 bigkey 的情况。你需要评估写入一个 key 的数据大小，尽量避免一个 key 存入过大的数据。</p>
<h3>4.1 查看bigkey 的分布情况</h3>
<p><strong>如果已经写入了 bigkey，那有没有什么办法可以扫描出实例中 bigkey 的分布情况呢</strong>？</p>
<p>答案是可以的。</p>
<p>Redis 提供了扫描 bigkey 的命令，执行以下命令就可以扫描出，一个实例中 bigkey 的分布情况，输出结果是以类型维度展示的：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">$</span><span style="color:#98C379;--shiki-dark:#98C379"> redis-cli</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -h</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 127.0.0.1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -p</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6379</span><span style="color:#D19A66;--shiki-dark:#D19A66"> --bigkeys</span><span style="color:#D19A66;--shiki-dark:#D19A66"> -i</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0.01</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#56B6C2;--shiki-dark:#56B6C2">...</span></span></code></pre>
</div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220627222146095.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 消息传递：发布订阅模式详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-pub-sub.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-pub-sub.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 消息传递：发布订阅模式详解</source>
      <description>Redis进阶 - 消息传递：发布订阅模式详解 1. Redis发布订阅简介 Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 Redis 的 SUBSCRIBE 命令可以让客户端订阅任意数量的频道， 每当有新信息发送到被订阅的频道时， 信息就会被发送给所有订阅指定频道的客户端。 1.1 例...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Redis发布订阅简介</h2>
<blockquote>
<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
</blockquote>
<p>Redis 的 SUBSCRIBE 命令可以让客户端订阅任意数量的频道， 每当有新信息发送到被订阅的频道时， 信息就会被发送给所有订阅指定频道的客户端。</p>
<h3>1.1 例子</h3>
<p>作为例子， 下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624195054351.png" alt="image-20220624195054351" tabindex="0" loading="lazy"><figcaption>image-20220624195054351</figcaption></figure>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624195118822.png" alt="image-20220624195118822" tabindex="0" loading="lazy"><figcaption>image-20220624195118822</figcaption></figure>
<h2>2. 发布/订阅使用</h2>
<blockquote>
<p>Redis有两种发布/订阅模式：</p>
<ul>
<li>基于频道(Channel)的发布/订阅</li>
<li>基于模式(pattern)的发布/订阅</li>
</ul>
</blockquote>
<h3>2.1 基于频道(Channel)的发布/订阅</h3>
<p>"发布/订阅"模式包含两种角色，分别是发布者和订阅者。发布者可以向指定的频道(channel)发送消息; 订阅者可以订阅一个或者多个频道(channel),所有订阅此频道的订阅者都会收到此消息。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624195302437.png" alt="image-20220624195302437" tabindex="0" loading="lazy"><figcaption>image-20220624195302437</figcaption></figure>
<h4>2.1.1 基于频道<strong>发布者 publish发布消息</strong></h4>
<p>发布者发布消息的命令是 publish,用法是 publish channel message，如向 channel1.1说一声hi</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> channel:1</span><span style="color:#98C379;--shiki-dark:#98C379"> hi</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
</div><p>这样消息就发出去了。返回值表示接收这条消息的订阅者数量。<strong>发出去的消息不会被持久化</strong>，也就是有客户端订阅channel:1后只能接收到后续发布到该频道的消息，<strong>之前的就接收不到了</strong>。</p>
<h4>2.1.2 基于频道<strong>订阅者subscribe 订阅频道</strong></h4>
<p>订阅频道的命令是 subscribe，可以同时订阅多个频道，用法是 subscribe channel1 [channel2 ...],例如新开一个客户端订阅上面频道:(不会收到消息，因为不会收到订阅之前就发布到该频道的消息)</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">subscribe</span><span style="color:#98C379;--shiki-dark:#98C379"> channel:1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Reading</span><span style="color:#98C379;--shiki-dark:#98C379"> messages...</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (press </span><span style="color:#98C379;--shiki-dark:#98C379">Ctrl-C</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> quit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"subscribe"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> // 消息类型</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"channel:1"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> // 频道</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"hi"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> // 消息内容</span></span></code></pre>
</div><p>执行上面命令客户端会进入订阅状态，处于此状态下客户端不能使用除<code>subscribe</code>、<code>unsubscribe</code>、<code>psubscribe</code>和<code>punsubscribe</code>这四个属于"发布/订阅"之外的命令，否则会报错。</p>
<p>进入订阅状态后客户端可能收到3种类型的回复。每种类型的回复都包含3个值，第一个值是消息的类型，根据消类型的不同，第二个和第三个参数的含义可能不同。</p>
<p>消息类型的取值可能是以下3个:</p>
<ul>
<li>subscribe。表示订阅成功的反馈信息。第二个值是订阅成功的频道名称，第三个是当前客户端订阅的频道数量。</li>
<li>message。表示接收到的消息，第二个值表示产生消息的频道名称，第三个值是消息的内容。</li>
<li>unsubscribe。表示成功取消订阅某个频道。第二个值是对应的频道名称，第三个值是当前客户端订阅的频道数量，当此值为0时客户端会退出订阅状态，之后就可以执行其他非"发布/订阅"模式的命令了。</li>
</ul>
<h3>2.2 基于模式(pattern)的发布/订阅</h3>
<p>如果有某个/某些模式和这个频道匹配的话，那么所有订阅这个/这些频道的客户端也同样会收到信息。</p>
<ul>
<li><strong>用图例解释什么是基于模式的发布订阅</strong></li>
</ul>
<p>下图展示了一个带有频道和模式的例子， 其中 <a href="http://tweet.shop" target="_blank" rel="noopener noreferrer">tweet.shop</a>.* 模式匹配了 tweet.shop.kindle 频道和 tweet.shop.ipad 频道， 并且有不同的客户端分别订阅它们三个：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624195827766.png" alt="image-20220624195827766" tabindex="0" loading="lazy"><figcaption>image-20220624195827766</figcaption></figure>
<p>当有信息发送到 tweet.shop.kindle 频道时， 信息除了发送给 clientX 和 clientY 之外， 还会发送给订阅 <a href="http://tweet.shop" target="_blank" rel="noopener noreferrer">tweet.shop</a>.* 模式的 client123 和 client256 ：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624201134778.png" alt="image-20220624201134778" tabindex="0" loading="lazy"><figcaption>image-20220624201134778</figcaption></figure>
<p>另一方面， 如果接收到信息的是频道 tweet.shop.ipad ， 那么 client123 和 client256 同样会收到信息：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131020064.png" alt="image-20220624201156477" tabindex="0" loading="lazy"><figcaption>image-20220624201156477</figcaption></figure>
<p><strong>基于模式的例子</strong></p>
<p>通配符中?表示1个占位符，*表示任意个占位符(包括0)，?*表示1个以上占位符。</p>
<h4>2.2.1基于模式publish发布</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> c</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> c1</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> c11</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> b</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> b1</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> b11</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> d</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">0</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> d1</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">publish</span><span style="color:#98C379;--shiki-dark:#98C379"> d11</span><span style="color:#98C379;--shiki-dark:#98C379"> m1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.2.2 基于模式psubscribe订阅</h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">psubscribe</span><span style="color:#98C379;--shiki-dark:#98C379"> c?</span><span style="color:#98C379;--shiki-dark:#98C379"> b</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span><span style="color:#98C379;--shiki-dark:#98C379"> d?</span><span style="color:#E5C07B;--shiki-dark:#E5C07B">*</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">Reading</span><span style="color:#98C379;--shiki-dark:#98C379"> messages...</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> (press </span><span style="color:#98C379;--shiki-dark:#98C379">Ctrl-C</span><span style="color:#98C379;--shiki-dark:#98C379"> to</span><span style="color:#98C379;--shiki-dark:#98C379"> quit</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"psubscribe"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c?"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"psubscribe"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"psubscribe"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"d?*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">integer</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) 3</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c?"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"c1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"b11"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"d?*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"d1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"pmessage"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"d?*"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">3</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"d11"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#98C379;--shiki-dark:#98C379">"m1"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>注意点</strong></li>
</ul>
<p>(1)使用psubscribe命令可以重复订阅同一个频道，如客户端执行了<code>psubscribe c? c?*</code>。这时向c1发布消息客户端会接受到两条消息，而同时publish命令的返回值是2而不是1。同样的，如果有另一个客户端执行了<code>subscribe c1</code> 和<code>psubscribe c?*</code>的话，向c1发送一条消息该客户顿也会受到两条消息(但是是两种类型:message和pmessage)，同时publish命令也返回2.</p>
<p>(2)punsubscribe命令可以退订指定的规则，用法是: <code>punsubscribe [pattern [pattern ...]]</code>,如果没有参数则会退订所有规则。</p>
<p>(3)使用punsubscribe只能退订通过psubscribe命令订阅的规则，不会影响直接通过subscribe命令订阅的频道；同样unsubscribe命令也不会影响通过psubscribe命令订阅的规则。另外需要注意punsubscribe命令退订某个规则时不会将其中的通配符展开，而是进行严格的字符串匹配，所以<code>punsubscribe *</code> 无法退订<code>c*</code>规则，而是必须使用<code>punsubscribe c*</code>才可以退订。（它们是相互独立的，后文可以看到数据结构上看也是两种实现）</p>
<h2>3. 深入理解</h2>
<blockquote>
<p>我们通过几个问题，来深入理解Redis的订阅发布机制</p>
</blockquote>
<h3>3.1 基于频道(Channel)的发布/订阅如何实现的？</h3>
<p>底层是通过字典（图中的pubsub_channels）实现的，这个字典就用于保存订阅频道的信息：字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p>
<ul>
<li><strong>数据结构</strong></li>
</ul>
<p>比如说，在下图展示的这个 pubsub_channels 示例中， client2 、 client5 和 client1 就订阅了 channel1 ， 而其他频道也分别被别的客户端所订阅：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131020111.png" alt="image-20220624201831631" tabindex="0" loading="lazy"><figcaption>image-20220624201831631</figcaption></figure>
<ul>
<li><strong>订阅</strong></li>
</ul>
<p>当客户端调用 SUBSCRIBE 命令时， 程序就将客户端和要订阅的频道在 pubsub_channels 字典中关联起来。</p>
<p>举个例子，如果客户端 client10086 执行命令 <code>SUBSCRIBE channel1 channel2 channel3</code> ，那么前面展示的 pubsub_channels 将变成下面这个样子：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131020145.png" alt="image-20220624201950967" tabindex="0" loading="lazy"><figcaption>image-20220624201950967</figcaption></figure>
<ul>
<li><strong>发布</strong></li>
</ul>
<p>当调用 <code>PUBLISH channel message</code> 命令， 程序首先根据 channel 定位到字典的键， 然后将信息发送给字典值链表中的所有客户端。</p>
<p>比如说，对于以下这个 pubsub_channels 实例， 如果某个客户端执行命令 <code>PUBLISH channel1 "hello moto"</code> ，那么 client2 、 client5 和 client1 三个客户端都将接收到 "hello moto" 信息：</p>
<ul>
<li><strong>退订</strong></li>
</ul>
<p>使用 UNSUBSCRIBE 命令可以退订指定的频道， 这个命令执行的是订阅的反操作： 它从 pubsub_channels 字典的给定频道（键）中， 删除关于当前客户端的信息， 这样被退订频道的信息就不会再发送给这个客户端。</p>
<h3>3.2 基于模式(Pattern)的发布/订阅如何实现的？</h3>
<p>底层是pubsubPattern节点的链表。</p>
<ul>
<li><strong>数据结构</strong> redisServer.pubsub_patterns 属性是一个链表，链表中保存着所有和模式相关的信息：</li>
</ul>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> redisServer {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    list </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">pubsub_patterns;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">};</span></span></code></pre>
</div><p>链表中的每个节点都包含一个 redis.h/pubsubPattern 结构：</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">typedef</span><span style="color:#C678DD;--shiki-dark:#C678DD"> struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> pubsubPattern {</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    redisClient </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">client;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">    robj </span><span style="color:#C678DD;--shiki-dark:#C678DD">*</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">pattern;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">} pubsubPattern;</span></span></code></pre>
</div><p>client 属性保存着订阅模式的客户端，而 pattern 属性则保存着被订阅的模式。</p>
<p>每当调用 PSUBSCRIBE 命令订阅一个模式时， 程序就创建一个包含客户端信息和被订阅模式的 pubsubPattern 结构， 并将该结构添加到 redisServer.pubsub_patterns 链表中。</p>
<p>作为例子，下图展示了一个包含两个模式的 pubsub_patterns 链表， 其中 client123 和 client256 都正在订阅 <a href="http://tweet.shop" target="_blank" rel="noopener noreferrer">tweet.shop</a>.* 模式：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131020170.png" alt="image-20220624202234467" tabindex="0" loading="lazy"><figcaption>image-20220624202234467</figcaption></figure>
<ul>
<li><strong>订阅</strong></li>
</ul>
<p>如果这时客户端 client10086 执行 <code>PSUBSCRIBE broadcast.list.*</code> ， 那么 pubsub_patterns 链表将被更新成这样：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131020200.png" alt="image-20220624202251148" tabindex="0" loading="lazy"><figcaption>image-20220624202251148</figcaption></figure>
<p>通过遍历整个 pubsub_patterns 链表，程序可以检查所有正在被订阅的模式，以及订阅这些模式的客户端。</p>
<ul>
<li><strong>发布</strong></li>
</ul>
<p>发送信息到模式的工作也是由 PUBLISH 命令进行的, 显然就是匹配模式获得Channels，然后再把消息发给客户端。</p>
<ul>
<li><strong>退订</strong></li>
</ul>
<p>使用 PUNSUBSCRIBE 命令可以退订指定的模式， 这个命令执行的是订阅模式的反操作： 程序会删除 redisServer.pubsub_patterns 链表中， 所有和被退订模式相关联的 pubsubPattern 结构， 这样客户端就不会再收到和模式相匹配的频道发来的信息。</p>
<h3>3.3 SpringBoot结合Redis发布/订阅实例？</h3>
<p>最佳实践是通过RedisTemplate，关键代码如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 发布</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">redisTemplate</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">convertAndSend</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#98C379;--shiki-dark:#98C379">"my_topic_name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">, </span><span style="color:#98C379;--shiki-dark:#98C379">"message_content"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 配置订阅</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">RedisMessageListenerContainer</span><span style="color:#E06C75;--shiki-dark:#E06C75"> container </span><span style="color:#56B6C2;--shiki-dark:#56B6C2">=</span><span style="color:#C678DD;--shiki-dark:#C678DD"> new</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> RedisMessageListenerContainer</span><span style="color:#E06C75;--shiki-dark:#E06C75">()</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">container</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">setConnectionFactory</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(connectionFactory);</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B">container</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">addMessageListener</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(xxxMessageListenerAdapter, </span><span style="color:#98C379;--shiki-dark:#98C379">"my_topic_name"</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">);</span></span></code></pre>
</div><h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-pub-sub.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 消息传递：发布订阅模式详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220624195054351.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 持久化：RDB和AOF机制详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-rdb-aof.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-rdb-aof.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 持久化：RDB和AOF机制详解</source>
      <description>Redis进阶 - 持久化：RDB和AOF机制详解 为了防止数据丢失以及服务重启时能够恢复数据，Redis支持数据的持久化，主要分为两种方式，分别是RDB和AOF; 当然实际场景下还会使用这两种的混合模式。 1. Redis持久化简介 从两个点，我们来了解下Redis持久化 为什么需要持久化？ Redis是个基于内存的数据库。那服务一旦宕机，内存中的数...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>为了防止数据丢失以及服务重启时能够恢复数据，Redis支持数据的持久化，主要分为两种方式，分别是RDB和AOF; 当然实际场景下还会使用这两种的混合模式。</p>
</blockquote>
<h2>1. Redis持久化简介</h2>
<blockquote>
<p>从两个点，我们来了解下Redis持久化</p>
</blockquote>
<ul>
<li><strong>为什么需要持久化</strong>？</li>
</ul>
<p>Redis是个基于内存的数据库。那服务一旦宕机，内存中的数据将全部丢失。通常的解决方案是从后端数据库恢复这些数据，但后端数据库有性能瓶颈，如果是大数据量的恢复，</p>
<ol>
<li>会对数据库带来巨大的压力</li>
<li>数据库的性能不如Redis。导致程序响应慢。所以对Redis来说，实现数据的持久化，避免从后端数据库中恢复数据，是至关重要的。</li>
</ol>
<ul>
<li><strong>Redis持久化有哪些方式呢</strong>？<strong>为什么我们需要重点学RDB和AOF</strong>？</li>
</ul>
<p>从严格意义上说，Redis服务提供四种持久化存储方案：<code>RDB</code>、<code>AOF</code>、<code>虚拟内存（VM）</code>和　<code>DISKSTORE</code>。</p>
<blockquote>
<p>虚拟内存（VM）方式，从Redis Version 2.4开始就被官方明确表示不再建议使用，Version 3.2版本中更找不到关于虚拟内存（VM）的任何配置范例，Redis的主要作者Salvatore Sanfilippo还专门写了一篇论文，来反思Redis对虚拟内存（VM）存储技术的支持问题。</p>
<p>至于DISKSTORE方式，是从Redis Version 2.8版本开始提出的一个存储设想，到目前为止Redis官方也没有在任何stable版本中明确建议使用这用方式。在Version 3.2版本中同样找不到对于这种存储方式的明确支持。从网络上能够收集到的各种资料来看，DISKSTORE方式和RDB方式还有着一些千丝万缕的联系，不过各位读者也知道，除了官方文档以外网络资料很多就是大抄。</p>
</blockquote>
<p>最关键的是目前官方文档上能够看到的Redis对持久化存储的支持明确的就只有两种方案：<a href="https://redis.io/topics/persistence" target="_blank" rel="noopener noreferrer">RDB和AOF</a>。所以本文也只会具体介绍这两种持久化存储方案的工作特定和配置要点。</p>
<h2>2. RDB 持久化</h2>
<blockquote>
<p>RDB 就是 Redis DataBase 的缩写，中文名为快照/内存快照，RDB持久化是把当前进程数据生成快照保存到磁盘上的过程，由于是某一时刻的快照，那么快照中的值要早于或者等于内存中的值。</p>
</blockquote>
<h3>2.1 触发方式</h3>
<blockquote>
<p>触发rdb持久化的方式有2种，分别是<strong>手动触发</strong>和<strong>自动触发</strong>。</p>
</blockquote>
<h4>2.1.1 手动触发</h4>
<blockquote>
<p>手动触发分别对应save和bgsave命令</p>
</blockquote>
<ul>
<li><strong>save命令</strong>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</li>
<li><strong>bgsave命令</strong>：Redis进程执行fork操作创建子进程，RDB持久化过程由子 进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短</li>
</ul>
<p>bgsave流程图如下所示</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220623214217071.png" alt="image-20220623214217071" tabindex="0" loading="lazy"><figcaption>image-20220623214217071</figcaption></figure>
<p>具体流程如下：</p>
<ul>
<li>redis客户端执行bgsave命令或者自动触发bgsave命令；</li>
<li>主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；</li>
<li>如果不存在正在执行的子进程，那么就fork一个新的子进程进行持久化数据，fork过程是阻塞的，fork操作完成后主进程即可执行其他操作；</li>
<li>子进程先将数据写入到临时的rdb文件中，待快照数据写入完成后再原子替换旧的rdb文件；</li>
<li>同时发送信号给主进程，通知主进程rdb持久化完成，主进程更新相关的统计信息（info Persitence下的rdb_*相关选项）。</li>
</ul>
<h4>2.2.2 自动触发</h4>
<blockquote>
<p>在以下4种情况时会自动触发</p>
</blockquote>
<ul>
<li>redis.conf中配置<code>save m n</code>，即在m秒内有n次修改时，自动触发bgsave生成rdb文件；</li>
<li>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；</li>
<li>执行debug reload命令重新加载redis时也会触发bgsave操作；</li>
<li>默认情况下执行shutdown命令时，如果没有开启aof持久化，那么也会触发bgsave操作；</li>
</ul>
<h3>2.2 redis.conf中配置RDB</h3>
<p><strong>快照周期</strong>：内存快照虽然可以通过技术人员手动执行SAVE或BGSAVE命令来进行，但生产环境下多数情况都会设置其周期性执行条件。</p>
<ul>
<li><strong>Redis中默认的周期新设置</strong></li>
</ul>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 周期性执行条件的设置格式为</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">save</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">second</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">s&gt; &lt;</span><span style="color:#98C379;--shiki-dark:#98C379">change</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">s&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 默认的设置为：</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">save</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 900</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">save</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 300</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">save</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 60</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 以下设置方式为关闭RDB快照功能</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">save</span><span style="color:#98C379;--shiki-dark:#98C379"> ""</span></span></code></pre>
</div><p>以上三项默认信息设置代表的意义是：</p>
<ul>
<li>
<p>如果900秒内有1条Key信息发生变化，则进行快照；</p>
</li>
<li>
<p>如果300秒内有10条Key信息发生变化，则进行快照；</p>
</li>
<li>
<p>如果60秒内有10000条Key信息发生变化，则进行快照。读者可以按照这个规则，根据自己的实际请求压力进行设置调整。</p>
</li>
<li>
<p><strong>其它相关配置</strong></p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 文件名称</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">dbfilename</span><span style="color:#98C379;--shiki-dark:#98C379"> dump.rdb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 文件保存路径</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">dir</span><span style="color:#98C379;--shiki-dark:#98C379"> /home/work/app/redis/data/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 如果持久化出错，主进程是否停止写入</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">stop-writes-on-bgsave-error</span><span style="color:#98C379;--shiki-dark:#98C379"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 是否压缩</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">rdbcompression</span><span style="color:#98C379;--shiki-dark:#98C379"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 导入时是否检查</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">rdbchecksum</span><span style="color:#98C379;--shiki-dark:#98C379"> yes</span></span></code></pre>
</div></li>
<li>
<p><code>dbfilename</code>：RDB文件在磁盘上的名称。</p>
</li>
<li>
<p><code>dir</code>：RDB文件的存储路径。默认设置为“./”，也就是Redis服务的主目录。</p>
</li>
<li>
<p><code>stop-writes-on-bgsave-error</code>：上文提到的在快照进行过程中，主进程照样可以接受客户端的任何写操作的特性，是指在快照操作正常的情况下。如果快照操作出现异常（例如操作系统用户权限不够、磁盘空间写满等等）时，Redis就会禁止写操作。这个特性的主要目的是使运维人员在第一时间就发现Redis的运行错误，并进行解决。一些特定的场景下，您可能需要对这个特性进行配置，这时就可以调整这个参数项。该参数项默认情况下值为yes，如果要关闭这个特性，指定即使出现快照错误Redis一样允许写操作，则可以将该值更改为no。</p>
</li>
<li>
<p><code>rdbcompression</code>：该属性将在字符串类型的数据被快照到磁盘文件时，启用LZF压缩算法。Redis官方的建议是请保持该选项设置为yes，因为“it’s almost always a win”。</p>
</li>
<li>
<p><code>rdbchecksum</code>：从RDB快照功能的version 5 版本开始，一个64位的CRC冗余校验编码会被放置在RDB文件的末尾，以便对整个RDB文件的完整性进行验证。这个功能大概会多损失10%左右的性能，但获得了更高的数据可靠性。所以如果您的Redis服务需要追求极致的性能，就可以将这个选项设置为no。</p>
</li>
</ul>
<h3>2.3 RDB 更深入理解</h3>
<blockquote>
<p>我们通过几个实战问题来深入理解RDB</p>
</blockquote>
<ul>
<li><strong>由于生产环境中我们为Redis开辟的内存区域都比较大（例如6GB），那么将内存中的数据同步到硬盘的过程可能就会持续比较长的时间，而实际情况是这段时间Redis服务一般都会收到数据写操作请求。那么如何保证数据一致性呢</strong>？</li>
</ul>
<p>RDB中的核心思路是Copy-on-Write，来保证在进行快照操作的这段时间，需要压缩写入磁盘上的数据在内存中不会发生变化。在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门来做这个事情，这样保证了Redis服务不会停止对客户端包括写请求在内的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，待快照操作结束后才会同步到原来的内存区域。</p>
<p>举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019414.png" alt="image-20220623215145148" tabindex="0" loading="lazy"><figcaption>image-20220623215145148</figcaption></figure>
<ul>
<li><strong>在进行快照操作的这段时间，如果发生服务崩溃怎么办</strong>？</li>
</ul>
<p>很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的RDB快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。</p>
<ul>
<li><strong>可以每秒做一次快照吗</strong>？</li>
</ul>
<p>对于快照来说，所谓“连拍”就是指连续地做快照。这样一来，快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。但是，这其中的快照间隔时间就很关键了。</p>
<p>如下图所示，我们先在 T0 时刻做了一次快照，然后又在 T0+t 时刻做了一次快照，在这期间，数据块 5 和 9 被修改了。如果在 t 这段时间内，机器宕机了，那么，只能按照 T0 时刻的快照进行恢复。此时，数据块 5 和 9 的修改值因为没有快照记录，就无法恢复了。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019477.png" alt="image-20220623215417131" tabindex="0" loading="lazy"><figcaption>image-20220623215417131</figcaption></figure>
<p>所以，要想尽可能恢复数据，t 值就要尽可能小，t 越小，就越像“连拍”。那么，t 值可以小到什么程度呢，比如说是不是可以每秒做一次快照？毕竟，每次快照都是由 bgsave 子进程在后台执行，也不会阻塞主线程。</p>
<p>这种想法其实是错误的。虽然 bgsave 执行时不阻塞主线程，但是，<strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>：</p>
<ul>
<li>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</li>
<li>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁<strong>阻塞主线程</strong>了。</li>
</ul>
<p>那么，有什么其他好方法吗？此时，我们可以做增量快照，就是指做了一次全量快照后，后续的快照只对修改的数据进行快照记录，这样可以避免每次全量快照的开销。这个比较好理解。</p>
<p>但是它需要我们使用额外的元数据信息去记录哪些数据被修改了，这会带来额外的<strong>空间开销问题</strong>。那么，还有什么方法既能利用 RDB 的快速恢复，又能以较小的开销做到尽量少丢数据呢？且看后文中4.0版本中引入的RDB和AOF的混合方式。</p>
<h3>2.4 RDB优缺点</h3>
<ul>
<li><strong>优点</strong>
<ul>
<li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li>
<li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li>
</ul>
</li>
<li><strong>缺点</strong>
<ul>
<li>RDB方式实时性不够，无法做到秒级的持久化；</li>
<li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li>
<li>RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；</li>
<li>版本兼容RDB文件问题；</li>
</ul>
</li>
</ul>
<p>针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决</p>
<h2>3. AOF 持久化</h2>
<blockquote>
<p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。PS: 大多数的数据库采用的是写前日志（WAL），例如MySQL，通过写前日志和两阶段提交，实现数据和逻辑的一致性。</p>
</blockquote>
<p>而AOF日志采用写后日志，即<strong>先写内存，后写日志</strong>。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220623220343531.png" alt="image-20220623220343531" tabindex="0" loading="lazy"><figcaption>image-20220623220343531</figcaption></figure>
<p><strong>为什么采用写后日志</strong>？</p>
<p>Redis要求高性能，采用写日志有两方面好处：</p>
<ul>
<li><strong>避免额外的检查开销</strong>：Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。</li>
<li>不会阻塞当前的写操作</li>
</ul>
<p>但这种方式存在潜在风险：</p>
<ul>
<li>如果命令执行完成，写日志之前宕机了，会丢失数据。</li>
<li>主线程写磁盘压力大，导致写盘慢，阻塞后续操作。</li>
</ul>
<h3>3.1 如何实现AOF</h3>
<p>AOF日志记录Redis的每个写命令，步骤分为：命令追加（append）、文件写入（write）和文件同步（sync）。</p>
<ul>
<li><strong>命令追加</strong> 当AOF持久化功能打开了，服务器在执行完一个写命令之后，会以协议格式将被执行的写命令追加到服务器的 aof_buf 缓冲区。</li>
<li><strong>文件写入和同步</strong> 关于何时将 aof_buf 缓冲区的内容写入AOF文件中，Redis提供了三种写回策略：</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019511.png" alt="image-20220623220709538" tabindex="0" loading="lazy"><figcaption>image-20220623220709538</figcaption></figure>
<p><code>Always</code>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p>
<p><code>Everysec</code>，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</p>
<p><code>No</code>，操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p>
<ul>
<li><strong>三种写回策略的优缺点</strong></li>
</ul>
<p>上面的三种写回策略体现了一个重要原则：<strong>trade-off</strong>，取舍，指在性能和可靠性保证之间做取舍。</p>
<p>关于AOF的同步策略是涉及到操作系统的 write 函数和 fsync 函数的，在《Redis设计与实现》中是这样说明的：</p>
<blockquote>
<p>为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p>
<p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p>
</blockquote>
<h3>3.2 redis.conf中配置AOF</h3>
<p>默认情况下，Redis是没有开启AOF的，可以通过配置redis.conf文件来开启AOF持久化，关于AOF的配置如下：</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># appendonly参数开启AOF持久化</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">appendonly</span><span style="color:#98C379;--shiki-dark:#98C379"> no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># AOF持久化的文件名，默认是appendonly.aof</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">appendfilename</span><span style="color:#98C379;--shiki-dark:#98C379"> "appendonly.aof"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">dir</span><span style="color:#98C379;--shiki-dark:#98C379"> ./</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 同步策略</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># appendfsync always</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">appendfsync</span><span style="color:#98C379;--shiki-dark:#98C379"> everysec</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># appendfsync no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># aof重写期间是否同步</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">no-appendfsync-on-rewrite</span><span style="color:#98C379;--shiki-dark:#98C379"> no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 重写触发配置</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">auto-aof-rewrite-percentage</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 100</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">auto-aof-rewrite-min-size</span><span style="color:#98C379;--shiki-dark:#98C379"> 64mb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 加载aof出错如何处理</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">aof-load-truncated</span><span style="color:#98C379;--shiki-dark:#98C379"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 文件重写策略</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">aof-rewrite-incremental-fsync</span><span style="color:#98C379;--shiki-dark:#98C379"> yes</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是Redis中关于AOF的主要配置信息：</p>
<ul>
<li>
<p><code>appendonly</code>：默认情况下AOF功能是关闭的，将该选项改为yes以便打开Redis的AOF功能。</p>
</li>
<li>
<p><code>appendfilename</code>：这个参数项很好理解了，就是AOF文件的名字。</p>
</li>
<li>
<p><code>appendfsync</code>：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略。</p>
<p>什么叫“真正执行”呢？还记得Linux操作系统对磁盘设备的操作方式吗？ 为了保证操作系统中I/O队列的操作效率，应用程序提交的I/O操作请求一般是被放置在linux Page Cache中的，然后再由Linux操作系统中的策略自行决定正在写到磁盘上的时机。而Redis中有一个fsync()函数，可以将Page Cache中待写的数据真正写入到物理设备上，而缺点是频繁调用这个fsync()函数干预操作系统的既定策略，可能导致I/O卡顿的现象频繁 。</p>
<p>与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</p>
</li>
<li>
<p><code>no-appendfsync-on-rewrite</code>：always和everysec的设置会使真正的I/O操作高频度的出现，甚至会出现长时间的卡顿情况，这个问题出现在操作系统层面上，所有靠工作在操作系统之上的Redis是没法解决的。为了尽量缓解这个情况，Redis提供了这个设置项，保证在完成fsync函数调用时，不会将这段时间内发生的命令操作放入操作系统的Page Cache（这段时间Redis还在接受客户端的各种写操作命令）。</p>
</li>
<li>
<p><code>auto-aof-rewrite-percentage</code>：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。</p>
</li>
<li>
<p><code>auto-aof-rewrite-min-size</code>：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。</p>
</li>
</ul>
<h3>3.3 深入理解AOF重写</h3>
<blockquote>
<p>AOF会记录每个写命令到AOF文件，随着时间越来越长，AOF文件会变得越来越大。如果不加以控制，会对Redis服务器，甚至对操作系统造成影响，而且AOF文件越大，数据恢复也越慢。为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行“瘦身”。</p>
</blockquote>
<ul>
<li><strong>图例解释AOF重写</strong></li>
</ul>
<p>Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新AOF文件没有了冗余命令。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019554.png" alt="image-20220623221419590" tabindex="0" loading="lazy"><figcaption>image-20220623221419590</figcaption></figure>
<ul>
<li><strong>AOF重写会阻塞吗</strong>？</li>
</ul>
<p>AOF重写过程是由后台进程bgrewriteaof来完成的。主线程fork出后台的bgrewriteaof子进程，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>
<p>所以aof在重写时，在fork进程时是会阻塞住主线程的。</p>
<ul>
<li><strong>AOF日志何时会重写</strong>？</li>
</ul>
<p>有两个配置项控制AOF重写的触发：</p>
<p><code>auto-aof-rewrite-min-size</code>:表示运行AOF重写时文件的最小大小，默认为64MB。</p>
<p><code>auto-aof-rewrite-percentage</code>:这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</p>
<ul>
<li><strong>重写日志时，有新数据写入咋整</strong>？</li>
</ul>
<p>重写过程总结为：“一个拷贝，两处日志”。在fork出子进程时的拷贝，以及在重写时，如果有新数据写入，主线程就会将命令记录到两个aof日志内存缓冲区中。如果AOF写回策略配置的是always，则直接将命令写回旧的日志文件，并且保存一份命令至AOF重写缓冲区，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：bgrewriteaof进程使用的日志文件）</p>
<p>而在bgrewriteaof子进程完成会日志文件的重写操作后，会提示主线程已经完成重写操作，主线程会将AOF重写缓冲中的命令追加到新的日志文件后面。这时候在高并发的情况下，AOF重写缓冲区积累可能会很大，这样就会造成阻塞，Redis后来通过Linux管道技术让aof重写期间就能同时进行回放，这样aof重写结束后只需回放少量剩余的数据即可。</p>
<p>最后通过修改文件名的方式，保证文件切换的原子性。</p>
<p>在AOF重写日志期间发生宕机的话，因为日志文件还没切换，所以恢复数据时，用的还是旧的日志文件。</p>
<p><strong>总结操作</strong>：</p>
<ul>
<li>主线程fork出子进程重写aof日志</li>
<li>子进程重写日志完成后，主线程追加aof日志缓冲</li>
<li>替换日志文件</li>
</ul>
<blockquote>
<p>温馨提示</p>
<p>这里的进程和线程的概念有点混乱。因为后台的bgreweiteaof进程就只有一个线程在操作，而主线程是Redis的操作进程，也是单独一个线程。这里想表达的是Redis主进程在fork出一个后台进程之后，后台进程的操作和主进程是没有任何关联的，也不会阻塞主线程。</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019591.png" alt="image-20220623221830908" tabindex="0" loading="lazy"><figcaption>image-20220623221830908</figcaption></figure>
<ul>
<li><strong>主线程fork出子进程的是如何复制内存数据的</strong>？</li>
</ul>
<p>fork采用操作系统提供的写时复制（copy on write）机制，就是为了避免一次性拷贝大量内存数据给子进程造成阻塞。fork子进程时，子进程时会拷贝父进程的页表，即虚实映射关系（虚拟内存和物理内存的映射索引表），而不会拷贝物理内存。这个拷贝会消耗大量cpu资源，并且拷贝完成前会阻塞主线程，阻塞时间取决于内存中的数据量，数据量越大，则内存页表越大。拷贝完成后，父子进程使用相同的内存地址空间。</p>
<p>但主进程是可以有数据写入的，这时候就会拷贝物理内存中的数据。如下图（进程1看做是主进程，进程2看做是子进程）：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019618.png" alt="image-20220623222011394" tabindex="0" loading="lazy"><figcaption>image-20220623222011394</figcaption></figure>
<p>在主进程有数据写入时，而这个数据刚好在页c中，操作系统会创建这个页面的副本（页c的副本），即拷贝当前页的物理数据，将其映射到主进程中，而子进程还是使用原来的的页c。</p>
<ul>
<li><strong>在重写日志整个过程时，主线程有哪些地方会被阻塞</strong>？</li>
</ul>
<ol>
<li>fork子进程时，需要拷贝虚拟页表，会对主线程阻塞。</li>
<li>主进程有bigkey写入时，操作系统会创建页面的副本，并拷贝原有的数据，会对主线程阻塞。</li>
<li>子进程重写日志完成后，主进程追加aof重写缓冲区时可能会对主线程阻塞。</li>
</ol>
<ul>
<li><strong>为什么AOF重写不复用原AOF日志</strong>？</li>
</ul>
<p>两方面原因：</p>
<ol>
<li>父子进程写同一个文件会产生竞争问题，影响父进程的性能。</li>
<li>如果AOF重写过程中失败了，相当于污染了原本的AOF文件，无法做恢复数据使用。</li>
</ol>
<h2>4. RDB和AOF混合方式（4.0版本)</h2>
<blockquote>
<p>Redis 4.0 中提出了一个<strong>混合使用 AOF 日志和内存快照</strong>的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p>
</blockquote>
<p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p>
<p>如下图所示，T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131019652.png" alt="image-20220623222328421" tabindex="0" loading="lazy"><figcaption>image-20220623222328421</figcaption></figure>
<p>这个方法既能享受到 RDB 文件快速恢复的好处，又能享受到 AOF 只记录操作命令的简单优势, 实际环境中用的很多。</p>
<h2>5. 从持久化中恢复数据</h2>
<blockquote>
<p>数据的备份、持久化做完了，我们如何从这些持久化文件中恢复数据呢？如果一台服务器上有既有RDB文件，又有AOF文件，该加载谁呢？</p>
</blockquote>
<p>其实想要从这些文件中恢复数据，只需要重新启动Redis即可。我们还是通过图来了解这个流程：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220623222507856.png" alt="image-20220623222507856" tabindex="0" loading="lazy"><figcaption>image-20220623222507856</figcaption></figure>
<ul>
<li>redis重启时判断是否开启aof，如果开启了aof，那么就优先加载aof文件；</li>
<li>如果aof存在，那么就去加载aof文件，加载成功的话redis重启成功，如果aof文件加载失败，那么会打印日志表示启动失败，此时可以去修复aof文件后重新启动；</li>
<li>若aof文件不存在，那么redis就会转而去加载rdb文件，如果rdb文件不存在，redis直接启动成功；</li>
<li>如果rdb文件存在就会去加载rdb文件恢复数据，如加载失败则打印日志提示启动失败，如加载成功，那么redis重启成功，且使用rdb文件恢复数据；</li>
</ul>
<p>那么为什么会优先加载AOF呢？因为AOF保存的数据更完整，通过上面的分析我们知道AOF基本上最多损失1s的数据。</p>
<h2>6. 性能与实践</h2>
<p>通过上面的分析，我们都知道RDB的快照、AOF的重写都需要fork，这是一个重量级操作，会对Redis造成阻塞。因此为了不影响Redis主进程响应，我们需要尽可能降低阻塞。</p>
<ul>
<li>降低fork的频率，比如可以手动来触发RDB生成快照、与AOF重写；</li>
<li>控制Redis最大使用内存，防止fork耗时过长；</li>
<li>使用更牛逼的硬件；</li>
<li>合理配置Linux的内存分配策略，避免因为物理内存不足导致fork失败。</li>
</ul>
<p>在线上我们到底该怎么做？我提供一些自己的实践经验。</p>
<ul>
<li>如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li>
<li>自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据；</li>
<li>单机如果部署多个实例，要防止多个机器同时运行持久化、重写操作，防止出现内存、CPU、IO资源竞争，让持久化变为串行；</li>
<li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li>
<li>RDB持久化与AOF持久化可以同时存在，配合使用。</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 持久化：RDB和AOF机制详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220623214217071.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 数据类型：对象机制详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-redis-object.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-redis-object.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 数据类型：对象机制详解</source>
      <description>Redis进阶 - 数据类型：对象机制详解 1. 引入:从哪里开始学习底层？ 我在整理Redis底层设计时，发现网上其实是有很多资料的，但是缺少一种自上而下的承接。这里我将收集很多网上的资料并重新组织，来帮助你更好的理解Redis底层设计。 我们在前文已经阐述了Redis 5种基础数据类型详解和Redis入门 - 数据结构：Stream详解；那么这些基...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 引入:从哪里开始学习底层？</h2>
<blockquote>
<p>我在整理Redis底层设计时，发现网上其实是有很多资料的，但是缺少一种自上而下的承接。这里我将收集很多网上的资料并重新组织，来帮助你更好的理解Redis底层设计。</p>
</blockquote>
<p>我们在前文已经阐述了<a href="https://java.isture.com/redis/started/Redis%E5%85%A5%E9%97%A8-5%E7%A7%8D%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Redis 5种基础数据类型详解</a>和<a href="https://java.isture.com/redis/started/Redis%E5%85%A5%E9%97%A8Stream%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Redis入门 - 数据结构：Stream详解</a>；那么这些基础类型的底层是如何实现的呢？</p>
<p>带着这个问题我们来着手理解底层设计，首先看下图：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023189.png" alt="image-20220623205912495" tabindex="0" loading="lazy"><figcaption>image-20220623205912495</figcaption></figure>
<p>它反映了Redis的每种对象其实都由<strong>对象结构(redisObject)</strong> 与 <strong>对应编码的数据结构</strong>组合而成，而每种对象类型对应若干编码方式，不同的编码方式所对应的底层数据结构是不同的。</p>
<p>所以，我们需要从几个个角度来着手底层研究：</p>
<ul>
<li><strong>对象设计机制</strong>: 对象结构(redisObject)</li>
<li><strong>编码类型和底层数据结构</strong>: 对应编码的数据结构</li>
</ul>
<h2>2. 为什么Redis会设计redisObject对象</h2>
<blockquote>
<p>为什么Redis会设计redisObject对象？</p>
</blockquote>
<p>在redis的命令中，用于对键进行处理的命令占了很大一部分，而对于键所保存的值的类型（键的类型），键能执行的命令又各不相同。如： <code>LPUSH</code> 和 <code>LLEN</code> 只能用于列表键, 而 <code>SADD</code> 和 <code>SRANDMEMBER</code> 只能用于集合键, 等等; 另外一些命令, 比如 <code>DEL</code>、 <code>TTL</code> 和 <code>TYPE</code>, 可以用于任何类型的键；但是要正确实现这些命令, 必须为不同类型的键设置不同的处理方式: 比如说, 删除一个列表键和删除一个字符串键的操作过程就不太一样。</p>
<p>以上的描述说明, <strong>Redis 必须让每个键都带有类型信息, 使得程序可以检查键的类型, 并为它选择合适的处理方式</strong>.</p>
<p>比如说， 集合类型就可以由字典和整数集合两种不同的数据结构实现， 但是， 当用户执行 ZADD 命令时， 他/她应该不必关心集合使用的是什么编码， 只要 Redis 能按照 ZADD 命令的指示， 将新元素添加到集合就可以了。</p>
<p>这说明, <strong>操作数据类型的命令除了要对键的类型进行检查之外, 还需要根据数据类型的不同编码进行多态处理</strong>.</p>
<p>为了解决以上问题, <strong>Redis 构建了自己的类型系统</strong>, 这个系统的主要功能包括:</p>
<ul>
<li>redisObject 对象.</li>
<li>基于 redisObject 对象的类型检查.</li>
<li>基于 redisObject 对象的显式多态函数.</li>
<li>对 redisObject 进行分配、共享和销毁的机制</li>
</ul>
<h2>3. redisObject数据结构</h2>
<p>redisObject 是 Redis 类型系统的核心, 数据库中的每个键、值, 以及 Redis 本身处理的参数, 都表示为这种数据类型.</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Redis 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">typedef</span><span style="color:#C678DD;--shiki-dark:#C678DD"> struct</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> redisObject {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 类型</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    unsigned</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> type:</span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 编码方式</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    unsigned</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> encoding:</span><span style="color:#D19A66;--shiki-dark:#D19A66">4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // LRU - 24位, 记录最末一次访问时间（相对于lru_clock）; 或者 LFU（最少使用的数据：8位频率，16位访问时间）</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    unsigned</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> lru:LRU_BITS;</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // LRU_BITS: 24</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 引用计数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    int</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> refcount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 指向底层数据结构实例</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">    void</span><span style="color:#C678DD;--shiki-dark:#C678DD"> *</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">ptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">} robj;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图对应上面的结构</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023233.png" alt="image-20220623211402720" tabindex="0" loading="lazy"><figcaption>image-20220623211402720</figcaption></figure>
<p><strong>其中type、encoding和ptr是最重要的三个属性</strong>。</p>
<ul>
<li><strong>type记录了对象所保存的值的类型</strong>，它的值可能是以下常量中的一个：</li>
</ul>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">* 对象类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_STRING</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 字符串</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_LIST</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 列表</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_SET</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 集合</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ZSET</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 有序集</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_HASH</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 哈希表</span></span></code></pre>
</div><ul>
<li><strong>encoding记录了对象所保存的值的编码</strong>，它的值可能是以下常量中的一个：</li>
</ul>
<div class="language-c" data-ext="c" data-title="c"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">* 对象编码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">*/</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_RAW</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 0</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     /* Raw representation */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_INT</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     /* Encoded as integer */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_HT</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 2</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      /* Encoded as hash table */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_ZIPMAP</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 3</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* 注意：版本2.6后不再使用. */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_LINKEDLIST</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 4</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* 注意：不再使用了，旧版本2.x中String的底层之一. */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_ZIPLIST</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 5</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* Encoded as ziplist */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_INTSET</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 6</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* Encoded as intset */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_SKIPLIST</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 7</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* Encoded as skiplist */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_EMBSTR</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 8</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  /* Embedded sds string encoding */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_QUICKLIST</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 9</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* Encoded as linked list of ziplists */</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD">#define</span><span style="color:#61AFEF;--shiki-dark:#61AFEF"> OBJ_ENCODING_STREAM</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 10</span><span style="color:#7F848E;font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* Encoded as a radix tree of listpacks */</span></span></code></pre>
</div><ul>
<li><strong>ptr是一个指针，指向实际保存值的数据结构</strong>，这个数据结构由type和encoding属性决定。举个例子， 如果一个redisObject 的type 属性为<code>OBJ_LIST</code> ， encoding 属性为<code>OBJ_ENCODING_QUICKLIST</code> ，那么这个对象就是一个Redis 列表（List)，它的值保存在一个QuickList的数据结构内，而ptr 指针就指向quicklist的对象；</li>
</ul>
<p>下图展示了redisObject 、Redis 所有数据类型、Redis 所有编码方式以及底层数据结构之间的关系（从6.0版本中梳理而来）：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023265.png" alt="image-20220623212428823" tabindex="0" loading="lazy"><figcaption>image-20220623212428823</figcaption></figure>
<blockquote>
<p>注意：<code>OBJ_ENCODING_ZIPMAP</code>没有出现在图中，因为在redis2.6开始，它不再是任何数据类型的底层结构(虽然还有zipmap.c的代码); <code>OBJ_ENCODING_LINKEDLIST</code>也不支持了，相关代码也删除了。</p>
</blockquote>
<ul>
<li><strong>lru属性: 记录了对象最后一次被命令程序访问的时间</strong></li>
</ul>
<p><strong>空转时长</strong>：当前时间减去键的值对象的lru时间，就是该键的空转时长。Object idletime命令可以打印出给定键的空转时长</p>
<p>如果服务器打开了maxmemory选项，并且服务器用于回收内存的算法为volatile-lru或者allkeys-lru，那么当服务器占用的内存数超过了maxmemory选项所设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。</p>
<h2>4. 命令的类型检查和多态</h2>
<blockquote>
<p>那么Redis是如何处理一条命令的呢？</p>
</blockquote>
<p><strong>当执行一个处理数据类型命令的时候，redis执行以下步骤</strong></p>
<ul>
<li>根据给定的key，在数据库字典中查找和他相对应的redisObject，如果没找到，就返回NULL；</li>
<li>检查redisObject的type属性和执行命令所需的类型是否相符，如果不相符，返回类型错误；</li>
<li>根据redisObject的encoding属性所指定的编码，选择合适的操作函数来处理底层的数据结构；</li>
<li>返回数据结构的操作结果作为命令的返回值。</li>
</ul>
<p>比如现在执行LPOP命令：</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220623212517535.png" alt="image-20220623212517535" tabindex="0" loading="lazy"><figcaption>image-20220623212517535</figcaption></figure>
<h2>5. 对象共享</h2>
<blockquote>
<p>redis一般会把一些常见的值放到一个共享对象中，这样可使程序避免了重复分配的麻烦，也节约了一些CPU时间。</p>
</blockquote>
<p><strong>redis预分配的值对象如下</strong>：</p>
<ul>
<li>各种命令的返回值，比如成功时返回的OK，错误时返回的ERROR，命令入队事务时返回的QUEUE，等等</li>
<li>包括0 在内，小于REDIS_SHARED_INTEGERS的所有整数（REDIS_SHARED_INTEGERS的默认值是10000）</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023299.png" alt="image-20220623212558850" tabindex="0" loading="lazy"><figcaption>image-20220623212558850</figcaption></figure>
<blockquote>
<p>注意：共享对象只能被字典和双向链表这类能带有指针的数据结构使用。像整数集合和压缩列表这些只能保存字符串、整数等自勉之的内存数据结构</p>
</blockquote>
<p><strong>为什么redis不共享列表对象、哈希对象、集合对象、有序集合对象，只共享字符串对象</strong>？</p>
<ul>
<li>列表对象、哈希对象、集合对象、有序集合对象，本身可以包含字符串对象，复杂度较高。</li>
<li>如果共享对象是保存字符串对象，那么验证操作的复杂度为O(1)</li>
<li>如果共享对象是保存字符串值的字符串对象，那么验证操作的复杂度为O(N)</li>
<li>如果共享对象是包含多个值的对象，其中值本身又是字符串对象，即其它对象中嵌套了字符串对象，比如列表对象、哈希对象，那么验证操作的复杂度将会是O(N的平方)</li>
</ul>
<p>如果对复杂度较高的对象创建共享对象，需要消耗很大的CPU，用这种消耗去换取内存空间，是不合适的</p>
<h2>6. 引用计数以及对象的消毁</h2>
<blockquote>
<p>redisObject中有refcount属性，是对象的引用计数，显然计数0那么就是可以回收。</p>
</blockquote>
<ul>
<li>每个redisObject结构都带有一个refcount属性，指示这个对象被引用了多少次；</li>
<li>当新创建一个对象时，它的refcount属性被设置为1；</li>
<li>当对一个对象进行共享时，redis将这个对象的refcount加一；</li>
<li>当使用完一个对象后，或者消除对一个对象的引用之后，程序将对象的refcount减一；</li>
<li>当对象的refcount降至0 时，这个RedisObject结构，以及它引用的数据结构的内存都会被释放。</li>
</ul>
<h2>7. 小结</h2>
<ul>
<li>redis使用自己实现的对象机制（redisObject)来实现类型判断、命令多态和基于引用次数的垃圾回收；</li>
<li>redis会预分配一些常用的数据对象，并通过共享这些对象来减少内存占用，和避免频繁的为小对象分配内存。</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-object.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 数据结构：对象机制详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023189.png" type="image/png"/>
    </item>
    <item>
      <title>Redis进阶 - 事务：Redis事务详解</title>
      <link>https://mrjackc.github.io/posts/Redis/db-redis-x-trans.html</link>
      <guid>https://mrjackc.github.io/posts/Redis/db-redis-x-trans.html</guid>
      <source url="https://mrjackc.github.io/rss.xml">Redis进阶 - 事务：Redis事务详解</source>
      <description>Redis进阶 - 事务：Redis事务详解 Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。 1. 什么是Redis事务 Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中...</description>
      <category>数据库</category>
      <category>Redis</category>
      <pubDate>Mon, 21 Oct 2024 07:03:09 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
</blockquote>
<h2>1. 什么是Redis事务</h2>
<p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
<p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p>
<blockquote>
<p>redis 是单线程的所以很容易做到这点</p>
</blockquote>
<h2>2. Redis事务相关命令和使用</h2>
<blockquote>
<p>MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务相关的命令。</p>
</blockquote>
<ul>
<li>MULTI ：开启事务，redis会将后续的命令逐个放入队列中，然后使用EXEC命令来原子化执行这个命令系列。</li>
<li>EXEC：执行事务中的所有操作命令。</li>
<li>DISCARD：取消事务，放弃执行事务块中的所有命令。</li>
<li>WATCH：监视一个或多个key,如果事务在执行前，这个key(或多个key)被其他命令修改，则事务被中断，不会执行事务中的任何命令。</li>
<li>UNWATCH：取消WATCH对所有key的监视。</li>
</ul>
<h3>2.1 标准的事务执行</h3>
<p>给k1、k2分别赋值，在事务中修改k1、k2，执行事务后，查看k1、k2值都被修改。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#98C379;--shiki-dark:#98C379"> v2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">EXEC</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"11"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"22"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.2 事务取消</h3>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 33</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 34</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">DISCARD</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span></code></pre>
</div><h3>2.3 事务出现错误的处理</h3>
<h4>2.3.1 语法错误（编译器错误）（回滚）</h4>
<p>在开启事务后，修改k1值为11，k2值为22，但k2语法错误，最终导致事务提交失败，k1、k2保留原值。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#98C379;--shiki-dark:#98C379"> v2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">sets</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">ERR</span><span style="color:#98C379;--shiki-dark:#98C379"> unknown</span><span style="color:#98C379;--shiki-dark:#98C379"> command</span><span style="color:#98C379;--shiki-dark:#98C379"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">sets</span><span style="color:#98C379;--shiki-dark:#98C379">`</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">,</span><span style="color:#98C379;--shiki-dark:#98C379"> with</span><span style="color:#98C379;--shiki-dark:#98C379"> args</span><span style="color:#98C379;--shiki-dark:#98C379"> beginning</span><span style="color:#98C379;--shiki-dark:#98C379"> with:</span><span style="color:#98C379;--shiki-dark:#98C379"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">k2</span><span style="color:#98C379;--shiki-dark:#98C379">`</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">,</span><span style="color:#98C379;--shiki-dark:#98C379"> `</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">22</span><span style="color:#98C379;--shiki-dark:#98C379">`</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">,</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">exec</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) </span><span style="color:#61AFEF;--shiki-dark:#61AFEF">EXECABORT</span><span style="color:#98C379;--shiki-dark:#98C379"> Transaction</span><span style="color:#98C379;--shiki-dark:#98C379"> discarded</span><span style="color:#98C379;--shiki-dark:#98C379"> because</span><span style="color:#98C379;--shiki-dark:#98C379"> of</span><span style="color:#98C379;--shiki-dark:#98C379"> previous</span><span style="color:#98C379;--shiki-dark:#98C379"> errors.</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"v1"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"v2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.3.2 <strong>Redis类型错误（运行时错误）</strong>（不回滚）</h4>
<p>在开启事务后，修改k1值为11，k2值为22，但将k2的类型作为List，在运行时检测类型错误，最终导致事务提交失败，此时事务并没有回滚，而是跳过错误命令继续执行， 结果k1值改变、k2保留原值</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">lpush</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">EXEC</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) (</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">error</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) WRONGTYPE Operation against a key holding the wrong kind of value</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"11"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"v2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.4 CAS操作实现乐观锁</h3>
<blockquote>
<p>WATCH 命令可以为 Redis 事务提供 check-and-set （CAS）行为。</p>
</blockquote>
<h4>2.4.1 <strong>CAS? 乐观锁</strong>？Redis官方的例子帮你理解</h4>
<p>被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC 返回nil-reply来表示事务已经失败。</p>
<p>举个例子， 假设我们需要原子性地为某个值进行增 1 操作（假设 INCR 不存在）。</p>
<p>首先我们可能会这样做：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">val</span><span style="color:#98C379;--shiki-dark:#98C379"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> GET</span><span style="color:#98C379;--shiki-dark:#98C379"> mykey</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">val</span><span style="color:#98C379;--shiki-dark:#98C379"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> val</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">SET</span><span style="color:#98C379;--shiki-dark:#98C379"> mykey</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $val</span></span></code></pre>
</div><p>上面的这个实现在只有一个客户端的时候可以执行得很好。 但是， 当多个客户端同时对同一个键进行这样的操作时， 就会产生竞争条件。举个例子， 如果客户端 A 和 B 都读取了键原来的值， 比如 10 ， 那么两个客户端都会将键的值设为 11 ， 但正确的结果应该是 12 才对。</p>
<p>有了 WATCH ，我们就可以轻松地解决这类问题了：</p>
<div class="language-bash" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">WATCH</span><span style="color:#98C379;--shiki-dark:#98C379"> mykey</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">val</span><span style="color:#98C379;--shiki-dark:#98C379"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> GET</span><span style="color:#98C379;--shiki-dark:#98C379"> mykey</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">val</span><span style="color:#98C379;--shiki-dark:#98C379"> =</span><span style="color:#98C379;--shiki-dark:#98C379"> val</span><span style="color:#98C379;--shiki-dark:#98C379"> +</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">SET</span><span style="color:#98C379;--shiki-dark:#98C379"> mykey</span><span style="color:#E06C75;--shiki-dark:#E06C75"> $val</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">EXEC</span></span></code></pre>
</div><p>使用上面的代码， 如果在 WATCH 执行之后， EXEC 执行之前， 有其他客户端修改了 mykey 的值， 那么当前客户端的事务就会失败。 程序需要做的， 就是不断重试这个操作， 直到没有发生碰撞为止。</p>
<p>这种形式的锁被称作乐观锁， 它是一种非常强大的锁机制。 并且因为大多数情况下， 不同的客户端会访问不同的键， 碰撞的情况一般都很少， 所以通常并不需要进行重试。</p>
<h4>2.4.2 watch是如何监视实现的呢？</h4>
<p>Redis使用WATCH命令来决定事务是继续执行还是回滚，那就需要在MULTI之前使用WATCH来监控某些键值对，然后使用MULTI命令来开启事务，执行对数据结构操作的各种命令，此时这些命令入队列。</p>
<p>当使用EXEC执行事务时，首先会比对WATCH所监控的键值对，如果没发生改变，它会执行事务队列中的命令，提交事务；如果发生变化，将不会执行事务中的任何命令，同时事务回滚。当然无论是否回滚，Redis都会取消执行事务前的WATCH命令。</p>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023113.png" alt="image-20220625085151074" tabindex="0" loading="lazy"><figcaption>image-20220625085151074</figcaption></figure>
<h4>2.4.3 <strong>watch 命令实现监视</strong></h4>
<p>在事务开始前用WATCH监控k1，之后修改k1为11，说明事务开始前k1值被改变，MULTI开始事务，修改k1值为12，k2为22，执行EXEC，发回nil，说明事务回滚；查看下k1、k2的值都没有被事务中的命令所改变。</p>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#98C379;--shiki-dark:#98C379"> v2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">WATCH</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 12</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">EXEC</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">(</span><span style="color:#61AFEF;--shiki-dark:#61AFEF">nil</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"11"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"v2"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>2.4.4 <strong>UNWATCH取消监视</strong></h4>
<div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#98C379;--shiki-dark:#98C379"> v1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#98C379;--shiki-dark:#98C379"> v2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">WATCH</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 11</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">UNWATCH</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">MULTI</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 12</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">set</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span><span style="color:#D19A66;--shiki-dark:#D19A66"> 22</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">QUEUED</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">exec</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">) OK</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k1</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"12"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt; </span><span style="color:#98C379;--shiki-dark:#98C379">get</span><span style="color:#98C379;--shiki-dark:#98C379"> k2</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">"22"</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF">127.0.0.1:6379</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>3. Redis事务执行步骤</h2>
<p>通过上文命令执行，很显然Redis事务执行是三个阶段：</p>
<ul>
<li><strong>开启</strong>：以MULTI开始一个事务</li>
<li><strong>入队</strong>：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li>
<li><strong>执行</strong>：由EXEC命令触发事务</li>
</ul>
<p>当一个客户端切换到事务状态之后， 服务器会根据这个客户端发来的不同命令执行不同的操作：</p>
<ul>
<li><strong>如果客户端发送的命令为 EXEC 、 DISCARD 、 WATCH 、 MULTI 四个命令的其中一个， 那么服务器立即执行这个命令。</strong></li>
<li>与此相反， 如果客户端发送的命令是 EXEC 、 DISCARD 、 WATCH 、 MULTI 四个命令以外的其他命令， 那么服务器并不立即执行这个命令， 而是将这个命令放入一个事务队列里面， 然后向客户端返回 QUEUED 回复。</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/image-20220625091934231.png" alt="image-20220625091934231" tabindex="0" loading="lazy"><figcaption>image-20220625091934231</figcaption></figure>
<h2>4. 更深入的理解</h2>
<blockquote>
<p>我们再通过几个问题来深入理解Redis事务。</p>
</blockquote>
<h3>4.1 为什么 Redis 不支持回滚？</h3>
<blockquote>
<p>如果你有使用关系式数据库的经验， 那么 “<strong>Redis 在事务失败时不进行回滚，而是继续执行余下的命令</strong>”这种做法可能会让你觉得有点奇怪。</p>
</blockquote>
<p>以下是这种做法的优点：</p>
<ul>
<li>Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。</li>
<li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li>
</ul>
<p>有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， <strong>回滚并不能解决编程错误带来的问题</strong>。</p>
<blockquote>
<p>举个例子， 如果你本来想通过 INCR 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 INCR ， 回滚是没有办法处理这些情况的。</p>
</blockquote>
<h3>4.2 如何理解Redis与事务的ACID？</h3>
<blockquote>
<p>一般来说，事务有四个性质称为ACID，分别是原子性，一致性，隔离性和持久性。这是基础，但是很多文章对Redis 是否支持ACID有一些异议，我觉的有必要梳理下：</p>
</blockquote>
<ul>
<li><strong>原子性atomicity</strong></li>
</ul>
<p>首先通过上文知道 运行期的错误是不会回滚的，很多文章由此说Redis事务违背原子性的；而官方文档认为是遵从原子性的。</p>
<p>Redis官方文档给的理解是，<strong>Redis的事务是原子性的：所有的命令，要么全部执行，要么全部不执行</strong>。而不是完全成功。</p>
<ul>
<li><strong>一致性consistency</strong></li>
</ul>
<p>redis事务可以保证命令失败的情况下得以回滚，数据能恢复到没有执行之前的样子，是保证一致性的，除非redis进程意外终结。</p>
<ul>
<li><strong>隔离性Isolation</strong></li>
</ul>
<p>redis事务是严格遵守隔离性的，原因是redis是单进程单线程模式(v6.0之前），可以保证命令执行过程中不会被其他客户端命令打断。</p>
<p>但是，Redis不像其它结构化数据库有隔离级别这种设计。</p>
<ul>
<li><strong>持久性Durability</strong></li>
</ul>
<p><strong>redis事务是不保证持久性的</strong>，这是因为redis持久化策略中不管是RDB还是AOF都是异步执行的，不保证持久性是出于对性能的考虑。</p>
<h3>4.3 Redis事务其它实现</h3>
<ul>
<li>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完</li>
<li>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐</li>
</ul>
<h2>参考文章</h2>
<p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-trans.html" target="_blank" rel="noopener noreferrer"><strong>Redis进阶 - 事务：Redis事务详解</strong></a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/MrJackC/PicGoImages/other/202403131023113.png" type="image/png"/>
    </item>
  </channel>
</rss>